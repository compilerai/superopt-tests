=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L4%6%bbentry L4%7%d L4%8%bbentry L4%10%bbentry L4%18%bbentry L4%19%d L4%20%bbentry L4%22%bbentry L4%26%d L4%27%bbentry L4%28%bbentry L4%31%bbentry E0%0%d
=Edges:
L0%0%d => L4%6%bbentry
L4%6%bbentry => L4%7%d
L4%7%d => L4%10%bbentry
L4%7%d => L4%8%bbentry
L4%8%bbentry => E0%0%d
L4%10%bbentry => L4%18%bbentry
L4%18%bbentry => L4%19%d
L4%19%d => L4%22%bbentry
L4%19%d => L4%20%bbentry
L4%20%bbentry => L4%6%bbentry (backedge) 
L4%22%bbentry => L4%26%d
L4%26%d => L4%28%bbentry
L4%26%d => L4%27%bbentry
L4%27%bbentry => L4%31%bbentry
L4%28%bbentry => L4%31%bbentry
L4%31%bbentry => L4%18%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%18%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%19%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%20%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%22%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%26%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%27%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%28%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%31%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L4%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L4%6%bbentry => L4%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L4%7%d
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L4%7%d => L4%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L4%7%d => L4%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L4%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L4%10%bbentry => L4%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L4%18%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L4%18%bbentry => L4%19%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L4%19%d
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L4%19%d => L4%22%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L4%19%d => L4%20%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L4%20%bbentry => L4%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-1.L4%6%bbentry
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-8.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-9.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%var-u-0.L4%6%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L4%22%bbentry => L4%26%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L4%26%d
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-3.L4%26%d
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L4%26%d
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvugt)
tfg_edge_comment end

=Edge: L4%26%d => L4%28%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_false_split
tfg_edge_comment end

=Edge: L4%26%d => L4%27%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_true_split
tfg_edge_comment end

=Edge: L4%27%bbentry => L4%31%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-4.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvadd)*ite_true_merge)
tfg_edge_comment end

=Edge: L4%28%bbentry => L4%31%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-5.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvsub)*ite_false_merge)
tfg_edge_comment end

=Edge: L4%31%bbentry => L4%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=spec-%var-j-0.L4%18%bbentry
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 35 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L4%7%d
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L4%19%d
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L4%26%d
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
=Loc 40 in src.spec.foo.
REGMEM
spec-%var-i-1.L4%6%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 42 in src.spec.foo.
REGMEM
spec-%var-j-0.L4%18%bbentry
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%var-ret-1.L4%6%bbentry
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L4%26%d
1 : input.spec-%tmpvar-1.L4%26%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L4%26%d
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L4%26%d
1 : input.spec-%var-x_ij-0.L4%26%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L4%6%bbentry
1 : input.spec-%tmpvar-18.L4%6%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L4%6%bbentry
1 : input.spec-%tmpvar-19.L4%6%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L4%18%bbentry
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L4%6%bbentry
1 : input.spec-%tmpvar-14.L4%6%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L4%6%bbentry
1 : input.spec-%tmpvar-8.L4%6%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L4%6%bbentry
1 : input.spec-%tmpvar-9.L4%6%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-u-0.L4%6%bbentry
1 : input.spec-%var-u-0.L4%6%bbentry : UNIT
=Loc 63 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L4%18%bbentry
1 : input.spec-%tmpvar-11.L4%18%bbentry : BV:32
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L4%18%bbentry
1 : input.spec-%tmpvar-13.L4%18%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L4%18%bbentry
1 : input.spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
=Loc 68 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L4%31%bbentry
1 : input.spec-%tmpvar-4.L4%31%bbentry : BV:32
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L4%31%bbentry
1 : input.spec-%tmpvar-5.L4%31%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L4%6%bbentry
40, 41, 48, 
=live locs at L4%7%d
37, 40, 41, 48, 
=live locs at L4%8%bbentry
48, 
=live locs at L4%10%bbentry
37, 40, 41, 48, 
=live locs at L4%18%bbentry
41, 42, 43, 52, 57, 61, 
=live locs at L4%19%d
38, 41, 42, 43, 52, 57, 61, 
=live locs at L4%20%bbentry
41, 57, 61, 
=live locs at L4%22%bbentry
38, 41, 42, 43, 52, 57, 61, 
=live locs at L4%26%d
39, 41, 43, 51, 52, 53, 57, 61, 
=live locs at L4%27%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L4%28%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L4%31%bbentry
41, 43, 51, 52, 57, 63, 
=live locs at E0%0%d
47[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 35, 36
=loc definedness at L4%6%bbentry
1, 35, 36, 40, 41, 48, 54, 55, 56
=loc definedness at L4%7%d
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L4%8%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L4%10%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L4%18%bbentry
1, 35, 36, 37, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%19%d
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%20%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%22%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%26%d
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%27%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%28%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%31%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67
=loc definedness at E0%0%d
1, 35, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 54, 55, 56

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L4%6%bbentry
40, 41
=branch affecting variable locs at L4%7%d
37, 40, 41
=branch affecting variable locs at L4%8%bbentry

=branch affecting variable locs at L4%10%bbentry
37, 40, 41
=branch affecting variable locs at L4%18%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L4%19%d
38, 41, 42, 43, 52, 57
=branch affecting variable locs at L4%20%bbentry
41, 57
=branch affecting variable locs at L4%22%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L4%26%d
39, 41, 43, 51, 52, 57
=branch affecting variable locs at L4%27%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L4%28%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L4%31%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 40 {input.spec-%var-i-1.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 41 {input.spec-%var-x-0.L4%6%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 48 {input.spec-%var-ret-1.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 54 {input.spec-%tmpvar-18.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 55 {input.spec-%tmpvar-19.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%6%bbentry=>L4%7%d
=graph_with_edge_structures.loc_to_expr_map at L4%6%bbentry=>L4%7%d for loc_id 37 {input.spec-%tmpvar-10.L4%7%d }
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L4%6%bbentry=>L4%7%d done
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 44 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 45 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 46 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 47 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 49 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 42 {input.spec-%var-j-0.L4%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 43 {input.spec-%var-x_i-0.L4%18%bbentry }
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 52 {input.spec-%var-i-0.L4%18%bbentry }
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 57 {input.spec-%tmpvar-12.L4%18%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 61 {input.spec-%var-ret-0.L4%18%bbentry }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L4%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 65 {input.spec-%tmpvar-11.L4%18%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 66 {input.spec-%tmpvar-13.L4%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 67 {input.spec-%var-x_i-1.L4%18%bbentry }
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%18%bbentry=>L4%19%d
=graph_with_edge_structures.loc_to_expr_map at L4%18%bbentry=>L4%19%d for loc_id 38 {input.spec-%tmpvar-0.L4%19%d }
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L4%18%bbentry=>L4%19%d done
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%20%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%20%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%22%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%22%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 40 {input.spec-%var-i-1.L4%6%bbentry }
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 48 {input.spec-%var-ret-1.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L4%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 58 {input.spec-%tmpvar-14.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 59 {input.spec-%tmpvar-8.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 60 {input.spec-%tmpvar-9.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 62 {input.spec-%var-u-0.L4%6%bbentry }
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 39 {input.spec-%tmpvar-3.L4%26%d }
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 50 {input.spec-%tmpvar-1.L4%26%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 51 {input.spec-%tmpvar-2.L4%26%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 53 {input.spec-%var-x_ij-0.L4%26%d }
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d done
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%28%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%28%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry for loc_id 63 {input.spec-%tmpvar-6.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry for loc_id 68 {input.spec-%tmpvar-4.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry for loc_id 63 {input.spec-%tmpvar-6.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry for loc_id 69 {input.spec-%tmpvar-5.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry for loc_id 42 {input.spec-%var-j-0.L4%18%bbentry }
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry for loc_id 61 {input.spec-%var-ret-0.L4%18%bbentry }
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L4%18%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L4%6%bbentry:
vacuous mls at L4%7%d:
vacuous mls at L4%8%bbentry:
vacuous mls at L4%10%bbentry:
vacuous mls at L4%18%bbentry:
vacuous mls at L4%19%d:
vacuous mls at L4%20%bbentry:
vacuous mls at L4%22%bbentry:
vacuous mls at L4%26%d:
vacuous mls at L4%27%bbentry:
vacuous mls at L4%28%bbentry:
vacuous mls at L4%31%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L4%6%bbentry:
non-vacuous mls at L4%7%d:
non-vacuous mls at L4%8%bbentry:
non-vacuous mls at L4%10%bbentry:
non-vacuous mls at L4%18%bbentry:
non-vacuous mls at L4%19%d:
non-vacuous mls at L4%20%bbentry:
non-vacuous mls at L4%22%bbentry:
non-vacuous mls at L4%26%d:
non-vacuous mls at L4%27%bbentry:
non-vacuous mls at L4%28%bbentry:
non-vacuous mls at L4%31%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 41
=loc_expr
140378 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 50
=loc_expr
140614 : input.spec-%tmpvar-1.L4%26%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140616 : input.spec-%tmpvar-18.L4%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140617 : input.spec-%tmpvar-19.L4%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140622 : input.spec-%tmpvar-11.L4%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140623 : input.spec-%tmpvar-13.L4%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 50 expr
1 : input.spec-%tmpvar-1.L4%26%d : BV:32
=loc 50 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-18.L4%6%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-19.L4%6%bbentry : BV:32
=loc 55 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 65 expr
1 : input.spec-%tmpvar-11.L4%18%bbentry : BV:32
=loc 65 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-13.L4%18%bbentry : BV:32
=loc 66 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L4%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%6%bbentry=>L4%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%7%d=>L4%8%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%7%d=>L4%10%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%10%bbentry=>L4%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%18%bbentry=>L4%19%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%19%d=>L4%20%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%19%d=>L4%22%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%20%bbentry=>L4%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%22%bbentry=>L4%26%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%26%d=>L4%27%bbentry
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%26%d=>L4%28%bbentry
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%27%bbentry=>L4%31%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%28%bbentry=>L4%31%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%31%bbentry=>L4%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L4%6%bbentry
=spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%6%bbentry=>L4%7%d
=spec-%tmpvar-10.L4%7%d
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%7%d=>L4%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%7%d=>L4%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%8%bbentry=>E0%0%d
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%10%bbentry=>L4%18%bbentry
=spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%18%bbentry=>L4%19%d
=spec-%tmpvar-0.L4%19%d
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%19%d=>L4%20%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%19%d=>L4%22%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%20%bbentry=>L4%6%bbentry
=spec-%var-i-1.L4%6%bbentry
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-8.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-9.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%var-u-0.L4%6%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%22%bbentry=>L4%26%d
=spec-%tmpvar-2.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-3.L4%26%d
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L4%26%d
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%26%d=>L4%27%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%26%d=>L4%28%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%27%bbentry=>L4%31%bbentry
=spec-%tmpvar-4.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%28%bbentry=>L4%31%bbentry
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-5.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%31%bbentry=>L4%18%bbentry
=spec-%var-j-0.L4%18%bbentry
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L4%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L4%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%6%bbentry=>L4%7%d
=graph_with_simplified_assets.simplified_assumes at L4%6%bbentry=>L4%7%d done
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L4%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L4%10%bbentry=>L4%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%10%bbentry=>L4%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%18%bbentry=>L4%19%d
=graph_with_simplified_assets.simplified_assumes at L4%18%bbentry=>L4%19%d done
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%20%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%20%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%22%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%22%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%20%bbentry=>L4%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%20%bbentry=>L4%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%22%bbentry=>L4%26%d
=graph_with_simplified_assets.simplified_assumes at L4%22%bbentry=>L4%26%d done
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%28%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%28%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%27%bbentry=>L4%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%27%bbentry=>L4%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%28%bbentry=>L4%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%28%bbentry=>L4%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%31%bbentry=>L4%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%31%bbentry=>L4%18%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L4%6%bbentry for src.spec.foo
=suffixpath_at_L4%6%bbentry.graph_edge_composition
(L0%0%d=>L4%6%bbentry)
=suffixpath_at_L4%7%d for src.spec.foo
=suffixpath_at_L4%7%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*(L4%6%bbentry=>L4%7%d))
=suffixpath_at_L4%8%bbentry for src.spec.foo
=suffixpath_at_L4%8%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*(L4%7%d=>L4%8%bbentry)))
=suffixpath_at_L4%10%bbentry for src.spec.foo
=suffixpath_at_L4%10%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*(L4%7%d=>L4%10%bbentry)))
=suffixpath_at_L4%18%bbentry for src.spec.foo
=suffixpath_at_L4%18%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*(L4%10%bbentry=>L4%18%bbentry))))
=suffixpath_at_L4%19%d for src.spec.foo
=suffixpath_at_L4%19%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*(L4%18%bbentry=>L4%19%d)))))
=suffixpath_at_L4%20%bbentry for src.spec.foo
=suffixpath_at_L4%20%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*(L4%19%d=>L4%20%bbentry))))))
=suffixpath_at_L4%22%bbentry for src.spec.foo
=suffixpath_at_L4%22%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*(L4%19%d=>L4%22%bbentry))))))
=suffixpath_at_L4%26%d for src.spec.foo
=suffixpath_at_L4%26%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*(L4%22%bbentry=>L4%26%d)))))))
=suffixpath_at_L4%27%bbentry for src.spec.foo
=suffixpath_at_L4%27%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*(L4%26%d=>L4%27%bbentry))))))))
=suffixpath_at_L4%28%bbentry for src.spec.foo
=suffixpath_at_L4%28%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*(L4%26%d=>L4%28%bbentry))))))))
=suffixpath_at_L4%31%bbentry for src.spec.foo
=suffixpath_at_L4%31%bbentry.graph_edge_composition
(((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*((L4%26%d=>L4%27%bbentry)*(L4%27%bbentry=>L4%31%bbentry)))))))))+((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*((L4%26%d=>L4%28%bbentry)*(L4%28%bbentry=>L4%31%bbentry))))))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%8%bbentry)*(L4%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L4%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L4%6%bbentry done
tfg.assumes_around_edge at L4%6%bbentry=>L4%7%d
tfg.assumes_around_edge at L4%6%bbentry=>L4%7%d done
tfg.assumes_around_edge at L4%7%d=>L4%8%bbentry
tfg.assumes_around_edge at L4%7%d=>L4%8%bbentry done
tfg.assumes_around_edge at L4%7%d=>L4%10%bbentry
tfg.assumes_around_edge at L4%7%d=>L4%10%bbentry done
tfg.assumes_around_edge at L4%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L4%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L4%10%bbentry=>L4%18%bbentry
tfg.assumes_around_edge at L4%10%bbentry=>L4%18%bbentry done
tfg.assumes_around_edge at L4%18%bbentry=>L4%19%d
tfg.assumes_around_edge at L4%18%bbentry=>L4%19%d done
tfg.assumes_around_edge at L4%19%d=>L4%20%bbentry
tfg.assumes_around_edge at L4%19%d=>L4%20%bbentry done
tfg.assumes_around_edge at L4%19%d=>L4%22%bbentry
tfg.assumes_around_edge at L4%19%d=>L4%22%bbentry done
tfg.assumes_around_edge at L4%20%bbentry=>L4%6%bbentry
tfg.assumes_around_edge at L4%20%bbentry=>L4%6%bbentry done
tfg.assumes_around_edge at L4%22%bbentry=>L4%26%d
tfg.assumes_around_edge at L4%22%bbentry=>L4%26%d done
tfg.assumes_around_edge at L4%26%d=>L4%27%bbentry
tfg.assumes_around_edge at L4%26%d=>L4%27%bbentry done
tfg.assumes_around_edge at L4%26%d=>L4%28%bbentry
tfg.assumes_around_edge at L4%26%d=>L4%28%bbentry done
tfg.assumes_around_edge at L4%27%bbentry=>L4%31%bbentry
tfg.assumes_around_edge at L4%27%bbentry=>L4%31%bbentry done
tfg.assumes_around_edge at L4%28%bbentry=>L4%31%bbentry
tfg.assumes_around_edge at L4%28%bbentry=>L4%31%bbentry done
tfg.assumes_around_edge at L4%31%bbentry=>L4%18%bbentry
tfg.assumes_around_edge at L4%31%bbentry=>L4%18%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.body3%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end10%1%d Lfor.inc8%1%d Lif.else%1%d Lif.end%1%bbentry Lif.then%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end10%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc8%1%d
Lfor.body3%1%d => Lfor.body3%2%d
Lfor.body3%2%d => Lif.then%1%d
Lfor.body3%2%d => Lif.else%1%d
Lif.then%1%d => Lif.end%1%bbentry
Lif.else%1%d => Lif.end%1%bbentry
Lif.end%1%bbentry => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc8%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end10%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end10%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc8%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.4 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end10%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc8%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.body3%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %cmp4 = icmp ugt i32 %i.0, %j.0, !dbg !36
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40))*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40)))*((  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40*  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40)*(((  %add = add i32 %ret.1, %1, !dbg !41*  br label %if.end, !dbg !42)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end, !dbg !42))*(  br label %if.end, !dbg !42*  br label %if.end, !dbg !42))))
tfg_edge_comment end

=Edge: Lif.else%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : mlvar.dst.llvm.foo.2 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.2 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*(  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43))*(  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43*  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43))*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43)))*((  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43*  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43)*(((  %sub = sub i32 %ret.1, %3, !dbg !44*  br label %if.end)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end))*(  br label %if.end*  br label %if.end))))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((((bb_entry*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*(  %inc = add i32 %j.0, 1, !dbg !47*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  br label %for.cond1, !dbg !48, !llvm.loop !49)*(  br label %for.cond1, !dbg !48, !llvm.loop !49*  br label %for.cond1, !dbg !48, !llvm.loop !49))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.inc8%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc9 = add i32 %i.0, 1, !dbg !52*  br label %for.cond, !dbg !53, !llvm.loop !54)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !53, !llvm.loop !54))*  br label %for.cond, !dbg !53, !llvm.loop !54)*(  br label %for.cond, !dbg !53, !llvm.loop !54*  br label %for.cond, !dbg !53, !llvm.loop !54))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end10%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !56
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100061 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100062 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100063 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100064 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100065 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100066 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100067 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100087 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100088 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100089 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100090 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=Loc 100091 in dst.llvm.foo.
REGMEM
dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=Loc 100092 in dst.llvm.foo.
REGMEM
dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=Loc 100093 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=Loc 100094 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=Loc 100095 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100096 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100097 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100098 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100099 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100100 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100101 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=Loc 100102 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=Loc 100103 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=Loc 100104 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=Loc 100105 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100106 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100107 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100108 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100109 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100110 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100111 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=Loc 100112 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=Loc 100113 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=Loc 100114 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=Loc 100115 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100116 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073, 
=live locs at Lfor.body3%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.body3%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100068, 100069, 100070, 100083, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 
=live locs at Lfor.cond%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 100075, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100076, 100083, 
=live locs at Lfor.end10%1%d
100065, 100073[f], 
=live locs at Lfor.inc8%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100083, 
=live locs at Lif.else%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lif.end%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100090, 
=live locs at Lif.then%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at E0%0%d
100065, 100073[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.body3%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.body3%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.end10%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.inc8%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.else%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.end%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100090, 100115, 100116
=loc definedness at Lif.then%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at E0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100071, 100072, 100073, 100074, 100075, 100077, 100078, 100079, 100115, 100116

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100069
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.body3%2%d
100006, 100012, 100068, 100069, 100070
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100069
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100069, 100075
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100069, 100070, 100076
=branch affecting variable locs at Lfor.end10%1%d

=branch affecting variable locs at Lfor.inc8%1%d
100006, 100012, 100069
=branch affecting variable locs at Lif.else%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.end%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.then%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100115 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100116 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100085 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d for loc_id 100068 {input.dst.llvm-%cmp4.Lfor.body3%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100075 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100076 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100071 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100072 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100074 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%inc9.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100091 {input.dst.llvm-%2.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100092 {input.dst.llvm-%3.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100093 {input.dst.llvm-%arrayidx6.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100094 {input.dst.llvm-%arrayidx7.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100095 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100096 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100097 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100098 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100099 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100100 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100101 {input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100102 {input.dst.llvm-%sub.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100087 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100088 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100089 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100103 {input.dst.llvm-%0.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100104 {input.dst.llvm-%1.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100105 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100106 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100107 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100108 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100109 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100110 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100111 {input.dst.llvm-%add.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100112 {input.dst.llvm-%arrayidx.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100113 {input.dst.llvm-%arrayidx5.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100114 {input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.body3%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end10%1%d:
vacuous mls at Lfor.inc8%1%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.body3%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end10%1%d:
non-vacuous mls at Lfor.inc8%1%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140427 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140428 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140426 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100046
=loc_expr
140530 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100048
=loc_expr
140531 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100049
=loc_expr
140533 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100050
=loc_expr
140535 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140537 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100056
=loc_expr
140438 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100057
=loc_expr
140431 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100058
=loc_expr
140432 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100059
=loc_expr
140433 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100071
=loc_expr
140867 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140868 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140869 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140870 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140871 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140874 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140875 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140879 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100115
=loc_expr
140904 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100116
=loc_expr
140905 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100074 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100074 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100115 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100115 spreled-expr
140438 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100116 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100116 spreled-expr
140437 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100090 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100091 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100092 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100093 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100094 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100095 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100098 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100099 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100101 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100106 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100108 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100109 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100111 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100074 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100115 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end10%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc8%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end10%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.body3%2%d
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end10%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc8%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end10%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lif.end%1%bbentry
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.end%1%bbentry
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.body3%2%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*(Lfor.body3%1%d=>Lfor.body3%2%d)))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end10%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end10%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end10%1%d)))
=suffixpath_at_Lfor.inc8%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc8%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc8%1%d))))))
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.else%1%d))))))))
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.end%1%bbentry)))))))))+((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lif.end%1%bbentry))))))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.then%1%d))))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end10%1%d)*(Lfor.end10%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140426 : input.dst.llvm-%x : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140439 : islangaligned(140426, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d done
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140589 : 4 { 0x4 +1.0e1025 } : BV:64
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140460 : 32 { 0x20 +1.0e1025 } : INT
140829 : bvsign_ext(140799, 140460) : BV:64
140980 : bvmul(140589, 140829) : BV:64
140464 : 63 { 0x3f +1.0e1025 } : INT
140981 : bvextract(140980, 140464, 140460) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140828 : bvslt(140799, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140994 : ite(140828, 140337, 140276) : BV:32
140996 : eq(140981, 140994) : BOOL
140412 : 4 { 0x4 +1.0e1025 } : INT
140998 : isindexforsize(140996, 140412) : BOOL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
141000 : isgepoffset(140924, 140921) : BOOL
141004 : islangaligned(140924, 140412) : BOOL
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
141006 : islangaligned(140930, 140412) : BOOL
141009 : and(141004, 141006) : BOOL
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140844 : bvsign_ext(140800, 140460) : BV:64
141022 : bvmul(140589, 140844) : BV:64
141023 : bvextract(141022, 140464, 140460) : BV:32
140843 : bvslt(140800, 140276) : BOOL
141036 : ite(140843, 140337, 140276) : BV:32
141038 : eq(141023, 141036) : BOOL
141040 : isindexforsize(141038, 140412) : BOOL
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
141042 : isgepoffset(140935, 140933) : BOOL
141047 : and(140998, 141000, 141004, 141009, 141040, 141042) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
140962 : islangaligned(140935, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140589 : 4 { 0x4 +1.0e1025 } : BV:64
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140460 : 32 { 0x20 +1.0e1025 } : INT
140829 : bvsign_ext(140799, 140460) : BV:64
140980 : bvmul(140589, 140829) : BV:64
140464 : 63 { 0x3f +1.0e1025 } : INT
140981 : bvextract(140980, 140464, 140460) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140828 : bvslt(140799, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140994 : ite(140828, 140337, 140276) : BV:32
140996 : eq(140981, 140994) : BOOL
140412 : 4 { 0x4 +1.0e1025 } : INT
140998 : isindexforsize(140996, 140412) : BOOL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
141000 : isgepoffset(140924, 140921) : BOOL
141004 : islangaligned(140924, 140412) : BOOL
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
141006 : islangaligned(140930, 140412) : BOOL
141009 : and(141004, 141006) : BOOL
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140844 : bvsign_ext(140800, 140460) : BV:64
141022 : bvmul(140589, 140844) : BV:64
141023 : bvextract(141022, 140464, 140460) : BV:32
140843 : bvslt(140800, 140276) : BOOL
141036 : ite(140843, 140337, 140276) : BV:32
141038 : eq(141023, 141036) : BOOL
141040 : isindexforsize(141038, 140412) : BOOL
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
141042 : isgepoffset(140935, 140933) : BOOL
141047 : and(140998, 141000, 141004, 141009, 141040, 141042) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
140962 : islangaligned(140935, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 10
=pc
Lfor.end10%1%d
=linename
line 11
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc8%1%d
=linename
line 3
=pc
Lfor.inc8%2%d
=linename
line 3
=pc
Lif.else%1%d
=linename
line 8
=pc
Lif.else%2%d
=linename
line 8
=pc
Lif.else%3%d
=linename
line 8
=pc
Lif.else%4%d
=linename
line 8
=pc
Lif.else%5%d
=linename
line 8
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 6
=pc
Lif.then%2%d
=linename
line 6
=pc
Lif.then%3%d
=linename
line 6
=pc
Lif.then%4%d
=linename
line 6
=pc
Lif.then%5%d
=linename
line 6
=pc
Lif.then%6%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 13
=pc
Lfor.body3%2%d
=column_name
 at column 11
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end10%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc8%1%d
=column_name
 at column 31
=pc
Lfor.inc8%2%d
=column_name
 at column 3
=pc
Lif.else%1%d
=column_name
 at column 16
=pc
Lif.else%2%d
=column_name
 at column 16
=pc
Lif.else%3%d
=column_name
 at column 16
=pc
Lif.else%4%d
=column_name
 at column 16
=pc
Lif.else%5%d
=column_name
 at column 13
=pc
Lif.end%1%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 16
=pc
Lif.then%2%d
=column_name
 at column 16
=pc
Lif.then%3%d
=column_name
 at column 16
=pc
Lif.then%4%d
=column_name
 at column 16
=pc
Lif.then%5%d
=column_name
 at column 13
=pc
Lif.then%6%d
=column_name
 at column 9
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 13)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 10
=pc
Lfor.end10%1%d
=line_and_column
line 11
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc8%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc8%2%d
=line_and_column
(line 3 at column 3)
=pc
Lif.else%1%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%2%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%3%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%4%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%5%d
=line_and_column
(line 8 at column 13)
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%2%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%3%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%4%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%5%d
=line_and_column
(line 6 at column 13)
=pc
Lif.then%6%d
=line_and_column
(line 6 at column 9)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset)
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx5]_4
input.dst.llvm-%add : Lif.then%6%bbentry : ret'
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx6]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx7]_4
input.dst.llvm-%sub : Lif.else%6%bbentry : ret'
input.dst.llvm-%ret.2 : Lif.end%1%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%ret.2
input.dst.llvm-%inc9 : Lfor.inc8%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%arrayidx5 : L0%0%d : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx6 : L0%0%d : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset
input.dst.llvm-%arrayidx7 : L0%0%d : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : L0%0%d : input.dst.llvm-%ret.2.Lif.end%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx5
=dst.llvm-%arrayidx5 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx5 val_scevb
=dst.llvm-%arrayidx5 val_scevb scev
=dst.llvm-%arrayidx5 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr done
=dst.llvm-%arrayidx5 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb
=dst.llvm-%arrayidx5 atuse_scevb scev
=dst.llvm-%arrayidx5 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx5 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atexit_scev
=dst.llvm-%arrayidx5 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx5 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%ret.2
=dst.llvm-%ret.2 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.2 val_scevb
=dst.llvm-%ret.2 val_scevb scev
=dst.llvm-%ret.2 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 val_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 val_scevb scev scev_expr done
=dst.llvm-%ret.2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb
=dst.llvm-%ret.2 atuse_scevb scev
=dst.llvm-%ret.2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 atuse_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atuse_scevb scev scev_expr done
=dst.llvm-%ret.2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atexit_scev
=dst.llvm-%ret.2 atexit_scev loop: L0%0%d
=dst.llvm-%ret.2 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.2 atexit_scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atexit_scev scev_expr done
=dst.llvm-%arrayidx6
=dst.llvm-%arrayidx6 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx6 val_scevb
=dst.llvm-%arrayidx6 val_scevb scev
=dst.llvm-%arrayidx6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr done
=dst.llvm-%arrayidx6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb
=dst.llvm-%arrayidx6 atuse_scevb scev
=dst.llvm-%arrayidx6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atexit_scev
=dst.llvm-%arrayidx6 atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atexit_scev scev_expr done
=dst.llvm-%2
=dst.llvm-%2 loop pc: Lfor.cond1%1%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev
=dst.llvm-%2 atexit_scev loop: L0%0%d
=dst.llvm-%2 atexit_scev scev_overflow_flag: 
=dst.llvm-%2 atexit_scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atexit_scev scev_expr done
=dst.llvm-%arrayidx7
=dst.llvm-%arrayidx7 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx7 val_scevb
=dst.llvm-%arrayidx7 val_scevb scev
=dst.llvm-%arrayidx7 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr done
=dst.llvm-%arrayidx7 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb
=dst.llvm-%arrayidx7 atuse_scevb scev
=dst.llvm-%arrayidx7 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx7 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atexit_scev
=dst.llvm-%arrayidx7 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx7 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
20 : input.dst.llvm-%2 : BV32
22 : scev_op_add(15, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr done
=dst.llvm-%3
=dst.llvm-%3 loop pc: Lfor.cond1%1%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev
=dst.llvm-%3 atexit_scev loop: L0%0%d
=dst.llvm-%3 atexit_scev scev_overflow_flag: 
=dst.llvm-%3 atexit_scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atexit_scev scev_expr done
=dst.llvm-%sub
=dst.llvm-%sub loop pc: Lfor.cond1%1%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev
=dst.llvm-%sub atexit_scev loop: L0%0%d
=dst.llvm-%sub atexit_scev scev_overflow_flag: 
=dst.llvm-%sub atexit_scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
28 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc9
=dst.llvm-%inc9 loop pc: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb
=dst.llvm-%inc9 val_scevb scev
=dst.llvm-%inc9 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 val_scevb scev scev_expr done
=dst.llvm-%inc9 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb
=dst.llvm-%inc9 atuse_scevb scev
=dst.llvm-%inc9 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 atuse_scevb scev scev_expr done
=dst.llvm-%inc9 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atexit_scev
=dst.llvm-%inc9 atexit_scev loop: L0%0%d
=dst.llvm-%inc9 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc9 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
30 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc9 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.end10%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc8%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 21 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 22 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns for expr 54
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 54 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 54 edges done
=reaching defns for expr 55
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 55 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 55 edges done
=reaching defns for expr 56
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 56 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 56 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%add.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp4.Lfor.body3%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%3.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc9.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L4%6%bbentry_Lfor.cond%1%bbentry L4%18%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L4%6%bbentry_Lfor.cond%1%bbentry
L4%6%bbentry_Lfor.cond%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
L4%18%bbentry_Lfor.cond1%1%bbentry => L4%6%bbentry_Lfor.cond%1%bbentry
L4%18%bbentry_Lfor.cond1%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
L4%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L4%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L4%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L4%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%6%bbentry_Lfor.cond%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%6%bbentry to L4%18%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%6%bbentry#{0,0}=>L4%7%d#{0,0})*((L4%7%d#{0,0}=>L4%10%bbentry#{0,0})*(L4%10%bbentry#{0,0}=>L4%18%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%18%bbentry_Lfor.cond1%1%bbentry => L4%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%18%bbentry to L4%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%18%bbentry#{0,0}=>L4%19%d#{0,0})*((L4%19%d#{0,0}=>L4%20%bbentry#{0,0})*(L4%20%bbentry#{0,0}=>L4%6%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc8%1%d#{0,0})*(Lfor.inc8%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%18%bbentry_Lfor.cond1%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%18%bbentry to L4%18%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%18%bbentry#{0,0}=>L4%19%d#{0,0})*(((L4%19%d#{0,0}=>L4%20%bbentry#{0,0})*((L4%20%bbentry#{0,0}=>L4%6%bbentry#{0,0})*((L4%6%bbentry#{0,0}=>L4%7%d#{0,0})*((L4%7%d#{0,0}=>L4%10%bbentry#{0,0})*(L4%10%bbentry#{0,0}=>L4%18%bbentry#{1,0})))))+((L4%19%d#{0,0}=>L4%22%bbentry#{0,0})*((L4%22%bbentry#{0,0}=>L4%26%d#{0,0})*((((L4%26%d#{0,0}=>L4%27%bbentry#{0,0})*(L4%27%bbentry#{0,0}=>L4%31%bbentry#{0,0}))+((L4%26%d#{0,0}=>L4%28%bbentry#{0,0})*(L4%28%bbentry#{0,0}=>L4%31%bbentry#{0,0})))*(L4%31%bbentry#{0,0}=>L4%18%bbentry#{1,0}))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*((Lfor.body3%1%d#{0,0}=>Lfor.body3%2%d#{0,0})*((((Lfor.body3%2%d#{0,0}=>Lif.else%1%d#{0,0})*(Lif.else%1%d#{0,0}=>Lif.end%1%bbentry#{0,0}))+((Lfor.body3%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lif.end%1%bbentry#{0,0})))*(Lif.end%1%bbentry#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%6%bbentry#{0,0}=>L4%7%d#{0,0})*((L4%7%d#{0,0}=>L4%8%bbentry#{0,0})*(L4%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end10%1%d#{0,0})*(Lfor.end10%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.2
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B4.C1.D2.E1
=Locs end
=Liveness in foo.A2.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L4%6%bbentry_Lfor.cond%1%bbentry

=live locs at L4%18%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B4.C1.D2.E1

=Branch affecting variable locs in foo.A2.B4.C1.D2.E1

=Relevant Memlabels in foo.A2.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 29848b8a8c475f3b64bc7dc4cab28a5e
=input.spec-%var-x-1
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131988591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131988592; 131988595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 131988596; 512610499 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512610500; 512610503 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 512610504; 547214175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 547214176; 547214179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 547214180; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 512610500 { 0x1e8dd0c4 +1.10793352e190 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 547214176 { 0x209dd360 +1.23301315e194 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 131988592 { 0x7ddfc70 +1.73426628e144 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 131988592 { 0x7ddfc70 +1.73426628e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 131988595 { 0x7ddfc73 +1.73426663e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 512610500 { 0x1e8dd0c4 +1.10793352e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 512610503 { 0x1e8dd0c7 +1.10793387e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 547214176 { 0x209dd360 +1.23301315e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 547214179 { 0x209dd363 +1.23301351e194 } : BV:32
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 697b7b669fcc7a1e39e4f894bd1f5ccb
=input.spec-%var-x-1
1 : Lambda71 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda74 : BV:32
11 : Lambda72 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda73 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 526367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 526368; 526371 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 526372; 1073741867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741868; 1073741871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1073741872; 2099363851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2099363852; 2099363855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2099363856; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 526368 { 0x80820 +1.6274795e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1073741868 { 0x4000002c +1.524e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2099363852 { 0x7d21c00c +1.26367330e123 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda80 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda83 : BV:32
11 : Lambda81 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda82 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2099363852 { 0x7d21c00c +1.26367330e123 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2099363855 { 0x7d21c00f +1.26367366e123 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 526368 { 0x80820 +1.6274795e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 526371 { 0x80823 +1.6274831e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1073741868 { 0x4000002c +1.524e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1073741871 { 0x4000002f +1.560e1 } : BV:32
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce25.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce25 bc4d5ee17a61b71a9d12396fbcb5f039
=input.spec-%var-x-1
1 : Lambda137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda140 : BV:32
11 : Lambda138 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda139 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2315155406 ] -> 0, [ 2315155407; 2315155407 ] -> 128, [ 2315155408; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 167673703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167673704; 167673707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 167673708; 2315155403 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2315155404; 2315155407 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2315155408; 2315157343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2315157344; 2315157347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2315157348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2315157344 { 0x89fe7f60 -1979809952 -1.98826217e148 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2315155404 { 0x89fe77cc -1979811892 -1.98803091e148 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 167673704 { 0x9fe7f68 +1.98826313e148 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda140 : BV:32
11 : Lambda138 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda139 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda109 : BV:32
2 : Lambda110 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda111 : BV:32
2 : Lambda112 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 167673704 { 0x9fe7f68 +1.98826313e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 167673707 { 0x9fe7f6b +1.98826348e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2315157344 { 0x89fe7f60 -1979809952 -1.98826217e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2315157347 { 0x89fe7f63 -1979809949 -1.98826253e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2315155404 { 0x89fe77cc -1979811892 -1.98803091e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce26.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce26 bf84696ea7e0a9b78ea47fbc61cf4b
=input.spec-%var-x-1
1 : Lambda159 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda162 : BV:32
11 : Lambda160 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda161 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 6 ] -> 0, [ 7; 7 ] -> 2, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 32895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32896; 32899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 32900; 2105363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2105364; 2105367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2105368; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2105364 { 0x202014 +1.25097894e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 32896 { 0x8080 +1.392150e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda159 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda162 : BV:32
11 : Lambda160 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda161 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda120 : BV:32
2 : Lambda121 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda122 : BV:32
2 : Lambda123 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 32896 { 0x8080 +1.392150e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 32899 { 0x8083 +1.392186e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2105364 { 0x202014 +1.25097894e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2105367 { 0x202017 +1.25097930e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
1641489885
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce47.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce47 b0295251a3af5e90dbb27e519798a446
=input.spec-%var-x-1
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda216 : BV:32
11 : Lambda214 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda215 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 71 { 0x47 +1.846e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 70 ] -> 0, [ 71; 71 ] -> 1, [ 72; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 67 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68; 71 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 72; 32799 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32800; 32803 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 32804; 4198403 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4198404; 4198407 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4198408; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4198404 { 0x401004 +1.50048875e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 32800 { 0x8020 +1.391006e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda216 : BV:32
11 : Lambda214 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda215 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 71 { 0x47 +1.846e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda185 : BV:32
2 : Lambda186 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 71 { 0x47 +1.846e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda187 : BV:32
2 : Lambda188 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 71 { 0x47 +1.846e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 32800 { 0x8020 +1.391006e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 32803 { 0x8023 +1.391042e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4198404 { 0x401004 +1.50048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4198407 { 0x401007 +1.50048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 71 { 0x47 +1.846e129 } : BV:32
=counter_example.random_seed
4226644475
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce48.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce48 cc8c829ea9a721a0e91a13e7b05b5c68
=input.spec-%var-x-1
1 : Lambda235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda238 : BV:32
11 : Lambda236 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda237 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3447704125 ] -> 0, [ 3447704126; 3447704126 ] -> 1, [ 3447704127; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3447704123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3447704124; 3447704127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3447704128; 3914195807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3914195808; 3914195811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3914195812; 4185881463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4185881464; 4185881467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4185881468; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3914195808 { 0xe94de360 -380771488 -1.60850143e83 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3447704124 { 0xcd7fca3c -847263172 -1.99835920e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4185881464 { 0xf97f7b78 -109085832 -1.99595546e115 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 872191047 { 0x33fc9447 +1.97327506e232 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda238 : BV:32
11 : Lambda236 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda237 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda196 : BV:32
2 : Lambda197 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda198 : BV:32
2 : Lambda199 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 872191047 { 0x33fc9447 +1.97327506e232 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4185881464 { 0xf97f7b78 -109085832 -1.99595546e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4185881467 { 0xf97f7b7b -109085829 -1.99595582e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3914195808 { 0xe94de360 -380771488 -1.60850143e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3914195811 { 0xe94de363 -380771485 -1.60850179e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3447704124 { 0xcd7fca3c -847263172 -1.99835920e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3447704127 { 0xcd7fca3f -847263169 -1.99835956e27 } : BV:32
=counter_example.random_seed
1078415966
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce69.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce69 c3e6dc9c54b94a8773b5a12362121d
=input.spec-%var-x-1
1 : Lambda289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda292 : BV:32
11 : Lambda290 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda291 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
20 : eq(18, 19) : BOOL
21 : 32 { 0x20 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3071145963 ] -> 0, [ 3071145964; 3071145964 ] -> 32, [ 3071145965; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1326306367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1326306368; 1326306371 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1326306372; 3071145963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3071145964; 3071145967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3071145968; 3488473047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3488473048; 3488473051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3488473052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1326306368 { 0x4f0dd440 +1.10803985e31 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3488473048 { 0xcfeddfd8 -806494248 -1.85839366e32 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda292 : BV:32
11 : Lambda290 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda291 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
20 : eq(18, 19) : BOOL
21 : 32 { 0x20 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda261 : BV:32
2 : Lambda262 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda263 : BV:32
2 : Lambda264 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3488473048 { 0xcfeddfd8 -806494248 -1.85839366e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3488473051 { 0xcfeddfdb -806494245 -1.85839402e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1326306368 { 0x4f0dd440 +1.10803985e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1326306371 { 0x4f0dd443 +1.10804021e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3071145967 { 0xb70df7ef -1223821329 -1.10912883e239 } : BV:32
=counter_example.random_seed
3947113804
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce91.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce91 e92e36316478ad0bc5d64771ad6f0
=input.spec-%var-x-1
1 : Lambda365 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda368 : BV:32
11 : Lambda366 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda367 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3445946563 ] -> 0, [ 3445946564; 3445946564 ] -> 2, [ 3445946565; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2096556023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096556024; 2096556027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2096556028; 3445946563 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3445946564; 3445946567 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3445946568; 4029117563 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4029117564; 4029117567 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4029117568; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4029117564 { 0xf027747c -265849732 -1.30824232e97 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2096556024 { 0x7cf6e7f8 +1.92895412e122 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda365 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda368 : BV:32
11 : Lambda366 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda367 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda337 : BV:32
2 : Lambda338 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda339 : BV:32
2 : Lambda340 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2096556024 { 0x7cf6e7f8 +1.92895412e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2096556027 { 0x7cf6e7fb +1.92895448e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4029117564 { 0xf027747c -265849732 -1.30824232e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4029117567 { 0xf027747f -265849729 -1.30824267e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3445946567 { 0xcd64f8c7 -849020729 -1.78884208e27 } : BV:32
=counter_example.random_seed
2441249403
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce113.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce113 4bbabfe823e972e1fc15209b416417a3
=input.spec-%var-x-1
1 : Lambda441 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda444 : BV:32
11 : Lambda442 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda443 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 167346379 ] -> 0, [ 167346380; 167346380 ] -> 1, [ 167346381; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16777215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16777216; 16777219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16777220; 133791939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 133791940; 133791943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 133791944; 167346379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167346380; 167346383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 167346384; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 133791940 { 0x7f980c4 +1.94924211e144 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda441 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda444 : BV:32
11 : Lambda442 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda443 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda413 : BV:32
2 : Lambda414 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda415 : BV:32
2 : Lambda416 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 133791940 { 0x7f980c4 +1.94924211e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 133791943 { 0x7f980c7 +1.94924247e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16777219 { 0x1000003 +1.35e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 167346383 { 0x9f980cf +1.94924342e148 } : BV:32
=counter_example.random_seed
867572303
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce135.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce135 783a728ad31c3e05813e575fd10eaa
=input.spec-%var-x-1
1 : Lambda517 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda520 : BV:32
11 : Lambda518 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda519 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
21 : eq(19, 20) : BOOL
22 : 32 { 0x20 } : BV:8
23 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
24 : eq(19, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1982348279 ] -> 0, [ 1982348280; 1982348280 ] -> 64, [ 1982348281; 1982348281 ] -> 0, [ 1982348282; 1982348282 ] -> 32, [ 1982348283; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 121396219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 121396220; 121396223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 121396224; 1982348279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1982348280; 1982348283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1982348284; 3997973367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3997973368; 3997973371 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3997973372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3997973368 { 0xee4c3b78 -296993928 -1.59556484e93 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 121396220 { 0x73c5bfc +1.47155714e143 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda517 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda520 : BV:32
11 : Lambda518 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda519 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
21 : eq(19, 20) : BOOL
22 : 32 { 0x20 } : BV:8
23 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
24 : eq(19, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda489 : BV:32
2 : Lambda490 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda491 : BV:32
2 : Lambda492 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 121396220 { 0x73c5bfc +1.47155714e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 121396223 { 0x73c5bff +1.47155749e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1982348283 { 0x76283bfb +1.31433045e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3997973368 { 0xee4c3b78 -296993928 -1.59556484e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3997973371 { 0xee4c3b7b -296993925 -1.59556519e93 } : BV:32
=counter_example.random_seed
3980301472
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce157.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce157 7be61f366aa5e67bb5152bbc68ddebf
=input.spec-%var-x-1
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 63139 ] -> 0, [ 63140; 63140 ] -> 8, [ 63141; 97145 ] -> 0, [ 97146; 97146 ] -> 64, [ 97147; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 6147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 6148; 6151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 6152; 63139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 63140; 63143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 63144; 97143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 97144; 97147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 97148; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3875 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda3876 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3877 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3878 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3879 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3880 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda567 : BV:32
2 : Lambda568 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda569 : BV:32
2 : Lambda570 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 97147 { 0x17b7b +1.1158082e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 63143 { 0xf6a7 +1.752723e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 6151 { 0x1807 +1.73325e129 } : BV:32
=counter_example.random_seed
1609363582
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce168.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce168 64298fd530e98d73fee93f938471fd
=input.spec-%var-x-1
1 : Lambda640 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda643 : BV:32
18 : Lambda641 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda642 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
27 : eq(25, 26) : BOOL
28 : 64 { 0x40 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2065301492 ] -> 0, [ 2065301493; 2065301493 ] -> 64, [ 2065301494; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 950984443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 950984444; 950984447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 950984448; 2065301491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2065301492; 2065301495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2065301496; 2694514679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2694514680; 2694514683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2694514684; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 950984444 { 0x38aedefc +1.36617994e242 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2694514680 { 0xa09b07f8 -1600452616 -1.21118068e194 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2065301492 { 0x7b19fff4 +1.20312356e119 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1350824237 { 0x5083f12d +1.3079760e34 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda640 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda643 : BV:32
18 : Lambda641 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda642 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
27 : eq(25, 26) : BOOL
28 : 64 { 0x40 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3867 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda3868 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
13 : eq(11, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3869 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3870 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
11 : eq(9, 10) : BOOL
12 : 64 { 0x40 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3871 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3872 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
11 : eq(9, 10) : BOOL
12 : 64 { 0x40 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda612 : BV:32
2 : Lambda613 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda614 : BV:32
2 : Lambda615 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1350824237 { 0x5083f12d +1.3079760e34 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2065301492 { 0x7b19fff4 +1.20312356e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2065301495 { 0x7b19fff7 +1.20312392e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 950984444 { 0x38aedefc +1.36617994e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 950984447 { 0x38aedeff +1.36618030e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2694514680 { 0xa09b07f8 -1600452616 -1.21118068e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2694514683 { 0xa09b07fb -1600452613 -1.21118104e194 } : BV:32
=counter_example.random_seed
4113372681
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce169.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce169 e9c99d5eaf945ddc2ac8709e78cacea4
=input.spec-%var-x-1
1 : Lambda662 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda665 : BV:32
11 : Lambda663 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda664 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 647171 ] -> 0, [ 647172; 647172 ] -> 4, [ 647173; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 376839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 376840; 376843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 376844; 647171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 647172; 647175 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 647176; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 376840 { 0x5c008 +1.4492282e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 803841585 { 0x2fe9a631 +1.82538425e224 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda662 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda665 : BV:32
11 : Lambda663 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda664 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda623 : BV:32
2 : Lambda624 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda625 : BV:32
2 : Lambda626 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 803841585 { 0x2fe9a631 +1.82538425e224 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 647175 { 0x9e007 +1.7714927e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 376840 { 0x5c008 +1.4492282e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 376843 { 0x5c00b +1.4492318e129 } : BV:32
=counter_example.random_seed
1647438075
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce190.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce190 6b31c4a1e0fdcdd983a09a2cacdf4a7e
=input.spec-%var-x-1
1 : Lambda720 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : Lambda721 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda722 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 11014203 ] -> 0, [ 11014204; 11014204 ] -> 8, [ 11014205; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 41003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 41004; 41007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 41008; 11014203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 11014204; 11014207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 11014208; 67649655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67649656; 67649659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67649660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67649656 { 0x4084078 +1.6446743e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 41004 { 0xa02c +1.488805e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 879024595 { 0x3464d9d3 +1.78789746e233 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda720 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : Lambda721 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda722 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3857 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda3858 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3859 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3860 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3861 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3862 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda690 : BV:32
2 : Lambda691 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda692 : BV:32
2 : Lambda693 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 879024595 { 0x3464d9d3 +1.78789746e233 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11014207 { 0xa8103f +1.31299579e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67649656 { 0x4084078 +1.6446743e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67649659 { 0x408407b +1.6446778e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 41004 { 0xa02c +1.488805e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 41007 { 0xa02f +1.488841e129 } : BV:32
=counter_example.random_seed
1171462168
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce212.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce212 488669a281cec4a0c081c5164cc1833e
=input.spec-%var-x-1
1 : Lambda787 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda790 : BV:32
17 : Lambda788 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda789 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 264241155 ] -> 0, [ 264241156; 264241156 ] -> 1, [ 264241157; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048580; 63996159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 63996160; 63996163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 63996164; 264241155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 264241156; 264241159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 264241160; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 63996160 { 0x3d08100 +1.62893676e136 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 592572472 { 0x2351f038 +1.64014339e199 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda787 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda790 : BV:32
17 : Lambda788 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda789 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3849 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda3850 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3851 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3852 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3853 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3854 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda770 : BV:32
2 : Lambda771 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda772 : BV:32
2 : Lambda773 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 592572472 { 0x2351f038 +1.64014339e199 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 264241159 { 0xfc00007 +1.50000083e160 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048579 { 0x100003 +1.12500035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 63996160 { 0x3d08100 +1.62893676e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 63996163 { 0x3d08103 +1.62893712e136 } : BV:32
=counter_example.random_seed
4231580868
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 15
=global nodece 15 nodece z3v487.ce223.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce223 38ca8f898e44d6f2b5d66f269e17c62
=input.spec-%var-x-1
1 : Lambda855 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda858 : BV:32
17 : Lambda856 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda857 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 3531 { 0xdcb +1.42092e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3530 { 0xdca +1.42080e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 3528 { 0xdc8 +1.42057e129 } : BV:32
31 : eq(24, 30) : BOOL
32 : 3529 { 0xdc9 +1.42068e129 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3527 ] -> 0, [ 3528; 3531 ] -> 255, [ 3532; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3528; 3531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3532; 156179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 156180; 156183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 156184; 93416975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 93416976; 93416979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 93416980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 93416976 { 0x5916e10 +1.13617134e140 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 156180 { 0x26214 +1.1861810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3528 { 0xdc8 +1.42057e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda855 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda858 : BV:32
17 : Lambda856 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda857 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 3531 { 0xdcb +1.42092e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3530 { 0xdca +1.42080e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 3528 { 0xdc8 +1.42057e129 } : BV:32
31 : eq(24, 30) : BOOL
32 : 3529 { 0xdc9 +1.42068e129 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3841 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda3842 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 3531 { 0xdcb +1.42092e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 3530 { 0xdca +1.42080e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 3528 { 0xdc8 +1.42057e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 3529 { 0xdc9 +1.42068e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 0 { 0x0 } : BV:8
22 : ite(20, 14, 21) : BV:8
23 : ite(18, 14, 22) : BV:8
24 : ite(16, 14, 23) : BV:8
25 : ite(13, 14, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : eq(27, 17) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 14, 21) : BV:8
33 : ite(30, 14, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 14, 34) : BV:8
36 : bvadd(1, 9, 10) : BV:32
37 : eq(36, 12) : BOOL
38 : eq(36, 15) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 14, 21) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 14, 42) : BV:8
44 : ite(37, 14, 43) : BV:8
45 : bvadd(9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 14, 21) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : ite(47, 14, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : bvconcat(25, 35, 44, 53) : BV:32
55 : lambda(6, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(5, 55) : MAP[BV:32 -> BV:32]
57 : sum(1, 2, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3843 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3844 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3531 { 0xdcb +1.42092e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 3530 { 0xdca +1.42080e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 3528 { 0xdc8 +1.42057e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 3529 { 0xdc9 +1.42068e129 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3845 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3846 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3531 { 0xdcb +1.42092e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 3530 { 0xdca +1.42080e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 3528 { 0xdc8 +1.42057e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 3529 { 0xdc9 +1.42068e129 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda825 : BV:32
2 : Lambda826 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3531 { 0xdcb +1.42092e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3530 { 0xdca +1.42080e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3528 { 0xdc8 +1.42057e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3529 { 0xdc9 +1.42068e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda827 : BV:32
2 : Lambda828 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3531 { 0xdcb +1.42092e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3530 { 0xdca +1.42080e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3528 { 0xdc8 +1.42057e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3529 { 0xdc9 +1.42068e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3528 { 0xdc8 +1.42057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3531 { 0xdcb +1.42092e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 93416976 { 0x5916e10 +1.13617134e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 93416979 { 0x5916e13 +1.13617169e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 156180 { 0x26214 +1.1861810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 156183 { 0x26217 +1.1861846e129 } : BV:32
=counter_example.random_seed
2015713600
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce245.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce245 834571e92788841056956ecdbf548661
=input.spec-%var-x-1
1 : Lambda935 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda938 : BV:32
18 : Lambda936 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda937 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3697549562 ] -> 0, [ 3697549563; 3697549563 ] -> 128, [ 3697549564; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 745738683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 745738684; 745738687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 745738688; 2885763371 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2885763372; 2885763375 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2885763376; 3697549559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3697549560; 3697549563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3697549564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 745738684 { 0x2c7311bc +1.89897871e217 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2885763372 { 0xac01412c -1409203924 -1.980138e217 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3697549560 { 0xdc6420f8 -597417736 -1.78225612e57 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 511303796 { 0x1e79e074 +1.95216226e189 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda935 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda938 : BV:32
18 : Lambda936 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda937 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3833 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda3834 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3835 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3836 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 128 { 0x80 -128 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3837 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda3838 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
11 : eq(9, 10) : BOOL
12 : 128 { 0x80 -128 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda905 : BV:32
2 : Lambda906 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda907 : BV:32
2 : Lambda908 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 511303796 { 0x1e79e074 +1.95216226e189 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3697549560 { 0xdc6420f8 -597417736 -1.78225612e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 745738684 { 0x2c7311bc +1.89897871e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 745738687 { 0x2c7311bf +1.89897906e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2885763372 { 0xac01412c -1409203924 -1.980138e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2885763375 { 0xac01412f -1409203921 -1.980174e217 } : BV:32
=counter_example.random_seed
2490653511
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3v487.ce267.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3v487.ce267 c4495a3695c9f4ddae1b947822ef67
=input.spec-%var-x-1
1 : Lambda1011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1014 : BV:32
11 : Lambda1012 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1013 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
23 : eq(18, 22) : BOOL
24 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
25 : eq(18, 24) : BOOL
26 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 22548515 ] -> 0, [ 22548516; 22548519 ] -> 255, [ 22548520; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7752; 7755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 7756; 13927043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 13927044; 13927047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 13927048; 22548515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 22548516; 22548519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 22548520; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 13927044 { 0xd48284 +1.66023302e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 7752 { 0x1e48 +1.92411e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 789188635 { 0x2f0a101b +1.7861649e223 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda1011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1014 : BV:32
11 : Lambda1012 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1013 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
23 : eq(18, 22) : BOOL
24 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
25 : eq(18, 24) : BOOL
26 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda983 : BV:32
2 : Lambda984 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
13 : eq(8, 12) : BOOL
14 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
15 : eq(8, 14) : BOOL
16 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda985 : BV:32
2 : Lambda986 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
13 : eq(8, 12) : BOOL
14 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
15 : eq(8, 14) : BOOL
16 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 789188635 { 0x2f0a101b +1.7861649e223 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 7752 { 0x1e48 +1.92411e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7755 { 0x1e4b +1.92446e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 13927044 { 0xd48284 +1.66023302e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 13927047 { 0xd48287 +1.66023337e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
=counter_example.random_seed
1276849744
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3v487.ce1485.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3v487.ce1485 da1ae3e0a138355bfc1ebc888bff85c0
=input.spec-%var-x-1
1 : Lambda3728 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3731 : BV:32
18 : Lambda3729 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3730 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147525631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147525632; 2147525635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147525636; 2147536851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147536852; 2147536855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147536856; 2147540943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147540944; 2147540947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147540948; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda3733 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3736 : BV:32
18 : Lambda3734 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3735 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3823 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda3824 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3825 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3826 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3827 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3828 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda3690 : BV:32
2 : Lambda3691 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda3695 : BV:32
2 : Lambda3696 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3699 : BV:32
2 : Lambda3700 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147540947 { 0x8000dfd3 -2147426349 -1.683057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147525635 { 0x8000a403 -2147441661 -1.500524e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147536855 { 0x8000cfd7 -2147430441 -1.634276e129 } : BV:32
=counter_example.random_seed
3490211955
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce1486.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce1486 da5721c0cf71efaadab9f4758cf0b2
=input.spec-%var-x-1
1 : Lambda3748 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3751 : BV:32
18 : Lambda3749 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3750 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 126 { 0x7e } : BV:8
28 : eq(25, 21) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 174 { 0xae -82 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 126, [ 1; 1 ] -> 253, [ 2; 2 ] -> 174, [ 3; 3 ] -> 3, [ 4; 4294967295 ] -> 174, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 415900027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 415900028; 415900031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 415900032; 3397272215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3397272216; 3397272219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3397272220; 3928885219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3928885220; 3928885223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3928885224; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3397272216 { 0xca7e4298 -897695080 -1.98640727e21 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 415900028 { 0x18ca217c +1.57914686e178 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3928885220 { 0xea2e07e4 -366082076 -1.35961580e85 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda3755 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3758 : BV:32
18 : Lambda3756 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3757 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 126 { 0x7e } : BV:8
28 : eq(25, 21) : BOOL
29 : 3 { 0x3 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 174 { 0xae -82 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda3711 : BV:32
2 : Lambda3712 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 126 { 0x7e } : BV:8
11 : eq(7, 3) : BOOL
12 : 3 { 0x3 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 174 { 0xae -82 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3713 : BV:32
2 : Lambda3714 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 126 { 0x7e } : BV:8
11 : eq(7, 3) : BOOL
12 : 3 { 0x3 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 174 { 0xae -82 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3928885220 { 0xea2e07e4 -366082076 -1.35961580e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3928885223 { 0xea2e07e7 -366082073 -1.35961616e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3397272216 { 0xca7e4298 -897695080 -1.98640727e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3397272219 { 0xca7e429b -897695077 -1.98640763e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 415900028 { 0x18ca217c +1.57914686e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 415900031 { 0x18ca217f +1.57914721e178 } : BV:32
=counter_example.random_seed
701401423
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce6586.num_edges_traversed1
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce6586 93d25232b917c2a414cc7e224de1079
=input.spec-%var-x-1
1 : Lambda17595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17598 : BV:32
18 : Lambda17596 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217729 { 0x8000001 +1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17597 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : bvmul(37, 17) : BV:32
58 : bvadd(34, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : 112 { 0x70 } : BV:8
61 : eq(58, 34) : BOOL
62 : 190 { 0xbe -66 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(58, 63) : BOOL
65 : 127 { 0x7f } : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : eq(58, 66) : BOOL
68 : 17 { 0x11 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(64, 65, 70) : BV:8
72 : ite(61, 62, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : bvadd(66, 57) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 34) : BOOL
77 : eq(74, 63) : BOOL
78 : eq(74, 66) : BOOL
79 : ite(78, 68, 69) : BV:8
80 : ite(77, 65, 79) : BV:8
81 : ite(76, 62, 80) : BV:8
82 : ite(75, 60, 81) : BV:8
83 : bvadd(63, 57) : BV:32
84 : eq(83, 2) : BOOL
85 : eq(83, 34) : BOOL
86 : eq(83, 63) : BOOL
87 : eq(83, 66) : BOOL
88 : ite(87, 68, 69) : BV:8
89 : ite(86, 65, 88) : BV:8
90 : ite(85, 62, 89) : BV:8
91 : ite(84, 60, 90) : BV:8
92 : eq(57, 2) : BOOL
93 : eq(57, 34) : BOOL
94 : eq(57, 63) : BOOL
95 : eq(57, 66) : BOOL
96 : ite(95, 68, 69) : BV:8
97 : ite(94, 65, 96) : BV:8
98 : ite(93, 62, 97) : BV:8
99 : ite(92, 60, 98) : BV:8
100 : bvconcat(73, 82, 91, 99) : BV:32
101 : bvadd(34, 56, 100) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 34) : BOOL
104 : eq(101, 63) : BOOL
105 : eq(101, 66) : BOOL
106 : ite(105, 68, 69) : BV:8
107 : ite(104, 65, 106) : BV:8
108 : ite(103, 62, 107) : BV:8
109 : ite(102, 60, 108) : BV:8
110 : bvadd(66, 56, 100) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 34) : BOOL
113 : eq(110, 63) : BOOL
114 : eq(110, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 65, 115) : BV:8
117 : ite(112, 62, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : bvadd(63, 56, 100) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 34) : BOOL
122 : eq(119, 63) : BOOL
123 : eq(119, 66) : BOOL
124 : ite(123, 68, 69) : BV:8
125 : ite(122, 65, 124) : BV:8
126 : ite(121, 62, 125) : BV:8
127 : ite(120, 60, 126) : BV:8
128 : bvadd(56, 100) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 34) : BOOL
131 : eq(128, 63) : BOOL
132 : eq(128, 66) : BOOL
133 : ite(132, 68, 69) : BV:8
134 : ite(131, 65, 133) : BV:8
135 : ite(130, 62, 134) : BV:8
136 : ite(129, 60, 135) : BV:8
137 : bvconcat(109, 118, 127, 136) : BV:32
138 : ite(55, 2, 137) : BV:32
139 : lambda(52, 138) : FUNCTION[BV:32 -> BV:32]
140 : map(51, 139) : MAP[BV:32 -> BV:32]
141 : lambda(17, 140) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
142 : map(16, 141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
143 : sym_const(142) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 112, [ 1; 1 ] -> 127, [ 2; 2 ] -> 17, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 559849463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 559849464; 559849467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 559849468; 2096372423 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096372424; 2096372427 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2096372428; 4149718779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4149718780; 4149718783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4149718784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2096372424 { 0x7cf41ac8 +1.90706729e122 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4149718780 { 0xf757aefc -145248516 -1.68502759e111 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 559849464 { 0x215e9ff8 +1.73925685e195 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17600 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17603 : BV:32
18 : Lambda17601 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217729 { 0x8000001 +1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17602 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : bvmul(37, 17) : BV:32
77 : bvadd(34, 76) : BV:32
78 : eq(77, 2) : BOOL
79 : 112 { 0x70 } : BV:8
80 : eq(77, 34) : BOOL
81 : 190 { 0xbe -66 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(77, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : eq(77, 85) : BOOL
87 : 17 { 0x11 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : bvadd(85, 76) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 34) : BOOL
96 : eq(93, 82) : BOOL
97 : eq(93, 85) : BOOL
98 : ite(97, 87, 88) : BV:8
99 : ite(96, 84, 98) : BV:8
100 : ite(95, 81, 99) : BV:8
101 : ite(94, 79, 100) : BV:8
102 : bvadd(82, 76) : BV:32
103 : eq(102, 2) : BOOL
104 : eq(102, 34) : BOOL
105 : eq(102, 82) : BOOL
106 : eq(102, 85) : BOOL
107 : ite(106, 87, 88) : BV:8
108 : ite(105, 84, 107) : BV:8
109 : ite(104, 81, 108) : BV:8
110 : ite(103, 79, 109) : BV:8
111 : eq(76, 2) : BOOL
112 : eq(76, 34) : BOOL
113 : eq(76, 82) : BOOL
114 : eq(76, 85) : BOOL
115 : ite(114, 87, 88) : BV:8
116 : ite(113, 84, 115) : BV:8
117 : ite(112, 81, 116) : BV:8
118 : ite(111, 79, 117) : BV:8
119 : bvconcat(92, 101, 110, 118) : BV:32
120 : bvadd(34, 75, 119) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 34) : BOOL
123 : eq(120, 82) : BOOL
124 : eq(120, 85) : BOOL
125 : ite(124, 87, 88) : BV:8
126 : ite(123, 84, 125) : BV:8
127 : ite(122, 81, 126) : BV:8
128 : ite(121, 79, 127) : BV:8
129 : bvadd(85, 75, 119) : BV:32
130 : eq(129, 2) : BOOL
131 : eq(129, 34) : BOOL
132 : eq(129, 82) : BOOL
133 : eq(129, 85) : BOOL
134 : ite(133, 87, 88) : BV:8
135 : ite(132, 84, 134) : BV:8
136 : ite(131, 81, 135) : BV:8
137 : ite(130, 79, 136) : BV:8
138 : bvadd(82, 75, 119) : BV:32
139 : eq(138, 2) : BOOL
140 : eq(138, 34) : BOOL
141 : eq(138, 82) : BOOL
142 : eq(138, 85) : BOOL
143 : ite(142, 87, 88) : BV:8
144 : ite(141, 84, 143) : BV:8
145 : ite(140, 81, 144) : BV:8
146 : ite(139, 79, 145) : BV:8
147 : bvadd(75, 119) : BV:32
148 : eq(147, 2) : BOOL
149 : eq(147, 34) : BOOL
150 : eq(147, 82) : BOOL
151 : eq(147, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 81, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : bvconcat(128, 137, 146, 155) : BV:32
157 : ite(55, 2, 156) : BV:32
158 : ite(74, 156, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : lambda(52, 159) : FUNCTION[BV:32 -> BV:32]
161 : map(51, 160) : MAP[BV:32 -> BV:32]
162 : lambda(17, 161) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
163 : map(16, 162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
164 : sym_const(163) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17624 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17625 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : bvmul(10, 27) : BV:32
47 : 3188817776 { 0xbe117f70 -1106149520 -1.13670158e253 } : BV:32
48 : bvadd(7, 46, 47) : BV:32
49 : eq(48, 5) : BOOL
50 : 112 { 0x70 } : BV:8
51 : eq(48, 7) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 1) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 17 { 0x11 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(53, 54, 59) : BV:8
61 : ite(51, 52, 60) : BV:8
62 : ite(49, 50, 61) : BV:8
63 : bvadd(55, 46, 47) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 1) : BOOL
67 : eq(63, 55) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 54, 68) : BV:8
70 : ite(65, 52, 69) : BV:8
71 : ite(64, 50, 70) : BV:8
72 : bvadd(1, 46, 47) : BV:32
73 : eq(72, 5) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 1) : BOOL
76 : eq(72, 55) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 54, 77) : BV:8
79 : ite(74, 52, 78) : BV:8
80 : ite(73, 50, 79) : BV:8
81 : bvadd(46, 47) : BV:32
82 : eq(81, 5) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 1) : BOOL
85 : eq(81, 55) : BOOL
86 : ite(85, 57, 58) : BV:8
87 : ite(84, 54, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 50, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(29, 5, 90) : BV:32
92 : ite(45, 90, 91) : BV:32
93 : ite(29, 5, 92) : BV:32
94 : lambda(27, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(26, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17626 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17627 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : bvmul(8, 25) : BV:32
45 : 3188817776 { 0xbe117f70 -1106149520 -1.13670158e253 } : BV:32
46 : bvadd(5, 44, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 112 { 0x70 } : BV:8
49 : eq(46, 5) : BOOL
50 : 190 { 0xbe -66 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 127 { 0x7f } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 17 { 0x11 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 44, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 5) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 44, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 5) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : bvadd(44, 45) : BV:32
81 : eq(80, 3) : BOOL
82 : eq(80, 5) : BOOL
83 : eq(80, 51) : BOOL
84 : eq(80, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : ite(83, 53, 85) : BV:8
87 : ite(82, 50, 86) : BV:8
88 : ite(81, 48, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : ite(27, 3, 89) : BV:32
91 : ite(43, 89, 90) : BV:32
92 : ite(27, 3, 91) : BV:32
93 : lambda(25, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(24, 93) : MAP[BV:32 -> BV:32]
95 : sym_const(94) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17628 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17629 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : bvmul(8, 25) : BV:32
45 : 3188817776 { 0xbe117f70 -1106149520 -1.13670158e253 } : BV:32
46 : bvadd(5, 44, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 112 { 0x70 } : BV:8
49 : eq(46, 5) : BOOL
50 : 190 { 0xbe -66 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 127 { 0x7f } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 17 { 0x11 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 44, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 5) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 44, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 5) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : bvadd(44, 45) : BV:32
81 : eq(80, 3) : BOOL
82 : eq(80, 5) : BOOL
83 : eq(80, 51) : BOOL
84 : eq(80, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : ite(83, 53, 85) : BV:8
87 : ite(82, 50, 86) : BV:8
88 : ite(81, 48, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : ite(27, 3, 89) : BV:32
91 : ite(43, 89, 90) : BV:32
92 : ite(27, 3, 91) : BV:32
93 : lambda(25, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(24, 93) : MAP[BV:32 -> BV:32]
95 : sym_const(94) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17554 : BV:32
2 : Lambda17555 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217729 { 0x8000001 +1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17559 : BV:32
2 : Lambda17560 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 134217728 { 0x8000000 +1.0e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 134217729 { 0x8000001 +1.11e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : bvmul(33, 1) : BV:32
50 : bvadd(30, 49) : BV:32
51 : eq(50, 3) : BOOL
52 : 112 { 0x70 } : BV:8
53 : eq(50, 30) : BOOL
54 : 190 { 0xbe -66 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(50, 55) : BOOL
57 : 127 { 0x7f } : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 17 { 0x11 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(51, 52, 64) : BV:8
66 : bvadd(58, 49) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 55) : BOOL
70 : eq(66, 58) : BOOL
71 : ite(70, 60, 61) : BV:8
72 : ite(69, 57, 71) : BV:8
73 : ite(68, 54, 72) : BV:8
74 : ite(67, 52, 73) : BV:8
75 : bvadd(55, 49) : BV:32
76 : eq(75, 3) : BOOL
77 : eq(75, 30) : BOOL
78 : eq(75, 55) : BOOL
79 : eq(75, 58) : BOOL
80 : ite(79, 60, 61) : BV:8
81 : ite(78, 57, 80) : BV:8
82 : ite(77, 54, 81) : BV:8
83 : ite(76, 52, 82) : BV:8
84 : eq(49, 3) : BOOL
85 : eq(49, 30) : BOOL
86 : eq(49, 55) : BOOL
87 : eq(49, 58) : BOOL
88 : ite(87, 60, 61) : BV:8
89 : ite(86, 57, 88) : BV:8
90 : ite(85, 54, 89) : BV:8
91 : ite(84, 52, 90) : BV:8
92 : bvconcat(65, 74, 83, 91) : BV:32
93 : bvadd(30, 48, 92) : BV:32
94 : eq(93, 3) : BOOL
95 : eq(93, 30) : BOOL
96 : eq(93, 55) : BOOL
97 : eq(93, 58) : BOOL
98 : ite(97, 60, 61) : BV:8
99 : ite(96, 57, 98) : BV:8
100 : ite(95, 54, 99) : BV:8
101 : ite(94, 52, 100) : BV:8
102 : bvadd(58, 48, 92) : BV:32
103 : eq(102, 3) : BOOL
104 : eq(102, 30) : BOOL
105 : eq(102, 55) : BOOL
106 : eq(102, 58) : BOOL
107 : ite(106, 60, 61) : BV:8
108 : ite(105, 57, 107) : BV:8
109 : ite(104, 54, 108) : BV:8
110 : ite(103, 52, 109) : BV:8
111 : bvadd(55, 48, 92) : BV:32
112 : eq(111, 3) : BOOL
113 : eq(111, 30) : BOOL
114 : eq(111, 55) : BOOL
115 : eq(111, 58) : BOOL
116 : ite(115, 60, 61) : BV:8
117 : ite(114, 57, 116) : BV:8
118 : ite(113, 54, 117) : BV:8
119 : ite(112, 52, 118) : BV:8
120 : bvadd(48, 92) : BV:32
121 : eq(120, 3) : BOOL
122 : eq(120, 30) : BOOL
123 : eq(120, 55) : BOOL
124 : eq(120, 58) : BOOL
125 : ite(124, 60, 61) : BV:8
126 : ite(123, 57, 125) : BV:8
127 : ite(122, 54, 126) : BV:8
128 : ite(121, 52, 127) : BV:8
129 : bvconcat(101, 110, 119, 128) : BV:32
130 : ite(6, 3, 129) : BV:32
131 : ite(47, 129, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17563 : BV:32
2 : Lambda17564 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217729 { 0x8000001 +1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17561 : BV:32
2 : Lambda17562 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 112 { 0x70 } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 17 { 0x11 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 559849464 { 0x215e9ff8 +1.73925685e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 559849467 { 0x215e9ffb +1.73925721e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2096372424 { 0x7cf41ac8 +1.90706729e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2096372427 { 0x7cf41acb +1.90706765e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4149718780 { 0xf757aefc -145248516 -1.68502759e111 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4149718783 { 0xf757aeff -145248513 -1.68502795e111 } : BV:32
=counter_example.random_seed
3857825018
=counter_example_end
=global nodece 20 num_edges_traversed 1
=global nodece 20 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce6587.num_edges_traversed1
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce6587 d01ce3edc1f584b3fea73a91b23f9510
=input.spec-%var-x-1
1 : Lambda17613 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17616 : BV:32
18 : Lambda17614 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17615 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 2 { 0x2 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : bvadd(65, 59) : BV:32
67 : eq(66, 2) : BOOL
68 : ite(67, 62, 63) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 59) : BV:32
71 : eq(70, 2) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : eq(59, 2) : BOOL
74 : ite(73, 62, 63) : BV:8
75 : bvconcat(64, 68, 72, 74) : BV:32
76 : bvadd(56, 58, 75) : BV:32
77 : eq(76, 2) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : bvadd(65, 58, 75) : BV:32
80 : eq(79, 2) : BOOL
81 : ite(80, 62, 63) : BV:8
82 : bvadd(69, 58, 75) : BV:32
83 : eq(82, 2) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : bvadd(58, 75) : BV:32
86 : eq(85, 2) : BOOL
87 : ite(86, 62, 63) : BV:8
88 : bvconcat(78, 81, 84, 87) : BV:32
89 : ite(55, 2, 88) : BV:32
90 : lambda(52, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(51, 90) : MAP[BV:32 -> BV:32]
92 : lambda(17, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(16, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 33554431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554432; 33554435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554436; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17618 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17621 : BV:32
18 : Lambda17619 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17620 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : 2 { 0x2 +1.23e129 } : BV:32
85 : bvadd(84, 78) : BV:32
86 : eq(85, 2) : BOOL
87 : ite(86, 81, 82) : BV:8
88 : 1 { 0x1 +1.11e129 } : BV:32
89 : bvadd(88, 78) : BV:32
90 : eq(89, 2) : BOOL
91 : ite(90, 81, 82) : BV:8
92 : eq(78, 2) : BOOL
93 : ite(92, 81, 82) : BV:8
94 : bvconcat(83, 87, 91, 93) : BV:32
95 : bvadd(75, 77, 94) : BV:32
96 : eq(95, 2) : BOOL
97 : ite(96, 81, 82) : BV:8
98 : bvadd(84, 77, 94) : BV:32
99 : eq(98, 2) : BOOL
100 : ite(99, 81, 82) : BV:8
101 : bvadd(88, 77, 94) : BV:32
102 : eq(101, 2) : BOOL
103 : ite(102, 81, 82) : BV:8
104 : bvadd(77, 94) : BV:32
105 : eq(104, 2) : BOOL
106 : ite(105, 81, 82) : BV:8
107 : bvconcat(97, 100, 103, 106) : BV:32
108 : ite(55, 2, 107) : BV:32
109 : ite(74, 107, 108) : BV:32
110 : ite(55, 2, 109) : BV:32
111 : lambda(52, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(51, 111) : MAP[BV:32 -> BV:32]
113 : lambda(17, 112) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
114 : map(16, 113) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
115 : sym_const(114) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17632 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17633 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 27) : BV:32
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(46, 48, 49) : BV:32
51 : eq(50, 5) : BOOL
52 : 2 { 0x2 } : BV:8
53 : 0 { 0x0 } : BV:8
54 : ite(51, 52, 53) : BV:8
55 : bvadd(49, 48, 49) : BV:32
56 : eq(55, 5) : BOOL
57 : ite(56, 52, 53) : BV:8
58 : bvadd(1, 48, 49) : BV:32
59 : eq(58, 5) : BOOL
60 : ite(59, 52, 53) : BV:8
61 : bvadd(48, 49) : BV:32
62 : eq(61, 5) : BOOL
63 : ite(62, 52, 53) : BV:8
64 : bvconcat(54, 57, 60, 63) : BV:32
65 : ite(29, 5, 64) : BV:32
66 : ite(45, 64, 65) : BV:32
67 : ite(29, 5, 66) : BV:32
68 : lambda(27, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(26, 68) : MAP[BV:32 -> BV:32]
70 : sum(1, 2, 69) : SUM[UNIT,MAP[BV:32 -> BV:32]]
71 : sym_const(70) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17634 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17635 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : eq(48, 3) : BOOL
50 : 2 { 0x2 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : bvadd(47, 46, 47) : BV:32
54 : eq(53, 3) : BOOL
55 : ite(54, 50, 51) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 46, 47) : BV:32
58 : eq(57, 3) : BOOL
59 : ite(58, 50, 51) : BV:8
60 : bvadd(46, 47) : BV:32
61 : eq(60, 3) : BOOL
62 : ite(61, 50, 51) : BV:8
63 : bvconcat(52, 55, 59, 62) : BV:32
64 : ite(27, 3, 63) : BV:32
65 : ite(43, 63, 64) : BV:32
66 : ite(27, 3, 65) : BV:32
67 : lambda(25, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(24, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17636 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17637 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : eq(48, 3) : BOOL
50 : 2 { 0x2 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : bvadd(47, 46, 47) : BV:32
54 : eq(53, 3) : BOOL
55 : ite(54, 50, 51) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 46, 47) : BV:32
58 : eq(57, 3) : BOOL
59 : ite(58, 50, 51) : BV:8
60 : bvadd(46, 47) : BV:32
61 : eq(60, 3) : BOOL
62 : ite(61, 50, 51) : BV:8
63 : bvconcat(52, 55, 59, 62) : BV:32
64 : ite(27, 3, 63) : BV:32
65 : ite(43, 63, 64) : BV:32
66 : ite(27, 3, 65) : BV:32
67 : lambda(25, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(24, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17573 : BV:32
2 : Lambda17574 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870913 { 0x20000001 +1.11e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17578 : BV:32
2 : Lambda17579 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 536870913 { 0x20000001 +1.11e193 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 2 { 0x2 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 51) : BV:32
59 : eq(58, 3) : BOOL
60 : ite(59, 54, 55) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 51) : BV:32
63 : eq(62, 3) : BOOL
64 : ite(63, 54, 55) : BV:8
65 : eq(51, 3) : BOOL
66 : ite(65, 54, 55) : BV:8
67 : bvconcat(56, 60, 64, 66) : BV:32
68 : bvadd(48, 50, 67) : BV:32
69 : eq(68, 3) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : bvadd(57, 50, 67) : BV:32
72 : eq(71, 3) : BOOL
73 : ite(72, 54, 55) : BV:8
74 : bvadd(61, 50, 67) : BV:32
75 : eq(74, 3) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : bvadd(50, 67) : BV:32
78 : eq(77, 3) : BOOL
79 : ite(78, 54, 55) : BV:8
80 : bvconcat(70, 73, 76, 79) : BV:32
81 : ite(6, 3, 80) : BV:32
82 : ite(47, 80, 81) : BV:32
83 : ite(6, 3, 82) : BV:32
84 : lambda(1, 2, 83) : FUNCTION[BV:32,BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17582 : BV:32
2 : Lambda17583 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870913 { 0x20000001 +1.11e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17580 : BV:32
2 : Lambda17581 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 10) : BV:32
18 : eq(17, 3) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 10) : BV:32
22 : eq(21, 3) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : eq(10, 3) : BOOL
25 : ite(24, 13, 14) : BV:8
26 : bvconcat(15, 19, 23, 25) : BV:32
27 : bvadd(7, 9, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : ite(28, 13, 14) : BV:8
30 : bvadd(16, 9, 26) : BV:32
31 : eq(30, 3) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : bvadd(20, 9, 26) : BV:32
34 : eq(33, 3) : BOOL
35 : ite(34, 13, 14) : BV:8
36 : bvadd(9, 26) : BV:32
37 : eq(36, 3) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : bvconcat(29, 32, 35, 38) : BV:32
40 : ite(6, 3, 39) : BV:32
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BV:32]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554435 { 0x2000003 +1.35e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=counter_example.random_seed
1988406770
=counter_example_end
=global nodece 21 num_edges_traversed 1
=global nodece 21 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce6626.num_edges_traversed1
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce6626 7815bd494f75af44bd23b79983ecfd0
=input.spec-%var-x-1
1 : Lambda17689 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17692 : BV:32
18 : Lambda17690 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17691 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 47 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 48; 51 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 52; 55 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 56; 59 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 60; 524291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524292; 524295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 524296; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 48 { 0x30 +1.572e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17698 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17701 : BV:32
18 : Lambda17699 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17700 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17726 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda17727 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17728 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda17729 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17730 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda17731 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 48 { 0x30 +1.572e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 51 { 0x33 +1.607e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 59 { 0x3b +1.703e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 524295 { 0x80007 +1.6250083e129 } : BV:32
=counter_example.random_seed
981610744
=counter_example_end
=global nodece 22 num_edges_traversed 1
=global nodece 22 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 23
=global nodece 23 nodece z3.ce6666.num_edges_traversed1
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce6666 746f6647aefcd69c831acf7296335d2
=input.spec-%var-x-1
1 : Lambda17797 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17800 : BV:32
18 : Lambda17798 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda17799 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 7 { 0x7 +1.83e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 223 { 0xdf -33 } : BV:8
63 : eq(60, 56) : BOOL
64 : 252 { 0xfc -4 } : BV:8
65 : 6 { 0x6 +1.71e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 247 { 0xf7 -9 } : BV:8
68 : 5 { 0x5 +1.59e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 127 { 0x7f } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(65, 59) : BV:32
77 : eq(76, 58) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(68, 59) : BV:32
86 : eq(85, 58) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : bvadd(56, 59) : BV:32
95 : eq(94, 58) : BOOL
96 : eq(94, 56) : BOOL
97 : eq(94, 65) : BOOL
98 : eq(94, 68) : BOOL
99 : ite(98, 70, 71) : BV:8
100 : ite(97, 67, 99) : BV:8
101 : ite(96, 64, 100) : BV:8
102 : ite(95, 62, 101) : BV:8
103 : bvconcat(75, 84, 93, 102) : BV:32
104 : bvadd(55, 57, 103) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 65) : BOOL
108 : eq(104, 68) : BOOL
109 : ite(108, 70, 71) : BV:8
110 : ite(107, 67, 109) : BV:8
111 : ite(106, 64, 110) : BV:8
112 : ite(105, 62, 111) : BV:8
113 : bvadd(40, 57, 103) : BV:32
114 : eq(113, 58) : BOOL
115 : eq(113, 56) : BOOL
116 : eq(113, 65) : BOOL
117 : eq(113, 68) : BOOL
118 : ite(117, 70, 71) : BV:8
119 : ite(116, 67, 118) : BV:8
120 : ite(115, 64, 119) : BV:8
121 : ite(114, 62, 120) : BV:8
122 : bvadd(36, 57, 103) : BV:32
123 : eq(122, 58) : BOOL
124 : eq(122, 56) : BOOL
125 : eq(122, 65) : BOOL
126 : eq(122, 68) : BOOL
127 : ite(126, 70, 71) : BV:8
128 : ite(125, 67, 127) : BV:8
129 : ite(124, 64, 128) : BV:8
130 : ite(123, 62, 129) : BV:8
131 : bvadd(57, 103) : BV:32
132 : eq(131, 58) : BOOL
133 : eq(131, 56) : BOOL
134 : eq(131, 65) : BOOL
135 : eq(131, 68) : BOOL
136 : ite(135, 70, 71) : BV:8
137 : ite(134, 67, 136) : BV:8
138 : ite(133, 64, 137) : BV:8
139 : ite(132, 62, 138) : BV:8
140 : bvconcat(112, 121, 130, 139) : BV:32
141 : ite(54, 2, 140) : BV:32
142 : lambda(51, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(50, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 4 ] -> 252, [ 5; 5 ] -> 127, [ 6; 6 ] -> 247, [ 7; 7 ] -> 223, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1033659483 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1033659484; 1033659487 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1033659488; 2784971355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2784971356; 2784971359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2784971360; 3364201159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3364201160; 3364201163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3364201164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3364201160 { 0xc885a2c8 -930766136 -1.4403018e18 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1033659484 { 0x3d9c645c +1.22181272e252 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2784971356 { 0xa5ff4a5c -1509995940 -1.99445676e204 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17805 : BV:32
18 : Lambda17803 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda17804 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 7 { 0x7 +1.83e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 223 { 0xdf -33 } : BV:8
82 : eq(79, 75) : BOOL
83 : 252 { 0xfc -4 } : BV:8
84 : 6 { 0x6 +1.71e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 247 { 0xf7 -9 } : BV:8
87 : 5 { 0x5 +1.59e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 127 { 0x7f } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(84, 78) : BV:32
96 : eq(95, 77) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(87, 78) : BV:32
105 : eq(104, 77) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : bvadd(75, 78) : BV:32
114 : eq(113, 77) : BOOL
115 : eq(113, 75) : BOOL
116 : eq(113, 84) : BOOL
117 : eq(113, 87) : BOOL
118 : ite(117, 89, 90) : BV:8
119 : ite(116, 86, 118) : BV:8
120 : ite(115, 83, 119) : BV:8
121 : ite(114, 81, 120) : BV:8
122 : bvconcat(94, 103, 112, 121) : BV:32
123 : bvadd(74, 76, 122) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 75) : BOOL
126 : eq(123, 84) : BOOL
127 : eq(123, 87) : BOOL
128 : ite(127, 89, 90) : BV:8
129 : ite(126, 86, 128) : BV:8
130 : ite(125, 83, 129) : BV:8
131 : ite(124, 81, 130) : BV:8
132 : bvadd(40, 76, 122) : BV:32
133 : eq(132, 77) : BOOL
134 : eq(132, 75) : BOOL
135 : eq(132, 84) : BOOL
136 : eq(132, 87) : BOOL
137 : ite(136, 89, 90) : BV:8
138 : ite(135, 86, 137) : BV:8
139 : ite(134, 83, 138) : BV:8
140 : ite(133, 81, 139) : BV:8
141 : bvadd(36, 76, 122) : BV:32
142 : eq(141, 77) : BOOL
143 : eq(141, 75) : BOOL
144 : eq(141, 84) : BOOL
145 : eq(141, 87) : BOOL
146 : ite(145, 89, 90) : BV:8
147 : ite(144, 86, 146) : BV:8
148 : ite(143, 83, 147) : BV:8
149 : ite(142, 81, 148) : BV:8
150 : bvadd(76, 122) : BV:32
151 : eq(150, 77) : BOOL
152 : eq(150, 75) : BOOL
153 : eq(150, 84) : BOOL
154 : eq(150, 87) : BOOL
155 : ite(154, 89, 90) : BV:8
156 : ite(153, 86, 155) : BV:8
157 : ite(152, 83, 156) : BV:8
158 : ite(151, 81, 157) : BV:8
159 : bvconcat(131, 140, 149, 158) : BV:32
160 : ite(54, 2, 159) : BV:32
161 : ite(73, 159, 160) : BV:32
162 : ite(54, 2, 161) : BV:32
163 : lambda(51, 162) : FUNCTION[BV:32 -> BV:32]
164 : map(50, 163) : MAP[BV:32 -> BV:32]
165 : lambda(17, 164) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
166 : map(16, 165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
167 : sym_const(166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17826 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17827 : BV:32
26 : eq(25, 5) : BOOL
27 : and(4, 26) : BOOL
28 : bvule(5, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(1, 25) : BOOL
32 : bvule(25, 1) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 1, 37) : BV:32
39 : ite(30, 5, 38) : BV:32
40 : eq(39, 5) : BOOL
41 : and(4, 40) : BOOL
42 : ite(41, 4, 22) : BOOL
43 : and(4, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3757539324 { 0xdff77ffc -537427972 -1.93359327e64 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 7 { 0x7 +1.83e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : eq(48, 45) : BOOL
53 : 252 { 0xfc -4 } : BV:8
54 : 6 { 0x6 +1.71e129 } : BV:32
55 : eq(48, 54) : BOOL
56 : 247 { 0xf7 -9 } : BV:8
57 : 5 { 0x5 +1.59e129 } : BV:32
58 : eq(48, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(12, 46, 47) : BV:32
66 : eq(65, 49) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(1, 46, 47) : BV:32
75 : eq(74, 49) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : bvadd(46, 47) : BV:32
84 : eq(83, 49) : BOOL
85 : eq(83, 45) : BOOL
86 : eq(83, 54) : BOOL
87 : eq(83, 57) : BOOL
88 : ite(87, 59, 60) : BV:8
89 : ite(86, 56, 88) : BV:8
90 : ite(85, 53, 89) : BV:8
91 : ite(84, 51, 90) : BV:8
92 : bvconcat(64, 73, 82, 91) : BV:32
93 : ite(27, 5, 92) : BV:32
94 : ite(43, 92, 93) : BV:32
95 : ite(27, 5, 94) : BV:32
96 : lambda(25, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(24, 96) : MAP[BV:32 -> BV:32]
98 : sum(1, 2, 97) : SUM[UNIT,MAP[BV:32 -> BV:32]]
99 : sym_const(98) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17828 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda17829 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : bvule(3, 24) : BOOL
28 : bvule(24, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(7, 24) : BOOL
31 : bvule(24, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(11, 24) : BOOL
34 : bvule(24, 13) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 11, 11) : BV:32
37 : ite(32, 7, 36) : BV:32
38 : ite(29, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(2, 39) : BOOL
41 : ite(40, 2, 21) : BOOL
42 : and(2, 41) : BOOL
43 : 3 { 0x3 +1.35e129 } : BV:32
44 : 4 { 0x4 +1.47e129 } : BV:32
45 : bvmul(44, 24) : BV:32
46 : 3757539324 { 0xdff77ffc -537427972 -1.93359327e64 } : BV:32
47 : bvadd(43, 45, 46) : BV:32
48 : 7 { 0x7 +1.83e129 } : BV:32
49 : eq(47, 48) : BOOL
50 : 223 { 0xdf -33 } : BV:8
51 : eq(47, 44) : BOOL
52 : 252 { 0xfc -4 } : BV:8
53 : 6 { 0x6 +1.71e129 } : BV:32
54 : eq(47, 53) : BOOL
55 : 247 { 0xf7 -9 } : BV:8
56 : 5 { 0x5 +1.59e129 } : BV:32
57 : eq(47, 56) : BOOL
58 : 127 { 0x7f } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(49, 50, 62) : BV:8
64 : bvadd(11, 45, 46) : BV:32
65 : eq(64, 48) : BOOL
66 : eq(64, 44) : BOOL
67 : eq(64, 53) : BOOL
68 : eq(64, 56) : BOOL
69 : ite(68, 58, 59) : BV:8
70 : ite(67, 55, 69) : BV:8
71 : ite(66, 52, 70) : BV:8
72 : ite(65, 50, 71) : BV:8
73 : bvadd(7, 45, 46) : BV:32
74 : eq(73, 48) : BOOL
75 : eq(73, 44) : BOOL
76 : eq(73, 53) : BOOL
77 : eq(73, 56) : BOOL
78 : ite(77, 58, 59) : BV:8
79 : ite(76, 55, 78) : BV:8
80 : ite(75, 52, 79) : BV:8
81 : ite(74, 50, 80) : BV:8
82 : bvadd(45, 46) : BV:32
83 : eq(82, 48) : BOOL
84 : eq(82, 44) : BOOL
85 : eq(82, 53) : BOOL
86 : eq(82, 56) : BOOL
87 : ite(86, 58, 59) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 52, 88) : BV:8
90 : ite(83, 50, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : ite(26, 3, 91) : BV:32
93 : ite(42, 91, 92) : BV:32
94 : ite(26, 3, 93) : BV:32
95 : lambda(24, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(23, 95) : MAP[BV:32 -> BV:32]
97 : sym_const(96) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17830 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda17831 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : bvule(3, 24) : BOOL
28 : bvule(24, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(7, 24) : BOOL
31 : bvule(24, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(11, 24) : BOOL
34 : bvule(24, 13) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 11, 11) : BV:32
37 : ite(32, 7, 36) : BV:32
38 : ite(29, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(2, 39) : BOOL
41 : ite(40, 2, 21) : BOOL
42 : and(2, 41) : BOOL
43 : 3 { 0x3 +1.35e129 } : BV:32
44 : 4 { 0x4 +1.47e129 } : BV:32
45 : bvmul(44, 24) : BV:32
46 : 3757539324 { 0xdff77ffc -537427972 -1.93359327e64 } : BV:32
47 : bvadd(43, 45, 46) : BV:32
48 : 7 { 0x7 +1.83e129 } : BV:32
49 : eq(47, 48) : BOOL
50 : 223 { 0xdf -33 } : BV:8
51 : eq(47, 44) : BOOL
52 : 252 { 0xfc -4 } : BV:8
53 : 6 { 0x6 +1.71e129 } : BV:32
54 : eq(47, 53) : BOOL
55 : 247 { 0xf7 -9 } : BV:8
56 : 5 { 0x5 +1.59e129 } : BV:32
57 : eq(47, 56) : BOOL
58 : 127 { 0x7f } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(49, 50, 62) : BV:8
64 : bvadd(11, 45, 46) : BV:32
65 : eq(64, 48) : BOOL
66 : eq(64, 44) : BOOL
67 : eq(64, 53) : BOOL
68 : eq(64, 56) : BOOL
69 : ite(68, 58, 59) : BV:8
70 : ite(67, 55, 69) : BV:8
71 : ite(66, 52, 70) : BV:8
72 : ite(65, 50, 71) : BV:8
73 : bvadd(7, 45, 46) : BV:32
74 : eq(73, 48) : BOOL
75 : eq(73, 44) : BOOL
76 : eq(73, 53) : BOOL
77 : eq(73, 56) : BOOL
78 : ite(77, 58, 59) : BV:8
79 : ite(76, 55, 78) : BV:8
80 : ite(75, 52, 79) : BV:8
81 : ite(74, 50, 80) : BV:8
82 : bvadd(45, 46) : BV:32
83 : eq(82, 48) : BOOL
84 : eq(82, 44) : BOOL
85 : eq(82, 53) : BOOL
86 : eq(82, 56) : BOOL
87 : ite(86, 58, 59) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 52, 88) : BV:8
90 : ite(83, 50, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : ite(26, 3, 91) : BV:32
93 : ite(42, 91, 92) : BV:32
94 : ite(26, 3, 93) : BV:32
95 : lambda(24, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(23, 95) : MAP[BV:32 -> BV:32]
97 : sym_const(96) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17756 : BV:32
2 : Lambda17757 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17761 : BV:32
2 : Lambda17762 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 8191 { 0x1fff +1.97644e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8192 { 0x2000 +1.97656e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 8193 { 0x2001 +1.97668e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 7 { 0x7 +1.83e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : eq(52, 48) : BOOL
56 : 252 { 0xfc -4 } : BV:8
57 : 6 { 0x6 +1.71e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 247 { 0xf7 -9 } : BV:8
60 : 5 { 0x5 +1.59e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 127 { 0x7f } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(57, 51) : BV:32
69 : eq(68, 50) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(60, 51) : BV:32
78 : eq(77, 50) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : bvadd(48, 51) : BV:32
87 : eq(86, 50) : BOOL
88 : eq(86, 48) : BOOL
89 : eq(86, 57) : BOOL
90 : eq(86, 60) : BOOL
91 : ite(90, 62, 63) : BV:8
92 : ite(89, 59, 91) : BV:8
93 : ite(88, 56, 92) : BV:8
94 : ite(87, 54, 93) : BV:8
95 : bvconcat(67, 76, 85, 94) : BV:32
96 : bvadd(47, 49, 95) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 48) : BOOL
99 : eq(96, 57) : BOOL
100 : eq(96, 60) : BOOL
101 : ite(100, 62, 63) : BV:8
102 : ite(99, 59, 101) : BV:8
103 : ite(98, 56, 102) : BV:8
104 : ite(97, 54, 103) : BV:8
105 : bvadd(36, 49, 95) : BV:32
106 : eq(105, 50) : BOOL
107 : eq(105, 48) : BOOL
108 : eq(105, 57) : BOOL
109 : eq(105, 60) : BOOL
110 : ite(109, 62, 63) : BV:8
111 : ite(108, 59, 110) : BV:8
112 : ite(107, 56, 111) : BV:8
113 : ite(106, 54, 112) : BV:8
114 : bvadd(32, 49, 95) : BV:32
115 : eq(114, 50) : BOOL
116 : eq(114, 48) : BOOL
117 : eq(114, 57) : BOOL
118 : eq(114, 60) : BOOL
119 : ite(118, 62, 63) : BV:8
120 : ite(117, 59, 119) : BV:8
121 : ite(116, 56, 120) : BV:8
122 : ite(115, 54, 121) : BV:8
123 : bvadd(49, 95) : BV:32
124 : eq(123, 50) : BOOL
125 : eq(123, 48) : BOOL
126 : eq(123, 57) : BOOL
127 : eq(123, 60) : BOOL
128 : ite(127, 62, 63) : BV:8
129 : ite(126, 59, 128) : BV:8
130 : ite(125, 56, 129) : BV:8
131 : ite(124, 54, 130) : BV:8
132 : bvconcat(104, 113, 122, 131) : BV:32
133 : ite(6, 3, 132) : BV:32
134 : ite(46, 132, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17765 : BV:32
2 : Lambda17766 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17763 : BV:32
2 : Lambda17764 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 7 { 0x7 +1.83e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : eq(12, 8) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 6 { 0x6 +1.71e129 } : BV:32
18 : eq(12, 17) : BOOL
19 : 247 { 0xf7 -9 } : BV:8
20 : 5 { 0x5 +1.59e129 } : BV:32
21 : eq(12, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : ite(18, 19, 24) : BV:8
26 : ite(15, 16, 25) : BV:8
27 : ite(13, 14, 26) : BV:8
28 : bvadd(17, 11) : BV:32
29 : eq(28, 10) : BOOL
30 : eq(28, 8) : BOOL
31 : eq(28, 17) : BOOL
32 : eq(28, 20) : BOOL
33 : ite(32, 22, 23) : BV:8
34 : ite(31, 19, 33) : BV:8
35 : ite(30, 16, 34) : BV:8
36 : ite(29, 14, 35) : BV:8
37 : bvadd(20, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 8) : BOOL
40 : eq(37, 17) : BOOL
41 : eq(37, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : ite(40, 19, 42) : BV:8
44 : ite(39, 16, 43) : BV:8
45 : ite(38, 14, 44) : BV:8
46 : bvadd(8, 11) : BV:32
47 : eq(46, 10) : BOOL
48 : eq(46, 8) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : ite(50, 22, 23) : BV:8
52 : ite(49, 19, 51) : BV:8
53 : ite(48, 16, 52) : BV:8
54 : ite(47, 14, 53) : BV:8
55 : bvconcat(27, 36, 45, 54) : BV:32
56 : bvadd(7, 9, 55) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 8) : BOOL
59 : eq(56, 17) : BOOL
60 : eq(56, 20) : BOOL
61 : ite(60, 22, 23) : BV:8
62 : ite(59, 19, 61) : BV:8
63 : ite(58, 16, 62) : BV:8
64 : ite(57, 14, 63) : BV:8
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : bvadd(65, 9, 55) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 8) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : ite(70, 22, 23) : BV:8
72 : ite(69, 19, 71) : BV:8
73 : ite(68, 16, 72) : BV:8
74 : ite(67, 14, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 9, 55) : BV:32
77 : eq(76, 10) : BOOL
78 : eq(76, 8) : BOOL
79 : eq(76, 17) : BOOL
80 : eq(76, 20) : BOOL
81 : ite(80, 22, 23) : BV:8
82 : ite(79, 19, 81) : BV:8
83 : ite(78, 16, 82) : BV:8
84 : ite(77, 14, 83) : BV:8
85 : bvadd(9, 55) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 8) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : ite(89, 22, 23) : BV:8
91 : ite(88, 19, 90) : BV:8
92 : ite(87, 16, 91) : BV:8
93 : ite(86, 14, 92) : BV:8
94 : bvconcat(64, 74, 84, 93) : BV:32
95 : ite(6, 3, 94) : BV:32
96 : lambda(1, 2, 95) : FUNCTION[BV:32,BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2784971356 { 0xa5ff4a5c -1509995940 -1.99445676e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2784971359 { 0xa5ff4a5f -1509995937 -1.99445712e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3364201160 { 0xc885a2c8 -930766136 -1.4403018e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3364201163 { 0xc885a2cb -930766133 -1.4403054e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1033659484 { 0x3d9c645c +1.22181272e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1033659487 { 0x3d9c645f +1.22181308e252 } : BV:32
=counter_example.random_seed
2098305791
=counter_example_end
=global nodece 23 num_edges_traversed 1
=global nodece 23 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce6706.num_edges_traversed1
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce6706 da603260b4a51620b414673e9bc6ba5
=input.spec-%var-x-1
1 : Lambda17947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17950 : BV:32
18 : Lambda17948 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 16385 { 0x4001 +1.195324e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda17949 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 2) : BOOL
56 : 133 { 0x85 -123 } : BV:8
57 : eq(54, 50) : BOOL
58 : 109 { 0x6d } : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : eq(54, 59) : BOOL
61 : 119 { 0x77 } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(54, 62) : BOOL
64 : 125 { 0x7d } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(57, 58, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : bvadd(62, 53) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 50) : BOOL
73 : eq(70, 59) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 58, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : bvadd(59, 53) : BV:32
80 : eq(79, 2) : BOOL
81 : eq(79, 50) : BOOL
82 : eq(79, 59) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 58, 85) : BV:8
87 : ite(80, 56, 86) : BV:8
88 : eq(53, 2) : BOOL
89 : eq(53, 50) : BOOL
90 : eq(53, 59) : BOOL
91 : eq(53, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 58, 93) : BV:8
95 : ite(88, 56, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(50, 52, 96) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 50) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 58, 103) : BV:8
105 : ite(98, 56, 104) : BV:8
106 : bvadd(62, 52, 96) : BV:32
107 : eq(106, 2) : BOOL
108 : eq(106, 50) : BOOL
109 : eq(106, 59) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 56, 113) : BV:8
115 : bvadd(59, 52, 96) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 50) : BOOL
118 : eq(115, 59) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 58, 121) : BV:8
123 : ite(116, 56, 122) : BV:8
124 : bvadd(52, 96) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 50) : BOOL
127 : eq(124, 59) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 58, 130) : BV:8
132 : ite(125, 56, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 133, [ 1; 1 ] -> 119, [ 2; 2 ] -> 125, [ 3; 3 ] -> 109, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 487388731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 487388732; 487388735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 487388736; 3068595987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3068595988; 3068595991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3068595992; 3740935959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3740935960; 3740935963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3740935964; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 487388732 { 0x1d0cf63c +1.10126447e187 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3740935960 { 0xdefa2718 -554031336 -1.95431804e62 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3068595988 { 0xb6e70f14 -1226371308 -1.80514764e238 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17952 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17955 : BV:32
18 : Lambda17953 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 16385 { 0x4001 +1.195324e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda17954 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(22, 27) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : 133 { 0x85 -123 } : BV:8
72 : eq(69, 65) : BOOL
73 : 109 { 0x6d } : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : eq(69, 74) : BOOL
76 : 119 { 0x77 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(69, 77) : BOOL
79 : 125 { 0x7d } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : bvadd(77, 68) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 65) : BOOL
88 : eq(85, 74) : BOOL
89 : eq(85, 77) : BOOL
90 : ite(89, 79, 80) : BV:8
91 : ite(88, 76, 90) : BV:8
92 : ite(87, 73, 91) : BV:8
93 : ite(86, 71, 92) : BV:8
94 : bvadd(74, 68) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 74) : BOOL
98 : eq(94, 77) : BOOL
99 : ite(98, 79, 80) : BV:8
100 : ite(97, 76, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 71, 101) : BV:8
103 : eq(68, 2) : BOOL
104 : eq(68, 65) : BOOL
105 : eq(68, 74) : BOOL
106 : eq(68, 77) : BOOL
107 : ite(106, 79, 80) : BV:8
108 : ite(105, 76, 107) : BV:8
109 : ite(104, 73, 108) : BV:8
110 : ite(103, 71, 109) : BV:8
111 : bvconcat(84, 93, 102, 110) : BV:32
112 : bvadd(65, 67, 111) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 74) : BOOL
116 : eq(112, 77) : BOOL
117 : ite(116, 79, 80) : BV:8
118 : ite(115, 76, 117) : BV:8
119 : ite(114, 73, 118) : BV:8
120 : ite(113, 71, 119) : BV:8
121 : bvadd(77, 67, 111) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 65) : BOOL
124 : eq(121, 74) : BOOL
125 : eq(121, 77) : BOOL
126 : ite(125, 79, 80) : BV:8
127 : ite(124, 76, 126) : BV:8
128 : ite(123, 73, 127) : BV:8
129 : ite(122, 71, 128) : BV:8
130 : bvadd(74, 67, 111) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 65) : BOOL
133 : eq(130, 74) : BOOL
134 : eq(130, 77) : BOOL
135 : ite(134, 79, 80) : BV:8
136 : ite(133, 76, 135) : BV:8
137 : ite(132, 73, 136) : BV:8
138 : ite(131, 71, 137) : BV:8
139 : bvadd(67, 111) : BV:32
140 : eq(139, 2) : BOOL
141 : eq(139, 65) : BOOL
142 : eq(139, 74) : BOOL
143 : eq(139, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 73, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : bvconcat(120, 129, 138, 147) : BV:32
149 : ite(49, 2, 148) : BV:32
150 : ite(64, 148, 149) : BV:32
151 : ite(49, 2, 150) : BV:32
152 : lambda(46, 151) : FUNCTION[BV:32 -> BV:32]
153 : map(45, 152) : MAP[BV:32 -> BV:32]
154 : lambda(17, 153) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
155 : map(16, 154) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
156 : sym_const(155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17978 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 10, 10) : BV:32
15 : ite(9, 5, 14) : BV:32
16 : eq(15, 5) : BOOL
17 : and(4, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 4, 18) : BOOL
20 : lambda(3, 19) : FUNCTION[BV:32 -> BOOL]
21 : Lambda17979 : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : bvule(5, 21) : BOOL
25 : bvule(21, 7) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(10, 21) : BOOL
28 : bvule(21, 10) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 10, 10) : BV:32
31 : ite(26, 5, 30) : BV:32
32 : eq(31, 5) : BOOL
33 : and(4, 32) : BOOL
34 : ite(33, 4, 18) : BOOL
35 : and(4, 34) : BOOL
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvmul(37, 21) : BV:32
39 : 1836939141 { 0x6d7d7785 +1.98020994e91 } : BV:32
40 : bvadd(36, 38, 39) : BV:32
41 : eq(40, 5) : BOOL
42 : 133 { 0x85 -123 } : BV:8
43 : eq(40, 36) : BOOL
44 : 109 { 0x6d } : BV:8
45 : eq(40, 1) : BOOL
46 : 119 { 0x77 } : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : eq(40, 47) : BOOL
49 : 125 { 0x7d } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(43, 44, 52) : BV:8
54 : ite(41, 42, 53) : BV:8
55 : bvadd(47, 38, 39) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 36) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 47) : BOOL
60 : ite(59, 49, 50) : BV:8
61 : ite(58, 46, 60) : BV:8
62 : ite(57, 44, 61) : BV:8
63 : ite(56, 42, 62) : BV:8
64 : bvadd(1, 38, 39) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 36) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 44, 70) : BV:8
72 : ite(65, 42, 71) : BV:8
73 : bvadd(38, 39) : BV:32
74 : eq(73, 5) : BOOL
75 : eq(73, 36) : BOOL
76 : eq(73, 1) : BOOL
77 : eq(73, 47) : BOOL
78 : ite(77, 49, 50) : BV:8
79 : ite(76, 46, 78) : BV:8
80 : ite(75, 44, 79) : BV:8
81 : ite(74, 42, 80) : BV:8
82 : bvconcat(54, 63, 72, 81) : BV:32
83 : ite(23, 5, 82) : BV:32
84 : ite(35, 82, 83) : BV:32
85 : ite(23, 5, 84) : BV:32
86 : lambda(21, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(20, 86) : MAP[BV:32 -> BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17980 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17981 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : bvule(3, 19) : BOOL
23 : bvule(19, 5) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(8, 19) : BOOL
26 : bvule(19, 8) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 8, 8) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(2, 30) : BOOL
32 : ite(31, 2, 16) : BOOL
33 : and(2, 32) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : 4 { 0x4 +1.47e129 } : BV:32
36 : bvmul(35, 19) : BV:32
37 : 1836939141 { 0x6d7d7785 +1.98020994e91 } : BV:32
38 : bvadd(34, 36, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : 133 { 0x85 -123 } : BV:8
41 : eq(38, 34) : BOOL
42 : 109 { 0x6d } : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : eq(38, 43) : BOOL
45 : 119 { 0x77 } : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : eq(38, 46) : BOOL
48 : 125 { 0x7d } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : bvadd(46, 36, 37) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 34) : BOOL
57 : eq(54, 43) : BOOL
58 : eq(54, 46) : BOOL
59 : ite(58, 48, 49) : BV:8
60 : ite(57, 45, 59) : BV:8
61 : ite(56, 42, 60) : BV:8
62 : ite(55, 40, 61) : BV:8
63 : bvadd(43, 36, 37) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 34) : BOOL
66 : eq(63, 43) : BOOL
67 : eq(63, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : bvadd(36, 37) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 34) : BOOL
75 : eq(72, 43) : BOOL
76 : eq(72, 46) : BOOL
77 : ite(76, 48, 49) : BV:8
78 : ite(75, 45, 77) : BV:8
79 : ite(74, 42, 78) : BV:8
80 : ite(73, 40, 79) : BV:8
81 : bvconcat(53, 62, 71, 80) : BV:32
82 : ite(21, 3, 81) : BV:32
83 : ite(33, 81, 82) : BV:32
84 : ite(21, 3, 83) : BV:32
85 : lambda(19, 84) : FUNCTION[BV:32 -> BV:32]
86 : map(18, 85) : MAP[BV:32 -> BV:32]
87 : sym_const(86) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17982 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17983 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : bvule(3, 19) : BOOL
23 : bvule(19, 5) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(8, 19) : BOOL
26 : bvule(19, 8) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 8, 8) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(2, 30) : BOOL
32 : ite(31, 2, 16) : BOOL
33 : and(2, 32) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : 4 { 0x4 +1.47e129 } : BV:32
36 : bvmul(35, 19) : BV:32
37 : 1836939141 { 0x6d7d7785 +1.98020994e91 } : BV:32
38 : bvadd(34, 36, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : 133 { 0x85 -123 } : BV:8
41 : eq(38, 34) : BOOL
42 : 109 { 0x6d } : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : eq(38, 43) : BOOL
45 : 119 { 0x77 } : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : eq(38, 46) : BOOL
48 : 125 { 0x7d } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : bvadd(46, 36, 37) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 34) : BOOL
57 : eq(54, 43) : BOOL
58 : eq(54, 46) : BOOL
59 : ite(58, 48, 49) : BV:8
60 : ite(57, 45, 59) : BV:8
61 : ite(56, 42, 60) : BV:8
62 : ite(55, 40, 61) : BV:8
63 : bvadd(43, 36, 37) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 34) : BOOL
66 : eq(63, 43) : BOOL
67 : eq(63, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : bvadd(36, 37) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 34) : BOOL
75 : eq(72, 43) : BOOL
76 : eq(72, 46) : BOOL
77 : ite(76, 48, 49) : BV:8
78 : ite(75, 45, 77) : BV:8
79 : ite(74, 42, 78) : BV:8
80 : ite(73, 40, 79) : BV:8
81 : bvconcat(53, 62, 71, 80) : BV:32
82 : ite(21, 3, 81) : BV:32
83 : ite(33, 81, 82) : BV:32
84 : ite(21, 3, 83) : BV:32
85 : lambda(19, 84) : FUNCTION[BV:32 -> BV:32]
86 : map(18, 85) : MAP[BV:32 -> BV:32]
87 : sym_const(86) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17906 : BV:32
2 : Lambda17907 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 16385 { 0x4001 +1.195324e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(14, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 14, 14) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17911 : BV:32
2 : Lambda17912 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 16383 { 0x3fff +1.195300e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 133 { 0x85 -123 } : BV:8
49 : eq(46, 42) : BOOL
50 : 109 { 0x6d } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 119 { 0x77 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 125 { 0x7d } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 42) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 42) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : eq(45, 3) : BOOL
81 : eq(45, 42) : BOOL
82 : eq(45, 51) : BOOL
83 : eq(45, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 53, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : ite(80, 48, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(42, 44, 88) : BV:32
90 : eq(89, 3) : BOOL
91 : eq(89, 42) : BOOL
92 : eq(89, 51) : BOOL
93 : eq(89, 54) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 53, 94) : BV:8
96 : ite(91, 50, 95) : BV:8
97 : ite(90, 48, 96) : BV:8
98 : bvadd(54, 44, 88) : BV:32
99 : eq(98, 3) : BOOL
100 : eq(98, 42) : BOOL
101 : eq(98, 51) : BOOL
102 : eq(98, 54) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 53, 103) : BV:8
105 : ite(100, 50, 104) : BV:8
106 : ite(99, 48, 105) : BV:8
107 : bvadd(51, 44, 88) : BV:32
108 : eq(107, 3) : BOOL
109 : eq(107, 42) : BOOL
110 : eq(107, 51) : BOOL
111 : eq(107, 54) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 53, 112) : BV:8
114 : ite(109, 50, 113) : BV:8
115 : ite(108, 48, 114) : BV:8
116 : bvadd(44, 88) : BV:32
117 : eq(116, 3) : BOOL
118 : eq(116, 42) : BOOL
119 : eq(116, 51) : BOOL
120 : eq(116, 54) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 53, 121) : BV:8
123 : ite(118, 50, 122) : BV:8
124 : ite(117, 48, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(6, 3, 125) : BV:32
127 : ite(41, 125, 126) : BV:32
128 : ite(6, 3, 127) : BV:32
129 : lambda(1, 2, 128) : FUNCTION[BV:32,BV:32 -> BV:32]
130 : sym_const(129) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17915 : BV:32
2 : Lambda17916 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 16385 { 0x4001 +1.195324e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(14, 2) : BOOL
26 : bvule(2, 14) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 14, 14) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17913 : BV:32
2 : Lambda17914 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 133 { 0x85 -123 } : BV:8
14 : eq(11, 7) : BOOL
15 : 109 { 0x6d } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 119 { 0x77 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 125 { 0x7d } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3068595988 { 0xb6e70f14 -1226371308 -1.80514764e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3068595991 { 0xb6e70f17 -1226371305 -1.80514800e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 487388732 { 0x1d0cf63c +1.10126447e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 487388735 { 0x1d0cf63f +1.10126483e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3740935960 { 0xdefa2718 -554031336 -1.95431804e62 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3740935963 { 0xdefa271b -554031333 -1.95431840e62 } : BV:32
=counter_example.random_seed
1888976556
=counter_example_end
=global nodece 24 num_edges_traversed 1
=global nodece 24 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce10114.num_edges_traversed0
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce10114 33c5d6131587abd2d69256b0e3694585
=input.spec-%var-x-1
1 : Lambda24348 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24351 : BV:32
18 : Lambda24349 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24350 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1320485123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1320485124; 1320485127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1320485128; 3765986143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3765986144; 3765986147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3765986148; 3893432175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3893432176; 3893432179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3893432180; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3893432176 { 0xe8110f70 -401535120 -1.13328361e81 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3765986144 { 0xe0786360 -528981152 -1.94053268e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1320485124 { 0x4eb50104 +1.41409349e30 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24359 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24362 : BV:32
18 : Lambda24360 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24361 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24352 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24353 : BV:32
7 : 1705048020 { 0x65a0f7d4 +1.25756311e76 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24365 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24366 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1320485124 { 0x4eb50104 +1.41409349e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1320485127 { 0x4eb50107 +1.41409385e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3893432176 { 0xe8110f70 -401535120 -1.13328361e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3893432179 { 0xe8110f73 -401535117 -1.13328397e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3765986144 { 0xe0786360 -528981152 -1.94053268e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3765986147 { 0xe0786363 -528981149 -1.94053304e65 } : BV:32
=counter_example.random_seed
1670138019
=counter_example_end
=global nodece 25 num_edges_traversed 0
=global nodece 25 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 26
=global nodece 26 nodece z3v487.ce10115.num_edges_traversed0
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce10115 d2720a2f82e5578808bd5a6156389f5
=input.spec-%var-x-1
1 : Lambda24384 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24387 : BV:32
18 : Lambda24385 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24386 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 4194303 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194304; 4194307 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4194308; 301991431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 301991432; 301991435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 301991436; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 301991432 { 0x12000608 +1.18405e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24395 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24398 : BV:32
18 : Lambda24396 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24397 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24388 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24389 : BV:32
7 : 451681388 { 0x1aec1c6c +1.84461736e182 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24401 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24402 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4194307 { 0x400003 +1.50000035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 301991432 { 0x12000608 +1.18405e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 301991435 { 0x1200060b +1.18441e165 } : BV:32
=counter_example.random_seed
1101661350
=counter_example_end
=global nodece 26 num_edges_traversed 0
=global nodece 26 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce10227.num_edges_traversed4
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce10227 78ae52d3cee9add4f89bf3584b7b4a8
=input.spec-%var-x-1
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 63139 ] -> 0, [ 63140; 63140 ] -> 8, [ 63141; 97145 ] -> 0, [ 97146; 97146 ] -> 64, [ 97147; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 6147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 6148; 6151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 6152; 63139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 63140; 63143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 63144; 97143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 97144; 97147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 97148; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24613 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24614 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24615 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24616 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda24617 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24618 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda567 : BV:32
2 : Lambda568 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda569 : BV:32
2 : Lambda570 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 97147 { 0x17b7b +1.1158082e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 63143 { 0xf6a7 +1.752723e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 6151 { 0x1807 +1.73325e129 } : BV:32
=counter_example.random_seed
1609363582
=counter_example_end
=global nodece 27 num_edges_traversed 4
=global nodece 27 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce10262.num_edges_traversed6
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce10262 c4901455ae266cba33685b461876a572
=input.spec-%var-x-1
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 63139 ] -> 0, [ 63140; 63140 ] -> 8, [ 63141; 97145 ] -> 0, [ 97146; 97146 ] -> 64, [ 97147; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 6147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 6148; 6151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 6152; 63139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 63140; 63143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 63144; 97143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 97144; 97147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 97148; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24623 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24624 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 64 { 0x40 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 9, 10) : BV:32
23 : eq(22, 12) : BOOL
24 : eq(22, 15) : BOOL
25 : ite(24, 17, 18) : BV:8
26 : ite(23, 14, 25) : BV:8
27 : bvadd(1, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : ite(29, 17, 18) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(9, 10) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(20, 26, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24625 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24626 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda24627 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24628 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 8 { 0x8 } : BV:8
13 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
14 : eq(9, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : eq(20, 13) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : ite(21, 12, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 7, 8) : BV:32
27 : eq(26, 10) : BOOL
28 : eq(26, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : ite(27, 12, 29) : BV:8
31 : bvadd(7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : ite(33, 15, 16) : BV:8
35 : ite(32, 12, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(4, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(3, 37) : MAP[BV:32 -> BV:32]
39 : sym_const(38) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda567 : BV:32
2 : Lambda568 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda569 : BV:32
2 : Lambda570 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 97147 { 0x17b7b +1.1158082e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 63143 { 0xf6a7 +1.752723e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 6151 { 0x1807 +1.73325e129 } : BV:32
=counter_example.random_seed
1609363582
=counter_example_end
=global nodece 28 num_edges_traversed 6
=global nodece 28 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce10297.num_edges_traversed7
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce10297 a699b6a74893fc21c79a874252a6b36
=input.spec-%var-x-1
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 63139 ] -> 0, [ 63140; 63140 ] -> 8, [ 63141; 97145 ] -> 0, [ 97146; 97146 ] -> 64, [ 97147; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 6147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 6148; 6151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 6152; 63139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 63140; 63143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 63144; 97143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 97144; 97147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 97148; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194303 { 0x3fffff +1.49999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda587 : BV:32
18 : Lambda585 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda586 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvadd(21, 24, 25) : BV:32
27 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 64 { 0x40 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 24, 25) : BV:32
38 : eq(37, 27) : BOOL
39 : eq(37, 30) : BOOL
40 : ite(39, 32, 33) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 24, 25) : BV:32
44 : eq(43, 27) : BOOL
45 : eq(43, 30) : BOOL
46 : ite(45, 32, 33) : BV:8
47 : ite(44, 29, 46) : BV:8
48 : bvadd(24, 25) : BV:32
49 : eq(48, 27) : BOOL
50 : eq(48, 30) : BOOL
51 : ite(50, 32, 33) : BV:8
52 : ite(49, 29, 51) : BV:8
53 : bvconcat(35, 41, 47, 52) : BV:32
54 : bvadd(21, 23, 53) : BV:32
55 : eq(54, 27) : BOOL
56 : eq(54, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : bvadd(36, 23, 53) : BV:32
60 : eq(59, 27) : BOOL
61 : eq(59, 30) : BOOL
62 : ite(61, 32, 33) : BV:8
63 : ite(60, 29, 62) : BV:8
64 : bvadd(42, 23, 53) : BV:32
65 : eq(64, 27) : BOOL
66 : eq(64, 30) : BOOL
67 : ite(66, 32, 33) : BV:8
68 : ite(65, 29, 67) : BV:8
69 : bvadd(23, 53) : BV:32
70 : eq(69, 27) : BOOL
71 : eq(69, 30) : BOOL
72 : ite(71, 32, 33) : BV:8
73 : ite(70, 29, 72) : BV:8
74 : bvconcat(58, 63, 68, 73) : BV:32
75 : lambda(20, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(19, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4194303 ] -> true, [ 4194304; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda567 : BV:32
2 : Lambda568 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda569 : BV:32
2 : Lambda570 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 97146 { 0x17b7a +1.1158070e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 312677356 { 0x12a313ec +1.27404546e166 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 97144 { 0x17b78 +1.1158046e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 97147 { 0x17b7b +1.1158082e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 63140 { 0xf6a4 +1.752687e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 63143 { 0xf6a7 +1.752723e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 6148 { 0x1804 +1.73289e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 6151 { 0x1807 +1.73325e129 } : BV:32
=counter_example.random_seed
1609363582
=counter_example_end
=global nodece 29 num_edges_traversed 7
=global nodece 29 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3.ce10217.num_edges_traversed3
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(epsilon)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce10217 b210b73acc47e2bfa1458241fbb9dec6
=input.spec-%var-x-1
1 : Lambda640 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda643 : BV:32
18 : Lambda641 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda642 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
27 : eq(25, 26) : BOOL
28 : 64 { 0x40 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2065301492 ] -> 0, [ 2065301493; 2065301493 ] -> 64, [ 2065301494; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 950984443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 950984444; 950984447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 950984448; 2065301491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2065301492; 2065301495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2065301496; 2694514679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2694514680; 2694514683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2694514684; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 950984444 { 0x38aedefc +1.36617994e242 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2694514680 { 0xa09b07f8 -1600452616 -1.21118068e194 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2065301492 { 0x7b19fff4 +1.20312356e119 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda640 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda643 : BV:32
18 : Lambda641 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda642 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
27 : eq(25, 26) : BOOL
28 : 64 { 0x40 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda612 : BV:32
2 : Lambda613 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda614 : BV:32
2 : Lambda615 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2065301493 { 0x7b19fff5 +1.20312368e119 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1350824237 { 0x5083f12d +1.3079760e34 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2065301492 { 0x7b19fff4 +1.20312356e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2065301495 { 0x7b19fff7 +1.20312392e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 950984444 { 0x38aedefc +1.36617994e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 950984447 { 0x38aedeff +1.36618030e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2694514680 { 0xa09b07f8 -1600452616 -1.21118068e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2694514683 { 0xa09b07fb -1600452613 -1.21118104e194 } : BV:32
=counter_example.random_seed
4113372681
=counter_example_end
=global nodece 30 num_edges_traversed 3
=global nodece 30 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce10207.num_edges_traversed3
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(epsilon)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce10207 551fea4cfb62786b404a93c2953fe419
=input.spec-%var-x-1
1 : Lambda720 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : Lambda721 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda722 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 11014203 ] -> 0, [ 11014204; 11014204 ] -> 8, [ 11014205; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 41003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 41004; 41007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 41008; 11014203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 11014204; 11014207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 11014208; 67649655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67649656; 67649659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67649660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67649656 { 0x4084078 +1.6446743e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 41004 { 0xa02c +1.488805e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda720 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : Lambda721 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda722 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
27 : eq(25, 26) : BOOL
28 : 8 { 0x8 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda690 : BV:32
2 : Lambda691 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda692 : BV:32
2 : Lambda693 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 879024595 { 0x3464d9d3 +1.78789746e233 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 11014204 { 0xa8103c +1.31299543e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 11014207 { 0xa8103f +1.31299579e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67649656 { 0x4084078 +1.6446743e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67649659 { 0x408407b +1.6446778e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 41004 { 0xa02c +1.488805e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 41007 { 0xa02f +1.488841e129 } : BV:32
=counter_example.random_seed
1171462168
=counter_example_end
=global nodece 31 num_edges_traversed 3
=global nodece 31 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3v487.ce10197.num_edges_traversed3
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce10197 d75c903976f258a82eb1e9034cda7bd
=input.spec-%var-x-1
1 : Lambda787 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda790 : BV:32
17 : Lambda788 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda789 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 264241155 ] -> 0, [ 264241156; 264241156 ] -> 1, [ 264241157; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048580; 63996159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 63996160; 63996163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 63996164; 264241155 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 264241156; 264241159 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 264241160; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 63996160 { 0x3d08100 +1.62893676e136 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda787 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda790 : BV:32
17 : Lambda788 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda789 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
26 : eq(24, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 2) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : bvadd(7, 23, 2) : BV:32
35 : eq(34, 25) : BOOL
36 : ite(35, 27, 28) : BV:8
37 : bvadd(23, 2) : BV:32
38 : eq(37, 25) : BOOL
39 : ite(38, 27, 28) : BV:8
40 : bvconcat(29, 33, 36, 39) : BV:32
41 : bvadd(20, 22, 40) : BV:32
42 : eq(41, 25) : BOOL
43 : ite(42, 27, 28) : BV:8
44 : bvadd(30, 22, 40) : BV:32
45 : eq(44, 25) : BOOL
46 : ite(45, 27, 28) : BV:8
47 : bvadd(7, 22, 40) : BV:32
48 : eq(47, 25) : BOOL
49 : ite(48, 27, 28) : BV:8
50 : bvadd(22, 40) : BV:32
51 : eq(50, 25) : BOOL
52 : ite(51, 27, 28) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(19, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(18, 54) : MAP[BV:32 -> BV:32]
56 : lambda(16, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(15, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda770 : BV:32
2 : Lambda771 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda772 : BV:32
2 : Lambda773 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 592572472 { 0x2351f038 +1.64014339e199 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 264241156 { 0xfc00004 +1.50000047e160 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 264241159 { 0xfc00007 +1.50000083e160 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048579 { 0x100003 +1.12500035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 63996160 { 0x3d08100 +1.62893676e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 63996163 { 0x3d08103 +1.62893712e136 } : BV:32
=counter_example.random_seed
4231580868
=counter_example_end
=global nodece 32 num_edges_traversed 3
=global nodece 32 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 33
=global nodece 33 nodece z3v487.ce10187.num_edges_traversed3
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(epsilon)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce10187 4029255f496e2d42beeaaf3944bde23
=input.spec-%var-x-1
1 : Lambda855 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda858 : BV:32
17 : Lambda856 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda857 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 3531 { 0xdcb +1.42092e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3530 { 0xdca +1.42080e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 3528 { 0xdc8 +1.42057e129 } : BV:32
31 : eq(24, 30) : BOOL
32 : 3529 { 0xdc9 +1.42068e129 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3527 ] -> 0, [ 3528; 3531 ] -> 255, [ 3532; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3528; 3531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3532; 156179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 156180; 156183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 156184; 93416975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 93416976; 93416979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 93416980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 93416976 { 0x5916e10 +1.13617134e140 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 156180 { 0x26214 +1.1861810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3528 { 0xdc8 +1.42057e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda855 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda858 : BV:32
17 : Lambda856 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda857 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 3531 { 0xdcb +1.42092e129 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3530 { 0xdca +1.42080e129 } : BV:32
29 : eq(24, 28) : BOOL
30 : 3528 { 0xdc8 +1.42057e129 } : BV:32
31 : eq(24, 30) : BOOL
32 : 3529 { 0xdc9 +1.42068e129 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda825 : BV:32
2 : Lambda826 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3531 { 0xdcb +1.42092e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3530 { 0xdca +1.42080e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3528 { 0xdc8 +1.42057e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3529 { 0xdc9 +1.42068e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda827 : BV:32
2 : Lambda828 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3531 { 0xdcb +1.42092e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3530 { 0xdca +1.42080e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3528 { 0xdc8 +1.42057e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3529 { 0xdc9 +1.42068e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2093843493 { 0x7ccd8425 +1.60559523e122 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3528 { 0xdc8 +1.42057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3531 { 0xdcb +1.42092e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 93416976 { 0x5916e10 +1.13617134e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 93416979 { 0x5916e13 +1.13617169e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 156180 { 0x26214 +1.1861810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 156183 { 0x26217 +1.1861846e129 } : BV:32
=counter_example.random_seed
2015713600
=counter_example_end
=global nodece 33 num_edges_traversed 3
=global nodece 33 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce10177.num_edges_traversed3
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(epsilon)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce10177 89ecf824f9565f2bc703faae098be6
=input.spec-%var-x-1
1 : Lambda935 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda938 : BV:32
18 : Lambda936 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda937 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3697549562 ] -> 0, [ 3697549563; 3697549563 ] -> 128, [ 3697549564; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 745738683 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 745738684; 745738687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 745738688; 2885763371 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2885763372; 2885763375 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2885763376; 3697549559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3697549560; 3697549563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3697549564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 745738684 { 0x2c7311bc +1.89897871e217 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2885763372 { 0xac01412c -1409203924 -1.980138e217 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3697549560 { 0xdc6420f8 -597417736 -1.78225612e57 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda935 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda938 : BV:32
18 : Lambda936 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda937 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda905 : BV:32
2 : Lambda906 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda907 : BV:32
2 : Lambda908 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 511303796 { 0x1e79e074 +1.95216226e189 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3697549560 { 0xdc6420f8 -597417736 -1.78225612e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3697549563 { 0xdc6420fb -597417733 -1.78225648e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 745738684 { 0x2c7311bc +1.89897871e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 745738687 { 0x2c7311bf +1.89897906e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2885763372 { 0xac01412c -1409203924 -1.980138e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2885763375 { 0xac01412f -1409203921 -1.980174e217 } : BV:32
=counter_example.random_seed
2490653511
=counter_example_end
=global nodece 34 num_edges_traversed 3
=global nodece 34 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce10155.num_edges_traversed2
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(epsilon)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce10155 abde852865e5a6668dec6bc2d78e5
=input.spec-%var-x-1
1 : Lambda17689 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17692 : BV:32
18 : Lambda17690 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17691 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 47 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 48; 51 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 52; 55 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 56; 59 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 60; 524291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524292; 524295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 524296; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 48 { 0x30 +1.572e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17698 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131071 { 0x1ffff +1.1562488e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131072 { 0x20000 +1.1562500e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17701 : BV:32
18 : Lambda17699 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17700 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1961559271 { 0x74eb04e7 +1.83608710e106 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 131071 ] -> true, [ 131072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1118215711 { 0x42a69e1f +1.30170047e6 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 48 { 0x30 +1.572e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 51 { 0x33 +1.607e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 56 { 0x38 +1.667e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 59 { 0x3b +1.703e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 524292 { 0x80004 +1.6250047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 524295 { 0x80007 +1.6250083e129 } : BV:32
=counter_example.random_seed
2690217024
=counter_example_end
=global nodece 35 num_edges_traversed 2
=global nodece 35 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 36
=global nodece 36 nodece z3.ce10137.num_edges_traversed1
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3.ce10137 9bb6559084669bfc1315691b94e7a1cd
=input.spec-%var-x-1
1 : Lambda24348 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24351 : BV:32
18 : Lambda24349 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24350 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1320485123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1320485124; 1320485127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1320485128; 3765986143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3765986144; 3765986147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3765986148; 3893432175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3893432176; 3893432179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3893432180; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3893432176 { 0xe8110f70 -401535120 -1.13328361e81 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3765986144 { 0xe0786360 -528981152 -1.94053268e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1320485124 { 0x4eb50104 +1.41409349e30 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24359 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24362 : BV:32
18 : Lambda24360 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24361 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 719884169 { 0x2ae88f89 +1.81688034e214 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 518321699 { 0x1ee4f623 +1.78876149e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1320485124 { 0x4eb50104 +1.41409349e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1320485127 { 0x4eb50107 +1.41409385e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3893432176 { 0xe8110f70 -401535120 -1.13328361e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3893432179 { 0xe8110f73 -401535117 -1.13328397e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3765986144 { 0xe0786360 -528981152 -1.94053268e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3765986147 { 0xe0786363 -528981149 -1.94053304e65 } : BV:32
=counter_example.random_seed
2724826891
=counter_example_end
=global nodece 36 num_edges_traversed 1
=global nodece 36 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 37
=global nodece 37 nodece z3.ce10476.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3.ce10476 4919b7ef4e41de5add3cf5a2ac02ae5
=input.spec-%var-x-1
1 : Lambda24972 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24975 : BV:32
18 : Lambda24973 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24974 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 317316911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 317316912; 317316915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 317316916; 1159911895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1159911896; 1159911899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1159911900; 1717698355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1717698356; 1717698359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1717698360; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1717698356 { 0x6661ff34 +1.76560068e77 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 317316912 { 0x12e9df30 +1.82712364e166 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1159911896 { 0x4522d9d8 +1.27227306e11 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24983 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24986 : BV:32
18 : Lambda24984 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24985 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24976 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24977 : BV:32
7 : 1404519409 { 0x53b743f1 +1.43176090e40 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1356177874 { 0x50d5a1d2 +1.66900086e34 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24989 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24990 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1874738221 { 0x6fbe3c2d +1.48621141e96 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1159911896 { 0x4522d9d8 +1.27227306e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1159911899 { 0x4522d9db +1.27227342e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1717698356 { 0x6661ff34 +1.76560068e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1717698359 { 0x6661ff37 +1.76560103e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 317316912 { 0x12e9df30 +1.82712364e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 317316915 { 0x12e9df33 +1.82712399e166 } : BV:32
=counter_example.random_seed
698731509
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3v487.ce10520.num_edges_traversed1
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3v487.ce10520 95ecd04a9baa785cb8e8bfa3287f225c
=input.spec-%var-x-1
1 : Lambda25256 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25259 : BV:32
18 : Lambda25257 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25258 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 8223055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8223056; 8223059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8223060; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8223056 { 0x7d7950 +1.98026466e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25268 : BV:32
18 : Lambda25266 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25267 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25293 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25294 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25295 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25296 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25297 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25298 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8223056 { 0x7d7950 +1.98026466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8223059 { 0x7d7953 +1.98026502e129 } : BV:32
=counter_example.random_seed
2395290456
=counter_example_end
=global nodece 38 num_edges_traversed 1
=global nodece 38 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce10553.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce10553 1eaecddefcf1f7e6be29ef62524a6
=input.spec-%var-x-1
1 : Lambda25256 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25259 : BV:32
18 : Lambda25257 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25258 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 8223055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8223056; 8223059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8223060; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8223056 { 0x7d7950 +1.98026466e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25268 : BV:32
18 : Lambda25266 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25267 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25303 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25304 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1020543854 { 0x3cd4436e +1.65830779e250 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25305 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25306 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25307 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25308 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 33067524 { 0x1f89204 +1.94195604e132 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8223056 { 0x7d7950 +1.98026466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8223059 { 0x7d7953 +1.98026502e129 } : BV:32
=counter_example.random_seed
3053568672
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 40
=global nodece 40 nodece z3v487.ce10588.num_edges_traversed4
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3v487.ce10588 191b65f714cd763c5e7b5f6e1d0db4b
=input.spec-%var-x-1
1 : Lambda25256 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25259 : BV:32
18 : Lambda25257 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25258 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 8223055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8223056; 8223059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8223060; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8223056 { 0x7d7950 +1.98026466e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 511 { 0x1ff +1.6091e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 512 { 0x200 +1.6103e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25268 : BV:32
18 : Lambda25266 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25267 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1020543855 { 0x3cd4436f +1.65830790e250 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 511 ] -> true, [ 512; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 33067525 { 0x1f89205 +1.94195616e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8223056 { 0x7d7950 +1.98026466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8223059 { 0x7d7953 +1.98026502e129 } : BV:32
=counter_example.random_seed
3053568672
=counter_example_end
=global nodece 40 num_edges_traversed 4
=global nodece 40 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce10614.num_edges_traversed1
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce10614 63ee98147516f2e968df39bafa8e902e
=input.spec-%var-x-1
1 : Lambda25694 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25697 : BV:32
18 : Lambda25695 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25696 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 20; 1093879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1093880; 1093883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1093884; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1093880 { 0x10b0f8 +1.13040065e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25705 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25708 : BV:32
18 : Lambda25706 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25707 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25698 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25699 : BV:32
7 : 1322309186 { 0x4ed0d642 +1.63153862e30 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1016100486 { 0x3c907686 +1.12861704e250 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25711 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25712 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 898354594 { 0x358bcda2 +1.9221291e236 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1093880 { 0x10b0f8 +1.13040065e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1093883 { 0x10b0fb +1.13040101e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=counter_example.random_seed
3787485679
=counter_example_end
=global nodece 41 num_edges_traversed 1
=global nodece 41 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce10677.num_edges_traversed1
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce10677 ac7cbab0f22237d5c7e90dec3de051
=input.spec-%var-x-1
1 : Lambda25822 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25825 : BV:32
18 : Lambda25823 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25824 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131076; 1048515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048516; 1048519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1048520; 68231167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68231168; 68231171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 68231172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 68231168 { 0x4112000 +1.13378906e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1048516 { 0xfffc4 +1.12499284e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25833 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25836 : BV:32
18 : Lambda25834 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25835 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25826 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25827 : BV:32
7 : 2112551161 { 0x7deaf8f9 +1.83572304e124 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1262262963 { 0x4b3c9ab3 +1.47347104e23 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25839 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25840 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 583748694 { 0x22cb4c56 +1.58826708e198 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1048516 { 0xfffc4 +1.12499284e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1048519 { 0xfffc7 +1.12499320e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 68231168 { 0x4112000 +1.13378906e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 68231171 { 0x4112003 +1.13378942e137 } : BV:32
=counter_example.random_seed
2111924021
=counter_example_end
=global nodece 42 num_edges_traversed 1
=global nodece 42 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 43
=global nodece 43 nodece z3v487.ce10707.num_edges_traversed2
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3v487.ce10707 84f917e14199349d16d4752ca577b31
=input.spec-%var-x-1
1 : Lambda25822 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25825 : BV:32
18 : Lambda25823 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25824 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131076; 1048515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048516; 1048519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1048520; 68231167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68231168; 68231171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 68231172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 68231168 { 0x4112000 +1.13378906e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1048516 { 0xfffc4 +1.12499284e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25833 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25836 : BV:32
18 : Lambda25834 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25835 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25881 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25882 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1262262963 { 0x4b3c9ab3 +1.47347104e23 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25883 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25884 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25885 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25886 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 583748694 { 0x22cb4c56 +1.58826708e198 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1048516 { 0xfffc4 +1.12499284e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1048519 { 0xfffc7 +1.12499320e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 68231168 { 0x4112000 +1.13378906e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 68231171 { 0x4112003 +1.13378942e137 } : BV:32
=counter_example.random_seed
2111924021
=counter_example_end
=global nodece 43 num_edges_traversed 2
=global nodece 43 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3v487.ce10730.num_edges_traversed3
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce10730 c0319848ef0f8eda5fd681823524f
=input.spec-%var-x-1
1 : Lambda25822 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25825 : BV:32
18 : Lambda25823 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25824 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 131076; 1048515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048516; 1048519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1048520; 68231167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68231168; 68231171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 68231172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 68231168 { 0x4112000 +1.13378906e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1048516 { 0xfffc4 +1.12499284e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25833 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25836 : BV:32
18 : Lambda25834 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25835 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1262262964 { 0x4b3c9ab4 +1.47347116e23 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 583748695 { 0x22cb4c57 +1.58826720e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1048516 { 0xfffc4 +1.12499284e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1048519 { 0xfffc7 +1.12499320e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 68231168 { 0x4112000 +1.13378906e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 68231171 { 0x4112003 +1.13378942e137 } : BV:32
=counter_example.random_seed
2111924021
=counter_example_end
=global nodece 44 num_edges_traversed 3
=global nodece 44 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 45
=global nodece 45 nodece z3v487.ce10775.num_edges_traversed1
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3v487.ce10775 539abdb7d63b795b35fe51a5ac7882c
=input.spec-%var-x-1
1 : Lambda26118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2951475105 { 0xafebefa1 -1343492191 -1.84325039e224 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26121 : BV:32
18 : Lambda26119 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26120 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 132; 3233795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3233796; 3233799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3233800; 68728831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68728832; 68728835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68728836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68728832 { 0x418b800 +1.19311523e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3233796 { 0x315804 +1.38549852e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26127 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2951475105 { 0xafebefa1 -1343492191 -1.84325039e224 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26130 : BV:32
18 : Lambda26128 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26129 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26155 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26156 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26157 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26158 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda26159 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26160 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2951475105 ] -> true, [ 2951475106; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2951475105 ] -> true, [ 2951475106; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68728832 { 0x418b800 +1.19311523e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68728835 { 0x418b803 +1.19311559e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3233796 { 0x315804 +1.38549852e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3233799 { 0x315807 +1.38549888e129 } : BV:32
=counter_example.random_seed
4083189219
=counter_example_end
=global nodece 45 num_edges_traversed 1
=global nodece 45 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3v487.ce10808.num_edges_traversed3
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3v487.ce10808 e316b33c92f8a623e5ba7246edefc3e2
=input.spec-%var-x-1
1 : Lambda26118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2951475105 { 0xafebefa1 -1343492191 -1.84325039e224 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26121 : BV:32
18 : Lambda26119 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26120 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 132; 3233795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3233796; 3233799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3233800; 68728831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68728832; 68728835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68728836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68728832 { 0x418b800 +1.19311523e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3233796 { 0x315804 +1.38549852e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26127 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2951475105 { 0xafebefa1 -1343492191 -1.84325039e224 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26130 : BV:32
18 : Lambda26128 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26129 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26165 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26166 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 48810286 { 0x2e8c92e +1.81863951e134 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26167 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26168 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda26169 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26170 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2951475105 ] -> true, [ 2951475106; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2951475105 ] -> true, [ 2951475106; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 392858733 { 0x176a8c6d +1.83241045e175 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68728832 { 0x418b800 +1.19311523e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68728835 { 0x418b803 +1.19311559e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3233796 { 0x315804 +1.38549852e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3233799 { 0x315807 +1.38549888e129 } : BV:32
=counter_example.random_seed
2364802123
=counter_example_end
=global nodece 46 num_edges_traversed 3
=global nodece 46 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3v487.ce10843.num_edges_traversed4
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce10843 a8173988f831f86bc3be301233a2bdfb
=input.spec-%var-x-1
1 : Lambda26118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2951475105 { 0xafebefa1 -1343492191 -1.84325039e224 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26121 : BV:32
18 : Lambda26119 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26120 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 132; 3233795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3233796; 3233799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3233800; 68728831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68728832; 68728835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68728836; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68728832 { 0x418b800 +1.19311523e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3233796 { 0x315804 +1.38549852e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26127 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2951475105 { 0xafebefa1 -1343492191 -1.84325039e224 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2951475106 { 0xafebefa2 -1343492190 -1.84325051e224 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26130 : BV:32
18 : Lambda26128 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26129 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 48810287 { 0x2e8c92f +1.81863963e134 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2951475105 ] -> true, [ 2951475106; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2951475105 ] -> true, [ 2951475106; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 392858734 { 0x176a8c6e +1.83241057e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68728832 { 0x418b800 +1.19311523e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68728835 { 0x418b803 +1.19311559e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3233796 { 0x315804 +1.38549852e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3233799 { 0x315807 +1.38549888e129 } : BV:32
=counter_example.random_seed
2364802123
=counter_example_end
=global nodece 47 num_edges_traversed 4
=global nodece 47 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 48
=global nodece 48 nodece z3v487.ce10869.num_edges_traversed1
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3v487.ce10869 14f16cf92fdfd3d0f1907dc6f9c826
=input.spec-%var-x-1
1 : Lambda26436 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3288334335 { 0xc3ffffff -1006632961 -1.99999988e8 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3288334336 { 0xc4000000 -1006632960 -1.0e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26439 : BV:32
18 : Lambda26437 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26438 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3005218816 { 0xb3200000 -1289748480 -1.25000000e231 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3005218816 { 0xb3200000 -1289748480 -1.25000000e231 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 3288334336 { 0xc4000000 -1006632960 -1.0e9 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131200; 131203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 131204; 525315 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 525316; 525319 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 525320; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 525316 { 0x80404 +1.6262254e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 131200 { 0x20080 +1.1564025e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26447 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3288334335 { 0xc3ffffff -1006632961 -1.99999988e8 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3288334336 { 0xc4000000 -1006632960 -1.0e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26450 : BV:32
18 : Lambda26448 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26449 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26440 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26441 : BV:32
7 : 792084014 { 0x2f363e2e +1.42377257e223 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 536311343 { 0x1ff7762f +1.93329417e192 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26453 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26454 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3005218815 { 0xb31fffff -1289748481 -1.24999988e231 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 3288334335 ] -> true, [ 3288334336; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3288334335 ] -> true, [ 3288334336; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3005218816 { 0xb3200000 -1289748480 -1.25000000e231 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1089787223 { 0x40f4d557 +1.91276061e2 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 3005218816 { 0xb3200000 -1289748480 -1.25000000e231 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 3005218816 { 0xb3200000 -1289748480 -1.25000000e231 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 131200 { 0x20080 +1.1564025e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 131203 { 0x20083 +1.1564061e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 525316 { 0x80404 +1.6262254e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 525319 { 0x80407 +1.6262290e129 } : BV:32
=counter_example.random_seed
1415628757
=counter_example_end
=global nodece 48 num_edges_traversed 1
=global nodece 48 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 49
=global nodece 49 nodece z3.ce10932.num_edges_traversed1
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce10932 41356caca5ff9a599ce82ec265dae73
=input.spec-%var-x-1
1 : Lambda26652 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26655 : BV:32
17 : Lambda26653 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26654 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 184 { 0xb8 -72 } : BV:8
34 : 245 { 0xf5 -11 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 245, [ 4294967288; 4294967288 ] -> 184, [ 4294967289; 4294967289 ] -> 251, [ 4294967290; 4294967290 ] -> 255, [ 4294967291; 4294967295 ] -> 245, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193653831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193653832; 193653835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 193653836; 3932339143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3932339144; 3932339147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3932339148; 4049604299 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4049604300; 4049604303 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4049604304; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 193653832 { 0xb8aec48 +1.8533573e152 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3932339144 { 0xea62bbc8 -362628152 -1.77135562e85 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4049604300 { 0xf1600ecc -245362996 -1.75045156e99 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26659 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26662 : BV:32
17 : Lambda26660 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26661 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 184 { 0xb8 -72 } : BV:8
34 : 245 { 0xf5 -11 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26691 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26692 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4127194040 { 0xf5fffbb8 -167773256 -1.99986934e108 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 251 { 0xfb -5 } : BV:8
15 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 184 { 0xb8 -72 } : BV:8
21 : 245 { 0xf5 -11 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : eq(26, 18) : BOOL
30 : ite(29, 20, 21) : BV:8
31 : ite(28, 17, 30) : BV:8
32 : ite(27, 14, 31) : BV:8
33 : bvadd(1, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : ite(36, 20, 21) : BV:8
38 : ite(35, 17, 37) : BV:8
39 : ite(34, 14, 38) : BV:8
40 : bvadd(9, 10) : BV:32
41 : eq(40, 12) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : ite(43, 20, 21) : BV:8
45 : ite(42, 17, 44) : BV:8
46 : ite(41, 14, 45) : BV:8
47 : bvconcat(24, 32, 39, 46) : BV:32
48 : lambda(6, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(5, 48) : MAP[BV:32 -> BV:32]
50 : sum(1, 2, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26693 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26694 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4127194040 { 0xf5fffbb8 -167773256 -1.99986934e108 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 245 { 0xf5 -11 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda26695 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26696 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4127194040 { 0xf5fffbb8 -167773256 -1.99986934e108 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 251 { 0xfb -5 } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 184 { 0xb8 -72 } : BV:8
19 : 245 { 0xf5 -11 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26621 : BV:32
2 : Lambda26622 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 251 { 0xfb -5 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 184 { 0xb8 -72 } : BV:8
17 : 245 { 0xf5 -11 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26623 : BV:32
2 : Lambda26624 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 251 { 0xfb -5 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 184 { 0xb8 -72 } : BV:8
17 : 245 { 0xf5 -11 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4049604300 { 0xf1600ecc -245362996 -1.75045156e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4049604303 { 0xf1600ecf -245362993 -1.75045192e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 193653832 { 0xb8aec48 +1.8533573e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 193653835 { 0xb8aec4b +1.8533608e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3932339144 { 0xea62bbc8 -362628152 -1.77135562e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3932339147 { 0xea62bbcb -362628149 -1.77135598e85 } : BV:32
=counter_example.random_seed
794685623
=counter_example_end
=global nodece 49 num_edges_traversed 1
=global nodece 49 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3.ce10965.num_edges_traversed2
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3.ce10965 7666f0171a46dc429d94a773d8b2e2
=input.spec-%var-x-1
1 : Lambda26652 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26655 : BV:32
17 : Lambda26653 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26654 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 184 { 0xb8 -72 } : BV:8
34 : 245 { 0xf5 -11 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 245, [ 4294967288; 4294967288 ] -> 184, [ 4294967289; 4294967289 ] -> 251, [ 4294967290; 4294967290 ] -> 255, [ 4294967291; 4294967295 ] -> 245, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193653831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193653832; 193653835 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 193653836; 3932339143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3932339144; 3932339147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3932339148; 4049604299 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4049604300; 4049604303 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4049604304; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 193653832 { 0xb8aec48 +1.8533573e152 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3932339144 { 0xea62bbc8 -362628152 -1.77135562e85 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4049604300 { 0xf1600ecc -245362996 -1.75045156e99 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26659 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26662 : BV:32
17 : Lambda26660 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26661 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 251 { 0xfb -5 } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 255 { 0xff -1 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 184 { 0xb8 -72 } : BV:8
34 : 245 { 0xf5 -11 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1884333828 { 0x7050a704 +1.63009691e97 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26621 : BV:32
2 : Lambda26622 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 251 { 0xfb -5 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 184 { 0xb8 -72 } : BV:8
17 : 245 { 0xf5 -11 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26623 : BV:32
2 : Lambda26624 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 251 { 0xfb -5 } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 184 { 0xb8 -72 } : BV:8
17 : 245 { 0xf5 -11 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1847066257 { 0x6e17fe91 +1.18745625e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4049604300 { 0xf1600ecc -245362996 -1.75045156e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4049604303 { 0xf1600ecf -245362993 -1.75045192e99 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 193653832 { 0xb8aec48 +1.8533573e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 193653835 { 0xb8aec4b +1.8533608e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3932339144 { 0xea62bbc8 -362628152 -1.77135562e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3932339147 { 0xea62bbcb -362628149 -1.77135598e85 } : BV:32
=counter_example.random_seed
2527752863
=counter_example_end
=global nodece 50 num_edges_traversed 2
=global nodece 50 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 51
=global nodece 51 nodece z3.ce10995.num_edges_traversed1
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3.ce10995 2268b3944224f38bed5ad2591c58a34d
=input.spec-%var-x-1
1 : Lambda26964 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26967 : BV:32
17 : Lambda26965 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26966 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 778342527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 778342528; 778342531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 778342532; 1446418379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1446418380; 1446418383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1446418384; 2339078055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2339078056; 2339078059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2339078060; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2339078056 { 0x8b6b7fa8 -1955889240 -1.83983325e151 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1446418380 { 0x563697cc +1.42650747e45 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 778342528 { 0x2e649080 +1.78565979e221 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26975 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26978 : BV:32
17 : Lambda26976 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26977 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26968 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26969 : BV:32
7 : 1851404702 { 0x6e5a319e +1.70463919e93 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1625930610 { 0x60e9bb72 +1.82603287e66 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26981 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26982 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 674593338 { 0x28357a3a +1.41779255e209 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 778342528 { 0x2e649080 +1.78565979e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 778342531 { 0x2e649083 +1.78566014e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2339078056 { 0x8b6b7fa8 -1955889240 -1.83983325e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2339078059 { 0x8b6b7fab -1955889237 -1.83983361e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1446418380 { 0x563697cc +1.42650747e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1446418383 { 0x563697cf +1.42650783e45 } : BV:32
=counter_example.random_seed
2025949951
=counter_example_end
=global nodece 51 num_edges_traversed 1
=global nodece 51 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 52
=global nodece 52 nodece z3.ce11039.num_edges_traversed0
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(epsilon)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce11039 39be6e0c0ed743ebff5bae7a61cb5
=input.spec-%var-x-1
1 : Lambda27260 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27263 : BV:32
18 : Lambda27261 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27262 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 94 { 0x5e } : BV:8
64 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 250 { 0xfa -6 } : BV:8
67 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
68 : eq(61, 67) : BOOL
69 : 61 { 0x3d } : BV:8
70 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 116 { 0x74 } : BV:8
73 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 221 { 0xdd -35 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 59) : BOOL
84 : eq(82, 64) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 63, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 59) : BOOL
95 : eq(93, 64) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 63, 102) : BV:8
104 : bvadd(64, 60) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 63, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 59) : BOOL
118 : eq(116, 64) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 63, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 59) : BOOL
130 : eq(128, 64) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 63, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 63, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 59) : BOOL
153 : eq(151, 64) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 63, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 571127636 { 0x220ab754 +1.8371973e197 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
=input.dst.llvm-%n
1 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
=input.dst.llvm-%m
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 139661134 ] -> 0, [ 139661135; 139661135 ] -> 61, [ 139661136; 2150117887 ] -> 0, [ 2150117888; 2150117888 ] -> 250, [ 2150117889; 2150117889 ] -> 221, [ 2150117890; 2150117890 ] -> 116, [ 2150117891; 2150117891 ] -> 94, [ 2150117892; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1179873979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179873980; 1179873983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1179873984; 1981140815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1981140816; 1981140819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1981140820; 3993174019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3993174020; 3993174023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3993174024; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1179873980 { 0x465372bc +1.65193891e13 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3993174020 { 0xee030004 -301793276 -1.2343797e93 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1981140816 { 0x7615cf50 +1.17038917e109 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27267 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27270 : BV:32
18 : Lambda27268 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27269 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 94 { 0x5e } : BV:8
83 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 250 { 0xfa -6 } : BV:8
86 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
87 : eq(80, 86) : BOOL
88 : 61 { 0x3d } : BV:8
89 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 116 { 0x74 } : BV:8
92 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 221 { 0xdd -35 } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(81, 82, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 78) : BOOL
103 : eq(101, 83) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 82, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 78) : BOOL
114 : eq(112, 83) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 82, 121) : BV:8
123 : bvadd(83, 79) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 82, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 78) : BOOL
137 : eq(135, 83) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 82, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 78) : BOOL
149 : eq(147, 83) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 82, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 82, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 78) : BOOL
172 : eq(170, 83) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 82, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27264 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27265 : BV:32
7 : 260715947 { 0xf8a35ab +1.7976281e160 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27273 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1023410176 { 0x3d000000 +1.0e251 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 250 { 0xfa -6 } : BV:8
30 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
31 : eq(23, 30) : BOOL
32 : 61 { 0x3d } : BV:8
33 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 116 { 0x74 } : BV:8
36 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 221 { 0xdd -35 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1343139219 ] -> true, [ 1343139220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1343139219 ] -> true, [ 1343139220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27209 : BV:32
2 : Lambda27210 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27214 : BV:32
2 : Lambda27215 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 33554432 { 0x2000000 +1.0e133 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33554433 { 0x2000001 +1.11e133 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 94 { 0x5e } : BV:8
56 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 250 { 0xfa -6 } : BV:8
59 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
60 : eq(53, 59) : BOOL
61 : 61 { 0x3d } : BV:8
62 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 116 { 0x74 } : BV:8
65 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 221 { 0xdd -35 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(54, 55, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 51) : BOOL
76 : eq(74, 56) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 55, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 55, 94) : BV:8
96 : bvadd(56, 52) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 55, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 51) : BOOL
110 : eq(108, 56) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 55, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 51) : BOOL
122 : eq(120, 56) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 55, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 55, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 51) : BOOL
145 : eq(143, 56) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 55, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27218 : BV:32
2 : Lambda27219 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27216 : BV:32
2 : Lambda27217 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 94 { 0x5e } : BV:8
15 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 250 { 0xfa -6 } : BV:8
18 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
19 : eq(12, 18) : BOOL
20 : 61 { 0x3d } : BV:8
21 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 116 { 0x74 } : BV:8
24 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 10) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 14, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(15, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 15) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 14, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 14, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 14, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27225 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1023410176 { 0x3d000000 +1.0e251 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 94 { 0x5e } : BV:8
12 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 250 { 0xfa -6 } : BV:8
15 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
16 : eq(8, 15) : BOOL
17 : 61 { 0x3d } : BV:8
18 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 116 { 0x74 } : BV:8
21 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 221 { 0xdd -35 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1981140816 { 0x7615cf50 +1.17038917e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1981140819 { 0x7615cf53 +1.17038953e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1179873980 { 0x465372bc +1.65193891e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1179873983 { 0x465372bf +1.65193927e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3993174020 { 0xee030004 -301793276 -1.2343797e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3993174023 { 0xee030007 -301793273 -1.2343833e93 } : BV:32
=counter_example.random_seed
3353036109
=counter_example_end
=global nodece 52 num_edges_traversed 0
=global nodece 52 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3v487.ce11040.num_edges_traversed0
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce11040 3e936589af98fa9cdc217131c6cfc03b
=input.spec-%var-x-1
1 : Lambda27289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2709520383 { 0xa17fffff -1585446913 -1.99999988e195 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2709520384 { 0xa1800000 -1585446912 -1.0e196 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27292 : BV:32
18 : Lambda27290 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2709520385 { 0xa1800001 -1585446911 -1.11e196 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27291 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2147483664 { 0x80000010 -2147483632 -1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 2709520384 { 0xa1800000 -1585446912 -1.0e196 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 102769023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 102769024; 102769027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 102769028; 134287491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134287492; 134287495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 134287496; 1749160079 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1749160080; 1749160083 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1749160084; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 134287492 { 0x8011084 +1.831651e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1749160080 { 0x68421090 +1.51613044e81 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 102769024 { 0x6202180 +1.25102233e141 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27296 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2709520383 { 0xa17fffff -1585446913 -1.99999988e195 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2709520384 { 0xa1800000 -1585446912 -1.0e196 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27299 : BV:32
18 : Lambda27297 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2709520385 { 0xa1800001 -1585446911 -1.11e196 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 65535 { 0xffff +1.781238e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 65536 { 0x10000 +1.781250e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 65537 { 0x10001 +1.781261e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27298 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27293 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27294 : BV:32
7 : 766133432 { 0x2daa44b8 +1.33022212e220 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27301 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 65536 { 0x10000 +1.781250e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda27302 : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : bvule(11, 10) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(10, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : lambda(10, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(9, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2709520383 ] -> true, [ 2709520384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2709520383 ] -> true, [ 2709520384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27232 : BV:32
2 : Lambda27233 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2709520383 { 0xa17fffff -1585446913 -1.99999988e195 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2709520385 { 0xa1800001 -1585446911 -1.11e196 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2709520384 { 0xa1800000 -1585446912 -1.0e196 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27237 : BV:32
2 : Lambda27238 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2709520383 { 0xa17fffff -1585446913 -1.99999988e195 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2709520384 { 0xa1800000 -1585446912 -1.0e196 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2709520385 { 0xa1800001 -1585446911 -1.11e196 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 65535 { 0xffff +1.781238e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 65536 { 0x10000 +1.781250e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 65537 { 0x10001 +1.781261e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27241 : BV:32
2 : Lambda27242 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2709520383 { 0xa17fffff -1585446913 -1.99999988e195 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2709520385 { 0xa1800001 -1585446911 -1.11e196 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2709520384 { 0xa1800000 -1585446912 -1.0e196 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 65535 { 0xffff +1.781238e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 65536 { 0x10000 +1.781250e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 65537 { 0x10001 +1.781261e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda27245 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 65536 { 0x10000 +1.781250e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : sym_const(9) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 102769024 { 0x6202180 +1.25102233e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 102769027 { 0x6202183 +1.25102269e141 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 134287492 { 0x8011084 +1.831651e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 134287495 { 0x8011087 +1.831687e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1749160080 { 0x68421090 +1.51613044e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1749160083 { 0x68421093 +1.51613080e81 } : BV:32
=counter_example.random_seed
2114062629
=counter_example_end
=global nodece 53 num_edges_traversed 0
=global nodece 53 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3v487.ce11192.num_edges_traversed2
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3v487.ce11192 ff55ef9c6ca24c862f25e67e3ef735c
=input.spec-%var-x-1
1 : Lambda3728 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3731 : BV:32
18 : Lambda3729 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3730 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147525631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147525632; 2147525635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147525636; 2147536851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147536852; 2147536855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147536856; 2147540943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147540944; 2147540947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147540948; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda3733 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3736 : BV:32
18 : Lambda3734 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3735 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3823 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda3824 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3825 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3826 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3827 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3828 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda3690 : BV:32
2 : Lambda3691 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda3695 : BV:32
2 : Lambda3696 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3699 : BV:32
2 : Lambda3700 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147540947 { 0x8000dfd3 -2147426349 -1.683057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147525635 { 0x8000a403 -2147441661 -1.500524e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147536855 { 0x8000cfd7 -2147430441 -1.634276e129 } : BV:32
=counter_example.random_seed
3490211955
=counter_example_end
=global nodece 54 num_edges_traversed 2
=global nodece 54 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3v487.ce11242.num_edges_traversed3
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3v487.ce11242 b765df65b23675fc2709e45f5ee070
=input.spec-%var-x-1
1 : Lambda3728 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3731 : BV:32
18 : Lambda3729 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3730 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147525631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147525632; 2147525635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147525636; 2147536851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147536852; 2147536855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147536856; 2147540943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147540944; 2147540947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147540948; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda3733 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3736 : BV:32
18 : Lambda3734 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3735 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3823 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda3824 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3825 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3826 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3827 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3828 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda3690 : BV:32
2 : Lambda3691 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda3695 : BV:32
2 : Lambda3696 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3699 : BV:32
2 : Lambda3700 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147540947 { 0x8000dfd3 -2147426349 -1.683057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147525635 { 0x8000a403 -2147441661 -1.500524e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147536855 { 0x8000cfd7 -2147430441 -1.634276e129 } : BV:32
=counter_example.random_seed
3490211955
=counter_example_end
=global nodece 55 num_edges_traversed 3
=global nodece 55 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3v487.ce11278.num_edges_traversed4
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3v487.ce11278 35a4e20e03de78241c46418a6296421
=input.spec-%var-x-1
1 : Lambda3728 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3731 : BV:32
18 : Lambda3729 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3730 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2147525631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147525632; 2147525635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147525636; 2147536851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147536852; 2147536855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147536856; 2147540943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147540944; 2147540947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147540948; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda3733 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3736 : BV:32
18 : Lambda3734 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3735 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda3823 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda3824 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : ite(29, 5, 5) : BV:32
47 : ite(45, 5, 46) : BV:32
48 : ite(29, 5, 47) : BV:32
49 : lambda(27, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(26, 49) : MAP[BV:32 -> BV:32]
51 : sum(1, 2, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda3825 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3826 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda3827 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda3828 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : ite(27, 3, 3) : BV:32
45 : ite(43, 3, 44) : BV:32
46 : ite(27, 3, 45) : BV:32
47 : lambda(25, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(24, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda3690 : BV:32
2 : Lambda3691 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda3695 : BV:32
2 : Lambda3696 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3699 : BV:32
2 : Lambda3700 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4097 { 0x1001 +1.48840e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147540944 { 0x8000dfd0 -2147426352 -1.683021e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147540947 { 0x8000dfd3 -2147426349 -1.683057e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147525632 { 0x8000a400 -2147441664 -1.500488e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147525635 { 0x8000a403 -2147441661 -1.500524e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147536852 { 0x8000cfd4 -2147430444 -1.634241e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147536855 { 0x8000cfd7 -2147430441 -1.634276e129 } : BV:32
=counter_example.random_seed
3490211955
=counter_example_end
=global nodece 56 num_edges_traversed 4
=global nodece 56 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce11176.num_edges_traversed2
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(epsilon)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce11176 cb1e9035c85815db8b6792b15db5e580
=input.spec-%var-x-1
1 : Lambda17595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17598 : BV:32
18 : Lambda17596 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217729 { 0x8000001 +1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17597 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : bvmul(37, 17) : BV:32
58 : bvadd(34, 57) : BV:32
59 : eq(58, 2) : BOOL
60 : 112 { 0x70 } : BV:8
61 : eq(58, 34) : BOOL
62 : 190 { 0xbe -66 } : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : eq(58, 63) : BOOL
65 : 127 { 0x7f } : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : eq(58, 66) : BOOL
68 : 17 { 0x11 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(64, 65, 70) : BV:8
72 : ite(61, 62, 71) : BV:8
73 : ite(59, 60, 72) : BV:8
74 : bvadd(66, 57) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 34) : BOOL
77 : eq(74, 63) : BOOL
78 : eq(74, 66) : BOOL
79 : ite(78, 68, 69) : BV:8
80 : ite(77, 65, 79) : BV:8
81 : ite(76, 62, 80) : BV:8
82 : ite(75, 60, 81) : BV:8
83 : bvadd(63, 57) : BV:32
84 : eq(83, 2) : BOOL
85 : eq(83, 34) : BOOL
86 : eq(83, 63) : BOOL
87 : eq(83, 66) : BOOL
88 : ite(87, 68, 69) : BV:8
89 : ite(86, 65, 88) : BV:8
90 : ite(85, 62, 89) : BV:8
91 : ite(84, 60, 90) : BV:8
92 : eq(57, 2) : BOOL
93 : eq(57, 34) : BOOL
94 : eq(57, 63) : BOOL
95 : eq(57, 66) : BOOL
96 : ite(95, 68, 69) : BV:8
97 : ite(94, 65, 96) : BV:8
98 : ite(93, 62, 97) : BV:8
99 : ite(92, 60, 98) : BV:8
100 : bvconcat(73, 82, 91, 99) : BV:32
101 : bvadd(34, 56, 100) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 34) : BOOL
104 : eq(101, 63) : BOOL
105 : eq(101, 66) : BOOL
106 : ite(105, 68, 69) : BV:8
107 : ite(104, 65, 106) : BV:8
108 : ite(103, 62, 107) : BV:8
109 : ite(102, 60, 108) : BV:8
110 : bvadd(66, 56, 100) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 34) : BOOL
113 : eq(110, 63) : BOOL
114 : eq(110, 66) : BOOL
115 : ite(114, 68, 69) : BV:8
116 : ite(113, 65, 115) : BV:8
117 : ite(112, 62, 116) : BV:8
118 : ite(111, 60, 117) : BV:8
119 : bvadd(63, 56, 100) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 34) : BOOL
122 : eq(119, 63) : BOOL
123 : eq(119, 66) : BOOL
124 : ite(123, 68, 69) : BV:8
125 : ite(122, 65, 124) : BV:8
126 : ite(121, 62, 125) : BV:8
127 : ite(120, 60, 126) : BV:8
128 : bvadd(56, 100) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 34) : BOOL
131 : eq(128, 63) : BOOL
132 : eq(128, 66) : BOOL
133 : ite(132, 68, 69) : BV:8
134 : ite(131, 65, 133) : BV:8
135 : ite(130, 62, 134) : BV:8
136 : ite(129, 60, 135) : BV:8
137 : bvconcat(109, 118, 127, 136) : BV:32
138 : ite(55, 2, 137) : BV:32
139 : lambda(52, 138) : FUNCTION[BV:32 -> BV:32]
140 : map(51, 139) : MAP[BV:32 -> BV:32]
141 : lambda(17, 140) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
142 : map(16, 141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
143 : sym_const(142) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 112, [ 1; 1 ] -> 127, [ 2; 2 ] -> 17, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 559849463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 559849464; 559849467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 559849468; 2096372423 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096372424; 2096372427 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2096372428; 4149718779 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4149718780; 4149718783 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4149718784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2096372424 { 0x7cf41ac8 +1.90706729e122 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4149718780 { 0xf757aefc -145248516 -1.68502759e111 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 559849464 { 0x215e9ff8 +1.73925685e195 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17600 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17603 : BV:32
18 : Lambda17601 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 134217729 { 0x8000001 +1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17602 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : bvmul(37, 17) : BV:32
77 : bvadd(34, 76) : BV:32
78 : eq(77, 2) : BOOL
79 : 112 { 0x70 } : BV:8
80 : eq(77, 34) : BOOL
81 : 190 { 0xbe -66 } : BV:8
82 : 1 { 0x1 +1.11e129 } : BV:32
83 : eq(77, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 2 { 0x2 +1.23e129 } : BV:32
86 : eq(77, 85) : BOOL
87 : 17 { 0x11 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : bvadd(85, 76) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 34) : BOOL
96 : eq(93, 82) : BOOL
97 : eq(93, 85) : BOOL
98 : ite(97, 87, 88) : BV:8
99 : ite(96, 84, 98) : BV:8
100 : ite(95, 81, 99) : BV:8
101 : ite(94, 79, 100) : BV:8
102 : bvadd(82, 76) : BV:32
103 : eq(102, 2) : BOOL
104 : eq(102, 34) : BOOL
105 : eq(102, 82) : BOOL
106 : eq(102, 85) : BOOL
107 : ite(106, 87, 88) : BV:8
108 : ite(105, 84, 107) : BV:8
109 : ite(104, 81, 108) : BV:8
110 : ite(103, 79, 109) : BV:8
111 : eq(76, 2) : BOOL
112 : eq(76, 34) : BOOL
113 : eq(76, 82) : BOOL
114 : eq(76, 85) : BOOL
115 : ite(114, 87, 88) : BV:8
116 : ite(113, 84, 115) : BV:8
117 : ite(112, 81, 116) : BV:8
118 : ite(111, 79, 117) : BV:8
119 : bvconcat(92, 101, 110, 118) : BV:32
120 : bvadd(34, 75, 119) : BV:32
121 : eq(120, 2) : BOOL
122 : eq(120, 34) : BOOL
123 : eq(120, 82) : BOOL
124 : eq(120, 85) : BOOL
125 : ite(124, 87, 88) : BV:8
126 : ite(123, 84, 125) : BV:8
127 : ite(122, 81, 126) : BV:8
128 : ite(121, 79, 127) : BV:8
129 : bvadd(85, 75, 119) : BV:32
130 : eq(129, 2) : BOOL
131 : eq(129, 34) : BOOL
132 : eq(129, 82) : BOOL
133 : eq(129, 85) : BOOL
134 : ite(133, 87, 88) : BV:8
135 : ite(132, 84, 134) : BV:8
136 : ite(131, 81, 135) : BV:8
137 : ite(130, 79, 136) : BV:8
138 : bvadd(82, 75, 119) : BV:32
139 : eq(138, 2) : BOOL
140 : eq(138, 34) : BOOL
141 : eq(138, 82) : BOOL
142 : eq(138, 85) : BOOL
143 : ite(142, 87, 88) : BV:8
144 : ite(141, 84, 143) : BV:8
145 : ite(140, 81, 144) : BV:8
146 : ite(139, 79, 145) : BV:8
147 : bvadd(75, 119) : BV:32
148 : eq(147, 2) : BOOL
149 : eq(147, 34) : BOOL
150 : eq(147, 82) : BOOL
151 : eq(147, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 81, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : bvconcat(128, 137, 146, 155) : BV:32
157 : ite(55, 2, 156) : BV:32
158 : ite(74, 156, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : lambda(52, 159) : FUNCTION[BV:32 -> BV:32]
161 : map(51, 160) : MAP[BV:32 -> BV:32]
162 : lambda(17, 161) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
163 : map(16, 162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
164 : sym_const(163) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17624 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17625 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : bvmul(10, 27) : BV:32
47 : 3188817776 { 0xbe117f70 -1106149520 -1.13670158e253 } : BV:32
48 : bvadd(7, 46, 47) : BV:32
49 : eq(48, 5) : BOOL
50 : 112 { 0x70 } : BV:8
51 : eq(48, 7) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 1) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 17 { 0x11 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(53, 54, 59) : BV:8
61 : ite(51, 52, 60) : BV:8
62 : ite(49, 50, 61) : BV:8
63 : bvadd(55, 46, 47) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 1) : BOOL
67 : eq(63, 55) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 54, 68) : BV:8
70 : ite(65, 52, 69) : BV:8
71 : ite(64, 50, 70) : BV:8
72 : bvadd(1, 46, 47) : BV:32
73 : eq(72, 5) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 1) : BOOL
76 : eq(72, 55) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 54, 77) : BV:8
79 : ite(74, 52, 78) : BV:8
80 : ite(73, 50, 79) : BV:8
81 : bvadd(46, 47) : BV:32
82 : eq(81, 5) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 1) : BOOL
85 : eq(81, 55) : BOOL
86 : ite(85, 57, 58) : BV:8
87 : ite(84, 54, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 50, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(29, 5, 90) : BV:32
92 : ite(45, 90, 91) : BV:32
93 : ite(29, 5, 92) : BV:32
94 : lambda(27, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(26, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17626 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17627 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : bvmul(8, 25) : BV:32
45 : 3188817776 { 0xbe117f70 -1106149520 -1.13670158e253 } : BV:32
46 : bvadd(5, 44, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 112 { 0x70 } : BV:8
49 : eq(46, 5) : BOOL
50 : 190 { 0xbe -66 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 127 { 0x7f } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 17 { 0x11 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 44, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 5) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 44, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 5) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : bvadd(44, 45) : BV:32
81 : eq(80, 3) : BOOL
82 : eq(80, 5) : BOOL
83 : eq(80, 51) : BOOL
84 : eq(80, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : ite(83, 53, 85) : BV:8
87 : ite(82, 50, 86) : BV:8
88 : ite(81, 48, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : ite(27, 3, 89) : BV:32
91 : ite(43, 89, 90) : BV:32
92 : ite(27, 3, 91) : BV:32
93 : lambda(25, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(24, 93) : MAP[BV:32 -> BV:32]
95 : sym_const(94) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17628 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17629 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : bvmul(8, 25) : BV:32
45 : 3188817776 { 0xbe117f70 -1106149520 -1.13670158e253 } : BV:32
46 : bvadd(5, 44, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 112 { 0x70 } : BV:8
49 : eq(46, 5) : BOOL
50 : 190 { 0xbe -66 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 127 { 0x7f } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 17 { 0x11 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 44, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 5) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 44, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 5) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : bvadd(44, 45) : BV:32
81 : eq(80, 3) : BOOL
82 : eq(80, 5) : BOOL
83 : eq(80, 51) : BOOL
84 : eq(80, 54) : BOOL
85 : ite(84, 56, 57) : BV:8
86 : ite(83, 53, 85) : BV:8
87 : ite(82, 50, 86) : BV:8
88 : ite(81, 48, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : ite(27, 3, 89) : BV:32
91 : ite(43, 89, 90) : BV:32
92 : ite(27, 3, 91) : BV:32
93 : lambda(25, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(24, 93) : MAP[BV:32 -> BV:32]
95 : sym_const(94) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17554 : BV:32
2 : Lambda17555 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217729 { 0x8000001 +1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17559 : BV:32
2 : Lambda17560 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 134217728 { 0x8000000 +1.0e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 134217729 { 0x8000001 +1.11e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : bvmul(33, 1) : BV:32
50 : bvadd(30, 49) : BV:32
51 : eq(50, 3) : BOOL
52 : 112 { 0x70 } : BV:8
53 : eq(50, 30) : BOOL
54 : 190 { 0xbe -66 } : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : eq(50, 55) : BOOL
57 : 127 { 0x7f } : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : eq(50, 58) : BOOL
60 : 17 { 0x11 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(51, 52, 64) : BV:8
66 : bvadd(58, 49) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 30) : BOOL
69 : eq(66, 55) : BOOL
70 : eq(66, 58) : BOOL
71 : ite(70, 60, 61) : BV:8
72 : ite(69, 57, 71) : BV:8
73 : ite(68, 54, 72) : BV:8
74 : ite(67, 52, 73) : BV:8
75 : bvadd(55, 49) : BV:32
76 : eq(75, 3) : BOOL
77 : eq(75, 30) : BOOL
78 : eq(75, 55) : BOOL
79 : eq(75, 58) : BOOL
80 : ite(79, 60, 61) : BV:8
81 : ite(78, 57, 80) : BV:8
82 : ite(77, 54, 81) : BV:8
83 : ite(76, 52, 82) : BV:8
84 : eq(49, 3) : BOOL
85 : eq(49, 30) : BOOL
86 : eq(49, 55) : BOOL
87 : eq(49, 58) : BOOL
88 : ite(87, 60, 61) : BV:8
89 : ite(86, 57, 88) : BV:8
90 : ite(85, 54, 89) : BV:8
91 : ite(84, 52, 90) : BV:8
92 : bvconcat(65, 74, 83, 91) : BV:32
93 : bvadd(30, 48, 92) : BV:32
94 : eq(93, 3) : BOOL
95 : eq(93, 30) : BOOL
96 : eq(93, 55) : BOOL
97 : eq(93, 58) : BOOL
98 : ite(97, 60, 61) : BV:8
99 : ite(96, 57, 98) : BV:8
100 : ite(95, 54, 99) : BV:8
101 : ite(94, 52, 100) : BV:8
102 : bvadd(58, 48, 92) : BV:32
103 : eq(102, 3) : BOOL
104 : eq(102, 30) : BOOL
105 : eq(102, 55) : BOOL
106 : eq(102, 58) : BOOL
107 : ite(106, 60, 61) : BV:8
108 : ite(105, 57, 107) : BV:8
109 : ite(104, 54, 108) : BV:8
110 : ite(103, 52, 109) : BV:8
111 : bvadd(55, 48, 92) : BV:32
112 : eq(111, 3) : BOOL
113 : eq(111, 30) : BOOL
114 : eq(111, 55) : BOOL
115 : eq(111, 58) : BOOL
116 : ite(115, 60, 61) : BV:8
117 : ite(114, 57, 116) : BV:8
118 : ite(113, 54, 117) : BV:8
119 : ite(112, 52, 118) : BV:8
120 : bvadd(48, 92) : BV:32
121 : eq(120, 3) : BOOL
122 : eq(120, 30) : BOOL
123 : eq(120, 55) : BOOL
124 : eq(120, 58) : BOOL
125 : ite(124, 60, 61) : BV:8
126 : ite(123, 57, 125) : BV:8
127 : ite(122, 54, 126) : BV:8
128 : ite(121, 52, 127) : BV:8
129 : bvconcat(101, 110, 119, 128) : BV:32
130 : ite(6, 3, 129) : BV:32
131 : ite(47, 129, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17563 : BV:32
2 : Lambda17564 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 134217729 { 0x8000001 +1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17561 : BV:32
2 : Lambda17562 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 112 { 0x70 } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 17 { 0x11 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 559849464 { 0x215e9ff8 +1.73925685e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 559849467 { 0x215e9ffb +1.73925721e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2096372424 { 0x7cf41ac8 +1.90706729e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2096372427 { 0x7cf41acb +1.90706765e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4149718780 { 0xf757aefc -145248516 -1.68502759e111 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4149718783 { 0xf757aeff -145248513 -1.68502795e111 } : BV:32
=counter_example.random_seed
3857825018
=counter_example_end
=global nodece 57 num_edges_traversed 2
=global nodece 57 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce11149.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce11149 b3a86f2ca92a12cfbd197fe361dfd8a7
=input.spec-%var-x-1
1 : Lambda17797 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17800 : BV:32
18 : Lambda17798 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda17799 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 7 { 0x7 +1.83e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : eq(60, 58) : BOOL
62 : 223 { 0xdf -33 } : BV:8
63 : eq(60, 56) : BOOL
64 : 252 { 0xfc -4 } : BV:8
65 : 6 { 0x6 +1.71e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 247 { 0xf7 -9 } : BV:8
68 : 5 { 0x5 +1.59e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 127 { 0x7f } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(65, 59) : BV:32
77 : eq(76, 58) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(68, 59) : BV:32
86 : eq(85, 58) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : bvadd(56, 59) : BV:32
95 : eq(94, 58) : BOOL
96 : eq(94, 56) : BOOL
97 : eq(94, 65) : BOOL
98 : eq(94, 68) : BOOL
99 : ite(98, 70, 71) : BV:8
100 : ite(97, 67, 99) : BV:8
101 : ite(96, 64, 100) : BV:8
102 : ite(95, 62, 101) : BV:8
103 : bvconcat(75, 84, 93, 102) : BV:32
104 : bvadd(55, 57, 103) : BV:32
105 : eq(104, 58) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 65) : BOOL
108 : eq(104, 68) : BOOL
109 : ite(108, 70, 71) : BV:8
110 : ite(107, 67, 109) : BV:8
111 : ite(106, 64, 110) : BV:8
112 : ite(105, 62, 111) : BV:8
113 : bvadd(40, 57, 103) : BV:32
114 : eq(113, 58) : BOOL
115 : eq(113, 56) : BOOL
116 : eq(113, 65) : BOOL
117 : eq(113, 68) : BOOL
118 : ite(117, 70, 71) : BV:8
119 : ite(116, 67, 118) : BV:8
120 : ite(115, 64, 119) : BV:8
121 : ite(114, 62, 120) : BV:8
122 : bvadd(36, 57, 103) : BV:32
123 : eq(122, 58) : BOOL
124 : eq(122, 56) : BOOL
125 : eq(122, 65) : BOOL
126 : eq(122, 68) : BOOL
127 : ite(126, 70, 71) : BV:8
128 : ite(125, 67, 127) : BV:8
129 : ite(124, 64, 128) : BV:8
130 : ite(123, 62, 129) : BV:8
131 : bvadd(57, 103) : BV:32
132 : eq(131, 58) : BOOL
133 : eq(131, 56) : BOOL
134 : eq(131, 65) : BOOL
135 : eq(131, 68) : BOOL
136 : ite(135, 70, 71) : BV:8
137 : ite(134, 67, 136) : BV:8
138 : ite(133, 64, 137) : BV:8
139 : ite(132, 62, 138) : BV:8
140 : bvconcat(112, 121, 130, 139) : BV:32
141 : ite(54, 2, 140) : BV:32
142 : lambda(51, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(50, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 4 ] -> 252, [ 5; 5 ] -> 127, [ 6; 6 ] -> 247, [ 7; 7 ] -> 223, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1033659483 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1033659484; 1033659487 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1033659488; 2784971355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2784971356; 2784971359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2784971360; 3364201159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3364201160; 3364201163 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3364201164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3364201160 { 0xc885a2c8 -930766136 -1.4403018e18 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1033659484 { 0x3d9c645c +1.22181272e252 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2784971356 { 0xa5ff4a5c -1509995940 -1.99445676e204 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8191 { 0x1fff +1.97644e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17805 : BV:32
18 : Lambda17803 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 8193 { 0x2001 +1.97668e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda17804 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 7 { 0x7 +1.83e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : eq(79, 77) : BOOL
81 : 223 { 0xdf -33 } : BV:8
82 : eq(79, 75) : BOOL
83 : 252 { 0xfc -4 } : BV:8
84 : 6 { 0x6 +1.71e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 247 { 0xf7 -9 } : BV:8
87 : 5 { 0x5 +1.59e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 127 { 0x7f } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(84, 78) : BV:32
96 : eq(95, 77) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(87, 78) : BV:32
105 : eq(104, 77) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : bvadd(75, 78) : BV:32
114 : eq(113, 77) : BOOL
115 : eq(113, 75) : BOOL
116 : eq(113, 84) : BOOL
117 : eq(113, 87) : BOOL
118 : ite(117, 89, 90) : BV:8
119 : ite(116, 86, 118) : BV:8
120 : ite(115, 83, 119) : BV:8
121 : ite(114, 81, 120) : BV:8
122 : bvconcat(94, 103, 112, 121) : BV:32
123 : bvadd(74, 76, 122) : BV:32
124 : eq(123, 77) : BOOL
125 : eq(123, 75) : BOOL
126 : eq(123, 84) : BOOL
127 : eq(123, 87) : BOOL
128 : ite(127, 89, 90) : BV:8
129 : ite(126, 86, 128) : BV:8
130 : ite(125, 83, 129) : BV:8
131 : ite(124, 81, 130) : BV:8
132 : bvadd(40, 76, 122) : BV:32
133 : eq(132, 77) : BOOL
134 : eq(132, 75) : BOOL
135 : eq(132, 84) : BOOL
136 : eq(132, 87) : BOOL
137 : ite(136, 89, 90) : BV:8
138 : ite(135, 86, 137) : BV:8
139 : ite(134, 83, 138) : BV:8
140 : ite(133, 81, 139) : BV:8
141 : bvadd(36, 76, 122) : BV:32
142 : eq(141, 77) : BOOL
143 : eq(141, 75) : BOOL
144 : eq(141, 84) : BOOL
145 : eq(141, 87) : BOOL
146 : ite(145, 89, 90) : BV:8
147 : ite(144, 86, 146) : BV:8
148 : ite(143, 83, 147) : BV:8
149 : ite(142, 81, 148) : BV:8
150 : bvadd(76, 122) : BV:32
151 : eq(150, 77) : BOOL
152 : eq(150, 75) : BOOL
153 : eq(150, 84) : BOOL
154 : eq(150, 87) : BOOL
155 : ite(154, 89, 90) : BV:8
156 : ite(153, 86, 155) : BV:8
157 : ite(152, 83, 156) : BV:8
158 : ite(151, 81, 157) : BV:8
159 : bvconcat(131, 140, 149, 158) : BV:32
160 : ite(54, 2, 159) : BV:32
161 : ite(73, 159, 160) : BV:32
162 : ite(54, 2, 161) : BV:32
163 : lambda(51, 162) : FUNCTION[BV:32 -> BV:32]
164 : map(50, 163) : MAP[BV:32 -> BV:32]
165 : lambda(17, 164) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
166 : map(16, 165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
167 : sym_const(166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17826 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17827 : BV:32
26 : eq(25, 5) : BOOL
27 : and(4, 26) : BOOL
28 : bvule(5, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(1, 25) : BOOL
32 : bvule(25, 1) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 1, 37) : BV:32
39 : ite(30, 5, 38) : BV:32
40 : eq(39, 5) : BOOL
41 : and(4, 40) : BOOL
42 : ite(41, 4, 22) : BOOL
43 : and(4, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3757539324 { 0xdff77ffc -537427972 -1.93359327e64 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 7 { 0x7 +1.83e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 223 { 0xdf -33 } : BV:8
52 : eq(48, 45) : BOOL
53 : 252 { 0xfc -4 } : BV:8
54 : 6 { 0x6 +1.71e129 } : BV:32
55 : eq(48, 54) : BOOL
56 : 247 { 0xf7 -9 } : BV:8
57 : 5 { 0x5 +1.59e129 } : BV:32
58 : eq(48, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(12, 46, 47) : BV:32
66 : eq(65, 49) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(1, 46, 47) : BV:32
75 : eq(74, 49) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : bvadd(46, 47) : BV:32
84 : eq(83, 49) : BOOL
85 : eq(83, 45) : BOOL
86 : eq(83, 54) : BOOL
87 : eq(83, 57) : BOOL
88 : ite(87, 59, 60) : BV:8
89 : ite(86, 56, 88) : BV:8
90 : ite(85, 53, 89) : BV:8
91 : ite(84, 51, 90) : BV:8
92 : bvconcat(64, 73, 82, 91) : BV:32
93 : ite(27, 5, 92) : BV:32
94 : ite(43, 92, 93) : BV:32
95 : ite(27, 5, 94) : BV:32
96 : lambda(25, 95) : FUNCTION[BV:32 -> BV:32]
97 : map(24, 96) : MAP[BV:32 -> BV:32]
98 : sum(1, 2, 97) : SUM[UNIT,MAP[BV:32 -> BV:32]]
99 : sym_const(98) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17828 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda17829 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : bvule(3, 24) : BOOL
28 : bvule(24, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(7, 24) : BOOL
31 : bvule(24, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(11, 24) : BOOL
34 : bvule(24, 13) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 11, 11) : BV:32
37 : ite(32, 7, 36) : BV:32
38 : ite(29, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(2, 39) : BOOL
41 : ite(40, 2, 21) : BOOL
42 : and(2, 41) : BOOL
43 : 3 { 0x3 +1.35e129 } : BV:32
44 : 4 { 0x4 +1.47e129 } : BV:32
45 : bvmul(44, 24) : BV:32
46 : 3757539324 { 0xdff77ffc -537427972 -1.93359327e64 } : BV:32
47 : bvadd(43, 45, 46) : BV:32
48 : 7 { 0x7 +1.83e129 } : BV:32
49 : eq(47, 48) : BOOL
50 : 223 { 0xdf -33 } : BV:8
51 : eq(47, 44) : BOOL
52 : 252 { 0xfc -4 } : BV:8
53 : 6 { 0x6 +1.71e129 } : BV:32
54 : eq(47, 53) : BOOL
55 : 247 { 0xf7 -9 } : BV:8
56 : 5 { 0x5 +1.59e129 } : BV:32
57 : eq(47, 56) : BOOL
58 : 127 { 0x7f } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(49, 50, 62) : BV:8
64 : bvadd(11, 45, 46) : BV:32
65 : eq(64, 48) : BOOL
66 : eq(64, 44) : BOOL
67 : eq(64, 53) : BOOL
68 : eq(64, 56) : BOOL
69 : ite(68, 58, 59) : BV:8
70 : ite(67, 55, 69) : BV:8
71 : ite(66, 52, 70) : BV:8
72 : ite(65, 50, 71) : BV:8
73 : bvadd(7, 45, 46) : BV:32
74 : eq(73, 48) : BOOL
75 : eq(73, 44) : BOOL
76 : eq(73, 53) : BOOL
77 : eq(73, 56) : BOOL
78 : ite(77, 58, 59) : BV:8
79 : ite(76, 55, 78) : BV:8
80 : ite(75, 52, 79) : BV:8
81 : ite(74, 50, 80) : BV:8
82 : bvadd(45, 46) : BV:32
83 : eq(82, 48) : BOOL
84 : eq(82, 44) : BOOL
85 : eq(82, 53) : BOOL
86 : eq(82, 56) : BOOL
87 : ite(86, 58, 59) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 52, 88) : BV:8
90 : ite(83, 50, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : ite(26, 3, 91) : BV:32
93 : ite(42, 91, 92) : BV:32
94 : ite(26, 3, 93) : BV:32
95 : lambda(24, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(23, 95) : MAP[BV:32 -> BV:32]
97 : sym_const(96) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17830 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda17831 : BV:32
25 : eq(24, 3) : BOOL
26 : and(2, 25) : BOOL
27 : bvule(3, 24) : BOOL
28 : bvule(24, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(7, 24) : BOOL
31 : bvule(24, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(11, 24) : BOOL
34 : bvule(24, 13) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 11, 11) : BV:32
37 : ite(32, 7, 36) : BV:32
38 : ite(29, 3, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : and(2, 39) : BOOL
41 : ite(40, 2, 21) : BOOL
42 : and(2, 41) : BOOL
43 : 3 { 0x3 +1.35e129 } : BV:32
44 : 4 { 0x4 +1.47e129 } : BV:32
45 : bvmul(44, 24) : BV:32
46 : 3757539324 { 0xdff77ffc -537427972 -1.93359327e64 } : BV:32
47 : bvadd(43, 45, 46) : BV:32
48 : 7 { 0x7 +1.83e129 } : BV:32
49 : eq(47, 48) : BOOL
50 : 223 { 0xdf -33 } : BV:8
51 : eq(47, 44) : BOOL
52 : 252 { 0xfc -4 } : BV:8
53 : 6 { 0x6 +1.71e129 } : BV:32
54 : eq(47, 53) : BOOL
55 : 247 { 0xf7 -9 } : BV:8
56 : 5 { 0x5 +1.59e129 } : BV:32
57 : eq(47, 56) : BOOL
58 : 127 { 0x7f } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(49, 50, 62) : BV:8
64 : bvadd(11, 45, 46) : BV:32
65 : eq(64, 48) : BOOL
66 : eq(64, 44) : BOOL
67 : eq(64, 53) : BOOL
68 : eq(64, 56) : BOOL
69 : ite(68, 58, 59) : BV:8
70 : ite(67, 55, 69) : BV:8
71 : ite(66, 52, 70) : BV:8
72 : ite(65, 50, 71) : BV:8
73 : bvadd(7, 45, 46) : BV:32
74 : eq(73, 48) : BOOL
75 : eq(73, 44) : BOOL
76 : eq(73, 53) : BOOL
77 : eq(73, 56) : BOOL
78 : ite(77, 58, 59) : BV:8
79 : ite(76, 55, 78) : BV:8
80 : ite(75, 52, 79) : BV:8
81 : ite(74, 50, 80) : BV:8
82 : bvadd(45, 46) : BV:32
83 : eq(82, 48) : BOOL
84 : eq(82, 44) : BOOL
85 : eq(82, 53) : BOOL
86 : eq(82, 56) : BOOL
87 : ite(86, 58, 59) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 52, 88) : BV:8
90 : ite(83, 50, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : ite(26, 3, 91) : BV:32
93 : ite(42, 91, 92) : BV:32
94 : ite(26, 3, 93) : BV:32
95 : lambda(24, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(23, 95) : MAP[BV:32 -> BV:32]
97 : sym_const(96) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8191 ] -> true, [ 8192; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17756 : BV:32
2 : Lambda17757 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17761 : BV:32
2 : Lambda17762 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 8191 { 0x1fff +1.97644e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8192 { 0x2000 +1.97656e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 8193 { 0x2001 +1.97668e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 7 { 0x7 +1.83e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : eq(52, 50) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : eq(52, 48) : BOOL
56 : 252 { 0xfc -4 } : BV:8
57 : 6 { 0x6 +1.71e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 247 { 0xf7 -9 } : BV:8
60 : 5 { 0x5 +1.59e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 127 { 0x7f } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(57, 51) : BV:32
69 : eq(68, 50) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(60, 51) : BV:32
78 : eq(77, 50) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : bvadd(48, 51) : BV:32
87 : eq(86, 50) : BOOL
88 : eq(86, 48) : BOOL
89 : eq(86, 57) : BOOL
90 : eq(86, 60) : BOOL
91 : ite(90, 62, 63) : BV:8
92 : ite(89, 59, 91) : BV:8
93 : ite(88, 56, 92) : BV:8
94 : ite(87, 54, 93) : BV:8
95 : bvconcat(67, 76, 85, 94) : BV:32
96 : bvadd(47, 49, 95) : BV:32
97 : eq(96, 50) : BOOL
98 : eq(96, 48) : BOOL
99 : eq(96, 57) : BOOL
100 : eq(96, 60) : BOOL
101 : ite(100, 62, 63) : BV:8
102 : ite(99, 59, 101) : BV:8
103 : ite(98, 56, 102) : BV:8
104 : ite(97, 54, 103) : BV:8
105 : bvadd(36, 49, 95) : BV:32
106 : eq(105, 50) : BOOL
107 : eq(105, 48) : BOOL
108 : eq(105, 57) : BOOL
109 : eq(105, 60) : BOOL
110 : ite(109, 62, 63) : BV:8
111 : ite(108, 59, 110) : BV:8
112 : ite(107, 56, 111) : BV:8
113 : ite(106, 54, 112) : BV:8
114 : bvadd(32, 49, 95) : BV:32
115 : eq(114, 50) : BOOL
116 : eq(114, 48) : BOOL
117 : eq(114, 57) : BOOL
118 : eq(114, 60) : BOOL
119 : ite(118, 62, 63) : BV:8
120 : ite(117, 59, 119) : BV:8
121 : ite(116, 56, 120) : BV:8
122 : ite(115, 54, 121) : BV:8
123 : bvadd(49, 95) : BV:32
124 : eq(123, 50) : BOOL
125 : eq(123, 48) : BOOL
126 : eq(123, 57) : BOOL
127 : eq(123, 60) : BOOL
128 : ite(127, 62, 63) : BV:8
129 : ite(126, 59, 128) : BV:8
130 : ite(125, 56, 129) : BV:8
131 : ite(124, 54, 130) : BV:8
132 : bvconcat(104, 113, 122, 131) : BV:32
133 : ite(6, 3, 132) : BV:32
134 : ite(46, 132, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : lambda(1, 2, 135) : FUNCTION[BV:32,BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17765 : BV:32
2 : Lambda17766 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 8191 { 0x1fff +1.97644e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8192 { 0x2000 +1.97656e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 8193 { 0x2001 +1.97668e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17763 : BV:32
2 : Lambda17764 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 7 { 0x7 +1.83e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : eq(12, 8) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 6 { 0x6 +1.71e129 } : BV:32
18 : eq(12, 17) : BOOL
19 : 247 { 0xf7 -9 } : BV:8
20 : 5 { 0x5 +1.59e129 } : BV:32
21 : eq(12, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : ite(18, 19, 24) : BV:8
26 : ite(15, 16, 25) : BV:8
27 : ite(13, 14, 26) : BV:8
28 : bvadd(17, 11) : BV:32
29 : eq(28, 10) : BOOL
30 : eq(28, 8) : BOOL
31 : eq(28, 17) : BOOL
32 : eq(28, 20) : BOOL
33 : ite(32, 22, 23) : BV:8
34 : ite(31, 19, 33) : BV:8
35 : ite(30, 16, 34) : BV:8
36 : ite(29, 14, 35) : BV:8
37 : bvadd(20, 11) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 8) : BOOL
40 : eq(37, 17) : BOOL
41 : eq(37, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : ite(40, 19, 42) : BV:8
44 : ite(39, 16, 43) : BV:8
45 : ite(38, 14, 44) : BV:8
46 : bvadd(8, 11) : BV:32
47 : eq(46, 10) : BOOL
48 : eq(46, 8) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : ite(50, 22, 23) : BV:8
52 : ite(49, 19, 51) : BV:8
53 : ite(48, 16, 52) : BV:8
54 : ite(47, 14, 53) : BV:8
55 : bvconcat(27, 36, 45, 54) : BV:32
56 : bvadd(7, 9, 55) : BV:32
57 : eq(56, 10) : BOOL
58 : eq(56, 8) : BOOL
59 : eq(56, 17) : BOOL
60 : eq(56, 20) : BOOL
61 : ite(60, 22, 23) : BV:8
62 : ite(59, 19, 61) : BV:8
63 : ite(58, 16, 62) : BV:8
64 : ite(57, 14, 63) : BV:8
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : bvadd(65, 9, 55) : BV:32
67 : eq(66, 10) : BOOL
68 : eq(66, 8) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : ite(70, 22, 23) : BV:8
72 : ite(69, 19, 71) : BV:8
73 : ite(68, 16, 72) : BV:8
74 : ite(67, 14, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 9, 55) : BV:32
77 : eq(76, 10) : BOOL
78 : eq(76, 8) : BOOL
79 : eq(76, 17) : BOOL
80 : eq(76, 20) : BOOL
81 : ite(80, 22, 23) : BV:8
82 : ite(79, 19, 81) : BV:8
83 : ite(78, 16, 82) : BV:8
84 : ite(77, 14, 83) : BV:8
85 : bvadd(9, 55) : BV:32
86 : eq(85, 10) : BOOL
87 : eq(85, 8) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : ite(89, 22, 23) : BV:8
91 : ite(88, 19, 90) : BV:8
92 : ite(87, 16, 91) : BV:8
93 : ite(86, 14, 92) : BV:8
94 : bvconcat(64, 74, 84, 93) : BV:32
95 : ite(6, 3, 94) : BV:32
96 : lambda(1, 2, 95) : FUNCTION[BV:32,BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2784971356 { 0xa5ff4a5c -1509995940 -1.99445676e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2784971359 { 0xa5ff4a5f -1509995937 -1.99445712e204 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3364201160 { 0xc885a2c8 -930766136 -1.4403018e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3364201163 { 0xc885a2cb -930766133 -1.4403054e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1033659484 { 0x3d9c645c +1.22181272e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1033659487 { 0x3d9c645f +1.22181308e252 } : BV:32
=counter_example.random_seed
2098305791
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce11086.num_edges_traversed1
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce11086 eb9c22ebd44ef8de292c70e18e782f3
=input.spec-%var-x-1
1 : Lambda27260 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27263 : BV:32
18 : Lambda27261 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27262 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 94 { 0x5e } : BV:8
64 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 250 { 0xfa -6 } : BV:8
67 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
68 : eq(61, 67) : BOOL
69 : 61 { 0x3d } : BV:8
70 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 116 { 0x74 } : BV:8
73 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 221 { 0xdd -35 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 59) : BOOL
84 : eq(82, 64) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 63, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 59) : BOOL
95 : eq(93, 64) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 63, 102) : BV:8
104 : bvadd(64, 60) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 63, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 59) : BOOL
118 : eq(116, 64) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 63, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 59) : BOOL
130 : eq(128, 64) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 63, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 63, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 59) : BOOL
153 : eq(151, 64) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 63, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 571127636 { 0x220ab754 +1.8371973e197 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 305061016 { 0x122edc98 +1.36610698e165 } : BV:32
=input.dst.llvm-%x
1 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
=input.dst.llvm-%n
1 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
=input.dst.llvm-%m
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 139661134 ] -> 0, [ 139661135; 139661135 ] -> 61, [ 139661136; 2150117887 ] -> 0, [ 2150117888; 2150117888 ] -> 250, [ 2150117889; 2150117889 ] -> 221, [ 2150117890; 2150117890 ] -> 116, [ 2150117891; 2150117891 ] -> 94, [ 2150117892; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1179873979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179873980; 1179873983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1179873984; 1981140815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1981140816; 1981140819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1981140820; 3993174019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3993174020; 3993174023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3993174024; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1179873980 { 0x465372bc +1.65193891e13 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3993174020 { 0xee030004 -301793276 -1.2343797e93 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1981140816 { 0x7615cf50 +1.17038917e109 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27267 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27270 : BV:32
18 : Lambda27268 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27269 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 94 { 0x5e } : BV:8
83 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 250 { 0xfa -6 } : BV:8
86 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
87 : eq(80, 86) : BOOL
88 : 61 { 0x3d } : BV:8
89 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 116 { 0x74 } : BV:8
92 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 221 { 0xdd -35 } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(81, 82, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 78) : BOOL
103 : eq(101, 83) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 82, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 78) : BOOL
114 : eq(112, 83) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 82, 121) : BV:8
123 : bvadd(83, 79) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 82, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 78) : BOOL
137 : eq(135, 83) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 82, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 78) : BOOL
149 : eq(147, 83) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 82, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 82, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 78) : BOOL
172 : eq(170, 83) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 82, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27264 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27265 : BV:32
7 : 260715947 { 0xf8a35ab +1.7976281e160 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27273 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1023410176 { 0x3d000000 +1.0e251 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 250 { 0xfa -6 } : BV:8
30 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
31 : eq(23, 30) : BOOL
32 : 61 { 0x3d } : BV:8
33 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 116 { 0x74 } : BV:8
36 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 221 { 0xdd -35 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1343139219 ] -> true, [ 1343139220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1343139219 ] -> true, [ 1343139220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27209 : BV:32
2 : Lambda27210 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27214 : BV:32
2 : Lambda27215 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 33554432 { 0x2000000 +1.0e133 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33554433 { 0x2000001 +1.11e133 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 94 { 0x5e } : BV:8
56 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 250 { 0xfa -6 } : BV:8
59 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
60 : eq(53, 59) : BOOL
61 : 61 { 0x3d } : BV:8
62 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 116 { 0x74 } : BV:8
65 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 221 { 0xdd -35 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(54, 55, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 51) : BOOL
76 : eq(74, 56) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 55, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 55, 94) : BV:8
96 : bvadd(56, 52) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 55, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 51) : BOOL
110 : eq(108, 56) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 55, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 51) : BOOL
122 : eq(120, 56) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 55, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 55, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 51) : BOOL
145 : eq(143, 56) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 55, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27218 : BV:32
2 : Lambda27219 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27216 : BV:32
2 : Lambda27217 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 94 { 0x5e } : BV:8
15 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 250 { 0xfa -6 } : BV:8
18 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
19 : eq(12, 18) : BOOL
20 : 61 { 0x3d } : BV:8
21 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 116 { 0x74 } : BV:8
24 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 10) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 14, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(15, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 15) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 14, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 14, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 14, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27225 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1023410176 { 0x3d000000 +1.0e251 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 94 { 0x5e } : BV:8
12 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 250 { 0xfa -6 } : BV:8
15 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
16 : eq(8, 15) : BOOL
17 : 61 { 0x3d } : BV:8
18 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 116 { 0x74 } : BV:8
21 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 221 { 0xdd -35 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1619318410 { 0x6084d68a +1.3779721e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1981140816 { 0x7615cf50 +1.17038917e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1981140819 { 0x7615cf53 +1.17038953e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1179873980 { 0x465372bc +1.65193891e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1179873983 { 0x465372bf +1.65193927e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3993174020 { 0xee030004 -301793276 -1.2343797e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3993174023 { 0xee030007 -301793273 -1.2343833e93 } : BV:32
=counter_example.random_seed
2263418229
=counter_example_end
=global nodece 59 num_edges_traversed 1
=global nodece 59 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce11392.num_edges_traversed2
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(epsilon)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce11392 77e5d19b84a867afe86191aedb675855
=input.spec-%var-x-1
1 : Lambda27260 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27263 : BV:32
18 : Lambda27261 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27262 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 94 { 0x5e } : BV:8
64 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 250 { 0xfa -6 } : BV:8
67 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
68 : eq(61, 67) : BOOL
69 : 61 { 0x3d } : BV:8
70 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 116 { 0x74 } : BV:8
73 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 221 { 0xdd -35 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : bvadd(70, 60) : BV:32
83 : eq(82, 59) : BOOL
84 : eq(82, 64) : BOOL
85 : eq(82, 67) : BOOL
86 : eq(82, 70) : BOOL
87 : eq(82, 73) : BOOL
88 : ite(87, 75, 76) : BV:8
89 : ite(86, 72, 88) : BV:8
90 : ite(85, 69, 89) : BV:8
91 : ite(84, 66, 90) : BV:8
92 : ite(83, 63, 91) : BV:8
93 : bvadd(73, 60) : BV:32
94 : eq(93, 59) : BOOL
95 : eq(93, 64) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : ite(98, 75, 76) : BV:8
100 : ite(97, 72, 99) : BV:8
101 : ite(96, 69, 100) : BV:8
102 : ite(95, 66, 101) : BV:8
103 : ite(94, 63, 102) : BV:8
104 : bvadd(64, 60) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 67) : BOOL
108 : eq(104, 70) : BOOL
109 : eq(104, 73) : BOOL
110 : ite(109, 75, 76) : BV:8
111 : ite(108, 72, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 66, 112) : BV:8
114 : ite(105, 63, 113) : BV:8
115 : bvconcat(81, 92, 103, 114) : BV:32
116 : bvadd(56, 58, 115) : BV:32
117 : eq(116, 59) : BOOL
118 : eq(116, 64) : BOOL
119 : eq(116, 67) : BOOL
120 : eq(116, 70) : BOOL
121 : eq(116, 73) : BOOL
122 : ite(121, 75, 76) : BV:8
123 : ite(120, 72, 122) : BV:8
124 : ite(119, 69, 123) : BV:8
125 : ite(118, 66, 124) : BV:8
126 : ite(117, 63, 125) : BV:8
127 : 2 { 0x2 +1.23e129 } : BV:32
128 : bvadd(127, 58, 115) : BV:32
129 : eq(128, 59) : BOOL
130 : eq(128, 64) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : ite(133, 75, 76) : BV:8
135 : ite(132, 72, 134) : BV:8
136 : ite(131, 69, 135) : BV:8
137 : ite(130, 66, 136) : BV:8
138 : ite(129, 63, 137) : BV:8
139 : 1 { 0x1 +1.11e129 } : BV:32
140 : bvadd(139, 58, 115) : BV:32
141 : eq(140, 59) : BOOL
142 : eq(140, 64) : BOOL
143 : eq(140, 67) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 63, 149) : BV:8
151 : bvadd(58, 115) : BV:32
152 : eq(151, 59) : BOOL
153 : eq(151, 64) : BOOL
154 : eq(151, 67) : BOOL
155 : eq(151, 70) : BOOL
156 : eq(151, 73) : BOOL
157 : ite(156, 75, 76) : BV:8
158 : ite(155, 72, 157) : BV:8
159 : ite(154, 69, 158) : BV:8
160 : ite(153, 66, 159) : BV:8
161 : ite(152, 63, 160) : BV:8
162 : bvconcat(126, 138, 150, 161) : BV:32
163 : ite(55, 2, 162) : BV:32
164 : lambda(52, 163) : FUNCTION[BV:32 -> BV:32]
165 : map(51, 164) : MAP[BV:32 -> BV:32]
166 : lambda(17, 165) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
167 : map(16, 166) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
168 : sym_const(167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 571127636 { 0x220ab754 +1.8371973e197 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 305061017 { 0x122edc99 +1.36610710e165 } : BV:32
=input.dst.llvm-%x
1 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
=input.dst.llvm-%n
1 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
=input.dst.llvm-%m
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 139661134 ] -> 0, [ 139661135; 139661135 ] -> 61, [ 139661136; 2150117887 ] -> 0, [ 2150117888; 2150117888 ] -> 250, [ 2150117889; 2150117889 ] -> 221, [ 2150117890; 2150117890 ] -> 116, [ 2150117891; 2150117891 ] -> 94, [ 2150117892; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1179873979 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179873980; 1179873983 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1179873984; 1981140815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1981140816; 1981140819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1981140820; 3993174019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3993174020; 3993174023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3993174024; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1179873980 { 0x465372bc +1.65193891e13 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3993174020 { 0xee030004 -301793276 -1.2343797e93 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1981140816 { 0x7615cf50 +1.17038917e109 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27267 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27270 : BV:32
18 : Lambda27268 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27269 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 94 { 0x5e } : BV:8
83 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 250 { 0xfa -6 } : BV:8
86 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
87 : eq(80, 86) : BOOL
88 : 61 { 0x3d } : BV:8
89 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 116 { 0x74 } : BV:8
92 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 221 { 0xdd -35 } : BV:8
95 : 0 { 0x0 } : BV:8
96 : ite(93, 94, 95) : BV:8
97 : ite(90, 91, 96) : BV:8
98 : ite(87, 88, 97) : BV:8
99 : ite(84, 85, 98) : BV:8
100 : ite(81, 82, 99) : BV:8
101 : bvadd(89, 79) : BV:32
102 : eq(101, 78) : BOOL
103 : eq(101, 83) : BOOL
104 : eq(101, 86) : BOOL
105 : eq(101, 89) : BOOL
106 : eq(101, 92) : BOOL
107 : ite(106, 94, 95) : BV:8
108 : ite(105, 91, 107) : BV:8
109 : ite(104, 88, 108) : BV:8
110 : ite(103, 85, 109) : BV:8
111 : ite(102, 82, 110) : BV:8
112 : bvadd(92, 79) : BV:32
113 : eq(112, 78) : BOOL
114 : eq(112, 83) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : ite(117, 94, 95) : BV:8
119 : ite(116, 91, 118) : BV:8
120 : ite(115, 88, 119) : BV:8
121 : ite(114, 85, 120) : BV:8
122 : ite(113, 82, 121) : BV:8
123 : bvadd(83, 79) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 86) : BOOL
127 : eq(123, 89) : BOOL
128 : eq(123, 92) : BOOL
129 : ite(128, 94, 95) : BV:8
130 : ite(127, 91, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 85, 131) : BV:8
133 : ite(124, 82, 132) : BV:8
134 : bvconcat(100, 111, 122, 133) : BV:32
135 : bvadd(75, 77, 134) : BV:32
136 : eq(135, 78) : BOOL
137 : eq(135, 83) : BOOL
138 : eq(135, 86) : BOOL
139 : eq(135, 89) : BOOL
140 : eq(135, 92) : BOOL
141 : ite(140, 94, 95) : BV:8
142 : ite(139, 91, 141) : BV:8
143 : ite(138, 88, 142) : BV:8
144 : ite(137, 85, 143) : BV:8
145 : ite(136, 82, 144) : BV:8
146 : 2 { 0x2 +1.23e129 } : BV:32
147 : bvadd(146, 77, 134) : BV:32
148 : eq(147, 78) : BOOL
149 : eq(147, 83) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : ite(152, 94, 95) : BV:8
154 : ite(151, 91, 153) : BV:8
155 : ite(150, 88, 154) : BV:8
156 : ite(149, 85, 155) : BV:8
157 : ite(148, 82, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 77, 134) : BV:32
160 : eq(159, 78) : BOOL
161 : eq(159, 83) : BOOL
162 : eq(159, 86) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : ite(164, 94, 95) : BV:8
166 : ite(163, 91, 165) : BV:8
167 : ite(162, 88, 166) : BV:8
168 : ite(161, 85, 167) : BV:8
169 : ite(160, 82, 168) : BV:8
170 : bvadd(77, 134) : BV:32
171 : eq(170, 78) : BOOL
172 : eq(170, 83) : BOOL
173 : eq(170, 86) : BOOL
174 : eq(170, 89) : BOOL
175 : eq(170, 92) : BOOL
176 : ite(175, 94, 95) : BV:8
177 : ite(174, 91, 176) : BV:8
178 : ite(173, 88, 177) : BV:8
179 : ite(172, 85, 178) : BV:8
180 : ite(171, 82, 179) : BV:8
181 : bvconcat(145, 157, 169, 180) : BV:32
182 : ite(55, 2, 181) : BV:32
183 : ite(74, 181, 182) : BV:32
184 : ite(55, 2, 183) : BV:32
185 : lambda(52, 184) : FUNCTION[BV:32 -> BV:32]
186 : map(51, 185) : MAP[BV:32 -> BV:32]
187 : lambda(17, 186) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
188 : map(16, 187) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
189 : sym_const(188) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27264 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27265 : BV:32
7 : 260715947 { 0xf8a35ab +1.7976281e160 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27273 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1023410176 { 0x3d000000 +1.0e251 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 250 { 0xfa -6 } : BV:8
30 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
31 : eq(23, 30) : BOOL
32 : 61 { 0x3d } : BV:8
33 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 116 { 0x74 } : BV:8
36 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 221 { 0xdd -35 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1343139219 ] -> true, [ 1343139220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1343139219 ] -> true, [ 1343139220; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27209 : BV:32
2 : Lambda27210 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27214 : BV:32
2 : Lambda27215 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 33554432 { 0x2000000 +1.0e133 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33554433 { 0x2000001 +1.11e133 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 94 { 0x5e } : BV:8
56 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 250 { 0xfa -6 } : BV:8
59 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
60 : eq(53, 59) : BOOL
61 : 61 { 0x3d } : BV:8
62 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 116 { 0x74 } : BV:8
65 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 221 { 0xdd -35 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(54, 55, 72) : BV:8
74 : bvadd(62, 52) : BV:32
75 : eq(74, 51) : BOOL
76 : eq(74, 56) : BOOL
77 : eq(74, 59) : BOOL
78 : eq(74, 62) : BOOL
79 : eq(74, 65) : BOOL
80 : ite(79, 67, 68) : BV:8
81 : ite(78, 64, 80) : BV:8
82 : ite(77, 61, 81) : BV:8
83 : ite(76, 58, 82) : BV:8
84 : ite(75, 55, 83) : BV:8
85 : bvadd(65, 52) : BV:32
86 : eq(85, 51) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : ite(90, 67, 68) : BV:8
92 : ite(89, 64, 91) : BV:8
93 : ite(88, 61, 92) : BV:8
94 : ite(87, 58, 93) : BV:8
95 : ite(86, 55, 94) : BV:8
96 : bvadd(56, 52) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 59) : BOOL
100 : eq(96, 62) : BOOL
101 : eq(96, 65) : BOOL
102 : ite(101, 67, 68) : BV:8
103 : ite(100, 64, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 58, 104) : BV:8
106 : ite(97, 55, 105) : BV:8
107 : bvconcat(73, 84, 95, 106) : BV:32
108 : bvadd(48, 50, 107) : BV:32
109 : eq(108, 51) : BOOL
110 : eq(108, 56) : BOOL
111 : eq(108, 59) : BOOL
112 : eq(108, 62) : BOOL
113 : eq(108, 65) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 64, 114) : BV:8
116 : ite(111, 61, 115) : BV:8
117 : ite(110, 58, 116) : BV:8
118 : ite(109, 55, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 50, 107) : BV:32
121 : eq(120, 51) : BOOL
122 : eq(120, 56) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : ite(125, 67, 68) : BV:8
127 : ite(124, 64, 126) : BV:8
128 : ite(123, 61, 127) : BV:8
129 : ite(122, 58, 128) : BV:8
130 : ite(121, 55, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 50, 107) : BV:32
133 : eq(132, 51) : BOOL
134 : eq(132, 56) : BOOL
135 : eq(132, 59) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : ite(137, 67, 68) : BV:8
139 : ite(136, 64, 138) : BV:8
140 : ite(135, 61, 139) : BV:8
141 : ite(134, 58, 140) : BV:8
142 : ite(133, 55, 141) : BV:8
143 : bvadd(50, 107) : BV:32
144 : eq(143, 51) : BOOL
145 : eq(143, 56) : BOOL
146 : eq(143, 59) : BOOL
147 : eq(143, 62) : BOOL
148 : eq(143, 65) : BOOL
149 : ite(148, 67, 68) : BV:8
150 : ite(147, 64, 149) : BV:8
151 : ite(146, 61, 150) : BV:8
152 : ite(145, 58, 151) : BV:8
153 : ite(144, 55, 152) : BV:8
154 : bvconcat(118, 130, 142, 153) : BV:32
155 : ite(6, 3, 154) : BV:32
156 : ite(47, 154, 155) : BV:32
157 : ite(6, 3, 156) : BV:32
158 : lambda(1, 2, 157) : FUNCTION[BV:32,BV:32 -> BV:32]
159 : sym_const(158) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27218 : BV:32
2 : Lambda27219 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1343139219 { 0x500ead93 +1.11467206e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1343139221 { 0x500ead95 +1.11467230e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1343139220 { 0x500ead94 +1.11467218e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27216 : BV:32
2 : Lambda27217 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 94 { 0x5e } : BV:8
15 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 250 { 0xfa -6 } : BV:8
18 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
19 : eq(12, 18) : BOOL
20 : 61 { 0x3d } : BV:8
21 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 116 { 0x74 } : BV:8
24 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : bvadd(21, 11) : BV:32
34 : eq(33, 10) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : eq(33, 21) : BOOL
38 : eq(33, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 20, 40) : BV:8
42 : ite(35, 17, 41) : BV:8
43 : ite(34, 14, 42) : BV:8
44 : bvadd(24, 11) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 15) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : ite(49, 26, 27) : BV:8
51 : ite(48, 23, 50) : BV:8
52 : ite(47, 20, 51) : BV:8
53 : ite(46, 17, 52) : BV:8
54 : ite(45, 14, 53) : BV:8
55 : bvadd(15, 11) : BV:32
56 : eq(55, 10) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 18) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 24) : BOOL
61 : ite(60, 26, 27) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 20, 62) : BV:8
64 : ite(57, 17, 63) : BV:8
65 : ite(56, 14, 64) : BV:8
66 : bvconcat(32, 43, 54, 65) : BV:32
67 : bvadd(7, 9, 66) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : eq(67, 24) : BOOL
73 : ite(72, 26, 27) : BV:8
74 : ite(71, 23, 73) : BV:8
75 : ite(70, 20, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : 2 { 0x2 +1.23e129 } : BV:32
79 : bvadd(78, 9, 66) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 15) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : ite(84, 26, 27) : BV:8
86 : ite(83, 23, 85) : BV:8
87 : ite(82, 20, 86) : BV:8
88 : ite(81, 17, 87) : BV:8
89 : ite(80, 14, 88) : BV:8
90 : 1 { 0x1 +1.11e129 } : BV:32
91 : bvadd(90, 9, 66) : BV:32
92 : eq(91, 10) : BOOL
93 : eq(91, 15) : BOOL
94 : eq(91, 18) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : ite(96, 26, 27) : BV:8
98 : ite(95, 23, 97) : BV:8
99 : ite(94, 20, 98) : BV:8
100 : ite(93, 17, 99) : BV:8
101 : ite(92, 14, 100) : BV:8
102 : bvadd(9, 66) : BV:32
103 : eq(102, 10) : BOOL
104 : eq(102, 15) : BOOL
105 : eq(102, 18) : BOOL
106 : eq(102, 21) : BOOL
107 : eq(102, 24) : BOOL
108 : ite(107, 26, 27) : BV:8
109 : ite(106, 23, 108) : BV:8
110 : ite(105, 20, 109) : BV:8
111 : ite(104, 17, 110) : BV:8
112 : ite(103, 14, 111) : BV:8
113 : bvconcat(77, 89, 101, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27225 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1023410176 { 0x3d000000 +1.0e251 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2150117891 { 0x80283203 -2144849405 -1.31402623e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 94 { 0x5e } : BV:8
12 : 2150117888 { 0x80283200 -2144849408 -1.31402587e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 250 { 0xfa -6 } : BV:8
15 : 139661135 { 0x8530f4f +1.64890468e145 } : BV:32
16 : eq(8, 15) : BOOL
17 : 61 { 0x3d } : BV:8
18 : 2150117890 { 0x80283202 -2144849406 -1.31402611e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 116 { 0x74 } : BV:8
21 : 2150117889 { 0x80283201 -2144849407 -1.31402599e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 221 { 0xdd -35 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 571127635 { 0x220ab753 +1.8371961e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1619318411 { 0x6084d68b +1.3779733e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1981140816 { 0x7615cf50 +1.17038917e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1981140819 { 0x7615cf53 +1.17038953e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1179873980 { 0x465372bc +1.65193891e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1179873983 { 0x465372bf +1.65193927e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3993174020 { 0xee030004 -301793276 -1.2343797e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3993174023 { 0xee030007 -301793273 -1.2343833e93 } : BV:32
=counter_example.random_seed
2263418229
=counter_example_end
=global nodece 60 num_edges_traversed 2
=global nodece 60 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce11419.num_edges_traversed1
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce11419 eb359aa6a235b06e96a34cbee9e9d81
=input.spec-%var-x-1
1 : Lambda27460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27463 : BV:32
18 : Lambda27461 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27462 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 268435459 { 0x10000003 +1.35e161 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 268435456 { 0x10000000 +1.0e161 } : BV:32
65 : eq(60, 64) : BOOL
66 : 252 { 0xfc -4 } : BV:8
67 : 536870918 { 0x20000006 +1.71e193 } : BV:32
68 : eq(60, 67) : BOOL
69 : 64 { 0x40 } : BV:8
70 : eq(60, 58) : BOOL
71 : 63 { 0x3f } : BV:8
72 : 536870917 { 0x20000005 +1.59e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
75 : eq(60, 74) : BOOL
76 : 32 { 0x20 } : BV:8
77 : 536870916 { 0x20000004 +1.47e193 } : BV:32
78 : eq(60, 77) : BOOL
79 : 128 { 0x80 -128 } : BV:8
80 : 536870919 { 0x20000007 +1.83e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 268435458 { 0x10000002 +1.23e161 } : BV:32
83 : eq(60, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 268435457 { 0x10000001 +1.11e161 } : BV:32
86 : eq(60, 85) : BOOL
87 : 122 { 0x7a } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(81, 69, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : ite(75, 76, 92) : BV:8
94 : ite(73, 69, 93) : BV:8
95 : ite(70, 71, 94) : BV:8
96 : ite(68, 69, 95) : BV:8
97 : ite(65, 66, 96) : BV:8
98 : ite(62, 63, 97) : BV:8
99 : bvadd(82, 59) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 58) : BOOL
104 : eq(99, 72) : BOOL
105 : eq(99, 74) : BOOL
106 : eq(99, 77) : BOOL
107 : eq(99, 80) : BOOL
108 : eq(99, 82) : BOOL
109 : eq(99, 85) : BOOL
110 : ite(109, 87, 88) : BV:8
111 : ite(108, 84, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 79, 112) : BV:8
114 : ite(105, 76, 113) : BV:8
115 : ite(104, 69, 114) : BV:8
116 : ite(103, 71, 115) : BV:8
117 : ite(102, 69, 116) : BV:8
118 : ite(101, 66, 117) : BV:8
119 : ite(100, 63, 118) : BV:8
120 : bvadd(85, 59) : BV:32
121 : eq(120, 61) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 58) : BOOL
125 : eq(120, 72) : BOOL
126 : eq(120, 74) : BOOL
127 : eq(120, 77) : BOOL
128 : eq(120, 80) : BOOL
129 : eq(120, 82) : BOOL
130 : eq(120, 85) : BOOL
131 : ite(130, 87, 88) : BV:8
132 : ite(129, 84, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 79, 133) : BV:8
135 : ite(126, 76, 134) : BV:8
136 : ite(125, 69, 135) : BV:8
137 : ite(124, 71, 136) : BV:8
138 : ite(123, 69, 137) : BV:8
139 : ite(122, 66, 138) : BV:8
140 : ite(121, 63, 139) : BV:8
141 : bvadd(64, 59) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 67) : BOOL
145 : eq(141, 58) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 74) : BOOL
148 : eq(141, 77) : BOOL
149 : eq(141, 80) : BOOL
150 : eq(141, 82) : BOOL
151 : eq(141, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 69, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : ite(147, 76, 155) : BV:8
157 : ite(146, 69, 156) : BV:8
158 : ite(145, 71, 157) : BV:8
159 : ite(144, 69, 158) : BV:8
160 : ite(143, 66, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : bvconcat(98, 119, 140, 161) : BV:32
163 : bvadd(37, 57, 162) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 64) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 58) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : eq(163, 80) : BOOL
172 : eq(163, 82) : BOOL
173 : eq(163, 85) : BOOL
174 : ite(173, 87, 88) : BV:8
175 : ite(172, 84, 174) : BV:8
176 : ite(171, 69, 175) : BV:8
177 : ite(170, 79, 176) : BV:8
178 : ite(169, 76, 177) : BV:8
179 : ite(168, 69, 178) : BV:8
180 : ite(167, 71, 179) : BV:8
181 : ite(166, 69, 180) : BV:8
182 : ite(165, 66, 181) : BV:8
183 : ite(164, 63, 182) : BV:8
184 : bvadd(41, 57, 162) : BV:32
185 : eq(184, 61) : BOOL
186 : eq(184, 64) : BOOL
187 : eq(184, 67) : BOOL
188 : eq(184, 58) : BOOL
189 : eq(184, 72) : BOOL
190 : eq(184, 74) : BOOL
191 : eq(184, 77) : BOOL
192 : eq(184, 80) : BOOL
193 : eq(184, 82) : BOOL
194 : eq(184, 85) : BOOL
195 : ite(194, 87, 88) : BV:8
196 : ite(193, 84, 195) : BV:8
197 : ite(192, 69, 196) : BV:8
198 : ite(191, 79, 197) : BV:8
199 : ite(190, 76, 198) : BV:8
200 : ite(189, 69, 199) : BV:8
201 : ite(188, 71, 200) : BV:8
202 : ite(187, 69, 201) : BV:8
203 : ite(186, 66, 202) : BV:8
204 : ite(185, 63, 203) : BV:8
205 : bvadd(34, 57, 162) : BV:32
206 : eq(205, 61) : BOOL
207 : eq(205, 64) : BOOL
208 : eq(205, 67) : BOOL
209 : eq(205, 58) : BOOL
210 : eq(205, 72) : BOOL
211 : eq(205, 74) : BOOL
212 : eq(205, 77) : BOOL
213 : eq(205, 80) : BOOL
214 : eq(205, 82) : BOOL
215 : eq(205, 85) : BOOL
216 : ite(215, 87, 88) : BV:8
217 : ite(214, 84, 216) : BV:8
218 : ite(213, 69, 217) : BV:8
219 : ite(212, 79, 218) : BV:8
220 : ite(211, 76, 219) : BV:8
221 : ite(210, 69, 220) : BV:8
222 : ite(209, 71, 221) : BV:8
223 : ite(208, 69, 222) : BV:8
224 : ite(207, 66, 223) : BV:8
225 : ite(206, 63, 224) : BV:8
226 : bvadd(57, 162) : BV:32
227 : eq(226, 61) : BOOL
228 : eq(226, 64) : BOOL
229 : eq(226, 67) : BOOL
230 : eq(226, 58) : BOOL
231 : eq(226, 72) : BOOL
232 : eq(226, 74) : BOOL
233 : eq(226, 77) : BOOL
234 : eq(226, 80) : BOOL
235 : eq(226, 82) : BOOL
236 : eq(226, 85) : BOOL
237 : ite(236, 87, 88) : BV:8
238 : ite(235, 84, 237) : BV:8
239 : ite(234, 69, 238) : BV:8
240 : ite(233, 79, 239) : BV:8
241 : ite(232, 76, 240) : BV:8
242 : ite(231, 69, 241) : BV:8
243 : ite(230, 71, 242) : BV:8
244 : ite(229, 69, 243) : BV:8
245 : ite(228, 66, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : bvconcat(183, 204, 225, 246) : BV:32
248 : ite(55, 2, 247) : BV:32
249 : lambda(52, 248) : FUNCTION[BV:32 -> BV:32]
250 : map(51, 249) : MAP[BV:32 -> BV:32]
251 : lambda(17, 250) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
252 : map(16, 251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
253 : sym_const(252) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1788434102 { 0x6a9956b6 +1.19795870e86 } : BV:32
=input.dst.llvm-%x
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n
1 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435455 ] -> 0, [ 268435456; 268435456 ] -> 252, [ 268435457; 268435457 ] -> 122, [ 268435458; 268435458 ] -> 127, [ 268435459; 268435459 ] -> 63, [ 268435460; 536870915 ] -> 0, [ 536870916; 536870916 ] -> 128, [ 536870917; 536870919 ] -> 64, [ 536870920; 1342177275 ] -> 0, [ 1342177276; 1342177276 ] -> 4, [ 1342177277; 1342177278 ] -> 0, [ 1342177279; 1342177279 ] -> 32, [ 1342177280; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 536870916; 2517246559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2517246560; 2517246563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2517246564; 3047752611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3047752612; 3047752615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3047752616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27467 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27470 : BV:32
18 : Lambda27468 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27469 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 268435459 { 0x10000003 +1.35e161 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
81 : eq(79, 80) : BOOL
82 : 4 { 0x4 } : BV:8
83 : 268435456 { 0x10000000 +1.0e161 } : BV:32
84 : eq(79, 83) : BOOL
85 : 252 { 0xfc -4 } : BV:8
86 : 536870918 { 0x20000006 +1.71e193 } : BV:32
87 : eq(79, 86) : BOOL
88 : 64 { 0x40 } : BV:8
89 : eq(79, 77) : BOOL
90 : 63 { 0x3f } : BV:8
91 : 536870917 { 0x20000005 +1.59e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
94 : eq(79, 93) : BOOL
95 : 32 { 0x20 } : BV:8
96 : 536870916 { 0x20000004 +1.47e193 } : BV:32
97 : eq(79, 96) : BOOL
98 : 128 { 0x80 -128 } : BV:8
99 : 536870919 { 0x20000007 +1.83e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 268435458 { 0x10000002 +1.23e161 } : BV:32
102 : eq(79, 101) : BOOL
103 : 127 { 0x7f } : BV:8
104 : 268435457 { 0x10000001 +1.11e161 } : BV:32
105 : eq(79, 104) : BOOL
106 : 122 { 0x7a } : BV:8
107 : 0 { 0x0 } : BV:8
108 : ite(105, 106, 107) : BV:8
109 : ite(102, 103, 108) : BV:8
110 : ite(100, 88, 109) : BV:8
111 : ite(97, 98, 110) : BV:8
112 : ite(94, 95, 111) : BV:8
113 : ite(92, 88, 112) : BV:8
114 : ite(89, 90, 113) : BV:8
115 : ite(87, 88, 114) : BV:8
116 : ite(84, 85, 115) : BV:8
117 : ite(81, 82, 116) : BV:8
118 : bvadd(101, 78) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 77) : BOOL
123 : eq(118, 91) : BOOL
124 : eq(118, 93) : BOOL
125 : eq(118, 96) : BOOL
126 : eq(118, 99) : BOOL
127 : eq(118, 101) : BOOL
128 : eq(118, 104) : BOOL
129 : ite(128, 106, 107) : BV:8
130 : ite(127, 103, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 98, 131) : BV:8
133 : ite(124, 95, 132) : BV:8
134 : ite(123, 88, 133) : BV:8
135 : ite(122, 90, 134) : BV:8
136 : ite(121, 88, 135) : BV:8
137 : ite(120, 85, 136) : BV:8
138 : ite(119, 82, 137) : BV:8
139 : bvadd(104, 78) : BV:32
140 : eq(139, 80) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 77) : BOOL
144 : eq(139, 91) : BOOL
145 : eq(139, 93) : BOOL
146 : eq(139, 96) : BOOL
147 : eq(139, 99) : BOOL
148 : eq(139, 101) : BOOL
149 : eq(139, 104) : BOOL
150 : ite(149, 106, 107) : BV:8
151 : ite(148, 103, 150) : BV:8
152 : ite(147, 88, 151) : BV:8
153 : ite(146, 98, 152) : BV:8
154 : ite(145, 95, 153) : BV:8
155 : ite(144, 88, 154) : BV:8
156 : ite(143, 90, 155) : BV:8
157 : ite(142, 88, 156) : BV:8
158 : ite(141, 85, 157) : BV:8
159 : ite(140, 82, 158) : BV:8
160 : bvadd(83, 78) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 86) : BOOL
164 : eq(160, 77) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 93) : BOOL
167 : eq(160, 96) : BOOL
168 : eq(160, 99) : BOOL
169 : eq(160, 101) : BOOL
170 : eq(160, 104) : BOOL
171 : ite(170, 106, 107) : BV:8
172 : ite(169, 103, 171) : BV:8
173 : ite(168, 88, 172) : BV:8
174 : ite(167, 98, 173) : BV:8
175 : ite(166, 95, 174) : BV:8
176 : ite(165, 88, 175) : BV:8
177 : ite(164, 90, 176) : BV:8
178 : ite(163, 88, 177) : BV:8
179 : ite(162, 85, 178) : BV:8
180 : ite(161, 82, 179) : BV:8
181 : bvconcat(117, 138, 159, 180) : BV:32
182 : bvadd(37, 76, 181) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 83) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 77) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : eq(182, 99) : BOOL
191 : eq(182, 101) : BOOL
192 : eq(182, 104) : BOOL
193 : ite(192, 106, 107) : BV:8
194 : ite(191, 103, 193) : BV:8
195 : ite(190, 88, 194) : BV:8
196 : ite(189, 98, 195) : BV:8
197 : ite(188, 95, 196) : BV:8
198 : ite(187, 88, 197) : BV:8
199 : ite(186, 90, 198) : BV:8
200 : ite(185, 88, 199) : BV:8
201 : ite(184, 85, 200) : BV:8
202 : ite(183, 82, 201) : BV:8
203 : bvadd(41, 76, 181) : BV:32
204 : eq(203, 80) : BOOL
205 : eq(203, 83) : BOOL
206 : eq(203, 86) : BOOL
207 : eq(203, 77) : BOOL
208 : eq(203, 91) : BOOL
209 : eq(203, 93) : BOOL
210 : eq(203, 96) : BOOL
211 : eq(203, 99) : BOOL
212 : eq(203, 101) : BOOL
213 : eq(203, 104) : BOOL
214 : ite(213, 106, 107) : BV:8
215 : ite(212, 103, 214) : BV:8
216 : ite(211, 88, 215) : BV:8
217 : ite(210, 98, 216) : BV:8
218 : ite(209, 95, 217) : BV:8
219 : ite(208, 88, 218) : BV:8
220 : ite(207, 90, 219) : BV:8
221 : ite(206, 88, 220) : BV:8
222 : ite(205, 85, 221) : BV:8
223 : ite(204, 82, 222) : BV:8
224 : bvadd(34, 76, 181) : BV:32
225 : eq(224, 80) : BOOL
226 : eq(224, 83) : BOOL
227 : eq(224, 86) : BOOL
228 : eq(224, 77) : BOOL
229 : eq(224, 91) : BOOL
230 : eq(224, 93) : BOOL
231 : eq(224, 96) : BOOL
232 : eq(224, 99) : BOOL
233 : eq(224, 101) : BOOL
234 : eq(224, 104) : BOOL
235 : ite(234, 106, 107) : BV:8
236 : ite(233, 103, 235) : BV:8
237 : ite(232, 88, 236) : BV:8
238 : ite(231, 98, 237) : BV:8
239 : ite(230, 95, 238) : BV:8
240 : ite(229, 88, 239) : BV:8
241 : ite(228, 90, 240) : BV:8
242 : ite(227, 88, 241) : BV:8
243 : ite(226, 85, 242) : BV:8
244 : ite(225, 82, 243) : BV:8
245 : bvadd(76, 181) : BV:32
246 : eq(245, 80) : BOOL
247 : eq(245, 83) : BOOL
248 : eq(245, 86) : BOOL
249 : eq(245, 77) : BOOL
250 : eq(245, 91) : BOOL
251 : eq(245, 93) : BOOL
252 : eq(245, 96) : BOOL
253 : eq(245, 99) : BOOL
254 : eq(245, 101) : BOOL
255 : eq(245, 104) : BOOL
256 : ite(255, 106, 107) : BV:8
257 : ite(254, 103, 256) : BV:8
258 : ite(253, 88, 257) : BV:8
259 : ite(252, 98, 258) : BV:8
260 : ite(251, 95, 259) : BV:8
261 : ite(250, 88, 260) : BV:8
262 : ite(249, 90, 261) : BV:8
263 : ite(248, 88, 262) : BV:8
264 : ite(247, 85, 263) : BV:8
265 : ite(246, 82, 264) : BV:8
266 : bvconcat(202, 223, 244, 265) : BV:32
267 : ite(55, 2, 266) : BV:32
268 : ite(74, 266, 267) : BV:32
269 : ite(55, 2, 268) : BV:32
270 : lambda(52, 269) : FUNCTION[BV:32 -> BV:32]
271 : map(51, 270) : MAP[BV:32 -> BV:32]
272 : lambda(17, 271) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
273 : map(16, 272) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
274 : sym_const(273) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27464 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27465 : BV:32
7 : 2147175854 { 0x7ffb4dae +1.96330809e128 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27473 : BV:32
18 : eq(17, 2) : BOOL
19 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 536870916 { 0x20000004 +1.47e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
26 : eq(24, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 268435456 { 0x10000000 +1.0e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 252 { 0xfc -4 } : BV:8
31 : 536870918 { 0x20000006 +1.71e193 } : BV:32
32 : eq(24, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 268435459 { 0x10000003 +1.35e161 } : BV:32
35 : eq(24, 34) : BOOL
36 : 63 { 0x3f } : BV:8
37 : 536870917 { 0x20000005 +1.59e193 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
40 : eq(24, 39) : BOOL
41 : 32 { 0x20 } : BV:8
42 : eq(24, 23) : BOOL
43 : 128 { 0x80 -128 } : BV:8
44 : 536870919 { 0x20000007 +1.83e193 } : BV:32
45 : eq(24, 44) : BOOL
46 : 268435458 { 0x10000002 +1.23e161 } : BV:32
47 : eq(24, 46) : BOOL
48 : 127 { 0x7f } : BV:8
49 : 268435457 { 0x10000001 +1.11e161 } : BV:32
50 : eq(24, 49) : BOOL
51 : 122 { 0x7a } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(45, 33, 54) : BV:8
56 : ite(42, 43, 55) : BV:8
57 : ite(40, 41, 56) : BV:8
58 : ite(38, 33, 57) : BV:8
59 : ite(35, 36, 58) : BV:8
60 : ite(32, 33, 59) : BV:8
61 : ite(29, 30, 60) : BV:8
62 : ite(26, 27, 61) : BV:8
63 : bvadd(8, 22, 23) : BV:32
64 : eq(63, 25) : BOOL
65 : eq(63, 28) : BOOL
66 : eq(63, 31) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 39) : BOOL
70 : eq(63, 23) : BOOL
71 : eq(63, 44) : BOOL
72 : eq(63, 46) : BOOL
73 : eq(63, 49) : BOOL
74 : ite(73, 51, 52) : BV:8
75 : ite(72, 48, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 43, 76) : BV:8
78 : ite(69, 41, 77) : BV:8
79 : ite(68, 33, 78) : BV:8
80 : ite(67, 36, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 30, 81) : BV:8
83 : ite(64, 27, 82) : BV:8
84 : bvadd(4, 22, 23) : BV:32
85 : eq(84, 25) : BOOL
86 : eq(84, 28) : BOOL
87 : eq(84, 31) : BOOL
88 : eq(84, 34) : BOOL
89 : eq(84, 37) : BOOL
90 : eq(84, 39) : BOOL
91 : eq(84, 23) : BOOL
92 : eq(84, 44) : BOOL
93 : eq(84, 46) : BOOL
94 : eq(84, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 33, 96) : BV:8
98 : ite(91, 43, 97) : BV:8
99 : ite(90, 41, 98) : BV:8
100 : ite(89, 33, 99) : BV:8
101 : ite(88, 36, 100) : BV:8
102 : ite(87, 33, 101) : BV:8
103 : ite(86, 30, 102) : BV:8
104 : ite(85, 27, 103) : BV:8
105 : bvadd(22, 23) : BV:32
106 : eq(105, 25) : BOOL
107 : eq(105, 28) : BOOL
108 : eq(105, 31) : BOOL
109 : eq(105, 34) : BOOL
110 : eq(105, 37) : BOOL
111 : eq(105, 39) : BOOL
112 : eq(105, 23) : BOOL
113 : eq(105, 44) : BOOL
114 : eq(105, 46) : BOOL
115 : eq(105, 49) : BOOL
116 : ite(115, 51, 52) : BV:8
117 : ite(114, 48, 116) : BV:8
118 : ite(113, 33, 117) : BV:8
119 : ite(112, 43, 118) : BV:8
120 : ite(111, 41, 119) : BV:8
121 : ite(110, 33, 120) : BV:8
122 : ite(109, 36, 121) : BV:8
123 : ite(108, 33, 122) : BV:8
124 : ite(107, 30, 123) : BV:8
125 : ite(106, 27, 124) : BV:8
126 : bvconcat(62, 83, 104, 125) : BV:32
127 : ite(18, 19, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27409 : BV:32
2 : Lambda27410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27414 : BV:32
2 : Lambda27415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 268435459 { 0x10000003 +1.35e161 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
54 : eq(52, 53) : BOOL
55 : 4 { 0x4 } : BV:8
56 : 268435456 { 0x10000000 +1.0e161 } : BV:32
57 : eq(52, 56) : BOOL
58 : 252 { 0xfc -4 } : BV:8
59 : 536870918 { 0x20000006 +1.71e193 } : BV:32
60 : eq(52, 59) : BOOL
61 : 64 { 0x40 } : BV:8
62 : eq(52, 50) : BOOL
63 : 63 { 0x3f } : BV:8
64 : 536870917 { 0x20000005 +1.59e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
67 : eq(52, 66) : BOOL
68 : 32 { 0x20 } : BV:8
69 : 536870916 { 0x20000004 +1.47e193 } : BV:32
70 : eq(52, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : 536870919 { 0x20000007 +1.83e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 268435458 { 0x10000002 +1.23e161 } : BV:32
75 : eq(52, 74) : BOOL
76 : 127 { 0x7f } : BV:8
77 : 268435457 { 0x10000001 +1.11e161 } : BV:32
78 : eq(52, 77) : BOOL
79 : 122 { 0x7a } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 61, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 61, 85) : BV:8
87 : ite(62, 63, 86) : BV:8
88 : ite(60, 61, 87) : BV:8
89 : ite(57, 58, 88) : BV:8
90 : ite(54, 55, 89) : BV:8
91 : bvadd(74, 51) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 50) : BOOL
96 : eq(91, 64) : BOOL
97 : eq(91, 66) : BOOL
98 : eq(91, 69) : BOOL
99 : eq(91, 72) : BOOL
100 : eq(91, 74) : BOOL
101 : eq(91, 77) : BOOL
102 : ite(101, 79, 80) : BV:8
103 : ite(100, 76, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 71, 104) : BV:8
106 : ite(97, 68, 105) : BV:8
107 : ite(96, 61, 106) : BV:8
108 : ite(95, 63, 107) : BV:8
109 : ite(94, 61, 108) : BV:8
110 : ite(93, 58, 109) : BV:8
111 : ite(92, 55, 110) : BV:8
112 : bvadd(77, 51) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 50) : BOOL
117 : eq(112, 64) : BOOL
118 : eq(112, 66) : BOOL
119 : eq(112, 69) : BOOL
120 : eq(112, 72) : BOOL
121 : eq(112, 74) : BOOL
122 : eq(112, 77) : BOOL
123 : ite(122, 79, 80) : BV:8
124 : ite(121, 76, 123) : BV:8
125 : ite(120, 61, 124) : BV:8
126 : ite(119, 71, 125) : BV:8
127 : ite(118, 68, 126) : BV:8
128 : ite(117, 61, 127) : BV:8
129 : ite(116, 63, 128) : BV:8
130 : ite(115, 61, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 55, 131) : BV:8
133 : bvadd(56, 51) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 59) : BOOL
137 : eq(133, 50) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 66) : BOOL
140 : eq(133, 69) : BOOL
141 : eq(133, 72) : BOOL
142 : eq(133, 74) : BOOL
143 : eq(133, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 61, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : ite(139, 68, 147) : BV:8
149 : ite(138, 61, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : ite(136, 61, 150) : BV:8
152 : ite(135, 58, 151) : BV:8
153 : ite(134, 55, 152) : BV:8
154 : bvconcat(90, 111, 132, 153) : BV:32
155 : bvadd(33, 49, 154) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 56) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 50) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : eq(155, 72) : BOOL
164 : eq(155, 74) : BOOL
165 : eq(155, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 61, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 61, 170) : BV:8
172 : ite(159, 63, 171) : BV:8
173 : ite(158, 61, 172) : BV:8
174 : ite(157, 58, 173) : BV:8
175 : ite(156, 55, 174) : BV:8
176 : bvadd(37, 49, 154) : BV:32
177 : eq(176, 53) : BOOL
178 : eq(176, 56) : BOOL
179 : eq(176, 59) : BOOL
180 : eq(176, 50) : BOOL
181 : eq(176, 64) : BOOL
182 : eq(176, 66) : BOOL
183 : eq(176, 69) : BOOL
184 : eq(176, 72) : BOOL
185 : eq(176, 74) : BOOL
186 : eq(176, 77) : BOOL
187 : ite(186, 79, 80) : BV:8
188 : ite(185, 76, 187) : BV:8
189 : ite(184, 61, 188) : BV:8
190 : ite(183, 71, 189) : BV:8
191 : ite(182, 68, 190) : BV:8
192 : ite(181, 61, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 61, 193) : BV:8
195 : ite(178, 58, 194) : BV:8
196 : ite(177, 55, 195) : BV:8
197 : bvadd(30, 49, 154) : BV:32
198 : eq(197, 53) : BOOL
199 : eq(197, 56) : BOOL
200 : eq(197, 59) : BOOL
201 : eq(197, 50) : BOOL
202 : eq(197, 64) : BOOL
203 : eq(197, 66) : BOOL
204 : eq(197, 69) : BOOL
205 : eq(197, 72) : BOOL
206 : eq(197, 74) : BOOL
207 : eq(197, 77) : BOOL
208 : ite(207, 79, 80) : BV:8
209 : ite(206, 76, 208) : BV:8
210 : ite(205, 61, 209) : BV:8
211 : ite(204, 71, 210) : BV:8
212 : ite(203, 68, 211) : BV:8
213 : ite(202, 61, 212) : BV:8
214 : ite(201, 63, 213) : BV:8
215 : ite(200, 61, 214) : BV:8
216 : ite(199, 58, 215) : BV:8
217 : ite(198, 55, 216) : BV:8
218 : bvadd(49, 154) : BV:32
219 : eq(218, 53) : BOOL
220 : eq(218, 56) : BOOL
221 : eq(218, 59) : BOOL
222 : eq(218, 50) : BOOL
223 : eq(218, 64) : BOOL
224 : eq(218, 66) : BOOL
225 : eq(218, 69) : BOOL
226 : eq(218, 72) : BOOL
227 : eq(218, 74) : BOOL
228 : eq(218, 77) : BOOL
229 : ite(228, 79, 80) : BV:8
230 : ite(227, 76, 229) : BV:8
231 : ite(226, 61, 230) : BV:8
232 : ite(225, 71, 231) : BV:8
233 : ite(224, 68, 232) : BV:8
234 : ite(223, 61, 233) : BV:8
235 : ite(222, 63, 234) : BV:8
236 : ite(221, 61, 235) : BV:8
237 : ite(220, 58, 236) : BV:8
238 : ite(219, 55, 237) : BV:8
239 : bvconcat(175, 196, 217, 238) : BV:32
240 : ite(6, 3, 239) : BV:32
241 : ite(47, 239, 240) : BV:32
242 : ite(6, 3, 241) : BV:32
243 : lambda(1, 2, 242) : FUNCTION[BV:32,BV:32 -> BV:32]
244 : sym_const(243) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27418 : BV:32
2 : Lambda27419 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27416 : BV:32
2 : Lambda27417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 268435459 { 0x10000003 +1.35e161 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 268435456 { 0x10000000 +1.0e161 } : BV:32
17 : eq(12, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 536870918 { 0x20000006 +1.71e193 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : eq(12, 10) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 536870917 { 0x20000005 +1.59e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
27 : eq(12, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 536870916 { 0x20000004 +1.47e193 } : BV:32
30 : eq(12, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 536870919 { 0x20000007 +1.83e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 268435458 { 0x10000002 +1.23e161 } : BV:32
35 : eq(12, 34) : BOOL
36 : 127 { 0x7f } : BV:8
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : eq(12, 37) : BOOL
39 : 122 { 0x7a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(33, 21, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(25, 21, 45) : BV:8
47 : ite(22, 23, 46) : BV:8
48 : ite(20, 21, 47) : BV:8
49 : ite(17, 18, 48) : BV:8
50 : ite(14, 15, 49) : BV:8
51 : bvadd(34, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : eq(51, 10) : BOOL
56 : eq(51, 24) : BOOL
57 : eq(51, 26) : BOOL
58 : eq(51, 29) : BOOL
59 : eq(51, 32) : BOOL
60 : eq(51, 34) : BOOL
61 : eq(51, 37) : BOOL
62 : ite(61, 39, 40) : BV:8
63 : ite(60, 36, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 31, 64) : BV:8
66 : ite(57, 28, 65) : BV:8
67 : ite(56, 21, 66) : BV:8
68 : ite(55, 23, 67) : BV:8
69 : ite(54, 21, 68) : BV:8
70 : ite(53, 18, 69) : BV:8
71 : ite(52, 15, 70) : BV:8
72 : bvadd(37, 11) : BV:32
73 : eq(72, 13) : BOOL
74 : eq(72, 16) : BOOL
75 : eq(72, 19) : BOOL
76 : eq(72, 10) : BOOL
77 : eq(72, 24) : BOOL
78 : eq(72, 26) : BOOL
79 : eq(72, 29) : BOOL
80 : eq(72, 32) : BOOL
81 : eq(72, 34) : BOOL
82 : eq(72, 37) : BOOL
83 : ite(82, 39, 40) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 21, 84) : BV:8
86 : ite(79, 31, 85) : BV:8
87 : ite(78, 28, 86) : BV:8
88 : ite(77, 21, 87) : BV:8
89 : ite(76, 23, 88) : BV:8
90 : ite(75, 21, 89) : BV:8
91 : ite(74, 18, 90) : BV:8
92 : ite(73, 15, 91) : BV:8
93 : bvadd(16, 11) : BV:32
94 : eq(93, 13) : BOOL
95 : eq(93, 16) : BOOL
96 : eq(93, 19) : BOOL
97 : eq(93, 10) : BOOL
98 : eq(93, 24) : BOOL
99 : eq(93, 26) : BOOL
100 : eq(93, 29) : BOOL
101 : eq(93, 32) : BOOL
102 : eq(93, 34) : BOOL
103 : eq(93, 37) : BOOL
104 : ite(103, 39, 40) : BV:8
105 : ite(102, 36, 104) : BV:8
106 : ite(101, 21, 105) : BV:8
107 : ite(100, 31, 106) : BV:8
108 : ite(99, 28, 107) : BV:8
109 : ite(98, 21, 108) : BV:8
110 : ite(97, 23, 109) : BV:8
111 : ite(96, 21, 110) : BV:8
112 : ite(95, 18, 111) : BV:8
113 : ite(94, 15, 112) : BV:8
114 : bvconcat(50, 71, 92, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 19) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 26) : BOOL
122 : eq(115, 29) : BOOL
123 : eq(115, 32) : BOOL
124 : eq(115, 34) : BOOL
125 : eq(115, 37) : BOOL
126 : ite(125, 39, 40) : BV:8
127 : ite(124, 36, 126) : BV:8
128 : ite(123, 21, 127) : BV:8
129 : ite(122, 31, 128) : BV:8
130 : ite(121, 28, 129) : BV:8
131 : ite(120, 21, 130) : BV:8
132 : ite(119, 23, 131) : BV:8
133 : ite(118, 21, 132) : BV:8
134 : ite(117, 18, 133) : BV:8
135 : ite(116, 15, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 9, 114) : BV:32
138 : eq(137, 13) : BOOL
139 : eq(137, 16) : BOOL
140 : eq(137, 19) : BOOL
141 : eq(137, 10) : BOOL
142 : eq(137, 24) : BOOL
143 : eq(137, 26) : BOOL
144 : eq(137, 29) : BOOL
145 : eq(137, 32) : BOOL
146 : eq(137, 34) : BOOL
147 : eq(137, 37) : BOOL
148 : ite(147, 39, 40) : BV:8
149 : ite(146, 36, 148) : BV:8
150 : ite(145, 21, 149) : BV:8
151 : ite(144, 31, 150) : BV:8
152 : ite(143, 28, 151) : BV:8
153 : ite(142, 21, 152) : BV:8
154 : ite(141, 23, 153) : BV:8
155 : ite(140, 21, 154) : BV:8
156 : ite(139, 18, 155) : BV:8
157 : ite(138, 15, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 9, 114) : BV:32
160 : eq(159, 13) : BOOL
161 : eq(159, 16) : BOOL
162 : eq(159, 19) : BOOL
163 : eq(159, 10) : BOOL
164 : eq(159, 24) : BOOL
165 : eq(159, 26) : BOOL
166 : eq(159, 29) : BOOL
167 : eq(159, 32) : BOOL
168 : eq(159, 34) : BOOL
169 : eq(159, 37) : BOOL
170 : ite(169, 39, 40) : BV:8
171 : ite(168, 36, 170) : BV:8
172 : ite(167, 21, 171) : BV:8
173 : ite(166, 31, 172) : BV:8
174 : ite(165, 28, 173) : BV:8
175 : ite(164, 21, 174) : BV:8
176 : ite(163, 23, 175) : BV:8
177 : ite(162, 21, 176) : BV:8
178 : ite(161, 18, 177) : BV:8
179 : ite(160, 15, 178) : BV:8
180 : bvadd(9, 114) : BV:32
181 : eq(180, 13) : BOOL
182 : eq(180, 16) : BOOL
183 : eq(180, 19) : BOOL
184 : eq(180, 10) : BOOL
185 : eq(180, 24) : BOOL
186 : eq(180, 26) : BOOL
187 : eq(180, 29) : BOOL
188 : eq(180, 32) : BOOL
189 : eq(180, 34) : BOOL
190 : eq(180, 37) : BOOL
191 : ite(190, 39, 40) : BV:8
192 : ite(189, 36, 191) : BV:8
193 : ite(188, 21, 192) : BV:8
194 : ite(187, 31, 193) : BV:8
195 : ite(186, 28, 194) : BV:8
196 : ite(185, 21, 195) : BV:8
197 : ite(184, 23, 196) : BV:8
198 : ite(183, 21, 197) : BV:8
199 : ite(182, 18, 198) : BV:8
200 : ite(181, 15, 199) : BV:8
201 : bvconcat(135, 157, 179, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : lambda(1, 2, 202) : FUNCTION[BV:32,BV:32 -> BV:32]
204 : sym_const(203) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27425 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 536870916 { 0x20000004 +1.47e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 268435456 { 0x10000000 +1.0e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : 536870918 { 0x20000006 +1.71e193 } : BV:32
17 : eq(9, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 268435459 { 0x10000003 +1.35e161 } : BV:32
20 : eq(9, 19) : BOOL
21 : 63 { 0x3f } : BV:8
22 : 536870917 { 0x20000005 +1.59e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
25 : eq(9, 24) : BOOL
26 : 32 { 0x20 } : BV:8
27 : eq(9, 8) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 536870919 { 0x20000007 +1.83e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 268435458 { 0x10000002 +1.23e161 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 268435457 { 0x10000001 +1.11e161 } : BV:32
35 : eq(9, 34) : BOOL
36 : 122 { 0x7a } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(30, 18, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : ite(11, 12, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 24) : BOOL
56 : eq(49, 8) : BOOL
57 : eq(49, 29) : BOOL
58 : eq(49, 31) : BOOL
59 : eq(49, 34) : BOOL
60 : ite(59, 36, 37) : BV:8
61 : ite(58, 33, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 28, 62) : BV:8
64 : ite(55, 26, 63) : BV:8
65 : ite(54, 18, 64) : BV:8
66 : ite(53, 21, 65) : BV:8
67 : ite(52, 18, 66) : BV:8
68 : ite(51, 15, 67) : BV:8
69 : ite(50, 12, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 7, 8) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 13) : BOOL
74 : eq(71, 16) : BOOL
75 : eq(71, 19) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 24) : BOOL
78 : eq(71, 8) : BOOL
79 : eq(71, 29) : BOOL
80 : eq(71, 31) : BOOL
81 : eq(71, 34) : BOOL
82 : ite(81, 36, 37) : BV:8
83 : ite(80, 33, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 28, 84) : BV:8
86 : ite(77, 26, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 21, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 12, 90) : BV:8
92 : bvadd(7, 8) : BV:32
93 : eq(92, 10) : BOOL
94 : eq(92, 13) : BOOL
95 : eq(92, 16) : BOOL
96 : eq(92, 19) : BOOL
97 : eq(92, 22) : BOOL
98 : eq(92, 24) : BOOL
99 : eq(92, 8) : BOOL
100 : eq(92, 29) : BOOL
101 : eq(92, 31) : BOOL
102 : eq(92, 34) : BOOL
103 : ite(102, 36, 37) : BV:8
104 : ite(101, 33, 103) : BV:8
105 : ite(100, 18, 104) : BV:8
106 : ite(99, 28, 105) : BV:8
107 : ite(98, 26, 106) : BV:8
108 : ite(97, 18, 107) : BV:8
109 : ite(96, 21, 108) : BV:8
110 : ite(95, 18, 109) : BV:8
111 : ite(94, 15, 110) : BV:8
112 : ite(93, 12, 111) : BV:8
113 : bvconcat(47, 69, 91, 112) : BV:32
114 : ite(3, 4, 113) : BV:32
115 : lambda(1, 114) : FUNCTION[BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2038698588 { 0x7984125c +1.3181028e116 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 536870916 { 0x20000004 +1.47e193 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2517246563 { 0x960a2263 -1777720733 -1.7917439e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3047752615 { 0xb5a903a7 -1247214681 -1.32042396e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=counter_example.random_seed
3952522439
=counter_example_end
=global nodece 61 num_edges_traversed 1
=global nodece 61 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce11471.num_edges_traversed2
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(epsilon)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce11471 8d9d6df677c363c5844dfd9d48447cb
=input.spec-%var-x-1
1 : Lambda27460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27463 : BV:32
18 : Lambda27461 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27462 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 268435459 { 0x10000003 +1.35e161 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 268435456 { 0x10000000 +1.0e161 } : BV:32
65 : eq(60, 64) : BOOL
66 : 252 { 0xfc -4 } : BV:8
67 : 536870918 { 0x20000006 +1.71e193 } : BV:32
68 : eq(60, 67) : BOOL
69 : 64 { 0x40 } : BV:8
70 : eq(60, 58) : BOOL
71 : 63 { 0x3f } : BV:8
72 : 536870917 { 0x20000005 +1.59e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
75 : eq(60, 74) : BOOL
76 : 32 { 0x20 } : BV:8
77 : 536870916 { 0x20000004 +1.47e193 } : BV:32
78 : eq(60, 77) : BOOL
79 : 128 { 0x80 -128 } : BV:8
80 : 536870919 { 0x20000007 +1.83e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 268435458 { 0x10000002 +1.23e161 } : BV:32
83 : eq(60, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 268435457 { 0x10000001 +1.11e161 } : BV:32
86 : eq(60, 85) : BOOL
87 : 122 { 0x7a } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(81, 69, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : ite(75, 76, 92) : BV:8
94 : ite(73, 69, 93) : BV:8
95 : ite(70, 71, 94) : BV:8
96 : ite(68, 69, 95) : BV:8
97 : ite(65, 66, 96) : BV:8
98 : ite(62, 63, 97) : BV:8
99 : bvadd(82, 59) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 58) : BOOL
104 : eq(99, 72) : BOOL
105 : eq(99, 74) : BOOL
106 : eq(99, 77) : BOOL
107 : eq(99, 80) : BOOL
108 : eq(99, 82) : BOOL
109 : eq(99, 85) : BOOL
110 : ite(109, 87, 88) : BV:8
111 : ite(108, 84, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 79, 112) : BV:8
114 : ite(105, 76, 113) : BV:8
115 : ite(104, 69, 114) : BV:8
116 : ite(103, 71, 115) : BV:8
117 : ite(102, 69, 116) : BV:8
118 : ite(101, 66, 117) : BV:8
119 : ite(100, 63, 118) : BV:8
120 : bvadd(85, 59) : BV:32
121 : eq(120, 61) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 58) : BOOL
125 : eq(120, 72) : BOOL
126 : eq(120, 74) : BOOL
127 : eq(120, 77) : BOOL
128 : eq(120, 80) : BOOL
129 : eq(120, 82) : BOOL
130 : eq(120, 85) : BOOL
131 : ite(130, 87, 88) : BV:8
132 : ite(129, 84, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 79, 133) : BV:8
135 : ite(126, 76, 134) : BV:8
136 : ite(125, 69, 135) : BV:8
137 : ite(124, 71, 136) : BV:8
138 : ite(123, 69, 137) : BV:8
139 : ite(122, 66, 138) : BV:8
140 : ite(121, 63, 139) : BV:8
141 : bvadd(64, 59) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 67) : BOOL
145 : eq(141, 58) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 74) : BOOL
148 : eq(141, 77) : BOOL
149 : eq(141, 80) : BOOL
150 : eq(141, 82) : BOOL
151 : eq(141, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 69, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : ite(147, 76, 155) : BV:8
157 : ite(146, 69, 156) : BV:8
158 : ite(145, 71, 157) : BV:8
159 : ite(144, 69, 158) : BV:8
160 : ite(143, 66, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : bvconcat(98, 119, 140, 161) : BV:32
163 : bvadd(37, 57, 162) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 64) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 58) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : eq(163, 80) : BOOL
172 : eq(163, 82) : BOOL
173 : eq(163, 85) : BOOL
174 : ite(173, 87, 88) : BV:8
175 : ite(172, 84, 174) : BV:8
176 : ite(171, 69, 175) : BV:8
177 : ite(170, 79, 176) : BV:8
178 : ite(169, 76, 177) : BV:8
179 : ite(168, 69, 178) : BV:8
180 : ite(167, 71, 179) : BV:8
181 : ite(166, 69, 180) : BV:8
182 : ite(165, 66, 181) : BV:8
183 : ite(164, 63, 182) : BV:8
184 : bvadd(41, 57, 162) : BV:32
185 : eq(184, 61) : BOOL
186 : eq(184, 64) : BOOL
187 : eq(184, 67) : BOOL
188 : eq(184, 58) : BOOL
189 : eq(184, 72) : BOOL
190 : eq(184, 74) : BOOL
191 : eq(184, 77) : BOOL
192 : eq(184, 80) : BOOL
193 : eq(184, 82) : BOOL
194 : eq(184, 85) : BOOL
195 : ite(194, 87, 88) : BV:8
196 : ite(193, 84, 195) : BV:8
197 : ite(192, 69, 196) : BV:8
198 : ite(191, 79, 197) : BV:8
199 : ite(190, 76, 198) : BV:8
200 : ite(189, 69, 199) : BV:8
201 : ite(188, 71, 200) : BV:8
202 : ite(187, 69, 201) : BV:8
203 : ite(186, 66, 202) : BV:8
204 : ite(185, 63, 203) : BV:8
205 : bvadd(34, 57, 162) : BV:32
206 : eq(205, 61) : BOOL
207 : eq(205, 64) : BOOL
208 : eq(205, 67) : BOOL
209 : eq(205, 58) : BOOL
210 : eq(205, 72) : BOOL
211 : eq(205, 74) : BOOL
212 : eq(205, 77) : BOOL
213 : eq(205, 80) : BOOL
214 : eq(205, 82) : BOOL
215 : eq(205, 85) : BOOL
216 : ite(215, 87, 88) : BV:8
217 : ite(214, 84, 216) : BV:8
218 : ite(213, 69, 217) : BV:8
219 : ite(212, 79, 218) : BV:8
220 : ite(211, 76, 219) : BV:8
221 : ite(210, 69, 220) : BV:8
222 : ite(209, 71, 221) : BV:8
223 : ite(208, 69, 222) : BV:8
224 : ite(207, 66, 223) : BV:8
225 : ite(206, 63, 224) : BV:8
226 : bvadd(57, 162) : BV:32
227 : eq(226, 61) : BOOL
228 : eq(226, 64) : BOOL
229 : eq(226, 67) : BOOL
230 : eq(226, 58) : BOOL
231 : eq(226, 72) : BOOL
232 : eq(226, 74) : BOOL
233 : eq(226, 77) : BOOL
234 : eq(226, 80) : BOOL
235 : eq(226, 82) : BOOL
236 : eq(226, 85) : BOOL
237 : ite(236, 87, 88) : BV:8
238 : ite(235, 84, 237) : BV:8
239 : ite(234, 69, 238) : BV:8
240 : ite(233, 79, 239) : BV:8
241 : ite(232, 76, 240) : BV:8
242 : ite(231, 69, 241) : BV:8
243 : ite(230, 71, 242) : BV:8
244 : ite(229, 69, 243) : BV:8
245 : ite(228, 66, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : bvconcat(183, 204, 225, 246) : BV:32
248 : ite(55, 2, 247) : BV:32
249 : lambda(52, 248) : FUNCTION[BV:32 -> BV:32]
250 : map(51, 249) : MAP[BV:32 -> BV:32]
251 : lambda(17, 250) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
252 : map(16, 251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
253 : sym_const(252) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1788434103 { 0x6a9956b7 +1.19795882e86 } : BV:32
=input.dst.llvm-%x
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n
1 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435455 ] -> 0, [ 268435456; 268435456 ] -> 252, [ 268435457; 268435457 ] -> 122, [ 268435458; 268435458 ] -> 127, [ 268435459; 268435459 ] -> 63, [ 268435460; 536870915 ] -> 0, [ 536870916; 536870916 ] -> 128, [ 536870917; 536870919 ] -> 64, [ 536870920; 1342177275 ] -> 0, [ 1342177276; 1342177276 ] -> 4, [ 1342177277; 1342177278 ] -> 0, [ 1342177279; 1342177279 ] -> 32, [ 1342177280; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 536870916; 2517246559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2517246560; 2517246563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2517246564; 3047752611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3047752612; 3047752615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3047752616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27467 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27470 : BV:32
18 : Lambda27468 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27469 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 268435459 { 0x10000003 +1.35e161 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
81 : eq(79, 80) : BOOL
82 : 4 { 0x4 } : BV:8
83 : 268435456 { 0x10000000 +1.0e161 } : BV:32
84 : eq(79, 83) : BOOL
85 : 252 { 0xfc -4 } : BV:8
86 : 536870918 { 0x20000006 +1.71e193 } : BV:32
87 : eq(79, 86) : BOOL
88 : 64 { 0x40 } : BV:8
89 : eq(79, 77) : BOOL
90 : 63 { 0x3f } : BV:8
91 : 536870917 { 0x20000005 +1.59e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
94 : eq(79, 93) : BOOL
95 : 32 { 0x20 } : BV:8
96 : 536870916 { 0x20000004 +1.47e193 } : BV:32
97 : eq(79, 96) : BOOL
98 : 128 { 0x80 -128 } : BV:8
99 : 536870919 { 0x20000007 +1.83e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 268435458 { 0x10000002 +1.23e161 } : BV:32
102 : eq(79, 101) : BOOL
103 : 127 { 0x7f } : BV:8
104 : 268435457 { 0x10000001 +1.11e161 } : BV:32
105 : eq(79, 104) : BOOL
106 : 122 { 0x7a } : BV:8
107 : 0 { 0x0 } : BV:8
108 : ite(105, 106, 107) : BV:8
109 : ite(102, 103, 108) : BV:8
110 : ite(100, 88, 109) : BV:8
111 : ite(97, 98, 110) : BV:8
112 : ite(94, 95, 111) : BV:8
113 : ite(92, 88, 112) : BV:8
114 : ite(89, 90, 113) : BV:8
115 : ite(87, 88, 114) : BV:8
116 : ite(84, 85, 115) : BV:8
117 : ite(81, 82, 116) : BV:8
118 : bvadd(101, 78) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 77) : BOOL
123 : eq(118, 91) : BOOL
124 : eq(118, 93) : BOOL
125 : eq(118, 96) : BOOL
126 : eq(118, 99) : BOOL
127 : eq(118, 101) : BOOL
128 : eq(118, 104) : BOOL
129 : ite(128, 106, 107) : BV:8
130 : ite(127, 103, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 98, 131) : BV:8
133 : ite(124, 95, 132) : BV:8
134 : ite(123, 88, 133) : BV:8
135 : ite(122, 90, 134) : BV:8
136 : ite(121, 88, 135) : BV:8
137 : ite(120, 85, 136) : BV:8
138 : ite(119, 82, 137) : BV:8
139 : bvadd(104, 78) : BV:32
140 : eq(139, 80) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 77) : BOOL
144 : eq(139, 91) : BOOL
145 : eq(139, 93) : BOOL
146 : eq(139, 96) : BOOL
147 : eq(139, 99) : BOOL
148 : eq(139, 101) : BOOL
149 : eq(139, 104) : BOOL
150 : ite(149, 106, 107) : BV:8
151 : ite(148, 103, 150) : BV:8
152 : ite(147, 88, 151) : BV:8
153 : ite(146, 98, 152) : BV:8
154 : ite(145, 95, 153) : BV:8
155 : ite(144, 88, 154) : BV:8
156 : ite(143, 90, 155) : BV:8
157 : ite(142, 88, 156) : BV:8
158 : ite(141, 85, 157) : BV:8
159 : ite(140, 82, 158) : BV:8
160 : bvadd(83, 78) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 86) : BOOL
164 : eq(160, 77) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 93) : BOOL
167 : eq(160, 96) : BOOL
168 : eq(160, 99) : BOOL
169 : eq(160, 101) : BOOL
170 : eq(160, 104) : BOOL
171 : ite(170, 106, 107) : BV:8
172 : ite(169, 103, 171) : BV:8
173 : ite(168, 88, 172) : BV:8
174 : ite(167, 98, 173) : BV:8
175 : ite(166, 95, 174) : BV:8
176 : ite(165, 88, 175) : BV:8
177 : ite(164, 90, 176) : BV:8
178 : ite(163, 88, 177) : BV:8
179 : ite(162, 85, 178) : BV:8
180 : ite(161, 82, 179) : BV:8
181 : bvconcat(117, 138, 159, 180) : BV:32
182 : bvadd(37, 76, 181) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 83) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 77) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : eq(182, 99) : BOOL
191 : eq(182, 101) : BOOL
192 : eq(182, 104) : BOOL
193 : ite(192, 106, 107) : BV:8
194 : ite(191, 103, 193) : BV:8
195 : ite(190, 88, 194) : BV:8
196 : ite(189, 98, 195) : BV:8
197 : ite(188, 95, 196) : BV:8
198 : ite(187, 88, 197) : BV:8
199 : ite(186, 90, 198) : BV:8
200 : ite(185, 88, 199) : BV:8
201 : ite(184, 85, 200) : BV:8
202 : ite(183, 82, 201) : BV:8
203 : bvadd(41, 76, 181) : BV:32
204 : eq(203, 80) : BOOL
205 : eq(203, 83) : BOOL
206 : eq(203, 86) : BOOL
207 : eq(203, 77) : BOOL
208 : eq(203, 91) : BOOL
209 : eq(203, 93) : BOOL
210 : eq(203, 96) : BOOL
211 : eq(203, 99) : BOOL
212 : eq(203, 101) : BOOL
213 : eq(203, 104) : BOOL
214 : ite(213, 106, 107) : BV:8
215 : ite(212, 103, 214) : BV:8
216 : ite(211, 88, 215) : BV:8
217 : ite(210, 98, 216) : BV:8
218 : ite(209, 95, 217) : BV:8
219 : ite(208, 88, 218) : BV:8
220 : ite(207, 90, 219) : BV:8
221 : ite(206, 88, 220) : BV:8
222 : ite(205, 85, 221) : BV:8
223 : ite(204, 82, 222) : BV:8
224 : bvadd(34, 76, 181) : BV:32
225 : eq(224, 80) : BOOL
226 : eq(224, 83) : BOOL
227 : eq(224, 86) : BOOL
228 : eq(224, 77) : BOOL
229 : eq(224, 91) : BOOL
230 : eq(224, 93) : BOOL
231 : eq(224, 96) : BOOL
232 : eq(224, 99) : BOOL
233 : eq(224, 101) : BOOL
234 : eq(224, 104) : BOOL
235 : ite(234, 106, 107) : BV:8
236 : ite(233, 103, 235) : BV:8
237 : ite(232, 88, 236) : BV:8
238 : ite(231, 98, 237) : BV:8
239 : ite(230, 95, 238) : BV:8
240 : ite(229, 88, 239) : BV:8
241 : ite(228, 90, 240) : BV:8
242 : ite(227, 88, 241) : BV:8
243 : ite(226, 85, 242) : BV:8
244 : ite(225, 82, 243) : BV:8
245 : bvadd(76, 181) : BV:32
246 : eq(245, 80) : BOOL
247 : eq(245, 83) : BOOL
248 : eq(245, 86) : BOOL
249 : eq(245, 77) : BOOL
250 : eq(245, 91) : BOOL
251 : eq(245, 93) : BOOL
252 : eq(245, 96) : BOOL
253 : eq(245, 99) : BOOL
254 : eq(245, 101) : BOOL
255 : eq(245, 104) : BOOL
256 : ite(255, 106, 107) : BV:8
257 : ite(254, 103, 256) : BV:8
258 : ite(253, 88, 257) : BV:8
259 : ite(252, 98, 258) : BV:8
260 : ite(251, 95, 259) : BV:8
261 : ite(250, 88, 260) : BV:8
262 : ite(249, 90, 261) : BV:8
263 : ite(248, 88, 262) : BV:8
264 : ite(247, 85, 263) : BV:8
265 : ite(246, 82, 264) : BV:8
266 : bvconcat(202, 223, 244, 265) : BV:32
267 : ite(55, 2, 266) : BV:32
268 : ite(74, 266, 267) : BV:32
269 : ite(55, 2, 268) : BV:32
270 : lambda(52, 269) : FUNCTION[BV:32 -> BV:32]
271 : map(51, 270) : MAP[BV:32 -> BV:32]
272 : lambda(17, 271) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
273 : map(16, 272) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
274 : sym_const(273) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27464 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27465 : BV:32
7 : 2147175854 { 0x7ffb4dae +1.96330809e128 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27473 : BV:32
18 : eq(17, 2) : BOOL
19 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 536870916 { 0x20000004 +1.47e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
26 : eq(24, 25) : BOOL
27 : 4 { 0x4 } : BV:8
28 : 268435456 { 0x10000000 +1.0e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 252 { 0xfc -4 } : BV:8
31 : 536870918 { 0x20000006 +1.71e193 } : BV:32
32 : eq(24, 31) : BOOL
33 : 64 { 0x40 } : BV:8
34 : 268435459 { 0x10000003 +1.35e161 } : BV:32
35 : eq(24, 34) : BOOL
36 : 63 { 0x3f } : BV:8
37 : 536870917 { 0x20000005 +1.59e193 } : BV:32
38 : eq(24, 37) : BOOL
39 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
40 : eq(24, 39) : BOOL
41 : 32 { 0x20 } : BV:8
42 : eq(24, 23) : BOOL
43 : 128 { 0x80 -128 } : BV:8
44 : 536870919 { 0x20000007 +1.83e193 } : BV:32
45 : eq(24, 44) : BOOL
46 : 268435458 { 0x10000002 +1.23e161 } : BV:32
47 : eq(24, 46) : BOOL
48 : 127 { 0x7f } : BV:8
49 : 268435457 { 0x10000001 +1.11e161 } : BV:32
50 : eq(24, 49) : BOOL
51 : 122 { 0x7a } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(45, 33, 54) : BV:8
56 : ite(42, 43, 55) : BV:8
57 : ite(40, 41, 56) : BV:8
58 : ite(38, 33, 57) : BV:8
59 : ite(35, 36, 58) : BV:8
60 : ite(32, 33, 59) : BV:8
61 : ite(29, 30, 60) : BV:8
62 : ite(26, 27, 61) : BV:8
63 : bvadd(8, 22, 23) : BV:32
64 : eq(63, 25) : BOOL
65 : eq(63, 28) : BOOL
66 : eq(63, 31) : BOOL
67 : eq(63, 34) : BOOL
68 : eq(63, 37) : BOOL
69 : eq(63, 39) : BOOL
70 : eq(63, 23) : BOOL
71 : eq(63, 44) : BOOL
72 : eq(63, 46) : BOOL
73 : eq(63, 49) : BOOL
74 : ite(73, 51, 52) : BV:8
75 : ite(72, 48, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 43, 76) : BV:8
78 : ite(69, 41, 77) : BV:8
79 : ite(68, 33, 78) : BV:8
80 : ite(67, 36, 79) : BV:8
81 : ite(66, 33, 80) : BV:8
82 : ite(65, 30, 81) : BV:8
83 : ite(64, 27, 82) : BV:8
84 : bvadd(4, 22, 23) : BV:32
85 : eq(84, 25) : BOOL
86 : eq(84, 28) : BOOL
87 : eq(84, 31) : BOOL
88 : eq(84, 34) : BOOL
89 : eq(84, 37) : BOOL
90 : eq(84, 39) : BOOL
91 : eq(84, 23) : BOOL
92 : eq(84, 44) : BOOL
93 : eq(84, 46) : BOOL
94 : eq(84, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 33, 96) : BV:8
98 : ite(91, 43, 97) : BV:8
99 : ite(90, 41, 98) : BV:8
100 : ite(89, 33, 99) : BV:8
101 : ite(88, 36, 100) : BV:8
102 : ite(87, 33, 101) : BV:8
103 : ite(86, 30, 102) : BV:8
104 : ite(85, 27, 103) : BV:8
105 : bvadd(22, 23) : BV:32
106 : eq(105, 25) : BOOL
107 : eq(105, 28) : BOOL
108 : eq(105, 31) : BOOL
109 : eq(105, 34) : BOOL
110 : eq(105, 37) : BOOL
111 : eq(105, 39) : BOOL
112 : eq(105, 23) : BOOL
113 : eq(105, 44) : BOOL
114 : eq(105, 46) : BOOL
115 : eq(105, 49) : BOOL
116 : ite(115, 51, 52) : BV:8
117 : ite(114, 48, 116) : BV:8
118 : ite(113, 33, 117) : BV:8
119 : ite(112, 43, 118) : BV:8
120 : ite(111, 41, 119) : BV:8
121 : ite(110, 33, 120) : BV:8
122 : ite(109, 36, 121) : BV:8
123 : ite(108, 33, 122) : BV:8
124 : ite(107, 30, 123) : BV:8
125 : ite(106, 27, 124) : BV:8
126 : bvconcat(62, 83, 104, 125) : BV:32
127 : ite(18, 19, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27409 : BV:32
2 : Lambda27410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27414 : BV:32
2 : Lambda27415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 268435459 { 0x10000003 +1.35e161 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
54 : eq(52, 53) : BOOL
55 : 4 { 0x4 } : BV:8
56 : 268435456 { 0x10000000 +1.0e161 } : BV:32
57 : eq(52, 56) : BOOL
58 : 252 { 0xfc -4 } : BV:8
59 : 536870918 { 0x20000006 +1.71e193 } : BV:32
60 : eq(52, 59) : BOOL
61 : 64 { 0x40 } : BV:8
62 : eq(52, 50) : BOOL
63 : 63 { 0x3f } : BV:8
64 : 536870917 { 0x20000005 +1.59e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
67 : eq(52, 66) : BOOL
68 : 32 { 0x20 } : BV:8
69 : 536870916 { 0x20000004 +1.47e193 } : BV:32
70 : eq(52, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : 536870919 { 0x20000007 +1.83e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 268435458 { 0x10000002 +1.23e161 } : BV:32
75 : eq(52, 74) : BOOL
76 : 127 { 0x7f } : BV:8
77 : 268435457 { 0x10000001 +1.11e161 } : BV:32
78 : eq(52, 77) : BOOL
79 : 122 { 0x7a } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 61, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 61, 85) : BV:8
87 : ite(62, 63, 86) : BV:8
88 : ite(60, 61, 87) : BV:8
89 : ite(57, 58, 88) : BV:8
90 : ite(54, 55, 89) : BV:8
91 : bvadd(74, 51) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 50) : BOOL
96 : eq(91, 64) : BOOL
97 : eq(91, 66) : BOOL
98 : eq(91, 69) : BOOL
99 : eq(91, 72) : BOOL
100 : eq(91, 74) : BOOL
101 : eq(91, 77) : BOOL
102 : ite(101, 79, 80) : BV:8
103 : ite(100, 76, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 71, 104) : BV:8
106 : ite(97, 68, 105) : BV:8
107 : ite(96, 61, 106) : BV:8
108 : ite(95, 63, 107) : BV:8
109 : ite(94, 61, 108) : BV:8
110 : ite(93, 58, 109) : BV:8
111 : ite(92, 55, 110) : BV:8
112 : bvadd(77, 51) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 50) : BOOL
117 : eq(112, 64) : BOOL
118 : eq(112, 66) : BOOL
119 : eq(112, 69) : BOOL
120 : eq(112, 72) : BOOL
121 : eq(112, 74) : BOOL
122 : eq(112, 77) : BOOL
123 : ite(122, 79, 80) : BV:8
124 : ite(121, 76, 123) : BV:8
125 : ite(120, 61, 124) : BV:8
126 : ite(119, 71, 125) : BV:8
127 : ite(118, 68, 126) : BV:8
128 : ite(117, 61, 127) : BV:8
129 : ite(116, 63, 128) : BV:8
130 : ite(115, 61, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 55, 131) : BV:8
133 : bvadd(56, 51) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 59) : BOOL
137 : eq(133, 50) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 66) : BOOL
140 : eq(133, 69) : BOOL
141 : eq(133, 72) : BOOL
142 : eq(133, 74) : BOOL
143 : eq(133, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 61, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : ite(139, 68, 147) : BV:8
149 : ite(138, 61, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : ite(136, 61, 150) : BV:8
152 : ite(135, 58, 151) : BV:8
153 : ite(134, 55, 152) : BV:8
154 : bvconcat(90, 111, 132, 153) : BV:32
155 : bvadd(33, 49, 154) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 56) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 50) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : eq(155, 72) : BOOL
164 : eq(155, 74) : BOOL
165 : eq(155, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 61, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 61, 170) : BV:8
172 : ite(159, 63, 171) : BV:8
173 : ite(158, 61, 172) : BV:8
174 : ite(157, 58, 173) : BV:8
175 : ite(156, 55, 174) : BV:8
176 : bvadd(37, 49, 154) : BV:32
177 : eq(176, 53) : BOOL
178 : eq(176, 56) : BOOL
179 : eq(176, 59) : BOOL
180 : eq(176, 50) : BOOL
181 : eq(176, 64) : BOOL
182 : eq(176, 66) : BOOL
183 : eq(176, 69) : BOOL
184 : eq(176, 72) : BOOL
185 : eq(176, 74) : BOOL
186 : eq(176, 77) : BOOL
187 : ite(186, 79, 80) : BV:8
188 : ite(185, 76, 187) : BV:8
189 : ite(184, 61, 188) : BV:8
190 : ite(183, 71, 189) : BV:8
191 : ite(182, 68, 190) : BV:8
192 : ite(181, 61, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 61, 193) : BV:8
195 : ite(178, 58, 194) : BV:8
196 : ite(177, 55, 195) : BV:8
197 : bvadd(30, 49, 154) : BV:32
198 : eq(197, 53) : BOOL
199 : eq(197, 56) : BOOL
200 : eq(197, 59) : BOOL
201 : eq(197, 50) : BOOL
202 : eq(197, 64) : BOOL
203 : eq(197, 66) : BOOL
204 : eq(197, 69) : BOOL
205 : eq(197, 72) : BOOL
206 : eq(197, 74) : BOOL
207 : eq(197, 77) : BOOL
208 : ite(207, 79, 80) : BV:8
209 : ite(206, 76, 208) : BV:8
210 : ite(205, 61, 209) : BV:8
211 : ite(204, 71, 210) : BV:8
212 : ite(203, 68, 211) : BV:8
213 : ite(202, 61, 212) : BV:8
214 : ite(201, 63, 213) : BV:8
215 : ite(200, 61, 214) : BV:8
216 : ite(199, 58, 215) : BV:8
217 : ite(198, 55, 216) : BV:8
218 : bvadd(49, 154) : BV:32
219 : eq(218, 53) : BOOL
220 : eq(218, 56) : BOOL
221 : eq(218, 59) : BOOL
222 : eq(218, 50) : BOOL
223 : eq(218, 64) : BOOL
224 : eq(218, 66) : BOOL
225 : eq(218, 69) : BOOL
226 : eq(218, 72) : BOOL
227 : eq(218, 74) : BOOL
228 : eq(218, 77) : BOOL
229 : ite(228, 79, 80) : BV:8
230 : ite(227, 76, 229) : BV:8
231 : ite(226, 61, 230) : BV:8
232 : ite(225, 71, 231) : BV:8
233 : ite(224, 68, 232) : BV:8
234 : ite(223, 61, 233) : BV:8
235 : ite(222, 63, 234) : BV:8
236 : ite(221, 61, 235) : BV:8
237 : ite(220, 58, 236) : BV:8
238 : ite(219, 55, 237) : BV:8
239 : bvconcat(175, 196, 217, 238) : BV:32
240 : ite(6, 3, 239) : BV:32
241 : ite(47, 239, 240) : BV:32
242 : ite(6, 3, 241) : BV:32
243 : lambda(1, 2, 242) : FUNCTION[BV:32,BV:32 -> BV:32]
244 : sym_const(243) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27418 : BV:32
2 : Lambda27419 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27416 : BV:32
2 : Lambda27417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 268435459 { 0x10000003 +1.35e161 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 268435456 { 0x10000000 +1.0e161 } : BV:32
17 : eq(12, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 536870918 { 0x20000006 +1.71e193 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : eq(12, 10) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 536870917 { 0x20000005 +1.59e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
27 : eq(12, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 536870916 { 0x20000004 +1.47e193 } : BV:32
30 : eq(12, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 536870919 { 0x20000007 +1.83e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 268435458 { 0x10000002 +1.23e161 } : BV:32
35 : eq(12, 34) : BOOL
36 : 127 { 0x7f } : BV:8
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : eq(12, 37) : BOOL
39 : 122 { 0x7a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(33, 21, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(25, 21, 45) : BV:8
47 : ite(22, 23, 46) : BV:8
48 : ite(20, 21, 47) : BV:8
49 : ite(17, 18, 48) : BV:8
50 : ite(14, 15, 49) : BV:8
51 : bvadd(34, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : eq(51, 10) : BOOL
56 : eq(51, 24) : BOOL
57 : eq(51, 26) : BOOL
58 : eq(51, 29) : BOOL
59 : eq(51, 32) : BOOL
60 : eq(51, 34) : BOOL
61 : eq(51, 37) : BOOL
62 : ite(61, 39, 40) : BV:8
63 : ite(60, 36, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 31, 64) : BV:8
66 : ite(57, 28, 65) : BV:8
67 : ite(56, 21, 66) : BV:8
68 : ite(55, 23, 67) : BV:8
69 : ite(54, 21, 68) : BV:8
70 : ite(53, 18, 69) : BV:8
71 : ite(52, 15, 70) : BV:8
72 : bvadd(37, 11) : BV:32
73 : eq(72, 13) : BOOL
74 : eq(72, 16) : BOOL
75 : eq(72, 19) : BOOL
76 : eq(72, 10) : BOOL
77 : eq(72, 24) : BOOL
78 : eq(72, 26) : BOOL
79 : eq(72, 29) : BOOL
80 : eq(72, 32) : BOOL
81 : eq(72, 34) : BOOL
82 : eq(72, 37) : BOOL
83 : ite(82, 39, 40) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 21, 84) : BV:8
86 : ite(79, 31, 85) : BV:8
87 : ite(78, 28, 86) : BV:8
88 : ite(77, 21, 87) : BV:8
89 : ite(76, 23, 88) : BV:8
90 : ite(75, 21, 89) : BV:8
91 : ite(74, 18, 90) : BV:8
92 : ite(73, 15, 91) : BV:8
93 : bvadd(16, 11) : BV:32
94 : eq(93, 13) : BOOL
95 : eq(93, 16) : BOOL
96 : eq(93, 19) : BOOL
97 : eq(93, 10) : BOOL
98 : eq(93, 24) : BOOL
99 : eq(93, 26) : BOOL
100 : eq(93, 29) : BOOL
101 : eq(93, 32) : BOOL
102 : eq(93, 34) : BOOL
103 : eq(93, 37) : BOOL
104 : ite(103, 39, 40) : BV:8
105 : ite(102, 36, 104) : BV:8
106 : ite(101, 21, 105) : BV:8
107 : ite(100, 31, 106) : BV:8
108 : ite(99, 28, 107) : BV:8
109 : ite(98, 21, 108) : BV:8
110 : ite(97, 23, 109) : BV:8
111 : ite(96, 21, 110) : BV:8
112 : ite(95, 18, 111) : BV:8
113 : ite(94, 15, 112) : BV:8
114 : bvconcat(50, 71, 92, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 19) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 26) : BOOL
122 : eq(115, 29) : BOOL
123 : eq(115, 32) : BOOL
124 : eq(115, 34) : BOOL
125 : eq(115, 37) : BOOL
126 : ite(125, 39, 40) : BV:8
127 : ite(124, 36, 126) : BV:8
128 : ite(123, 21, 127) : BV:8
129 : ite(122, 31, 128) : BV:8
130 : ite(121, 28, 129) : BV:8
131 : ite(120, 21, 130) : BV:8
132 : ite(119, 23, 131) : BV:8
133 : ite(118, 21, 132) : BV:8
134 : ite(117, 18, 133) : BV:8
135 : ite(116, 15, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 9, 114) : BV:32
138 : eq(137, 13) : BOOL
139 : eq(137, 16) : BOOL
140 : eq(137, 19) : BOOL
141 : eq(137, 10) : BOOL
142 : eq(137, 24) : BOOL
143 : eq(137, 26) : BOOL
144 : eq(137, 29) : BOOL
145 : eq(137, 32) : BOOL
146 : eq(137, 34) : BOOL
147 : eq(137, 37) : BOOL
148 : ite(147, 39, 40) : BV:8
149 : ite(146, 36, 148) : BV:8
150 : ite(145, 21, 149) : BV:8
151 : ite(144, 31, 150) : BV:8
152 : ite(143, 28, 151) : BV:8
153 : ite(142, 21, 152) : BV:8
154 : ite(141, 23, 153) : BV:8
155 : ite(140, 21, 154) : BV:8
156 : ite(139, 18, 155) : BV:8
157 : ite(138, 15, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 9, 114) : BV:32
160 : eq(159, 13) : BOOL
161 : eq(159, 16) : BOOL
162 : eq(159, 19) : BOOL
163 : eq(159, 10) : BOOL
164 : eq(159, 24) : BOOL
165 : eq(159, 26) : BOOL
166 : eq(159, 29) : BOOL
167 : eq(159, 32) : BOOL
168 : eq(159, 34) : BOOL
169 : eq(159, 37) : BOOL
170 : ite(169, 39, 40) : BV:8
171 : ite(168, 36, 170) : BV:8
172 : ite(167, 21, 171) : BV:8
173 : ite(166, 31, 172) : BV:8
174 : ite(165, 28, 173) : BV:8
175 : ite(164, 21, 174) : BV:8
176 : ite(163, 23, 175) : BV:8
177 : ite(162, 21, 176) : BV:8
178 : ite(161, 18, 177) : BV:8
179 : ite(160, 15, 178) : BV:8
180 : bvadd(9, 114) : BV:32
181 : eq(180, 13) : BOOL
182 : eq(180, 16) : BOOL
183 : eq(180, 19) : BOOL
184 : eq(180, 10) : BOOL
185 : eq(180, 24) : BOOL
186 : eq(180, 26) : BOOL
187 : eq(180, 29) : BOOL
188 : eq(180, 32) : BOOL
189 : eq(180, 34) : BOOL
190 : eq(180, 37) : BOOL
191 : ite(190, 39, 40) : BV:8
192 : ite(189, 36, 191) : BV:8
193 : ite(188, 21, 192) : BV:8
194 : ite(187, 31, 193) : BV:8
195 : ite(186, 28, 194) : BV:8
196 : ite(185, 21, 195) : BV:8
197 : ite(184, 23, 196) : BV:8
198 : ite(183, 21, 197) : BV:8
199 : ite(182, 18, 198) : BV:8
200 : ite(181, 15, 199) : BV:8
201 : bvconcat(135, 157, 179, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : lambda(1, 2, 202) : FUNCTION[BV:32,BV:32 -> BV:32]
204 : sym_const(203) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27425 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 536870916 { 0x20000004 +1.47e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 268435456 { 0x10000000 +1.0e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : 536870918 { 0x20000006 +1.71e193 } : BV:32
17 : eq(9, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 268435459 { 0x10000003 +1.35e161 } : BV:32
20 : eq(9, 19) : BOOL
21 : 63 { 0x3f } : BV:8
22 : 536870917 { 0x20000005 +1.59e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
25 : eq(9, 24) : BOOL
26 : 32 { 0x20 } : BV:8
27 : eq(9, 8) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 536870919 { 0x20000007 +1.83e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 268435458 { 0x10000002 +1.23e161 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 268435457 { 0x10000001 +1.11e161 } : BV:32
35 : eq(9, 34) : BOOL
36 : 122 { 0x7a } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(30, 18, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : ite(11, 12, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 24) : BOOL
56 : eq(49, 8) : BOOL
57 : eq(49, 29) : BOOL
58 : eq(49, 31) : BOOL
59 : eq(49, 34) : BOOL
60 : ite(59, 36, 37) : BV:8
61 : ite(58, 33, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 28, 62) : BV:8
64 : ite(55, 26, 63) : BV:8
65 : ite(54, 18, 64) : BV:8
66 : ite(53, 21, 65) : BV:8
67 : ite(52, 18, 66) : BV:8
68 : ite(51, 15, 67) : BV:8
69 : ite(50, 12, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 7, 8) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 13) : BOOL
74 : eq(71, 16) : BOOL
75 : eq(71, 19) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 24) : BOOL
78 : eq(71, 8) : BOOL
79 : eq(71, 29) : BOOL
80 : eq(71, 31) : BOOL
81 : eq(71, 34) : BOOL
82 : ite(81, 36, 37) : BV:8
83 : ite(80, 33, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 28, 84) : BV:8
86 : ite(77, 26, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 21, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 12, 90) : BV:8
92 : bvadd(7, 8) : BV:32
93 : eq(92, 10) : BOOL
94 : eq(92, 13) : BOOL
95 : eq(92, 16) : BOOL
96 : eq(92, 19) : BOOL
97 : eq(92, 22) : BOOL
98 : eq(92, 24) : BOOL
99 : eq(92, 8) : BOOL
100 : eq(92, 29) : BOOL
101 : eq(92, 31) : BOOL
102 : eq(92, 34) : BOOL
103 : ite(102, 36, 37) : BV:8
104 : ite(101, 33, 103) : BV:8
105 : ite(100, 18, 104) : BV:8
106 : ite(99, 28, 105) : BV:8
107 : ite(98, 26, 106) : BV:8
108 : ite(97, 18, 107) : BV:8
109 : ite(96, 21, 108) : BV:8
110 : ite(95, 18, 109) : BV:8
111 : ite(94, 15, 110) : BV:8
112 : ite(93, 12, 111) : BV:8
113 : bvconcat(47, 69, 91, 112) : BV:32
114 : ite(3, 4, 113) : BV:32
115 : lambda(1, 114) : FUNCTION[BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2038698589 { 0x7984125d +1.3181040e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2517246563 { 0x960a2263 -1777720733 -1.7917439e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3047752615 { 0xb5a903a7 -1247214681 -1.32042396e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=counter_example.random_seed
3952522439
=counter_example_end
=global nodece 62 num_edges_traversed 2
=global nodece 62 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce11487.num_edges_traversed3
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce11487 a5805be3788a1b4d0b4e4aaf49ed52e
=input.spec-%var-x-1
1 : Lambda27460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27463 : BV:32
18 : Lambda27461 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27462 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 268435459 { 0x10000003 +1.35e161 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 268435456 { 0x10000000 +1.0e161 } : BV:32
65 : eq(60, 64) : BOOL
66 : 252 { 0xfc -4 } : BV:8
67 : 536870918 { 0x20000006 +1.71e193 } : BV:32
68 : eq(60, 67) : BOOL
69 : 64 { 0x40 } : BV:8
70 : eq(60, 58) : BOOL
71 : 63 { 0x3f } : BV:8
72 : 536870917 { 0x20000005 +1.59e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
75 : eq(60, 74) : BOOL
76 : 32 { 0x20 } : BV:8
77 : 536870916 { 0x20000004 +1.47e193 } : BV:32
78 : eq(60, 77) : BOOL
79 : 128 { 0x80 -128 } : BV:8
80 : 536870919 { 0x20000007 +1.83e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 268435458 { 0x10000002 +1.23e161 } : BV:32
83 : eq(60, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 268435457 { 0x10000001 +1.11e161 } : BV:32
86 : eq(60, 85) : BOOL
87 : 122 { 0x7a } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(81, 69, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : ite(75, 76, 92) : BV:8
94 : ite(73, 69, 93) : BV:8
95 : ite(70, 71, 94) : BV:8
96 : ite(68, 69, 95) : BV:8
97 : ite(65, 66, 96) : BV:8
98 : ite(62, 63, 97) : BV:8
99 : bvadd(82, 59) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 58) : BOOL
104 : eq(99, 72) : BOOL
105 : eq(99, 74) : BOOL
106 : eq(99, 77) : BOOL
107 : eq(99, 80) : BOOL
108 : eq(99, 82) : BOOL
109 : eq(99, 85) : BOOL
110 : ite(109, 87, 88) : BV:8
111 : ite(108, 84, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 79, 112) : BV:8
114 : ite(105, 76, 113) : BV:8
115 : ite(104, 69, 114) : BV:8
116 : ite(103, 71, 115) : BV:8
117 : ite(102, 69, 116) : BV:8
118 : ite(101, 66, 117) : BV:8
119 : ite(100, 63, 118) : BV:8
120 : bvadd(85, 59) : BV:32
121 : eq(120, 61) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 58) : BOOL
125 : eq(120, 72) : BOOL
126 : eq(120, 74) : BOOL
127 : eq(120, 77) : BOOL
128 : eq(120, 80) : BOOL
129 : eq(120, 82) : BOOL
130 : eq(120, 85) : BOOL
131 : ite(130, 87, 88) : BV:8
132 : ite(129, 84, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 79, 133) : BV:8
135 : ite(126, 76, 134) : BV:8
136 : ite(125, 69, 135) : BV:8
137 : ite(124, 71, 136) : BV:8
138 : ite(123, 69, 137) : BV:8
139 : ite(122, 66, 138) : BV:8
140 : ite(121, 63, 139) : BV:8
141 : bvadd(64, 59) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 67) : BOOL
145 : eq(141, 58) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 74) : BOOL
148 : eq(141, 77) : BOOL
149 : eq(141, 80) : BOOL
150 : eq(141, 82) : BOOL
151 : eq(141, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 69, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : ite(147, 76, 155) : BV:8
157 : ite(146, 69, 156) : BV:8
158 : ite(145, 71, 157) : BV:8
159 : ite(144, 69, 158) : BV:8
160 : ite(143, 66, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : bvconcat(98, 119, 140, 161) : BV:32
163 : bvadd(37, 57, 162) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 64) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 58) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : eq(163, 80) : BOOL
172 : eq(163, 82) : BOOL
173 : eq(163, 85) : BOOL
174 : ite(173, 87, 88) : BV:8
175 : ite(172, 84, 174) : BV:8
176 : ite(171, 69, 175) : BV:8
177 : ite(170, 79, 176) : BV:8
178 : ite(169, 76, 177) : BV:8
179 : ite(168, 69, 178) : BV:8
180 : ite(167, 71, 179) : BV:8
181 : ite(166, 69, 180) : BV:8
182 : ite(165, 66, 181) : BV:8
183 : ite(164, 63, 182) : BV:8
184 : bvadd(41, 57, 162) : BV:32
185 : eq(184, 61) : BOOL
186 : eq(184, 64) : BOOL
187 : eq(184, 67) : BOOL
188 : eq(184, 58) : BOOL
189 : eq(184, 72) : BOOL
190 : eq(184, 74) : BOOL
191 : eq(184, 77) : BOOL
192 : eq(184, 80) : BOOL
193 : eq(184, 82) : BOOL
194 : eq(184, 85) : BOOL
195 : ite(194, 87, 88) : BV:8
196 : ite(193, 84, 195) : BV:8
197 : ite(192, 69, 196) : BV:8
198 : ite(191, 79, 197) : BV:8
199 : ite(190, 76, 198) : BV:8
200 : ite(189, 69, 199) : BV:8
201 : ite(188, 71, 200) : BV:8
202 : ite(187, 69, 201) : BV:8
203 : ite(186, 66, 202) : BV:8
204 : ite(185, 63, 203) : BV:8
205 : bvadd(34, 57, 162) : BV:32
206 : eq(205, 61) : BOOL
207 : eq(205, 64) : BOOL
208 : eq(205, 67) : BOOL
209 : eq(205, 58) : BOOL
210 : eq(205, 72) : BOOL
211 : eq(205, 74) : BOOL
212 : eq(205, 77) : BOOL
213 : eq(205, 80) : BOOL
214 : eq(205, 82) : BOOL
215 : eq(205, 85) : BOOL
216 : ite(215, 87, 88) : BV:8
217 : ite(214, 84, 216) : BV:8
218 : ite(213, 69, 217) : BV:8
219 : ite(212, 79, 218) : BV:8
220 : ite(211, 76, 219) : BV:8
221 : ite(210, 69, 220) : BV:8
222 : ite(209, 71, 221) : BV:8
223 : ite(208, 69, 222) : BV:8
224 : ite(207, 66, 223) : BV:8
225 : ite(206, 63, 224) : BV:8
226 : bvadd(57, 162) : BV:32
227 : eq(226, 61) : BOOL
228 : eq(226, 64) : BOOL
229 : eq(226, 67) : BOOL
230 : eq(226, 58) : BOOL
231 : eq(226, 72) : BOOL
232 : eq(226, 74) : BOOL
233 : eq(226, 77) : BOOL
234 : eq(226, 80) : BOOL
235 : eq(226, 82) : BOOL
236 : eq(226, 85) : BOOL
237 : ite(236, 87, 88) : BV:8
238 : ite(235, 84, 237) : BV:8
239 : ite(234, 69, 238) : BV:8
240 : ite(233, 79, 239) : BV:8
241 : ite(232, 76, 240) : BV:8
242 : ite(231, 69, 241) : BV:8
243 : ite(230, 71, 242) : BV:8
244 : ite(229, 69, 243) : BV:8
245 : ite(228, 66, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : bvconcat(183, 204, 225, 246) : BV:32
248 : ite(55, 2, 247) : BV:32
249 : lambda(52, 248) : FUNCTION[BV:32 -> BV:32]
250 : map(51, 249) : MAP[BV:32 -> BV:32]
251 : lambda(17, 250) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
252 : map(16, 251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
253 : sym_const(252) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%x
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n
1 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435455 ] -> 0, [ 268435456; 268435456 ] -> 252, [ 268435457; 268435457 ] -> 122, [ 268435458; 268435458 ] -> 127, [ 268435459; 268435459 ] -> 63, [ 268435460; 536870915 ] -> 0, [ 536870916; 536870916 ] -> 128, [ 536870917; 536870919 ] -> 64, [ 536870920; 1342177275 ] -> 0, [ 1342177276; 1342177276 ] -> 4, [ 1342177277; 1342177278 ] -> 0, [ 1342177279; 1342177279 ] -> 32, [ 1342177280; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 536870916; 2517246559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2517246560; 2517246563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2517246564; 3047752611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3047752612; 3047752615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3047752616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27467 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27470 : BV:32
18 : Lambda27468 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27469 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 268435459 { 0x10000003 +1.35e161 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
81 : eq(79, 80) : BOOL
82 : 4 { 0x4 } : BV:8
83 : 268435456 { 0x10000000 +1.0e161 } : BV:32
84 : eq(79, 83) : BOOL
85 : 252 { 0xfc -4 } : BV:8
86 : 536870918 { 0x20000006 +1.71e193 } : BV:32
87 : eq(79, 86) : BOOL
88 : 64 { 0x40 } : BV:8
89 : eq(79, 77) : BOOL
90 : 63 { 0x3f } : BV:8
91 : 536870917 { 0x20000005 +1.59e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
94 : eq(79, 93) : BOOL
95 : 32 { 0x20 } : BV:8
96 : 536870916 { 0x20000004 +1.47e193 } : BV:32
97 : eq(79, 96) : BOOL
98 : 128 { 0x80 -128 } : BV:8
99 : 536870919 { 0x20000007 +1.83e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 268435458 { 0x10000002 +1.23e161 } : BV:32
102 : eq(79, 101) : BOOL
103 : 127 { 0x7f } : BV:8
104 : 268435457 { 0x10000001 +1.11e161 } : BV:32
105 : eq(79, 104) : BOOL
106 : 122 { 0x7a } : BV:8
107 : 0 { 0x0 } : BV:8
108 : ite(105, 106, 107) : BV:8
109 : ite(102, 103, 108) : BV:8
110 : ite(100, 88, 109) : BV:8
111 : ite(97, 98, 110) : BV:8
112 : ite(94, 95, 111) : BV:8
113 : ite(92, 88, 112) : BV:8
114 : ite(89, 90, 113) : BV:8
115 : ite(87, 88, 114) : BV:8
116 : ite(84, 85, 115) : BV:8
117 : ite(81, 82, 116) : BV:8
118 : bvadd(101, 78) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 77) : BOOL
123 : eq(118, 91) : BOOL
124 : eq(118, 93) : BOOL
125 : eq(118, 96) : BOOL
126 : eq(118, 99) : BOOL
127 : eq(118, 101) : BOOL
128 : eq(118, 104) : BOOL
129 : ite(128, 106, 107) : BV:8
130 : ite(127, 103, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 98, 131) : BV:8
133 : ite(124, 95, 132) : BV:8
134 : ite(123, 88, 133) : BV:8
135 : ite(122, 90, 134) : BV:8
136 : ite(121, 88, 135) : BV:8
137 : ite(120, 85, 136) : BV:8
138 : ite(119, 82, 137) : BV:8
139 : bvadd(104, 78) : BV:32
140 : eq(139, 80) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 77) : BOOL
144 : eq(139, 91) : BOOL
145 : eq(139, 93) : BOOL
146 : eq(139, 96) : BOOL
147 : eq(139, 99) : BOOL
148 : eq(139, 101) : BOOL
149 : eq(139, 104) : BOOL
150 : ite(149, 106, 107) : BV:8
151 : ite(148, 103, 150) : BV:8
152 : ite(147, 88, 151) : BV:8
153 : ite(146, 98, 152) : BV:8
154 : ite(145, 95, 153) : BV:8
155 : ite(144, 88, 154) : BV:8
156 : ite(143, 90, 155) : BV:8
157 : ite(142, 88, 156) : BV:8
158 : ite(141, 85, 157) : BV:8
159 : ite(140, 82, 158) : BV:8
160 : bvadd(83, 78) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 86) : BOOL
164 : eq(160, 77) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 93) : BOOL
167 : eq(160, 96) : BOOL
168 : eq(160, 99) : BOOL
169 : eq(160, 101) : BOOL
170 : eq(160, 104) : BOOL
171 : ite(170, 106, 107) : BV:8
172 : ite(169, 103, 171) : BV:8
173 : ite(168, 88, 172) : BV:8
174 : ite(167, 98, 173) : BV:8
175 : ite(166, 95, 174) : BV:8
176 : ite(165, 88, 175) : BV:8
177 : ite(164, 90, 176) : BV:8
178 : ite(163, 88, 177) : BV:8
179 : ite(162, 85, 178) : BV:8
180 : ite(161, 82, 179) : BV:8
181 : bvconcat(117, 138, 159, 180) : BV:32
182 : bvadd(37, 76, 181) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 83) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 77) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : eq(182, 99) : BOOL
191 : eq(182, 101) : BOOL
192 : eq(182, 104) : BOOL
193 : ite(192, 106, 107) : BV:8
194 : ite(191, 103, 193) : BV:8
195 : ite(190, 88, 194) : BV:8
196 : ite(189, 98, 195) : BV:8
197 : ite(188, 95, 196) : BV:8
198 : ite(187, 88, 197) : BV:8
199 : ite(186, 90, 198) : BV:8
200 : ite(185, 88, 199) : BV:8
201 : ite(184, 85, 200) : BV:8
202 : ite(183, 82, 201) : BV:8
203 : bvadd(41, 76, 181) : BV:32
204 : eq(203, 80) : BOOL
205 : eq(203, 83) : BOOL
206 : eq(203, 86) : BOOL
207 : eq(203, 77) : BOOL
208 : eq(203, 91) : BOOL
209 : eq(203, 93) : BOOL
210 : eq(203, 96) : BOOL
211 : eq(203, 99) : BOOL
212 : eq(203, 101) : BOOL
213 : eq(203, 104) : BOOL
214 : ite(213, 106, 107) : BV:8
215 : ite(212, 103, 214) : BV:8
216 : ite(211, 88, 215) : BV:8
217 : ite(210, 98, 216) : BV:8
218 : ite(209, 95, 217) : BV:8
219 : ite(208, 88, 218) : BV:8
220 : ite(207, 90, 219) : BV:8
221 : ite(206, 88, 220) : BV:8
222 : ite(205, 85, 221) : BV:8
223 : ite(204, 82, 222) : BV:8
224 : bvadd(34, 76, 181) : BV:32
225 : eq(224, 80) : BOOL
226 : eq(224, 83) : BOOL
227 : eq(224, 86) : BOOL
228 : eq(224, 77) : BOOL
229 : eq(224, 91) : BOOL
230 : eq(224, 93) : BOOL
231 : eq(224, 96) : BOOL
232 : eq(224, 99) : BOOL
233 : eq(224, 101) : BOOL
234 : eq(224, 104) : BOOL
235 : ite(234, 106, 107) : BV:8
236 : ite(233, 103, 235) : BV:8
237 : ite(232, 88, 236) : BV:8
238 : ite(231, 98, 237) : BV:8
239 : ite(230, 95, 238) : BV:8
240 : ite(229, 88, 239) : BV:8
241 : ite(228, 90, 240) : BV:8
242 : ite(227, 88, 241) : BV:8
243 : ite(226, 85, 242) : BV:8
244 : ite(225, 82, 243) : BV:8
245 : bvadd(76, 181) : BV:32
246 : eq(245, 80) : BOOL
247 : eq(245, 83) : BOOL
248 : eq(245, 86) : BOOL
249 : eq(245, 77) : BOOL
250 : eq(245, 91) : BOOL
251 : eq(245, 93) : BOOL
252 : eq(245, 96) : BOOL
253 : eq(245, 99) : BOOL
254 : eq(245, 101) : BOOL
255 : eq(245, 104) : BOOL
256 : ite(255, 106, 107) : BV:8
257 : ite(254, 103, 256) : BV:8
258 : ite(253, 88, 257) : BV:8
259 : ite(252, 98, 258) : BV:8
260 : ite(251, 95, 259) : BV:8
261 : ite(250, 88, 260) : BV:8
262 : ite(249, 90, 261) : BV:8
263 : ite(248, 88, 262) : BV:8
264 : ite(247, 85, 263) : BV:8
265 : ite(246, 82, 264) : BV:8
266 : bvconcat(202, 223, 244, 265) : BV:32
267 : ite(55, 2, 266) : BV:32
268 : ite(74, 266, 267) : BV:32
269 : ite(55, 2, 268) : BV:32
270 : lambda(52, 269) : FUNCTION[BV:32 -> BV:32]
271 : map(51, 270) : MAP[BV:32 -> BV:32]
272 : lambda(17, 271) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
273 : map(16, 272) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
274 : sym_const(273) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 358892147 { 0x15644273 +1.78327786e171 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27409 : BV:32
2 : Lambda27410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27414 : BV:32
2 : Lambda27415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 268435459 { 0x10000003 +1.35e161 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
54 : eq(52, 53) : BOOL
55 : 4 { 0x4 } : BV:8
56 : 268435456 { 0x10000000 +1.0e161 } : BV:32
57 : eq(52, 56) : BOOL
58 : 252 { 0xfc -4 } : BV:8
59 : 536870918 { 0x20000006 +1.71e193 } : BV:32
60 : eq(52, 59) : BOOL
61 : 64 { 0x40 } : BV:8
62 : eq(52, 50) : BOOL
63 : 63 { 0x3f } : BV:8
64 : 536870917 { 0x20000005 +1.59e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
67 : eq(52, 66) : BOOL
68 : 32 { 0x20 } : BV:8
69 : 536870916 { 0x20000004 +1.47e193 } : BV:32
70 : eq(52, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : 536870919 { 0x20000007 +1.83e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 268435458 { 0x10000002 +1.23e161 } : BV:32
75 : eq(52, 74) : BOOL
76 : 127 { 0x7f } : BV:8
77 : 268435457 { 0x10000001 +1.11e161 } : BV:32
78 : eq(52, 77) : BOOL
79 : 122 { 0x7a } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 61, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 61, 85) : BV:8
87 : ite(62, 63, 86) : BV:8
88 : ite(60, 61, 87) : BV:8
89 : ite(57, 58, 88) : BV:8
90 : ite(54, 55, 89) : BV:8
91 : bvadd(74, 51) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 50) : BOOL
96 : eq(91, 64) : BOOL
97 : eq(91, 66) : BOOL
98 : eq(91, 69) : BOOL
99 : eq(91, 72) : BOOL
100 : eq(91, 74) : BOOL
101 : eq(91, 77) : BOOL
102 : ite(101, 79, 80) : BV:8
103 : ite(100, 76, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 71, 104) : BV:8
106 : ite(97, 68, 105) : BV:8
107 : ite(96, 61, 106) : BV:8
108 : ite(95, 63, 107) : BV:8
109 : ite(94, 61, 108) : BV:8
110 : ite(93, 58, 109) : BV:8
111 : ite(92, 55, 110) : BV:8
112 : bvadd(77, 51) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 50) : BOOL
117 : eq(112, 64) : BOOL
118 : eq(112, 66) : BOOL
119 : eq(112, 69) : BOOL
120 : eq(112, 72) : BOOL
121 : eq(112, 74) : BOOL
122 : eq(112, 77) : BOOL
123 : ite(122, 79, 80) : BV:8
124 : ite(121, 76, 123) : BV:8
125 : ite(120, 61, 124) : BV:8
126 : ite(119, 71, 125) : BV:8
127 : ite(118, 68, 126) : BV:8
128 : ite(117, 61, 127) : BV:8
129 : ite(116, 63, 128) : BV:8
130 : ite(115, 61, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 55, 131) : BV:8
133 : bvadd(56, 51) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 59) : BOOL
137 : eq(133, 50) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 66) : BOOL
140 : eq(133, 69) : BOOL
141 : eq(133, 72) : BOOL
142 : eq(133, 74) : BOOL
143 : eq(133, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 61, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : ite(139, 68, 147) : BV:8
149 : ite(138, 61, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : ite(136, 61, 150) : BV:8
152 : ite(135, 58, 151) : BV:8
153 : ite(134, 55, 152) : BV:8
154 : bvconcat(90, 111, 132, 153) : BV:32
155 : bvadd(33, 49, 154) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 56) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 50) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : eq(155, 72) : BOOL
164 : eq(155, 74) : BOOL
165 : eq(155, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 61, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 61, 170) : BV:8
172 : ite(159, 63, 171) : BV:8
173 : ite(158, 61, 172) : BV:8
174 : ite(157, 58, 173) : BV:8
175 : ite(156, 55, 174) : BV:8
176 : bvadd(37, 49, 154) : BV:32
177 : eq(176, 53) : BOOL
178 : eq(176, 56) : BOOL
179 : eq(176, 59) : BOOL
180 : eq(176, 50) : BOOL
181 : eq(176, 64) : BOOL
182 : eq(176, 66) : BOOL
183 : eq(176, 69) : BOOL
184 : eq(176, 72) : BOOL
185 : eq(176, 74) : BOOL
186 : eq(176, 77) : BOOL
187 : ite(186, 79, 80) : BV:8
188 : ite(185, 76, 187) : BV:8
189 : ite(184, 61, 188) : BV:8
190 : ite(183, 71, 189) : BV:8
191 : ite(182, 68, 190) : BV:8
192 : ite(181, 61, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 61, 193) : BV:8
195 : ite(178, 58, 194) : BV:8
196 : ite(177, 55, 195) : BV:8
197 : bvadd(30, 49, 154) : BV:32
198 : eq(197, 53) : BOOL
199 : eq(197, 56) : BOOL
200 : eq(197, 59) : BOOL
201 : eq(197, 50) : BOOL
202 : eq(197, 64) : BOOL
203 : eq(197, 66) : BOOL
204 : eq(197, 69) : BOOL
205 : eq(197, 72) : BOOL
206 : eq(197, 74) : BOOL
207 : eq(197, 77) : BOOL
208 : ite(207, 79, 80) : BV:8
209 : ite(206, 76, 208) : BV:8
210 : ite(205, 61, 209) : BV:8
211 : ite(204, 71, 210) : BV:8
212 : ite(203, 68, 211) : BV:8
213 : ite(202, 61, 212) : BV:8
214 : ite(201, 63, 213) : BV:8
215 : ite(200, 61, 214) : BV:8
216 : ite(199, 58, 215) : BV:8
217 : ite(198, 55, 216) : BV:8
218 : bvadd(49, 154) : BV:32
219 : eq(218, 53) : BOOL
220 : eq(218, 56) : BOOL
221 : eq(218, 59) : BOOL
222 : eq(218, 50) : BOOL
223 : eq(218, 64) : BOOL
224 : eq(218, 66) : BOOL
225 : eq(218, 69) : BOOL
226 : eq(218, 72) : BOOL
227 : eq(218, 74) : BOOL
228 : eq(218, 77) : BOOL
229 : ite(228, 79, 80) : BV:8
230 : ite(227, 76, 229) : BV:8
231 : ite(226, 61, 230) : BV:8
232 : ite(225, 71, 231) : BV:8
233 : ite(224, 68, 232) : BV:8
234 : ite(223, 61, 233) : BV:8
235 : ite(222, 63, 234) : BV:8
236 : ite(221, 61, 235) : BV:8
237 : ite(220, 58, 236) : BV:8
238 : ite(219, 55, 237) : BV:8
239 : bvconcat(175, 196, 217, 238) : BV:32
240 : ite(6, 3, 239) : BV:32
241 : ite(47, 239, 240) : BV:32
242 : ite(6, 3, 241) : BV:32
243 : lambda(1, 2, 242) : FUNCTION[BV:32,BV:32 -> BV:32]
244 : sym_const(243) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27418 : BV:32
2 : Lambda27419 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27416 : BV:32
2 : Lambda27417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 268435459 { 0x10000003 +1.35e161 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 268435456 { 0x10000000 +1.0e161 } : BV:32
17 : eq(12, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 536870918 { 0x20000006 +1.71e193 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : eq(12, 10) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 536870917 { 0x20000005 +1.59e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
27 : eq(12, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 536870916 { 0x20000004 +1.47e193 } : BV:32
30 : eq(12, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 536870919 { 0x20000007 +1.83e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 268435458 { 0x10000002 +1.23e161 } : BV:32
35 : eq(12, 34) : BOOL
36 : 127 { 0x7f } : BV:8
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : eq(12, 37) : BOOL
39 : 122 { 0x7a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(33, 21, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(25, 21, 45) : BV:8
47 : ite(22, 23, 46) : BV:8
48 : ite(20, 21, 47) : BV:8
49 : ite(17, 18, 48) : BV:8
50 : ite(14, 15, 49) : BV:8
51 : bvadd(34, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : eq(51, 10) : BOOL
56 : eq(51, 24) : BOOL
57 : eq(51, 26) : BOOL
58 : eq(51, 29) : BOOL
59 : eq(51, 32) : BOOL
60 : eq(51, 34) : BOOL
61 : eq(51, 37) : BOOL
62 : ite(61, 39, 40) : BV:8
63 : ite(60, 36, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 31, 64) : BV:8
66 : ite(57, 28, 65) : BV:8
67 : ite(56, 21, 66) : BV:8
68 : ite(55, 23, 67) : BV:8
69 : ite(54, 21, 68) : BV:8
70 : ite(53, 18, 69) : BV:8
71 : ite(52, 15, 70) : BV:8
72 : bvadd(37, 11) : BV:32
73 : eq(72, 13) : BOOL
74 : eq(72, 16) : BOOL
75 : eq(72, 19) : BOOL
76 : eq(72, 10) : BOOL
77 : eq(72, 24) : BOOL
78 : eq(72, 26) : BOOL
79 : eq(72, 29) : BOOL
80 : eq(72, 32) : BOOL
81 : eq(72, 34) : BOOL
82 : eq(72, 37) : BOOL
83 : ite(82, 39, 40) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 21, 84) : BV:8
86 : ite(79, 31, 85) : BV:8
87 : ite(78, 28, 86) : BV:8
88 : ite(77, 21, 87) : BV:8
89 : ite(76, 23, 88) : BV:8
90 : ite(75, 21, 89) : BV:8
91 : ite(74, 18, 90) : BV:8
92 : ite(73, 15, 91) : BV:8
93 : bvadd(16, 11) : BV:32
94 : eq(93, 13) : BOOL
95 : eq(93, 16) : BOOL
96 : eq(93, 19) : BOOL
97 : eq(93, 10) : BOOL
98 : eq(93, 24) : BOOL
99 : eq(93, 26) : BOOL
100 : eq(93, 29) : BOOL
101 : eq(93, 32) : BOOL
102 : eq(93, 34) : BOOL
103 : eq(93, 37) : BOOL
104 : ite(103, 39, 40) : BV:8
105 : ite(102, 36, 104) : BV:8
106 : ite(101, 21, 105) : BV:8
107 : ite(100, 31, 106) : BV:8
108 : ite(99, 28, 107) : BV:8
109 : ite(98, 21, 108) : BV:8
110 : ite(97, 23, 109) : BV:8
111 : ite(96, 21, 110) : BV:8
112 : ite(95, 18, 111) : BV:8
113 : ite(94, 15, 112) : BV:8
114 : bvconcat(50, 71, 92, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 19) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 26) : BOOL
122 : eq(115, 29) : BOOL
123 : eq(115, 32) : BOOL
124 : eq(115, 34) : BOOL
125 : eq(115, 37) : BOOL
126 : ite(125, 39, 40) : BV:8
127 : ite(124, 36, 126) : BV:8
128 : ite(123, 21, 127) : BV:8
129 : ite(122, 31, 128) : BV:8
130 : ite(121, 28, 129) : BV:8
131 : ite(120, 21, 130) : BV:8
132 : ite(119, 23, 131) : BV:8
133 : ite(118, 21, 132) : BV:8
134 : ite(117, 18, 133) : BV:8
135 : ite(116, 15, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 9, 114) : BV:32
138 : eq(137, 13) : BOOL
139 : eq(137, 16) : BOOL
140 : eq(137, 19) : BOOL
141 : eq(137, 10) : BOOL
142 : eq(137, 24) : BOOL
143 : eq(137, 26) : BOOL
144 : eq(137, 29) : BOOL
145 : eq(137, 32) : BOOL
146 : eq(137, 34) : BOOL
147 : eq(137, 37) : BOOL
148 : ite(147, 39, 40) : BV:8
149 : ite(146, 36, 148) : BV:8
150 : ite(145, 21, 149) : BV:8
151 : ite(144, 31, 150) : BV:8
152 : ite(143, 28, 151) : BV:8
153 : ite(142, 21, 152) : BV:8
154 : ite(141, 23, 153) : BV:8
155 : ite(140, 21, 154) : BV:8
156 : ite(139, 18, 155) : BV:8
157 : ite(138, 15, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 9, 114) : BV:32
160 : eq(159, 13) : BOOL
161 : eq(159, 16) : BOOL
162 : eq(159, 19) : BOOL
163 : eq(159, 10) : BOOL
164 : eq(159, 24) : BOOL
165 : eq(159, 26) : BOOL
166 : eq(159, 29) : BOOL
167 : eq(159, 32) : BOOL
168 : eq(159, 34) : BOOL
169 : eq(159, 37) : BOOL
170 : ite(169, 39, 40) : BV:8
171 : ite(168, 36, 170) : BV:8
172 : ite(167, 21, 171) : BV:8
173 : ite(166, 31, 172) : BV:8
174 : ite(165, 28, 173) : BV:8
175 : ite(164, 21, 174) : BV:8
176 : ite(163, 23, 175) : BV:8
177 : ite(162, 21, 176) : BV:8
178 : ite(161, 18, 177) : BV:8
179 : ite(160, 15, 178) : BV:8
180 : bvadd(9, 114) : BV:32
181 : eq(180, 13) : BOOL
182 : eq(180, 16) : BOOL
183 : eq(180, 19) : BOOL
184 : eq(180, 10) : BOOL
185 : eq(180, 24) : BOOL
186 : eq(180, 26) : BOOL
187 : eq(180, 29) : BOOL
188 : eq(180, 32) : BOOL
189 : eq(180, 34) : BOOL
190 : eq(180, 37) : BOOL
191 : ite(190, 39, 40) : BV:8
192 : ite(189, 36, 191) : BV:8
193 : ite(188, 21, 192) : BV:8
194 : ite(187, 31, 193) : BV:8
195 : ite(186, 28, 194) : BV:8
196 : ite(185, 21, 195) : BV:8
197 : ite(184, 23, 196) : BV:8
198 : ite(183, 21, 197) : BV:8
199 : ite(182, 18, 198) : BV:8
200 : ite(181, 15, 199) : BV:8
201 : bvconcat(135, 157, 179, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : lambda(1, 2, 202) : FUNCTION[BV:32,BV:32 -> BV:32]
204 : sym_const(203) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27425 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 536870916 { 0x20000004 +1.47e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 268435456 { 0x10000000 +1.0e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : 536870918 { 0x20000006 +1.71e193 } : BV:32
17 : eq(9, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 268435459 { 0x10000003 +1.35e161 } : BV:32
20 : eq(9, 19) : BOOL
21 : 63 { 0x3f } : BV:8
22 : 536870917 { 0x20000005 +1.59e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
25 : eq(9, 24) : BOOL
26 : 32 { 0x20 } : BV:8
27 : eq(9, 8) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 536870919 { 0x20000007 +1.83e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 268435458 { 0x10000002 +1.23e161 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 268435457 { 0x10000001 +1.11e161 } : BV:32
35 : eq(9, 34) : BOOL
36 : 122 { 0x7a } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(30, 18, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : ite(11, 12, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 24) : BOOL
56 : eq(49, 8) : BOOL
57 : eq(49, 29) : BOOL
58 : eq(49, 31) : BOOL
59 : eq(49, 34) : BOOL
60 : ite(59, 36, 37) : BV:8
61 : ite(58, 33, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 28, 62) : BV:8
64 : ite(55, 26, 63) : BV:8
65 : ite(54, 18, 64) : BV:8
66 : ite(53, 21, 65) : BV:8
67 : ite(52, 18, 66) : BV:8
68 : ite(51, 15, 67) : BV:8
69 : ite(50, 12, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 7, 8) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 13) : BOOL
74 : eq(71, 16) : BOOL
75 : eq(71, 19) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 24) : BOOL
78 : eq(71, 8) : BOOL
79 : eq(71, 29) : BOOL
80 : eq(71, 31) : BOOL
81 : eq(71, 34) : BOOL
82 : ite(81, 36, 37) : BV:8
83 : ite(80, 33, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 28, 84) : BV:8
86 : ite(77, 26, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 21, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 12, 90) : BV:8
92 : bvadd(7, 8) : BV:32
93 : eq(92, 10) : BOOL
94 : eq(92, 13) : BOOL
95 : eq(92, 16) : BOOL
96 : eq(92, 19) : BOOL
97 : eq(92, 22) : BOOL
98 : eq(92, 24) : BOOL
99 : eq(92, 8) : BOOL
100 : eq(92, 29) : BOOL
101 : eq(92, 31) : BOOL
102 : eq(92, 34) : BOOL
103 : ite(102, 36, 37) : BV:8
104 : ite(101, 33, 103) : BV:8
105 : ite(100, 18, 104) : BV:8
106 : ite(99, 28, 105) : BV:8
107 : ite(98, 26, 106) : BV:8
108 : ite(97, 18, 107) : BV:8
109 : ite(96, 21, 108) : BV:8
110 : ite(95, 18, 109) : BV:8
111 : ite(94, 15, 110) : BV:8
112 : ite(93, 12, 111) : BV:8
113 : bvconcat(47, 69, 91, 112) : BV:32
114 : ite(3, 4, 113) : BV:32
115 : lambda(1, 114) : FUNCTION[BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 848651904 { 0x32956680 +1.16719055e230 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2517246563 { 0x960a2263 -1777720733 -1.7917439e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3047752615 { 0xb5a903a7 -1247214681 -1.32042396e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=counter_example.random_seed
1511476399
=counter_example_end
=global nodece 63 num_edges_traversed 3
=global nodece 63 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce11507.num_edges_traversed4
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce11507 90e239173cdb24c64c95a57fd4c4b18
=input.spec-%var-x-1
1 : Lambda27460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27463 : BV:32
18 : Lambda27461 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27462 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : 268435459 { 0x10000003 +1.35e161 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
62 : eq(60, 61) : BOOL
63 : 4 { 0x4 } : BV:8
64 : 268435456 { 0x10000000 +1.0e161 } : BV:32
65 : eq(60, 64) : BOOL
66 : 252 { 0xfc -4 } : BV:8
67 : 536870918 { 0x20000006 +1.71e193 } : BV:32
68 : eq(60, 67) : BOOL
69 : 64 { 0x40 } : BV:8
70 : eq(60, 58) : BOOL
71 : 63 { 0x3f } : BV:8
72 : 536870917 { 0x20000005 +1.59e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
75 : eq(60, 74) : BOOL
76 : 32 { 0x20 } : BV:8
77 : 536870916 { 0x20000004 +1.47e193 } : BV:32
78 : eq(60, 77) : BOOL
79 : 128 { 0x80 -128 } : BV:8
80 : 536870919 { 0x20000007 +1.83e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 268435458 { 0x10000002 +1.23e161 } : BV:32
83 : eq(60, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 268435457 { 0x10000001 +1.11e161 } : BV:32
86 : eq(60, 85) : BOOL
87 : 122 { 0x7a } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(81, 69, 90) : BV:8
92 : ite(78, 79, 91) : BV:8
93 : ite(75, 76, 92) : BV:8
94 : ite(73, 69, 93) : BV:8
95 : ite(70, 71, 94) : BV:8
96 : ite(68, 69, 95) : BV:8
97 : ite(65, 66, 96) : BV:8
98 : ite(62, 63, 97) : BV:8
99 : bvadd(82, 59) : BV:32
100 : eq(99, 61) : BOOL
101 : eq(99, 64) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 58) : BOOL
104 : eq(99, 72) : BOOL
105 : eq(99, 74) : BOOL
106 : eq(99, 77) : BOOL
107 : eq(99, 80) : BOOL
108 : eq(99, 82) : BOOL
109 : eq(99, 85) : BOOL
110 : ite(109, 87, 88) : BV:8
111 : ite(108, 84, 110) : BV:8
112 : ite(107, 69, 111) : BV:8
113 : ite(106, 79, 112) : BV:8
114 : ite(105, 76, 113) : BV:8
115 : ite(104, 69, 114) : BV:8
116 : ite(103, 71, 115) : BV:8
117 : ite(102, 69, 116) : BV:8
118 : ite(101, 66, 117) : BV:8
119 : ite(100, 63, 118) : BV:8
120 : bvadd(85, 59) : BV:32
121 : eq(120, 61) : BOOL
122 : eq(120, 64) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 58) : BOOL
125 : eq(120, 72) : BOOL
126 : eq(120, 74) : BOOL
127 : eq(120, 77) : BOOL
128 : eq(120, 80) : BOOL
129 : eq(120, 82) : BOOL
130 : eq(120, 85) : BOOL
131 : ite(130, 87, 88) : BV:8
132 : ite(129, 84, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 79, 133) : BV:8
135 : ite(126, 76, 134) : BV:8
136 : ite(125, 69, 135) : BV:8
137 : ite(124, 71, 136) : BV:8
138 : ite(123, 69, 137) : BV:8
139 : ite(122, 66, 138) : BV:8
140 : ite(121, 63, 139) : BV:8
141 : bvadd(64, 59) : BV:32
142 : eq(141, 61) : BOOL
143 : eq(141, 64) : BOOL
144 : eq(141, 67) : BOOL
145 : eq(141, 58) : BOOL
146 : eq(141, 72) : BOOL
147 : eq(141, 74) : BOOL
148 : eq(141, 77) : BOOL
149 : eq(141, 80) : BOOL
150 : eq(141, 82) : BOOL
151 : eq(141, 85) : BOOL
152 : ite(151, 87, 88) : BV:8
153 : ite(150, 84, 152) : BV:8
154 : ite(149, 69, 153) : BV:8
155 : ite(148, 79, 154) : BV:8
156 : ite(147, 76, 155) : BV:8
157 : ite(146, 69, 156) : BV:8
158 : ite(145, 71, 157) : BV:8
159 : ite(144, 69, 158) : BV:8
160 : ite(143, 66, 159) : BV:8
161 : ite(142, 63, 160) : BV:8
162 : bvconcat(98, 119, 140, 161) : BV:32
163 : bvadd(37, 57, 162) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 64) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 58) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 74) : BOOL
170 : eq(163, 77) : BOOL
171 : eq(163, 80) : BOOL
172 : eq(163, 82) : BOOL
173 : eq(163, 85) : BOOL
174 : ite(173, 87, 88) : BV:8
175 : ite(172, 84, 174) : BV:8
176 : ite(171, 69, 175) : BV:8
177 : ite(170, 79, 176) : BV:8
178 : ite(169, 76, 177) : BV:8
179 : ite(168, 69, 178) : BV:8
180 : ite(167, 71, 179) : BV:8
181 : ite(166, 69, 180) : BV:8
182 : ite(165, 66, 181) : BV:8
183 : ite(164, 63, 182) : BV:8
184 : bvadd(41, 57, 162) : BV:32
185 : eq(184, 61) : BOOL
186 : eq(184, 64) : BOOL
187 : eq(184, 67) : BOOL
188 : eq(184, 58) : BOOL
189 : eq(184, 72) : BOOL
190 : eq(184, 74) : BOOL
191 : eq(184, 77) : BOOL
192 : eq(184, 80) : BOOL
193 : eq(184, 82) : BOOL
194 : eq(184, 85) : BOOL
195 : ite(194, 87, 88) : BV:8
196 : ite(193, 84, 195) : BV:8
197 : ite(192, 69, 196) : BV:8
198 : ite(191, 79, 197) : BV:8
199 : ite(190, 76, 198) : BV:8
200 : ite(189, 69, 199) : BV:8
201 : ite(188, 71, 200) : BV:8
202 : ite(187, 69, 201) : BV:8
203 : ite(186, 66, 202) : BV:8
204 : ite(185, 63, 203) : BV:8
205 : bvadd(34, 57, 162) : BV:32
206 : eq(205, 61) : BOOL
207 : eq(205, 64) : BOOL
208 : eq(205, 67) : BOOL
209 : eq(205, 58) : BOOL
210 : eq(205, 72) : BOOL
211 : eq(205, 74) : BOOL
212 : eq(205, 77) : BOOL
213 : eq(205, 80) : BOOL
214 : eq(205, 82) : BOOL
215 : eq(205, 85) : BOOL
216 : ite(215, 87, 88) : BV:8
217 : ite(214, 84, 216) : BV:8
218 : ite(213, 69, 217) : BV:8
219 : ite(212, 79, 218) : BV:8
220 : ite(211, 76, 219) : BV:8
221 : ite(210, 69, 220) : BV:8
222 : ite(209, 71, 221) : BV:8
223 : ite(208, 69, 222) : BV:8
224 : ite(207, 66, 223) : BV:8
225 : ite(206, 63, 224) : BV:8
226 : bvadd(57, 162) : BV:32
227 : eq(226, 61) : BOOL
228 : eq(226, 64) : BOOL
229 : eq(226, 67) : BOOL
230 : eq(226, 58) : BOOL
231 : eq(226, 72) : BOOL
232 : eq(226, 74) : BOOL
233 : eq(226, 77) : BOOL
234 : eq(226, 80) : BOOL
235 : eq(226, 82) : BOOL
236 : eq(226, 85) : BOOL
237 : ite(236, 87, 88) : BV:8
238 : ite(235, 84, 237) : BV:8
239 : ite(234, 69, 238) : BV:8
240 : ite(233, 79, 239) : BV:8
241 : ite(232, 76, 240) : BV:8
242 : ite(231, 69, 241) : BV:8
243 : ite(230, 71, 242) : BV:8
244 : ite(229, 69, 243) : BV:8
245 : ite(228, 66, 244) : BV:8
246 : ite(227, 63, 245) : BV:8
247 : bvconcat(183, 204, 225, 246) : BV:32
248 : ite(55, 2, 247) : BV:32
249 : lambda(52, 248) : FUNCTION[BV:32 -> BV:32]
250 : map(51, 249) : MAP[BV:32 -> BV:32]
251 : lambda(17, 250) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
252 : map(16, 251) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
253 : sym_const(252) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 268435457 { 0x10000001 +1.11e161 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%n
1 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435455 ] -> 0, [ 268435456; 268435456 ] -> 252, [ 268435457; 268435457 ] -> 122, [ 268435458; 268435458 ] -> 127, [ 268435459; 268435459 ] -> 63, [ 268435460; 536870915 ] -> 0, [ 536870916; 536870916 ] -> 128, [ 536870917; 536870919 ] -> 64, [ 536870920; 1342177275 ] -> 0, [ 1342177276; 1342177276 ] -> 4, [ 1342177277; 1342177278 ] -> 0, [ 1342177279; 1342177279 ] -> 32, [ 1342177280; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 536870916; 2517246559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2517246560; 2517246563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2517246564; 3047752611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3047752612; 3047752615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3047752616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27467 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27470 : BV:32
18 : Lambda27468 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27469 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : 268435459 { 0x10000003 +1.35e161 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
81 : eq(79, 80) : BOOL
82 : 4 { 0x4 } : BV:8
83 : 268435456 { 0x10000000 +1.0e161 } : BV:32
84 : eq(79, 83) : BOOL
85 : 252 { 0xfc -4 } : BV:8
86 : 536870918 { 0x20000006 +1.71e193 } : BV:32
87 : eq(79, 86) : BOOL
88 : 64 { 0x40 } : BV:8
89 : eq(79, 77) : BOOL
90 : 63 { 0x3f } : BV:8
91 : 536870917 { 0x20000005 +1.59e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
94 : eq(79, 93) : BOOL
95 : 32 { 0x20 } : BV:8
96 : 536870916 { 0x20000004 +1.47e193 } : BV:32
97 : eq(79, 96) : BOOL
98 : 128 { 0x80 -128 } : BV:8
99 : 536870919 { 0x20000007 +1.83e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 268435458 { 0x10000002 +1.23e161 } : BV:32
102 : eq(79, 101) : BOOL
103 : 127 { 0x7f } : BV:8
104 : 268435457 { 0x10000001 +1.11e161 } : BV:32
105 : eq(79, 104) : BOOL
106 : 122 { 0x7a } : BV:8
107 : 0 { 0x0 } : BV:8
108 : ite(105, 106, 107) : BV:8
109 : ite(102, 103, 108) : BV:8
110 : ite(100, 88, 109) : BV:8
111 : ite(97, 98, 110) : BV:8
112 : ite(94, 95, 111) : BV:8
113 : ite(92, 88, 112) : BV:8
114 : ite(89, 90, 113) : BV:8
115 : ite(87, 88, 114) : BV:8
116 : ite(84, 85, 115) : BV:8
117 : ite(81, 82, 116) : BV:8
118 : bvadd(101, 78) : BV:32
119 : eq(118, 80) : BOOL
120 : eq(118, 83) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 77) : BOOL
123 : eq(118, 91) : BOOL
124 : eq(118, 93) : BOOL
125 : eq(118, 96) : BOOL
126 : eq(118, 99) : BOOL
127 : eq(118, 101) : BOOL
128 : eq(118, 104) : BOOL
129 : ite(128, 106, 107) : BV:8
130 : ite(127, 103, 129) : BV:8
131 : ite(126, 88, 130) : BV:8
132 : ite(125, 98, 131) : BV:8
133 : ite(124, 95, 132) : BV:8
134 : ite(123, 88, 133) : BV:8
135 : ite(122, 90, 134) : BV:8
136 : ite(121, 88, 135) : BV:8
137 : ite(120, 85, 136) : BV:8
138 : ite(119, 82, 137) : BV:8
139 : bvadd(104, 78) : BV:32
140 : eq(139, 80) : BOOL
141 : eq(139, 83) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 77) : BOOL
144 : eq(139, 91) : BOOL
145 : eq(139, 93) : BOOL
146 : eq(139, 96) : BOOL
147 : eq(139, 99) : BOOL
148 : eq(139, 101) : BOOL
149 : eq(139, 104) : BOOL
150 : ite(149, 106, 107) : BV:8
151 : ite(148, 103, 150) : BV:8
152 : ite(147, 88, 151) : BV:8
153 : ite(146, 98, 152) : BV:8
154 : ite(145, 95, 153) : BV:8
155 : ite(144, 88, 154) : BV:8
156 : ite(143, 90, 155) : BV:8
157 : ite(142, 88, 156) : BV:8
158 : ite(141, 85, 157) : BV:8
159 : ite(140, 82, 158) : BV:8
160 : bvadd(83, 78) : BV:32
161 : eq(160, 80) : BOOL
162 : eq(160, 83) : BOOL
163 : eq(160, 86) : BOOL
164 : eq(160, 77) : BOOL
165 : eq(160, 91) : BOOL
166 : eq(160, 93) : BOOL
167 : eq(160, 96) : BOOL
168 : eq(160, 99) : BOOL
169 : eq(160, 101) : BOOL
170 : eq(160, 104) : BOOL
171 : ite(170, 106, 107) : BV:8
172 : ite(169, 103, 171) : BV:8
173 : ite(168, 88, 172) : BV:8
174 : ite(167, 98, 173) : BV:8
175 : ite(166, 95, 174) : BV:8
176 : ite(165, 88, 175) : BV:8
177 : ite(164, 90, 176) : BV:8
178 : ite(163, 88, 177) : BV:8
179 : ite(162, 85, 178) : BV:8
180 : ite(161, 82, 179) : BV:8
181 : bvconcat(117, 138, 159, 180) : BV:32
182 : bvadd(37, 76, 181) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 83) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 77) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 93) : BOOL
189 : eq(182, 96) : BOOL
190 : eq(182, 99) : BOOL
191 : eq(182, 101) : BOOL
192 : eq(182, 104) : BOOL
193 : ite(192, 106, 107) : BV:8
194 : ite(191, 103, 193) : BV:8
195 : ite(190, 88, 194) : BV:8
196 : ite(189, 98, 195) : BV:8
197 : ite(188, 95, 196) : BV:8
198 : ite(187, 88, 197) : BV:8
199 : ite(186, 90, 198) : BV:8
200 : ite(185, 88, 199) : BV:8
201 : ite(184, 85, 200) : BV:8
202 : ite(183, 82, 201) : BV:8
203 : bvadd(41, 76, 181) : BV:32
204 : eq(203, 80) : BOOL
205 : eq(203, 83) : BOOL
206 : eq(203, 86) : BOOL
207 : eq(203, 77) : BOOL
208 : eq(203, 91) : BOOL
209 : eq(203, 93) : BOOL
210 : eq(203, 96) : BOOL
211 : eq(203, 99) : BOOL
212 : eq(203, 101) : BOOL
213 : eq(203, 104) : BOOL
214 : ite(213, 106, 107) : BV:8
215 : ite(212, 103, 214) : BV:8
216 : ite(211, 88, 215) : BV:8
217 : ite(210, 98, 216) : BV:8
218 : ite(209, 95, 217) : BV:8
219 : ite(208, 88, 218) : BV:8
220 : ite(207, 90, 219) : BV:8
221 : ite(206, 88, 220) : BV:8
222 : ite(205, 85, 221) : BV:8
223 : ite(204, 82, 222) : BV:8
224 : bvadd(34, 76, 181) : BV:32
225 : eq(224, 80) : BOOL
226 : eq(224, 83) : BOOL
227 : eq(224, 86) : BOOL
228 : eq(224, 77) : BOOL
229 : eq(224, 91) : BOOL
230 : eq(224, 93) : BOOL
231 : eq(224, 96) : BOOL
232 : eq(224, 99) : BOOL
233 : eq(224, 101) : BOOL
234 : eq(224, 104) : BOOL
235 : ite(234, 106, 107) : BV:8
236 : ite(233, 103, 235) : BV:8
237 : ite(232, 88, 236) : BV:8
238 : ite(231, 98, 237) : BV:8
239 : ite(230, 95, 238) : BV:8
240 : ite(229, 88, 239) : BV:8
241 : ite(228, 90, 240) : BV:8
242 : ite(227, 88, 241) : BV:8
243 : ite(226, 85, 242) : BV:8
244 : ite(225, 82, 243) : BV:8
245 : bvadd(76, 181) : BV:32
246 : eq(245, 80) : BOOL
247 : eq(245, 83) : BOOL
248 : eq(245, 86) : BOOL
249 : eq(245, 77) : BOOL
250 : eq(245, 91) : BOOL
251 : eq(245, 93) : BOOL
252 : eq(245, 96) : BOOL
253 : eq(245, 99) : BOOL
254 : eq(245, 101) : BOOL
255 : eq(245, 104) : BOOL
256 : ite(255, 106, 107) : BV:8
257 : ite(254, 103, 256) : BV:8
258 : ite(253, 88, 257) : BV:8
259 : ite(252, 98, 258) : BV:8
260 : ite(251, 95, 259) : BV:8
261 : ite(250, 88, 260) : BV:8
262 : ite(249, 90, 261) : BV:8
263 : ite(248, 88, 262) : BV:8
264 : ite(247, 85, 263) : BV:8
265 : ite(246, 82, 264) : BV:8
266 : bvconcat(202, 223, 244, 265) : BV:32
267 : ite(55, 2, 266) : BV:32
268 : ite(74, 266, 267) : BV:32
269 : ite(55, 2, 268) : BV:32
270 : lambda(52, 269) : FUNCTION[BV:32 -> BV:32]
271 : map(51, 270) : MAP[BV:32 -> BV:32]
272 : lambda(17, 271) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
273 : map(16, 272) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
274 : sym_const(273) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27512 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 1) : BOOL
8 : and(6, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : bvule(3, 14) : BOOL
17 : and(15, 16) : BOOL
18 : ite(17, 14, 14) : BV:32
19 : ite(13, 9, 18) : BV:32
20 : ite(8, 5, 19) : BV:32
21 : eq(20, 5) : BOOL
22 : and(4, 21) : BOOL
23 : 0 { 0x0 } : BOOL
24 : ite(22, 4, 23) : BOOL
25 : lambda(3, 24) : FUNCTION[BV:32 -> BOOL]
26 : Lambda27513 : BV:32
27 : bvule(5, 26) : BOOL
28 : bvule(26, 1) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(9, 26) : BOOL
31 : bvule(26, 11) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(14, 26) : BOOL
34 : bvule(26, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 9, 36) : BV:32
38 : ite(29, 5, 37) : BV:32
39 : eq(38, 5) : BOOL
40 : and(4, 39) : BOOL
41 : ite(40, 4, 23) : BOOL
42 : and(4, 41) : BOOL
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 26) : BV:32
45 : bvadd(9, 44, 5) : BV:32
46 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
47 : eq(45, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : 268435456 { 0x10000000 +1.0e161 } : BV:32
50 : eq(45, 49) : BOOL
51 : 252 { 0xfc -4 } : BV:8
52 : 536870918 { 0x20000006 +1.71e193 } : BV:32
53 : eq(45, 52) : BOOL
54 : 64 { 0x40 } : BV:8
55 : 268435459 { 0x10000003 +1.35e161 } : BV:32
56 : eq(45, 55) : BOOL
57 : 63 { 0x3f } : BV:8
58 : 536870917 { 0x20000005 +1.59e193 } : BV:32
59 : eq(45, 58) : BOOL
60 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
61 : eq(45, 60) : BOOL
62 : 32 { 0x20 } : BV:8
63 : 536870916 { 0x20000004 +1.47e193 } : BV:32
64 : eq(45, 63) : BOOL
65 : 128 { 0x80 -128 } : BV:8
66 : 536870919 { 0x20000007 +1.83e193 } : BV:32
67 : eq(45, 66) : BOOL
68 : 268435458 { 0x10000002 +1.23e161 } : BV:32
69 : eq(45, 68) : BOOL
70 : 127 { 0x7f } : BV:8
71 : 268435457 { 0x10000001 +1.11e161 } : BV:32
72 : eq(45, 71) : BOOL
73 : 122 { 0x7a } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(67, 54, 76) : BV:8
78 : ite(64, 65, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(59, 54, 79) : BV:8
81 : ite(56, 57, 80) : BV:8
82 : ite(53, 54, 81) : BV:8
83 : ite(50, 51, 82) : BV:8
84 : ite(47, 48, 83) : BV:8
85 : bvadd(14, 44, 5) : BV:32
86 : eq(85, 46) : BOOL
87 : eq(85, 49) : BOOL
88 : eq(85, 52) : BOOL
89 : eq(85, 55) : BOOL
90 : eq(85, 58) : BOOL
91 : eq(85, 60) : BOOL
92 : eq(85, 63) : BOOL
93 : eq(85, 66) : BOOL
94 : eq(85, 68) : BOOL
95 : eq(85, 71) : BOOL
96 : ite(95, 73, 74) : BV:8
97 : ite(94, 70, 96) : BV:8
98 : ite(93, 54, 97) : BV:8
99 : ite(92, 65, 98) : BV:8
100 : ite(91, 62, 99) : BV:8
101 : ite(90, 54, 100) : BV:8
102 : ite(89, 57, 101) : BV:8
103 : ite(88, 54, 102) : BV:8
104 : ite(87, 51, 103) : BV:8
105 : ite(86, 48, 104) : BV:8
106 : bvadd(1, 44, 5) : BV:32
107 : eq(106, 46) : BOOL
108 : eq(106, 49) : BOOL
109 : eq(106, 52) : BOOL
110 : eq(106, 55) : BOOL
111 : eq(106, 58) : BOOL
112 : eq(106, 60) : BOOL
113 : eq(106, 63) : BOOL
114 : eq(106, 66) : BOOL
115 : eq(106, 68) : BOOL
116 : eq(106, 71) : BOOL
117 : ite(116, 73, 74) : BV:8
118 : ite(115, 70, 117) : BV:8
119 : ite(114, 54, 118) : BV:8
120 : ite(113, 65, 119) : BV:8
121 : ite(112, 62, 120) : BV:8
122 : ite(111, 54, 121) : BV:8
123 : ite(110, 57, 122) : BV:8
124 : ite(109, 54, 123) : BV:8
125 : ite(108, 51, 124) : BV:8
126 : ite(107, 48, 125) : BV:8
127 : bvadd(44, 5) : BV:32
128 : eq(127, 46) : BOOL
129 : eq(127, 49) : BOOL
130 : eq(127, 52) : BOOL
131 : eq(127, 55) : BOOL
132 : eq(127, 58) : BOOL
133 : eq(127, 60) : BOOL
134 : eq(127, 63) : BOOL
135 : eq(127, 66) : BOOL
136 : eq(127, 68) : BOOL
137 : eq(127, 71) : BOOL
138 : ite(137, 73, 74) : BV:8
139 : ite(136, 70, 138) : BV:8
140 : ite(135, 54, 139) : BV:8
141 : ite(134, 65, 140) : BV:8
142 : ite(133, 62, 141) : BV:8
143 : ite(132, 54, 142) : BV:8
144 : ite(131, 57, 143) : BV:8
145 : ite(130, 54, 144) : BV:8
146 : ite(129, 51, 145) : BV:8
147 : ite(128, 48, 146) : BV:8
148 : bvconcat(84, 105, 126, 147) : BV:32
149 : ite(42, 148, 148) : BV:32
150 : lambda(26, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(25, 150) : MAP[BV:32 -> BV:32]
152 : sum(1, 2, 151) : SUM[UNIT,MAP[BV:32 -> BV:32]]
153 : sym_const(152) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 358892147 { 0x15644273 +1.78327786e171 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27514 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda27515 : BV:32
26 : bvule(3, 25) : BOOL
27 : bvule(25, 5) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(8, 25) : BOOL
30 : bvule(25, 10) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(13, 25) : BOOL
33 : bvule(25, 13) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 13, 13) : BV:32
36 : ite(31, 8, 35) : BV:32
37 : ite(28, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(2, 38) : BOOL
40 : ite(39, 2, 22) : BOOL
41 : and(2, 40) : BOOL
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 25) : BV:32
44 : bvadd(8, 43, 3) : BV:32
45 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
46 : eq(44, 45) : BOOL
47 : 4 { 0x4 } : BV:8
48 : 268435456 { 0x10000000 +1.0e161 } : BV:32
49 : eq(44, 48) : BOOL
50 : 252 { 0xfc -4 } : BV:8
51 : 536870918 { 0x20000006 +1.71e193 } : BV:32
52 : eq(44, 51) : BOOL
53 : 64 { 0x40 } : BV:8
54 : 268435459 { 0x10000003 +1.35e161 } : BV:32
55 : eq(44, 54) : BOOL
56 : 63 { 0x3f } : BV:8
57 : 536870917 { 0x20000005 +1.59e193 } : BV:32
58 : eq(44, 57) : BOOL
59 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
60 : eq(44, 59) : BOOL
61 : 32 { 0x20 } : BV:8
62 : 536870916 { 0x20000004 +1.47e193 } : BV:32
63 : eq(44, 62) : BOOL
64 : 128 { 0x80 -128 } : BV:8
65 : 536870919 { 0x20000007 +1.83e193 } : BV:32
66 : eq(44, 65) : BOOL
67 : 268435458 { 0x10000002 +1.23e161 } : BV:32
68 : eq(44, 67) : BOOL
69 : 127 { 0x7f } : BV:8
70 : 268435457 { 0x10000001 +1.11e161 } : BV:32
71 : eq(44, 70) : BOOL
72 : 122 { 0x7a } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(66, 53, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : ite(60, 61, 77) : BV:8
79 : ite(58, 53, 78) : BV:8
80 : ite(55, 56, 79) : BV:8
81 : ite(52, 53, 80) : BV:8
82 : ite(49, 50, 81) : BV:8
83 : ite(46, 47, 82) : BV:8
84 : bvadd(13, 43, 3) : BV:32
85 : eq(84, 45) : BOOL
86 : eq(84, 48) : BOOL
87 : eq(84, 51) : BOOL
88 : eq(84, 54) : BOOL
89 : eq(84, 57) : BOOL
90 : eq(84, 59) : BOOL
91 : eq(84, 62) : BOOL
92 : eq(84, 65) : BOOL
93 : eq(84, 67) : BOOL
94 : eq(84, 70) : BOOL
95 : ite(94, 72, 73) : BV:8
96 : ite(93, 69, 95) : BV:8
97 : ite(92, 53, 96) : BV:8
98 : ite(91, 64, 97) : BV:8
99 : ite(90, 61, 98) : BV:8
100 : ite(89, 53, 99) : BV:8
101 : ite(88, 56, 100) : BV:8
102 : ite(87, 53, 101) : BV:8
103 : ite(86, 50, 102) : BV:8
104 : ite(85, 47, 103) : BV:8
105 : bvadd(5, 43, 3) : BV:32
106 : eq(105, 45) : BOOL
107 : eq(105, 48) : BOOL
108 : eq(105, 51) : BOOL
109 : eq(105, 54) : BOOL
110 : eq(105, 57) : BOOL
111 : eq(105, 59) : BOOL
112 : eq(105, 62) : BOOL
113 : eq(105, 65) : BOOL
114 : eq(105, 67) : BOOL
115 : eq(105, 70) : BOOL
116 : ite(115, 72, 73) : BV:8
117 : ite(114, 69, 116) : BV:8
118 : ite(113, 53, 117) : BV:8
119 : ite(112, 64, 118) : BV:8
120 : ite(111, 61, 119) : BV:8
121 : ite(110, 53, 120) : BV:8
122 : ite(109, 56, 121) : BV:8
123 : ite(108, 53, 122) : BV:8
124 : ite(107, 50, 123) : BV:8
125 : ite(106, 47, 124) : BV:8
126 : bvadd(43, 3) : BV:32
127 : eq(126, 45) : BOOL
128 : eq(126, 48) : BOOL
129 : eq(126, 51) : BOOL
130 : eq(126, 54) : BOOL
131 : eq(126, 57) : BOOL
132 : eq(126, 59) : BOOL
133 : eq(126, 62) : BOOL
134 : eq(126, 65) : BOOL
135 : eq(126, 67) : BOOL
136 : eq(126, 70) : BOOL
137 : ite(136, 72, 73) : BV:8
138 : ite(135, 69, 137) : BV:8
139 : ite(134, 53, 138) : BV:8
140 : ite(133, 64, 139) : BV:8
141 : ite(132, 61, 140) : BV:8
142 : ite(131, 53, 141) : BV:8
143 : ite(130, 56, 142) : BV:8
144 : ite(129, 53, 143) : BV:8
145 : ite(128, 50, 144) : BV:8
146 : ite(127, 47, 145) : BV:8
147 : bvconcat(83, 104, 125, 146) : BV:32
148 : ite(41, 147, 147) : BV:32
149 : lambda(25, 148) : FUNCTION[BV:32 -> BV:32]
150 : map(24, 149) : MAP[BV:32 -> BV:32]
151 : sym_const(150) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda27516 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda27517 : BV:32
26 : bvule(3, 25) : BOOL
27 : bvule(25, 5) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(8, 25) : BOOL
30 : bvule(25, 10) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(13, 25) : BOOL
33 : bvule(25, 13) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 13, 13) : BV:32
36 : ite(31, 8, 35) : BV:32
37 : ite(28, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(2, 38) : BOOL
40 : ite(39, 2, 22) : BOOL
41 : and(2, 40) : BOOL
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 25) : BV:32
44 : bvadd(8, 43, 3) : BV:32
45 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
46 : eq(44, 45) : BOOL
47 : 4 { 0x4 } : BV:8
48 : 268435456 { 0x10000000 +1.0e161 } : BV:32
49 : eq(44, 48) : BOOL
50 : 252 { 0xfc -4 } : BV:8
51 : 536870918 { 0x20000006 +1.71e193 } : BV:32
52 : eq(44, 51) : BOOL
53 : 64 { 0x40 } : BV:8
54 : 268435459 { 0x10000003 +1.35e161 } : BV:32
55 : eq(44, 54) : BOOL
56 : 63 { 0x3f } : BV:8
57 : 536870917 { 0x20000005 +1.59e193 } : BV:32
58 : eq(44, 57) : BOOL
59 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
60 : eq(44, 59) : BOOL
61 : 32 { 0x20 } : BV:8
62 : 536870916 { 0x20000004 +1.47e193 } : BV:32
63 : eq(44, 62) : BOOL
64 : 128 { 0x80 -128 } : BV:8
65 : 536870919 { 0x20000007 +1.83e193 } : BV:32
66 : eq(44, 65) : BOOL
67 : 268435458 { 0x10000002 +1.23e161 } : BV:32
68 : eq(44, 67) : BOOL
69 : 127 { 0x7f } : BV:8
70 : 268435457 { 0x10000001 +1.11e161 } : BV:32
71 : eq(44, 70) : BOOL
72 : 122 { 0x7a } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(66, 53, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : ite(60, 61, 77) : BV:8
79 : ite(58, 53, 78) : BV:8
80 : ite(55, 56, 79) : BV:8
81 : ite(52, 53, 80) : BV:8
82 : ite(49, 50, 81) : BV:8
83 : ite(46, 47, 82) : BV:8
84 : bvadd(13, 43, 3) : BV:32
85 : eq(84, 45) : BOOL
86 : eq(84, 48) : BOOL
87 : eq(84, 51) : BOOL
88 : eq(84, 54) : BOOL
89 : eq(84, 57) : BOOL
90 : eq(84, 59) : BOOL
91 : eq(84, 62) : BOOL
92 : eq(84, 65) : BOOL
93 : eq(84, 67) : BOOL
94 : eq(84, 70) : BOOL
95 : ite(94, 72, 73) : BV:8
96 : ite(93, 69, 95) : BV:8
97 : ite(92, 53, 96) : BV:8
98 : ite(91, 64, 97) : BV:8
99 : ite(90, 61, 98) : BV:8
100 : ite(89, 53, 99) : BV:8
101 : ite(88, 56, 100) : BV:8
102 : ite(87, 53, 101) : BV:8
103 : ite(86, 50, 102) : BV:8
104 : ite(85, 47, 103) : BV:8
105 : bvadd(5, 43, 3) : BV:32
106 : eq(105, 45) : BOOL
107 : eq(105, 48) : BOOL
108 : eq(105, 51) : BOOL
109 : eq(105, 54) : BOOL
110 : eq(105, 57) : BOOL
111 : eq(105, 59) : BOOL
112 : eq(105, 62) : BOOL
113 : eq(105, 65) : BOOL
114 : eq(105, 67) : BOOL
115 : eq(105, 70) : BOOL
116 : ite(115, 72, 73) : BV:8
117 : ite(114, 69, 116) : BV:8
118 : ite(113, 53, 117) : BV:8
119 : ite(112, 64, 118) : BV:8
120 : ite(111, 61, 119) : BV:8
121 : ite(110, 53, 120) : BV:8
122 : ite(109, 56, 121) : BV:8
123 : ite(108, 53, 122) : BV:8
124 : ite(107, 50, 123) : BV:8
125 : ite(106, 47, 124) : BV:8
126 : bvadd(43, 3) : BV:32
127 : eq(126, 45) : BOOL
128 : eq(126, 48) : BOOL
129 : eq(126, 51) : BOOL
130 : eq(126, 54) : BOOL
131 : eq(126, 57) : BOOL
132 : eq(126, 59) : BOOL
133 : eq(126, 62) : BOOL
134 : eq(126, 65) : BOOL
135 : eq(126, 67) : BOOL
136 : eq(126, 70) : BOOL
137 : ite(136, 72, 73) : BV:8
138 : ite(135, 69, 137) : BV:8
139 : ite(134, 53, 138) : BV:8
140 : ite(133, 64, 139) : BV:8
141 : ite(132, 61, 140) : BV:8
142 : ite(131, 53, 141) : BV:8
143 : ite(130, 56, 142) : BV:8
144 : ite(129, 53, 143) : BV:8
145 : ite(128, 50, 144) : BV:8
146 : ite(127, 47, 145) : BV:8
147 : bvconcat(83, 104, 125, 146) : BV:32
148 : ite(41, 147, 147) : BV:32
149 : lambda(25, 148) : FUNCTION[BV:32 -> BV:32]
150 : map(24, 149) : MAP[BV:32 -> BV:32]
151 : sym_const(150) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2157123601 ] -> true, [ 2157123602; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27409 : BV:32
2 : Lambda27410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27414 : BV:32
2 : Lambda27415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 268435459 { 0x10000003 +1.35e161 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
54 : eq(52, 53) : BOOL
55 : 4 { 0x4 } : BV:8
56 : 268435456 { 0x10000000 +1.0e161 } : BV:32
57 : eq(52, 56) : BOOL
58 : 252 { 0xfc -4 } : BV:8
59 : 536870918 { 0x20000006 +1.71e193 } : BV:32
60 : eq(52, 59) : BOOL
61 : 64 { 0x40 } : BV:8
62 : eq(52, 50) : BOOL
63 : 63 { 0x3f } : BV:8
64 : 536870917 { 0x20000005 +1.59e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
67 : eq(52, 66) : BOOL
68 : 32 { 0x20 } : BV:8
69 : 536870916 { 0x20000004 +1.47e193 } : BV:32
70 : eq(52, 69) : BOOL
71 : 128 { 0x80 -128 } : BV:8
72 : 536870919 { 0x20000007 +1.83e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 268435458 { 0x10000002 +1.23e161 } : BV:32
75 : eq(52, 74) : BOOL
76 : 127 { 0x7f } : BV:8
77 : 268435457 { 0x10000001 +1.11e161 } : BV:32
78 : eq(52, 77) : BOOL
79 : 122 { 0x7a } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(73, 61, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : ite(67, 68, 84) : BV:8
86 : ite(65, 61, 85) : BV:8
87 : ite(62, 63, 86) : BV:8
88 : ite(60, 61, 87) : BV:8
89 : ite(57, 58, 88) : BV:8
90 : ite(54, 55, 89) : BV:8
91 : bvadd(74, 51) : BV:32
92 : eq(91, 53) : BOOL
93 : eq(91, 56) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 50) : BOOL
96 : eq(91, 64) : BOOL
97 : eq(91, 66) : BOOL
98 : eq(91, 69) : BOOL
99 : eq(91, 72) : BOOL
100 : eq(91, 74) : BOOL
101 : eq(91, 77) : BOOL
102 : ite(101, 79, 80) : BV:8
103 : ite(100, 76, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : ite(98, 71, 104) : BV:8
106 : ite(97, 68, 105) : BV:8
107 : ite(96, 61, 106) : BV:8
108 : ite(95, 63, 107) : BV:8
109 : ite(94, 61, 108) : BV:8
110 : ite(93, 58, 109) : BV:8
111 : ite(92, 55, 110) : BV:8
112 : bvadd(77, 51) : BV:32
113 : eq(112, 53) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 50) : BOOL
117 : eq(112, 64) : BOOL
118 : eq(112, 66) : BOOL
119 : eq(112, 69) : BOOL
120 : eq(112, 72) : BOOL
121 : eq(112, 74) : BOOL
122 : eq(112, 77) : BOOL
123 : ite(122, 79, 80) : BV:8
124 : ite(121, 76, 123) : BV:8
125 : ite(120, 61, 124) : BV:8
126 : ite(119, 71, 125) : BV:8
127 : ite(118, 68, 126) : BV:8
128 : ite(117, 61, 127) : BV:8
129 : ite(116, 63, 128) : BV:8
130 : ite(115, 61, 129) : BV:8
131 : ite(114, 58, 130) : BV:8
132 : ite(113, 55, 131) : BV:8
133 : bvadd(56, 51) : BV:32
134 : eq(133, 53) : BOOL
135 : eq(133, 56) : BOOL
136 : eq(133, 59) : BOOL
137 : eq(133, 50) : BOOL
138 : eq(133, 64) : BOOL
139 : eq(133, 66) : BOOL
140 : eq(133, 69) : BOOL
141 : eq(133, 72) : BOOL
142 : eq(133, 74) : BOOL
143 : eq(133, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 61, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : ite(139, 68, 147) : BV:8
149 : ite(138, 61, 148) : BV:8
150 : ite(137, 63, 149) : BV:8
151 : ite(136, 61, 150) : BV:8
152 : ite(135, 58, 151) : BV:8
153 : ite(134, 55, 152) : BV:8
154 : bvconcat(90, 111, 132, 153) : BV:32
155 : bvadd(33, 49, 154) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 56) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 50) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 66) : BOOL
162 : eq(155, 69) : BOOL
163 : eq(155, 72) : BOOL
164 : eq(155, 74) : BOOL
165 : eq(155, 77) : BOOL
166 : ite(165, 79, 80) : BV:8
167 : ite(164, 76, 166) : BV:8
168 : ite(163, 61, 167) : BV:8
169 : ite(162, 71, 168) : BV:8
170 : ite(161, 68, 169) : BV:8
171 : ite(160, 61, 170) : BV:8
172 : ite(159, 63, 171) : BV:8
173 : ite(158, 61, 172) : BV:8
174 : ite(157, 58, 173) : BV:8
175 : ite(156, 55, 174) : BV:8
176 : bvadd(37, 49, 154) : BV:32
177 : eq(176, 53) : BOOL
178 : eq(176, 56) : BOOL
179 : eq(176, 59) : BOOL
180 : eq(176, 50) : BOOL
181 : eq(176, 64) : BOOL
182 : eq(176, 66) : BOOL
183 : eq(176, 69) : BOOL
184 : eq(176, 72) : BOOL
185 : eq(176, 74) : BOOL
186 : eq(176, 77) : BOOL
187 : ite(186, 79, 80) : BV:8
188 : ite(185, 76, 187) : BV:8
189 : ite(184, 61, 188) : BV:8
190 : ite(183, 71, 189) : BV:8
191 : ite(182, 68, 190) : BV:8
192 : ite(181, 61, 191) : BV:8
193 : ite(180, 63, 192) : BV:8
194 : ite(179, 61, 193) : BV:8
195 : ite(178, 58, 194) : BV:8
196 : ite(177, 55, 195) : BV:8
197 : bvadd(30, 49, 154) : BV:32
198 : eq(197, 53) : BOOL
199 : eq(197, 56) : BOOL
200 : eq(197, 59) : BOOL
201 : eq(197, 50) : BOOL
202 : eq(197, 64) : BOOL
203 : eq(197, 66) : BOOL
204 : eq(197, 69) : BOOL
205 : eq(197, 72) : BOOL
206 : eq(197, 74) : BOOL
207 : eq(197, 77) : BOOL
208 : ite(207, 79, 80) : BV:8
209 : ite(206, 76, 208) : BV:8
210 : ite(205, 61, 209) : BV:8
211 : ite(204, 71, 210) : BV:8
212 : ite(203, 68, 211) : BV:8
213 : ite(202, 61, 212) : BV:8
214 : ite(201, 63, 213) : BV:8
215 : ite(200, 61, 214) : BV:8
216 : ite(199, 58, 215) : BV:8
217 : ite(198, 55, 216) : BV:8
218 : bvadd(49, 154) : BV:32
219 : eq(218, 53) : BOOL
220 : eq(218, 56) : BOOL
221 : eq(218, 59) : BOOL
222 : eq(218, 50) : BOOL
223 : eq(218, 64) : BOOL
224 : eq(218, 66) : BOOL
225 : eq(218, 69) : BOOL
226 : eq(218, 72) : BOOL
227 : eq(218, 74) : BOOL
228 : eq(218, 77) : BOOL
229 : ite(228, 79, 80) : BV:8
230 : ite(227, 76, 229) : BV:8
231 : ite(226, 61, 230) : BV:8
232 : ite(225, 71, 231) : BV:8
233 : ite(224, 68, 232) : BV:8
234 : ite(223, 61, 233) : BV:8
235 : ite(222, 63, 234) : BV:8
236 : ite(221, 61, 235) : BV:8
237 : ite(220, 58, 236) : BV:8
238 : ite(219, 55, 237) : BV:8
239 : bvconcat(175, 196, 217, 238) : BV:32
240 : ite(6, 3, 239) : BV:32
241 : ite(47, 239, 240) : BV:32
242 : ite(6, 3, 241) : BV:32
243 : lambda(1, 2, 242) : FUNCTION[BV:32,BV:32 -> BV:32]
244 : sym_const(243) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27418 : BV:32
2 : Lambda27419 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2157123601 { 0x80931811 -2137843695 -1.14917194e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2157123602 { 0x80931812 -2137843694 -1.14917206e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2157123603 { 0x80931813 -2137843693 -1.14917218e130 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27416 : BV:32
2 : Lambda27417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 268435459 { 0x10000003 +1.35e161 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 268435456 { 0x10000000 +1.0e161 } : BV:32
17 : eq(12, 16) : BOOL
18 : 252 { 0xfc -4 } : BV:8
19 : 536870918 { 0x20000006 +1.71e193 } : BV:32
20 : eq(12, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : eq(12, 10) : BOOL
23 : 63 { 0x3f } : BV:8
24 : 536870917 { 0x20000005 +1.59e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
27 : eq(12, 26) : BOOL
28 : 32 { 0x20 } : BV:8
29 : 536870916 { 0x20000004 +1.47e193 } : BV:32
30 : eq(12, 29) : BOOL
31 : 128 { 0x80 -128 } : BV:8
32 : 536870919 { 0x20000007 +1.83e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 268435458 { 0x10000002 +1.23e161 } : BV:32
35 : eq(12, 34) : BOOL
36 : 127 { 0x7f } : BV:8
37 : 268435457 { 0x10000001 +1.11e161 } : BV:32
38 : eq(12, 37) : BOOL
39 : 122 { 0x7a } : BV:8
40 : 0 { 0x0 } : BV:8
41 : ite(38, 39, 40) : BV:8
42 : ite(35, 36, 41) : BV:8
43 : ite(33, 21, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(25, 21, 45) : BV:8
47 : ite(22, 23, 46) : BV:8
48 : ite(20, 21, 47) : BV:8
49 : ite(17, 18, 48) : BV:8
50 : ite(14, 15, 49) : BV:8
51 : bvadd(34, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : eq(51, 10) : BOOL
56 : eq(51, 24) : BOOL
57 : eq(51, 26) : BOOL
58 : eq(51, 29) : BOOL
59 : eq(51, 32) : BOOL
60 : eq(51, 34) : BOOL
61 : eq(51, 37) : BOOL
62 : ite(61, 39, 40) : BV:8
63 : ite(60, 36, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 31, 64) : BV:8
66 : ite(57, 28, 65) : BV:8
67 : ite(56, 21, 66) : BV:8
68 : ite(55, 23, 67) : BV:8
69 : ite(54, 21, 68) : BV:8
70 : ite(53, 18, 69) : BV:8
71 : ite(52, 15, 70) : BV:8
72 : bvadd(37, 11) : BV:32
73 : eq(72, 13) : BOOL
74 : eq(72, 16) : BOOL
75 : eq(72, 19) : BOOL
76 : eq(72, 10) : BOOL
77 : eq(72, 24) : BOOL
78 : eq(72, 26) : BOOL
79 : eq(72, 29) : BOOL
80 : eq(72, 32) : BOOL
81 : eq(72, 34) : BOOL
82 : eq(72, 37) : BOOL
83 : ite(82, 39, 40) : BV:8
84 : ite(81, 36, 83) : BV:8
85 : ite(80, 21, 84) : BV:8
86 : ite(79, 31, 85) : BV:8
87 : ite(78, 28, 86) : BV:8
88 : ite(77, 21, 87) : BV:8
89 : ite(76, 23, 88) : BV:8
90 : ite(75, 21, 89) : BV:8
91 : ite(74, 18, 90) : BV:8
92 : ite(73, 15, 91) : BV:8
93 : bvadd(16, 11) : BV:32
94 : eq(93, 13) : BOOL
95 : eq(93, 16) : BOOL
96 : eq(93, 19) : BOOL
97 : eq(93, 10) : BOOL
98 : eq(93, 24) : BOOL
99 : eq(93, 26) : BOOL
100 : eq(93, 29) : BOOL
101 : eq(93, 32) : BOOL
102 : eq(93, 34) : BOOL
103 : eq(93, 37) : BOOL
104 : ite(103, 39, 40) : BV:8
105 : ite(102, 36, 104) : BV:8
106 : ite(101, 21, 105) : BV:8
107 : ite(100, 31, 106) : BV:8
108 : ite(99, 28, 107) : BV:8
109 : ite(98, 21, 108) : BV:8
110 : ite(97, 23, 109) : BV:8
111 : ite(96, 21, 110) : BV:8
112 : ite(95, 18, 111) : BV:8
113 : ite(94, 15, 112) : BV:8
114 : bvconcat(50, 71, 92, 113) : BV:32
115 : bvadd(7, 9, 114) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 19) : BOOL
119 : eq(115, 10) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 26) : BOOL
122 : eq(115, 29) : BOOL
123 : eq(115, 32) : BOOL
124 : eq(115, 34) : BOOL
125 : eq(115, 37) : BOOL
126 : ite(125, 39, 40) : BV:8
127 : ite(124, 36, 126) : BV:8
128 : ite(123, 21, 127) : BV:8
129 : ite(122, 31, 128) : BV:8
130 : ite(121, 28, 129) : BV:8
131 : ite(120, 21, 130) : BV:8
132 : ite(119, 23, 131) : BV:8
133 : ite(118, 21, 132) : BV:8
134 : ite(117, 18, 133) : BV:8
135 : ite(116, 15, 134) : BV:8
136 : 2 { 0x2 +1.23e129 } : BV:32
137 : bvadd(136, 9, 114) : BV:32
138 : eq(137, 13) : BOOL
139 : eq(137, 16) : BOOL
140 : eq(137, 19) : BOOL
141 : eq(137, 10) : BOOL
142 : eq(137, 24) : BOOL
143 : eq(137, 26) : BOOL
144 : eq(137, 29) : BOOL
145 : eq(137, 32) : BOOL
146 : eq(137, 34) : BOOL
147 : eq(137, 37) : BOOL
148 : ite(147, 39, 40) : BV:8
149 : ite(146, 36, 148) : BV:8
150 : ite(145, 21, 149) : BV:8
151 : ite(144, 31, 150) : BV:8
152 : ite(143, 28, 151) : BV:8
153 : ite(142, 21, 152) : BV:8
154 : ite(141, 23, 153) : BV:8
155 : ite(140, 21, 154) : BV:8
156 : ite(139, 18, 155) : BV:8
157 : ite(138, 15, 156) : BV:8
158 : 1 { 0x1 +1.11e129 } : BV:32
159 : bvadd(158, 9, 114) : BV:32
160 : eq(159, 13) : BOOL
161 : eq(159, 16) : BOOL
162 : eq(159, 19) : BOOL
163 : eq(159, 10) : BOOL
164 : eq(159, 24) : BOOL
165 : eq(159, 26) : BOOL
166 : eq(159, 29) : BOOL
167 : eq(159, 32) : BOOL
168 : eq(159, 34) : BOOL
169 : eq(159, 37) : BOOL
170 : ite(169, 39, 40) : BV:8
171 : ite(168, 36, 170) : BV:8
172 : ite(167, 21, 171) : BV:8
173 : ite(166, 31, 172) : BV:8
174 : ite(165, 28, 173) : BV:8
175 : ite(164, 21, 174) : BV:8
176 : ite(163, 23, 175) : BV:8
177 : ite(162, 21, 176) : BV:8
178 : ite(161, 18, 177) : BV:8
179 : ite(160, 15, 178) : BV:8
180 : bvadd(9, 114) : BV:32
181 : eq(180, 13) : BOOL
182 : eq(180, 16) : BOOL
183 : eq(180, 19) : BOOL
184 : eq(180, 10) : BOOL
185 : eq(180, 24) : BOOL
186 : eq(180, 26) : BOOL
187 : eq(180, 29) : BOOL
188 : eq(180, 32) : BOOL
189 : eq(180, 34) : BOOL
190 : eq(180, 37) : BOOL
191 : ite(190, 39, 40) : BV:8
192 : ite(189, 36, 191) : BV:8
193 : ite(188, 21, 192) : BV:8
194 : ite(187, 31, 193) : BV:8
195 : ite(186, 28, 194) : BV:8
196 : ite(185, 21, 195) : BV:8
197 : ite(184, 23, 196) : BV:8
198 : ite(183, 21, 197) : BV:8
199 : ite(182, 18, 198) : BV:8
200 : ite(181, 15, 199) : BV:8
201 : bvconcat(135, 157, 179, 200) : BV:32
202 : ite(6, 3, 201) : BV:32
203 : lambda(1, 2, 202) : FUNCTION[BV:32,BV:32 -> BV:32]
204 : sym_const(203) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27425 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 536870916 { 0x20000004 +1.47e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1342177276 { 0x4ffffffc +1.99999952e32 } : BV:32
11 : eq(9, 10) : BOOL
12 : 4 { 0x4 } : BV:8
13 : 268435456 { 0x10000000 +1.0e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 252 { 0xfc -4 } : BV:8
16 : 536870918 { 0x20000006 +1.71e193 } : BV:32
17 : eq(9, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 268435459 { 0x10000003 +1.35e161 } : BV:32
20 : eq(9, 19) : BOOL
21 : 63 { 0x3f } : BV:8
22 : 536870917 { 0x20000005 +1.59e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1342177279 { 0x4fffffff +1.99999988e32 } : BV:32
25 : eq(9, 24) : BOOL
26 : 32 { 0x20 } : BV:8
27 : eq(9, 8) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 536870919 { 0x20000007 +1.83e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 268435458 { 0x10000002 +1.23e161 } : BV:32
32 : eq(9, 31) : BOOL
33 : 127 { 0x7f } : BV:8
34 : 268435457 { 0x10000001 +1.11e161 } : BV:32
35 : eq(9, 34) : BOOL
36 : 122 { 0x7a } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(30, 18, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 26, 41) : BV:8
43 : ite(23, 18, 42) : BV:8
44 : ite(20, 21, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : ite(11, 12, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 7, 8) : BV:32
50 : eq(49, 10) : BOOL
51 : eq(49, 13) : BOOL
52 : eq(49, 16) : BOOL
53 : eq(49, 19) : BOOL
54 : eq(49, 22) : BOOL
55 : eq(49, 24) : BOOL
56 : eq(49, 8) : BOOL
57 : eq(49, 29) : BOOL
58 : eq(49, 31) : BOOL
59 : eq(49, 34) : BOOL
60 : ite(59, 36, 37) : BV:8
61 : ite(58, 33, 60) : BV:8
62 : ite(57, 18, 61) : BV:8
63 : ite(56, 28, 62) : BV:8
64 : ite(55, 26, 63) : BV:8
65 : ite(54, 18, 64) : BV:8
66 : ite(53, 21, 65) : BV:8
67 : ite(52, 18, 66) : BV:8
68 : ite(51, 15, 67) : BV:8
69 : ite(50, 12, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 7, 8) : BV:32
72 : eq(71, 10) : BOOL
73 : eq(71, 13) : BOOL
74 : eq(71, 16) : BOOL
75 : eq(71, 19) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 24) : BOOL
78 : eq(71, 8) : BOOL
79 : eq(71, 29) : BOOL
80 : eq(71, 31) : BOOL
81 : eq(71, 34) : BOOL
82 : ite(81, 36, 37) : BV:8
83 : ite(80, 33, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 28, 84) : BV:8
86 : ite(77, 26, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 21, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 12, 90) : BV:8
92 : bvadd(7, 8) : BV:32
93 : eq(92, 10) : BOOL
94 : eq(92, 13) : BOOL
95 : eq(92, 16) : BOOL
96 : eq(92, 19) : BOOL
97 : eq(92, 22) : BOOL
98 : eq(92, 24) : BOOL
99 : eq(92, 8) : BOOL
100 : eq(92, 29) : BOOL
101 : eq(92, 31) : BOOL
102 : eq(92, 34) : BOOL
103 : ite(102, 36, 37) : BV:8
104 : ite(101, 33, 103) : BV:8
105 : ite(100, 18, 104) : BV:8
106 : ite(99, 28, 105) : BV:8
107 : ite(98, 26, 106) : BV:8
108 : ite(97, 18, 107) : BV:8
109 : ite(96, 21, 108) : BV:8
110 : ite(95, 18, 109) : BV:8
111 : ite(94, 15, 110) : BV:8
112 : ite(93, 12, 111) : BV:8
113 : bvconcat(47, 69, 91, 112) : BV:32
114 : ite(3, 4, 113) : BV:32
115 : lambda(1, 114) : FUNCTION[BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 848651904 { 0x32956680 +1.16719055e230 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 1077952640 { 0x40404080 +1.50196838e1 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2517246560 { 0x960a2260 -1777720736 -1.7917404e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2517246563 { 0x960a2263 -1777720733 -1.7917439e173 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3047752612 { 0xb5a903a4 -1247214684 -1.32042360e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3047752615 { 0xb5a903a7 -1247214681 -1.32042396e236 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=counter_example.random_seed
1511476399
=counter_example_end
=global nodece 64 num_edges_traversed 4
=global nodece 64 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 65
=global nodece 65 nodece z3v487.ce11420.num_edges_traversed1
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce11420 343f20f559db2960871ad585d6277e3
=input.spec-%var-x-1
1 : Lambda27487 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27490 : BV:32
18 : Lambda27488 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda27489 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 232 { 0xe8 -24 } : BV:8
64 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
65 : eq(60, 64) : BOOL
66 : 32 { 0x20 } : BV:8
67 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
68 : eq(60, 67) : BOOL
69 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
70 : eq(60, 69) : BOOL
71 : 47 { 0x2f } : BV:8
72 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
73 : eq(60, 72) : BOOL
74 : 199 { 0xc7 -57 } : BV:8
75 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
76 : eq(60, 75) : BOOL
77 : 1 { 0x1 } : BV:8
78 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
79 : eq(60, 78) : BOOL
80 : 2 { 0x2 } : BV:8
81 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
82 : eq(60, 81) : BOOL
83 : 236 { 0xec -20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(68, 66, 89) : BV:8
91 : ite(65, 66, 90) : BV:8
92 : ite(62, 63, 91) : BV:8
93 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
94 : bvadd(93, 59) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : eq(94, 75) : BOOL
101 : eq(94, 78) : BOOL
102 : eq(94, 81) : BOOL
103 : ite(102, 83, 84) : BV:8
104 : ite(101, 80, 103) : BV:8
105 : ite(100, 77, 104) : BV:8
106 : ite(99, 74, 105) : BV:8
107 : ite(98, 71, 106) : BV:8
108 : ite(97, 66, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 63, 109) : BV:8
111 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
112 : bvadd(111, 59) : BV:32
113 : eq(112, 61) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 69) : BOOL
117 : eq(112, 72) : BOOL
118 : eq(112, 75) : BOOL
119 : eq(112, 78) : BOOL
120 : eq(112, 81) : BOOL
121 : ite(120, 83, 84) : BV:8
122 : ite(119, 80, 121) : BV:8
123 : ite(118, 77, 122) : BV:8
124 : ite(117, 74, 123) : BV:8
125 : ite(116, 71, 124) : BV:8
126 : ite(115, 66, 125) : BV:8
127 : ite(114, 66, 126) : BV:8
128 : ite(113, 63, 127) : BV:8
129 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
130 : bvadd(129, 59) : BV:32
131 : eq(130, 61) : BOOL
132 : eq(130, 64) : BOOL
133 : eq(130, 67) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : eq(130, 75) : BOOL
137 : eq(130, 78) : BOOL
138 : eq(130, 81) : BOOL
139 : ite(138, 83, 84) : BV:8
140 : ite(137, 80, 139) : BV:8
141 : ite(136, 77, 140) : BV:8
142 : ite(135, 74, 141) : BV:8
143 : ite(134, 71, 142) : BV:8
144 : ite(133, 66, 143) : BV:8
145 : ite(132, 66, 144) : BV:8
146 : ite(131, 63, 145) : BV:8
147 : bvconcat(92, 110, 128, 146) : BV:32
148 : bvadd(55, 57, 147) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 67) : BOOL
152 : eq(148, 69) : BOOL
153 : eq(148, 72) : BOOL
154 : eq(148, 75) : BOOL
155 : eq(148, 78) : BOOL
156 : eq(148, 81) : BOOL
157 : ite(156, 83, 84) : BV:8
158 : ite(155, 80, 157) : BV:8
159 : ite(154, 77, 158) : BV:8
160 : ite(153, 74, 159) : BV:8
161 : ite(152, 71, 160) : BV:8
162 : ite(151, 66, 161) : BV:8
163 : ite(150, 66, 162) : BV:8
164 : ite(149, 63, 163) : BV:8
165 : bvadd(40, 57, 147) : BV:32
166 : eq(165, 61) : BOOL
167 : eq(165, 64) : BOOL
168 : eq(165, 67) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : eq(165, 81) : BOOL
174 : ite(173, 83, 84) : BV:8
175 : ite(172, 80, 174) : BV:8
176 : ite(171, 77, 175) : BV:8
177 : ite(170, 74, 176) : BV:8
178 : ite(169, 71, 177) : BV:8
179 : ite(168, 66, 178) : BV:8
180 : ite(167, 66, 179) : BV:8
181 : ite(166, 63, 180) : BV:8
182 : bvadd(36, 57, 147) : BV:32
183 : eq(182, 61) : BOOL
184 : eq(182, 64) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 69) : BOOL
187 : eq(182, 72) : BOOL
188 : eq(182, 75) : BOOL
189 : eq(182, 78) : BOOL
190 : eq(182, 81) : BOOL
191 : ite(190, 83, 84) : BV:8
192 : ite(189, 80, 191) : BV:8
193 : ite(188, 77, 192) : BV:8
194 : ite(187, 74, 193) : BV:8
195 : ite(186, 71, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 63, 197) : BV:8
199 : bvadd(57, 147) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 69) : BOOL
204 : eq(199, 72) : BOOL
205 : eq(199, 75) : BOOL
206 : eq(199, 78) : BOOL
207 : eq(199, 81) : BOOL
208 : ite(207, 83, 84) : BV:8
209 : ite(206, 80, 208) : BV:8
210 : ite(205, 77, 209) : BV:8
211 : ite(204, 74, 210) : BV:8
212 : ite(203, 71, 211) : BV:8
213 : ite(202, 66, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 63, 214) : BV:8
216 : bvconcat(164, 181, 198, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1202351903 { 0x47aa6f1f +1.33151614e16 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 232, [ 2147483645; 2147483645 ] -> 47, [ 2147483646; 2147483646 ] -> 199, [ 2147483647; 2147483647 ] -> 236, [ 2147483648; 3972476903 ] -> 0, [ 3972476904; 3972476904 ] -> 1, [ 3972476905; 3972476905 ] -> 2, [ 3972476906; 3972476907 ] -> 32, [ 3972476908; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 19523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 19524; 19527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 19528; 16783391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16783392; 16783395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16783396; 2147503103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147503104; 2147503107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147503108; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147503104 { 0x80004c00 -2147464192 -1.231933e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 19524 { 0x4c44 +1.232744e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 16783392 { 0x1001820 +1.73623e131 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27494 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27497 : BV:32
18 : Lambda27495 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda27496 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
81 : eq(79, 80) : BOOL
82 : 232 { 0xe8 -24 } : BV:8
83 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
84 : eq(79, 83) : BOOL
85 : 32 { 0x20 } : BV:8
86 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
87 : eq(79, 86) : BOOL
88 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
89 : eq(79, 88) : BOOL
90 : 47 { 0x2f } : BV:8
91 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
92 : eq(79, 91) : BOOL
93 : 199 { 0xc7 -57 } : BV:8
94 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
95 : eq(79, 94) : BOOL
96 : 1 { 0x1 } : BV:8
97 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
98 : eq(79, 97) : BOOL
99 : 2 { 0x2 } : BV:8
100 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
101 : eq(79, 100) : BOOL
102 : 236 { 0xec -20 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(87, 85, 108) : BV:8
110 : ite(84, 85, 109) : BV:8
111 : ite(81, 82, 110) : BV:8
112 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
113 : bvadd(112, 78) : BV:32
114 : eq(113, 80) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : eq(113, 94) : BOOL
120 : eq(113, 97) : BOOL
121 : eq(113, 100) : BOOL
122 : ite(121, 102, 103) : BV:8
123 : ite(120, 99, 122) : BV:8
124 : ite(119, 96, 123) : BV:8
125 : ite(118, 93, 124) : BV:8
126 : ite(117, 90, 125) : BV:8
127 : ite(116, 85, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 82, 128) : BV:8
130 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
131 : bvadd(130, 78) : BV:32
132 : eq(131, 80) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 88) : BOOL
136 : eq(131, 91) : BOOL
137 : eq(131, 94) : BOOL
138 : eq(131, 97) : BOOL
139 : eq(131, 100) : BOOL
140 : ite(139, 102, 103) : BV:8
141 : ite(138, 99, 140) : BV:8
142 : ite(137, 96, 141) : BV:8
143 : ite(136, 93, 142) : BV:8
144 : ite(135, 90, 143) : BV:8
145 : ite(134, 85, 144) : BV:8
146 : ite(133, 85, 145) : BV:8
147 : ite(132, 82, 146) : BV:8
148 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
149 : bvadd(148, 78) : BV:32
150 : eq(149, 80) : BOOL
151 : eq(149, 83) : BOOL
152 : eq(149, 86) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : eq(149, 94) : BOOL
156 : eq(149, 97) : BOOL
157 : eq(149, 100) : BOOL
158 : ite(157, 102, 103) : BV:8
159 : ite(156, 99, 158) : BV:8
160 : ite(155, 96, 159) : BV:8
161 : ite(154, 93, 160) : BV:8
162 : ite(153, 90, 161) : BV:8
163 : ite(152, 85, 162) : BV:8
164 : ite(151, 85, 163) : BV:8
165 : ite(150, 82, 164) : BV:8
166 : bvconcat(111, 129, 147, 165) : BV:32
167 : bvadd(74, 76, 166) : BV:32
168 : eq(167, 80) : BOOL
169 : eq(167, 83) : BOOL
170 : eq(167, 86) : BOOL
171 : eq(167, 88) : BOOL
172 : eq(167, 91) : BOOL
173 : eq(167, 94) : BOOL
174 : eq(167, 97) : BOOL
175 : eq(167, 100) : BOOL
176 : ite(175, 102, 103) : BV:8
177 : ite(174, 99, 176) : BV:8
178 : ite(173, 96, 177) : BV:8
179 : ite(172, 93, 178) : BV:8
180 : ite(171, 90, 179) : BV:8
181 : ite(170, 85, 180) : BV:8
182 : ite(169, 85, 181) : BV:8
183 : ite(168, 82, 182) : BV:8
184 : bvadd(40, 76, 166) : BV:32
185 : eq(184, 80) : BOOL
186 : eq(184, 83) : BOOL
187 : eq(184, 86) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : eq(184, 100) : BOOL
193 : ite(192, 102, 103) : BV:8
194 : ite(191, 99, 193) : BV:8
195 : ite(190, 96, 194) : BV:8
196 : ite(189, 93, 195) : BV:8
197 : ite(188, 90, 196) : BV:8
198 : ite(187, 85, 197) : BV:8
199 : ite(186, 85, 198) : BV:8
200 : ite(185, 82, 199) : BV:8
201 : bvadd(36, 76, 166) : BV:32
202 : eq(201, 80) : BOOL
203 : eq(201, 83) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 88) : BOOL
206 : eq(201, 91) : BOOL
207 : eq(201, 94) : BOOL
208 : eq(201, 97) : BOOL
209 : eq(201, 100) : BOOL
210 : ite(209, 102, 103) : BV:8
211 : ite(208, 99, 210) : BV:8
212 : ite(207, 96, 211) : BV:8
213 : ite(206, 93, 212) : BV:8
214 : ite(205, 90, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 82, 216) : BV:8
218 : bvadd(76, 166) : BV:32
219 : eq(218, 80) : BOOL
220 : eq(218, 83) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 88) : BOOL
223 : eq(218, 91) : BOOL
224 : eq(218, 94) : BOOL
225 : eq(218, 97) : BOOL
226 : eq(218, 100) : BOOL
227 : ite(226, 102, 103) : BV:8
228 : ite(225, 99, 227) : BV:8
229 : ite(224, 96, 228) : BV:8
230 : ite(223, 93, 229) : BV:8
231 : ite(222, 90, 230) : BV:8
232 : ite(221, 85, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 82, 233) : BV:8
235 : bvconcat(183, 200, 217, 234) : BV:32
236 : ite(54, 2, 235) : BV:32
237 : ite(73, 235, 236) : BV:32
238 : ite(54, 2, 237) : BV:32
239 : lambda(51, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(50, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27491 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27492 : BV:32
7 : 1578546456 { 0x5e16b518 +1.17740154e61 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27498 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : not(9) : BOOL
11 : ite(6, 7, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : lambda(1, 12) : FUNCTION[BV:32 -> BOOL]
14 : Lambda27499 : BV:32
15 : eq(14, 2) : BOOL
16 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
17 : 3 { 0x3 +1.35e129 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 14) : BV:32
20 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
21 : bvadd(17, 19, 20) : BV:32
22 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
23 : eq(21, 22) : BOOL
24 : 232 { 0xe8 -24 } : BV:8
25 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
26 : eq(21, 25) : BOOL
27 : 32 { 0x20 } : BV:8
28 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
29 : eq(21, 28) : BOOL
30 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
31 : eq(21, 30) : BOOL
32 : 47 { 0x2f } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(21, 33) : BOOL
35 : 199 { 0xc7 -57 } : BV:8
36 : eq(21, 20) : BOOL
37 : 1 { 0x1 } : BV:8
38 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
39 : eq(21, 38) : BOOL
40 : 2 { 0x2 } : BV:8
41 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
42 : eq(21, 41) : BOOL
43 : 236 { 0xec -20 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(31, 32, 48) : BV:8
50 : ite(29, 27, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 19, 20) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 25) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 30) : BOOL
59 : eq(54, 33) : BOOL
60 : eq(54, 20) : BOOL
61 : eq(54, 38) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 40, 63) : BV:8
65 : ite(60, 37, 64) : BV:8
66 : ite(59, 35, 65) : BV:8
67 : ite(58, 32, 66) : BV:8
68 : ite(57, 27, 67) : BV:8
69 : ite(56, 27, 68) : BV:8
70 : ite(55, 24, 69) : BV:8
71 : bvadd(8, 19, 20) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 25) : BOOL
74 : eq(71, 28) : BOOL
75 : eq(71, 30) : BOOL
76 : eq(71, 33) : BOOL
77 : eq(71, 20) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 41) : BOOL
80 : ite(79, 43, 44) : BV:8
81 : ite(78, 40, 80) : BV:8
82 : ite(77, 37, 81) : BV:8
83 : ite(76, 35, 82) : BV:8
84 : ite(75, 32, 83) : BV:8
85 : ite(74, 27, 84) : BV:8
86 : ite(73, 27, 85) : BV:8
87 : ite(72, 24, 86) : BV:8
88 : bvadd(19, 20) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 25) : BOOL
91 : eq(88, 28) : BOOL
92 : eq(88, 30) : BOOL
93 : eq(88, 33) : BOOL
94 : eq(88, 20) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 35, 99) : BV:8
101 : ite(92, 32, 100) : BV:8
102 : ite(91, 27, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : bvconcat(52, 70, 87, 104) : BV:32
106 : ite(15, 16, 105) : BV:32
107 : lambda(14, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(13, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1113587719 ] -> true, [ 1113587720; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1113587719 ] -> true, [ 1113587720; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27432 : BV:32
2 : Lambda27433 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27437 : BV:32
2 : Lambda27438 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
54 : eq(52, 53) : BOOL
55 : 232 { 0xe8 -24 } : BV:8
56 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
57 : eq(52, 56) : BOOL
58 : 32 { 0x20 } : BV:8
59 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
60 : eq(52, 59) : BOOL
61 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
62 : eq(52, 61) : BOOL
63 : 47 { 0x2f } : BV:8
64 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
65 : eq(52, 64) : BOOL
66 : 199 { 0xc7 -57 } : BV:8
67 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
68 : eq(52, 67) : BOOL
69 : 1 { 0x1 } : BV:8
70 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
71 : eq(52, 70) : BOOL
72 : 2 { 0x2 } : BV:8
73 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
74 : eq(52, 73) : BOOL
75 : 236 { 0xec -20 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(60, 58, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : ite(54, 55, 83) : BV:8
85 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
86 : bvadd(85, 51) : BV:32
87 : eq(86, 53) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : eq(86, 67) : BOOL
93 : eq(86, 70) : BOOL
94 : eq(86, 73) : BOOL
95 : ite(94, 75, 76) : BV:8
96 : ite(93, 72, 95) : BV:8
97 : ite(92, 69, 96) : BV:8
98 : ite(91, 66, 97) : BV:8
99 : ite(90, 63, 98) : BV:8
100 : ite(89, 58, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 55, 101) : BV:8
103 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
104 : bvadd(103, 51) : BV:32
105 : eq(104, 53) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 61) : BOOL
109 : eq(104, 64) : BOOL
110 : eq(104, 67) : BOOL
111 : eq(104, 70) : BOOL
112 : eq(104, 73) : BOOL
113 : ite(112, 75, 76) : BV:8
114 : ite(111, 72, 113) : BV:8
115 : ite(110, 69, 114) : BV:8
116 : ite(109, 66, 115) : BV:8
117 : ite(108, 63, 116) : BV:8
118 : ite(107, 58, 117) : BV:8
119 : ite(106, 58, 118) : BV:8
120 : ite(105, 55, 119) : BV:8
121 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
122 : bvadd(121, 51) : BV:32
123 : eq(122, 53) : BOOL
124 : eq(122, 56) : BOOL
125 : eq(122, 59) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : eq(122, 67) : BOOL
129 : eq(122, 70) : BOOL
130 : eq(122, 73) : BOOL
131 : ite(130, 75, 76) : BV:8
132 : ite(129, 72, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 66, 133) : BV:8
135 : ite(126, 63, 134) : BV:8
136 : ite(125, 58, 135) : BV:8
137 : ite(124, 58, 136) : BV:8
138 : ite(123, 55, 137) : BV:8
139 : bvconcat(84, 102, 120, 138) : BV:32
140 : bvadd(47, 49, 139) : BV:32
141 : eq(140, 53) : BOOL
142 : eq(140, 56) : BOOL
143 : eq(140, 59) : BOOL
144 : eq(140, 61) : BOOL
145 : eq(140, 64) : BOOL
146 : eq(140, 67) : BOOL
147 : eq(140, 70) : BOOL
148 : eq(140, 73) : BOOL
149 : ite(148, 75, 76) : BV:8
150 : ite(147, 72, 149) : BV:8
151 : ite(146, 69, 150) : BV:8
152 : ite(145, 66, 151) : BV:8
153 : ite(144, 63, 152) : BV:8
154 : ite(143, 58, 153) : BV:8
155 : ite(142, 58, 154) : BV:8
156 : ite(141, 55, 155) : BV:8
157 : bvadd(36, 49, 139) : BV:32
158 : eq(157, 53) : BOOL
159 : eq(157, 56) : BOOL
160 : eq(157, 59) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : eq(157, 73) : BOOL
166 : ite(165, 75, 76) : BV:8
167 : ite(164, 72, 166) : BV:8
168 : ite(163, 69, 167) : BV:8
169 : ite(162, 66, 168) : BV:8
170 : ite(161, 63, 169) : BV:8
171 : ite(160, 58, 170) : BV:8
172 : ite(159, 58, 171) : BV:8
173 : ite(158, 55, 172) : BV:8
174 : bvadd(32, 49, 139) : BV:32
175 : eq(174, 53) : BOOL
176 : eq(174, 56) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 61) : BOOL
179 : eq(174, 64) : BOOL
180 : eq(174, 67) : BOOL
181 : eq(174, 70) : BOOL
182 : eq(174, 73) : BOOL
183 : ite(182, 75, 76) : BV:8
184 : ite(181, 72, 183) : BV:8
185 : ite(180, 69, 184) : BV:8
186 : ite(179, 66, 185) : BV:8
187 : ite(178, 63, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 55, 189) : BV:8
191 : bvadd(49, 139) : BV:32
192 : eq(191, 53) : BOOL
193 : eq(191, 56) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 61) : BOOL
196 : eq(191, 64) : BOOL
197 : eq(191, 67) : BOOL
198 : eq(191, 70) : BOOL
199 : eq(191, 73) : BOOL
200 : ite(199, 75, 76) : BV:8
201 : ite(198, 72, 200) : BV:8
202 : ite(197, 69, 201) : BV:8
203 : ite(196, 66, 202) : BV:8
204 : ite(195, 63, 203) : BV:8
205 : ite(194, 58, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 55, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(46, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27441 : BV:32
2 : Lambda27442 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27439 : BV:32
2 : Lambda27440 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
17 : eq(12, 16) : BOOL
18 : 32 { 0x20 } : BV:8
19 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
20 : eq(12, 19) : BOOL
21 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 199 { 0xc7 -57 } : BV:8
27 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
28 : eq(12, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 236 { 0xec -20 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(20, 18, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 18, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(47, 15, 61) : BV:8
63 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
64 : bvadd(63, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 19) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 18, 77) : BV:8
79 : ite(66, 18, 78) : BV:8
80 : ite(65, 15, 79) : BV:8
81 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
82 : bvadd(81, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 21) : BOOL
87 : eq(82, 24) : BOOL
88 : eq(82, 27) : BOOL
89 : eq(82, 30) : BOOL
90 : eq(82, 33) : BOOL
91 : ite(90, 35, 36) : BV:8
92 : ite(89, 32, 91) : BV:8
93 : ite(88, 29, 92) : BV:8
94 : ite(87, 26, 93) : BV:8
95 : ite(86, 23, 94) : BV:8
96 : ite(85, 18, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(44, 62, 80, 98) : BV:32
100 : bvadd(7, 9, 99) : BV:32
101 : eq(100, 13) : BOOL
102 : eq(100, 16) : BOOL
103 : eq(100, 19) : BOOL
104 : eq(100, 21) : BOOL
105 : eq(100, 24) : BOOL
106 : eq(100, 27) : BOOL
107 : eq(100, 30) : BOOL
108 : eq(100, 33) : BOOL
109 : ite(108, 35, 36) : BV:8
110 : ite(107, 32, 109) : BV:8
111 : ite(106, 29, 110) : BV:8
112 : ite(105, 26, 111) : BV:8
113 : ite(104, 23, 112) : BV:8
114 : ite(103, 18, 113) : BV:8
115 : ite(102, 18, 114) : BV:8
116 : ite(101, 15, 115) : BV:8
117 : 2 { 0x2 +1.23e129 } : BV:32
118 : bvadd(117, 9, 99) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 19) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 30) : BOOL
126 : eq(118, 33) : BOOL
127 : ite(126, 35, 36) : BV:8
128 : ite(125, 32, 127) : BV:8
129 : ite(124, 29, 128) : BV:8
130 : ite(123, 26, 129) : BV:8
131 : ite(122, 23, 130) : BV:8
132 : ite(121, 18, 131) : BV:8
133 : ite(120, 18, 132) : BV:8
134 : ite(119, 15, 133) : BV:8
135 : 1 { 0x1 +1.11e129 } : BV:32
136 : bvadd(135, 9, 99) : BV:32
137 : eq(136, 13) : BOOL
138 : eq(136, 16) : BOOL
139 : eq(136, 19) : BOOL
140 : eq(136, 21) : BOOL
141 : eq(136, 24) : BOOL
142 : eq(136, 27) : BOOL
143 : eq(136, 30) : BOOL
144 : eq(136, 33) : BOOL
145 : ite(144, 35, 36) : BV:8
146 : ite(143, 32, 145) : BV:8
147 : ite(142, 29, 146) : BV:8
148 : ite(141, 26, 147) : BV:8
149 : ite(140, 23, 148) : BV:8
150 : ite(139, 18, 149) : BV:8
151 : ite(138, 18, 150) : BV:8
152 : ite(137, 15, 151) : BV:8
153 : bvadd(9, 99) : BV:32
154 : eq(153, 13) : BOOL
155 : eq(153, 16) : BOOL
156 : eq(153, 19) : BOOL
157 : eq(153, 21) : BOOL
158 : eq(153, 24) : BOOL
159 : eq(153, 27) : BOOL
160 : eq(153, 30) : BOOL
161 : eq(153, 33) : BOOL
162 : ite(161, 35, 36) : BV:8
163 : ite(160, 32, 162) : BV:8
164 : ite(159, 29, 163) : BV:8
165 : ite(158, 26, 164) : BV:8
166 : ite(157, 23, 165) : BV:8
167 : ite(156, 18, 166) : BV:8
168 : ite(155, 18, 167) : BV:8
169 : ite(154, 15, 168) : BV:8
170 : bvconcat(116, 134, 152, 169) : BV:32
171 : ite(6, 3, 170) : BV:32
172 : lambda(1, 2, 171) : FUNCTION[BV:32,BV:32 -> BV:32]
173 : sym_const(172) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda27445 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : not(9) : BOOL
11 : ite(6, 7, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : lambda(1, 12) : FUNCTION[BV:32 -> BOOL]
14 : sym_const(13) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27446 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 232 { 0xe8 -24 } : BV:8
13 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
14 : eq(9, 13) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
19 : eq(9, 18) : BOOL
20 : 47 { 0x2f } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(9, 21) : BOOL
23 : 199 { 0xc7 -57 } : BV:8
24 : eq(9, 8) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
27 : eq(9, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
30 : eq(9, 29) : BOOL
31 : 236 { 0xec -20 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(17, 15, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 8) : BOOL
49 : eq(42, 26) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 28, 51) : BV:8
53 : ite(48, 25, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 15, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 8) : BOOL
67 : eq(60, 26) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 28, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 15, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 8) : BOOL
84 : eq(77, 26) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 28, 86) : BV:8
88 : ite(83, 25, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 15, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 4, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1216684029 { 0x48851ffd +1.4003870e18 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 16783392 { 0x1001820 +1.73623e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 16783395 { 0x1001823 +1.73659e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147503104 { 0x80004c00 -2147464192 -1.231933e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147503107 { 0x80004c03 -2147464189 -1.231969e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 19524 { 0x4c44 +1.232744e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19527 { 0x4c47 +1.232779e129 } : BV:32
=counter_example.random_seed
3823290651
=counter_example_end
=global nodece 65 num_edges_traversed 1
=global nodece 65 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 66
=global nodece 66 nodece z3v487.ce11568.num_edges_traversed3
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3v487.ce11568 b1d1fac4010f360f14f9e26accac3d
=input.spec-%var-x-1
1 : Lambda27487 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27490 : BV:32
18 : Lambda27488 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda27489 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
62 : eq(60, 61) : BOOL
63 : 232 { 0xe8 -24 } : BV:8
64 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
65 : eq(60, 64) : BOOL
66 : 32 { 0x20 } : BV:8
67 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
68 : eq(60, 67) : BOOL
69 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
70 : eq(60, 69) : BOOL
71 : 47 { 0x2f } : BV:8
72 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
73 : eq(60, 72) : BOOL
74 : 199 { 0xc7 -57 } : BV:8
75 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
76 : eq(60, 75) : BOOL
77 : 1 { 0x1 } : BV:8
78 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
79 : eq(60, 78) : BOOL
80 : 2 { 0x2 } : BV:8
81 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
82 : eq(60, 81) : BOOL
83 : 236 { 0xec -20 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(68, 66, 89) : BV:8
91 : ite(65, 66, 90) : BV:8
92 : ite(62, 63, 91) : BV:8
93 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
94 : bvadd(93, 59) : BV:32
95 : eq(94, 61) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 69) : BOOL
99 : eq(94, 72) : BOOL
100 : eq(94, 75) : BOOL
101 : eq(94, 78) : BOOL
102 : eq(94, 81) : BOOL
103 : ite(102, 83, 84) : BV:8
104 : ite(101, 80, 103) : BV:8
105 : ite(100, 77, 104) : BV:8
106 : ite(99, 74, 105) : BV:8
107 : ite(98, 71, 106) : BV:8
108 : ite(97, 66, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 63, 109) : BV:8
111 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
112 : bvadd(111, 59) : BV:32
113 : eq(112, 61) : BOOL
114 : eq(112, 64) : BOOL
115 : eq(112, 67) : BOOL
116 : eq(112, 69) : BOOL
117 : eq(112, 72) : BOOL
118 : eq(112, 75) : BOOL
119 : eq(112, 78) : BOOL
120 : eq(112, 81) : BOOL
121 : ite(120, 83, 84) : BV:8
122 : ite(119, 80, 121) : BV:8
123 : ite(118, 77, 122) : BV:8
124 : ite(117, 74, 123) : BV:8
125 : ite(116, 71, 124) : BV:8
126 : ite(115, 66, 125) : BV:8
127 : ite(114, 66, 126) : BV:8
128 : ite(113, 63, 127) : BV:8
129 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
130 : bvadd(129, 59) : BV:32
131 : eq(130, 61) : BOOL
132 : eq(130, 64) : BOOL
133 : eq(130, 67) : BOOL
134 : eq(130, 69) : BOOL
135 : eq(130, 72) : BOOL
136 : eq(130, 75) : BOOL
137 : eq(130, 78) : BOOL
138 : eq(130, 81) : BOOL
139 : ite(138, 83, 84) : BV:8
140 : ite(137, 80, 139) : BV:8
141 : ite(136, 77, 140) : BV:8
142 : ite(135, 74, 141) : BV:8
143 : ite(134, 71, 142) : BV:8
144 : ite(133, 66, 143) : BV:8
145 : ite(132, 66, 144) : BV:8
146 : ite(131, 63, 145) : BV:8
147 : bvconcat(92, 110, 128, 146) : BV:32
148 : bvadd(55, 57, 147) : BV:32
149 : eq(148, 61) : BOOL
150 : eq(148, 64) : BOOL
151 : eq(148, 67) : BOOL
152 : eq(148, 69) : BOOL
153 : eq(148, 72) : BOOL
154 : eq(148, 75) : BOOL
155 : eq(148, 78) : BOOL
156 : eq(148, 81) : BOOL
157 : ite(156, 83, 84) : BV:8
158 : ite(155, 80, 157) : BV:8
159 : ite(154, 77, 158) : BV:8
160 : ite(153, 74, 159) : BV:8
161 : ite(152, 71, 160) : BV:8
162 : ite(151, 66, 161) : BV:8
163 : ite(150, 66, 162) : BV:8
164 : ite(149, 63, 163) : BV:8
165 : bvadd(40, 57, 147) : BV:32
166 : eq(165, 61) : BOOL
167 : eq(165, 64) : BOOL
168 : eq(165, 67) : BOOL
169 : eq(165, 69) : BOOL
170 : eq(165, 72) : BOOL
171 : eq(165, 75) : BOOL
172 : eq(165, 78) : BOOL
173 : eq(165, 81) : BOOL
174 : ite(173, 83, 84) : BV:8
175 : ite(172, 80, 174) : BV:8
176 : ite(171, 77, 175) : BV:8
177 : ite(170, 74, 176) : BV:8
178 : ite(169, 71, 177) : BV:8
179 : ite(168, 66, 178) : BV:8
180 : ite(167, 66, 179) : BV:8
181 : ite(166, 63, 180) : BV:8
182 : bvadd(36, 57, 147) : BV:32
183 : eq(182, 61) : BOOL
184 : eq(182, 64) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 69) : BOOL
187 : eq(182, 72) : BOOL
188 : eq(182, 75) : BOOL
189 : eq(182, 78) : BOOL
190 : eq(182, 81) : BOOL
191 : ite(190, 83, 84) : BV:8
192 : ite(189, 80, 191) : BV:8
193 : ite(188, 77, 192) : BV:8
194 : ite(187, 74, 193) : BV:8
195 : ite(186, 71, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 63, 197) : BV:8
199 : bvadd(57, 147) : BV:32
200 : eq(199, 61) : BOOL
201 : eq(199, 64) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 69) : BOOL
204 : eq(199, 72) : BOOL
205 : eq(199, 75) : BOOL
206 : eq(199, 78) : BOOL
207 : eq(199, 81) : BOOL
208 : ite(207, 83, 84) : BV:8
209 : ite(206, 80, 208) : BV:8
210 : ite(205, 77, 209) : BV:8
211 : ite(204, 74, 210) : BV:8
212 : ite(203, 71, 211) : BV:8
213 : ite(202, 66, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 63, 214) : BV:8
216 : bvconcat(164, 181, 198, 215) : BV:32
217 : ite(54, 2, 216) : BV:32
218 : lambda(51, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(50, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741825 { 0x40000001 +1.11e1 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 232, [ 2147483645; 2147483645 ] -> 47, [ 2147483646; 2147483646 ] -> 199, [ 2147483647; 2147483647 ] -> 236, [ 2147483648; 3972476903 ] -> 0, [ 3972476904; 3972476904 ] -> 1, [ 3972476905; 3972476905 ] -> 2, [ 3972476906; 3972476907 ] -> 32, [ 3972476908; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 19523 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 19524; 19527 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 19528; 16783391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16783392; 16783395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 16783396; 2147503103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147503104; 2147503107 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147503108; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147503104 { 0x80004c00 -2147464192 -1.231933e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 19524 { 0x4c44 +1.232744e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 16783392 { 0x1001820 +1.73623e131 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27494 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27497 : BV:32
18 : Lambda27495 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda27496 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
81 : eq(79, 80) : BOOL
82 : 232 { 0xe8 -24 } : BV:8
83 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
84 : eq(79, 83) : BOOL
85 : 32 { 0x20 } : BV:8
86 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
87 : eq(79, 86) : BOOL
88 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
89 : eq(79, 88) : BOOL
90 : 47 { 0x2f } : BV:8
91 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
92 : eq(79, 91) : BOOL
93 : 199 { 0xc7 -57 } : BV:8
94 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
95 : eq(79, 94) : BOOL
96 : 1 { 0x1 } : BV:8
97 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
98 : eq(79, 97) : BOOL
99 : 2 { 0x2 } : BV:8
100 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
101 : eq(79, 100) : BOOL
102 : 236 { 0xec -20 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(87, 85, 108) : BV:8
110 : ite(84, 85, 109) : BV:8
111 : ite(81, 82, 110) : BV:8
112 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
113 : bvadd(112, 78) : BV:32
114 : eq(113, 80) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 88) : BOOL
118 : eq(113, 91) : BOOL
119 : eq(113, 94) : BOOL
120 : eq(113, 97) : BOOL
121 : eq(113, 100) : BOOL
122 : ite(121, 102, 103) : BV:8
123 : ite(120, 99, 122) : BV:8
124 : ite(119, 96, 123) : BV:8
125 : ite(118, 93, 124) : BV:8
126 : ite(117, 90, 125) : BV:8
127 : ite(116, 85, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 82, 128) : BV:8
130 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
131 : bvadd(130, 78) : BV:32
132 : eq(131, 80) : BOOL
133 : eq(131, 83) : BOOL
134 : eq(131, 86) : BOOL
135 : eq(131, 88) : BOOL
136 : eq(131, 91) : BOOL
137 : eq(131, 94) : BOOL
138 : eq(131, 97) : BOOL
139 : eq(131, 100) : BOOL
140 : ite(139, 102, 103) : BV:8
141 : ite(138, 99, 140) : BV:8
142 : ite(137, 96, 141) : BV:8
143 : ite(136, 93, 142) : BV:8
144 : ite(135, 90, 143) : BV:8
145 : ite(134, 85, 144) : BV:8
146 : ite(133, 85, 145) : BV:8
147 : ite(132, 82, 146) : BV:8
148 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
149 : bvadd(148, 78) : BV:32
150 : eq(149, 80) : BOOL
151 : eq(149, 83) : BOOL
152 : eq(149, 86) : BOOL
153 : eq(149, 88) : BOOL
154 : eq(149, 91) : BOOL
155 : eq(149, 94) : BOOL
156 : eq(149, 97) : BOOL
157 : eq(149, 100) : BOOL
158 : ite(157, 102, 103) : BV:8
159 : ite(156, 99, 158) : BV:8
160 : ite(155, 96, 159) : BV:8
161 : ite(154, 93, 160) : BV:8
162 : ite(153, 90, 161) : BV:8
163 : ite(152, 85, 162) : BV:8
164 : ite(151, 85, 163) : BV:8
165 : ite(150, 82, 164) : BV:8
166 : bvconcat(111, 129, 147, 165) : BV:32
167 : bvadd(74, 76, 166) : BV:32
168 : eq(167, 80) : BOOL
169 : eq(167, 83) : BOOL
170 : eq(167, 86) : BOOL
171 : eq(167, 88) : BOOL
172 : eq(167, 91) : BOOL
173 : eq(167, 94) : BOOL
174 : eq(167, 97) : BOOL
175 : eq(167, 100) : BOOL
176 : ite(175, 102, 103) : BV:8
177 : ite(174, 99, 176) : BV:8
178 : ite(173, 96, 177) : BV:8
179 : ite(172, 93, 178) : BV:8
180 : ite(171, 90, 179) : BV:8
181 : ite(170, 85, 180) : BV:8
182 : ite(169, 85, 181) : BV:8
183 : ite(168, 82, 182) : BV:8
184 : bvadd(40, 76, 166) : BV:32
185 : eq(184, 80) : BOOL
186 : eq(184, 83) : BOOL
187 : eq(184, 86) : BOOL
188 : eq(184, 88) : BOOL
189 : eq(184, 91) : BOOL
190 : eq(184, 94) : BOOL
191 : eq(184, 97) : BOOL
192 : eq(184, 100) : BOOL
193 : ite(192, 102, 103) : BV:8
194 : ite(191, 99, 193) : BV:8
195 : ite(190, 96, 194) : BV:8
196 : ite(189, 93, 195) : BV:8
197 : ite(188, 90, 196) : BV:8
198 : ite(187, 85, 197) : BV:8
199 : ite(186, 85, 198) : BV:8
200 : ite(185, 82, 199) : BV:8
201 : bvadd(36, 76, 166) : BV:32
202 : eq(201, 80) : BOOL
203 : eq(201, 83) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 88) : BOOL
206 : eq(201, 91) : BOOL
207 : eq(201, 94) : BOOL
208 : eq(201, 97) : BOOL
209 : eq(201, 100) : BOOL
210 : ite(209, 102, 103) : BV:8
211 : ite(208, 99, 210) : BV:8
212 : ite(207, 96, 211) : BV:8
213 : ite(206, 93, 212) : BV:8
214 : ite(205, 90, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 82, 216) : BV:8
218 : bvadd(76, 166) : BV:32
219 : eq(218, 80) : BOOL
220 : eq(218, 83) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 88) : BOOL
223 : eq(218, 91) : BOOL
224 : eq(218, 94) : BOOL
225 : eq(218, 97) : BOOL
226 : eq(218, 100) : BOOL
227 : ite(226, 102, 103) : BV:8
228 : ite(225, 99, 227) : BV:8
229 : ite(224, 96, 228) : BV:8
230 : ite(223, 93, 229) : BV:8
231 : ite(222, 90, 230) : BV:8
232 : ite(221, 85, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 82, 233) : BV:8
235 : bvconcat(183, 200, 217, 234) : BV:32
236 : ite(54, 2, 235) : BV:32
237 : ite(73, 235, 236) : BV:32
238 : ite(54, 2, 237) : BV:32
239 : lambda(51, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(50, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27528 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda27529 : BV:32
26 : bvule(5, 25) : BOOL
27 : bvule(25, 5) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(1, 25) : BOOL
30 : bvule(25, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(12, 25) : BOOL
33 : bvule(25, 14) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 12, 12) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : ite(28, 5, 36) : BV:32
38 : eq(37, 5) : BOOL
39 : and(4, 38) : BOOL
40 : ite(39, 4, 22) : BOOL
41 : and(4, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 25) : BV:32
45 : bvadd(42, 44, 5) : BV:32
46 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
47 : eq(45, 46) : BOOL
48 : 232 { 0xe8 -24 } : BV:8
49 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
50 : eq(45, 49) : BOOL
51 : 32 { 0x20 } : BV:8
52 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
53 : eq(45, 52) : BOOL
54 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
55 : eq(45, 54) : BOOL
56 : 47 { 0x2f } : BV:8
57 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
58 : eq(45, 57) : BOOL
59 : 199 { 0xc7 -57 } : BV:8
60 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
61 : eq(45, 60) : BOOL
62 : 1 { 0x1 } : BV:8
63 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
64 : eq(45, 63) : BOOL
65 : 2 { 0x2 } : BV:8
66 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
67 : eq(45, 66) : BOOL
68 : 236 { 0xec -20 } : BV:8
69 : 0 { 0x0 } : BV:8
70 : ite(67, 68, 69) : BV:8
71 : ite(64, 65, 70) : BV:8
72 : ite(61, 62, 71) : BV:8
73 : ite(58, 59, 72) : BV:8
74 : ite(55, 56, 73) : BV:8
75 : ite(53, 51, 74) : BV:8
76 : ite(50, 51, 75) : BV:8
77 : ite(47, 48, 76) : BV:8
78 : bvadd(12, 44, 5) : BV:32
79 : eq(78, 46) : BOOL
80 : eq(78, 49) : BOOL
81 : eq(78, 52) : BOOL
82 : eq(78, 54) : BOOL
83 : eq(78, 57) : BOOL
84 : eq(78, 60) : BOOL
85 : eq(78, 63) : BOOL
86 : eq(78, 66) : BOOL
87 : ite(86, 68, 69) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 62, 88) : BV:8
90 : ite(83, 59, 89) : BV:8
91 : ite(82, 56, 90) : BV:8
92 : ite(81, 51, 91) : BV:8
93 : ite(80, 51, 92) : BV:8
94 : ite(79, 48, 93) : BV:8
95 : bvadd(1, 44, 5) : BV:32
96 : eq(95, 46) : BOOL
97 : eq(95, 49) : BOOL
98 : eq(95, 52) : BOOL
99 : eq(95, 54) : BOOL
100 : eq(95, 57) : BOOL
101 : eq(95, 60) : BOOL
102 : eq(95, 63) : BOOL
103 : eq(95, 66) : BOOL
104 : ite(103, 68, 69) : BV:8
105 : ite(102, 65, 104) : BV:8
106 : ite(101, 62, 105) : BV:8
107 : ite(100, 59, 106) : BV:8
108 : ite(99, 56, 107) : BV:8
109 : ite(98, 51, 108) : BV:8
110 : ite(97, 51, 109) : BV:8
111 : ite(96, 48, 110) : BV:8
112 : bvadd(44, 5) : BV:32
113 : eq(112, 46) : BOOL
114 : eq(112, 49) : BOOL
115 : eq(112, 52) : BOOL
116 : eq(112, 54) : BOOL
117 : eq(112, 57) : BOOL
118 : eq(112, 60) : BOOL
119 : eq(112, 63) : BOOL
120 : eq(112, 66) : BOOL
121 : ite(120, 68, 69) : BV:8
122 : ite(119, 65, 121) : BV:8
123 : ite(118, 62, 122) : BV:8
124 : ite(117, 59, 123) : BV:8
125 : ite(116, 56, 124) : BV:8
126 : ite(115, 51, 125) : BV:8
127 : ite(114, 51, 126) : BV:8
128 : ite(113, 48, 127) : BV:8
129 : bvconcat(77, 94, 111, 128) : BV:32
130 : ite(41, 129, 129) : BV:32
131 : lambda(25, 130) : FUNCTION[BV:32 -> BV:32]
132 : map(24, 131) : MAP[BV:32 -> BV:32]
133 : sum(1, 2, 132) : SUM[UNIT,MAP[BV:32 -> BV:32]]
134 : sym_const(133) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 2031291201 { 0x79130b41 +1.14878094e115 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27530 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda27531 : BV:32
25 : bvule(3, 24) : BOOL
26 : bvule(24, 3) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(7, 24) : BOOL
29 : bvule(24, 7) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(11, 24) : BOOL
32 : bvule(24, 13) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 11, 11) : BV:32
35 : ite(30, 7, 34) : BV:32
36 : ite(27, 3, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : and(2, 37) : BOOL
39 : ite(38, 2, 21) : BOOL
40 : and(2, 39) : BOOL
41 : 3 { 0x3 +1.35e129 } : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 24) : BV:32
44 : bvadd(41, 43, 3) : BV:32
45 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
46 : eq(44, 45) : BOOL
47 : 232 { 0xe8 -24 } : BV:8
48 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
49 : eq(44, 48) : BOOL
50 : 32 { 0x20 } : BV:8
51 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
52 : eq(44, 51) : BOOL
53 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
54 : eq(44, 53) : BOOL
55 : 47 { 0x2f } : BV:8
56 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
57 : eq(44, 56) : BOOL
58 : 199 { 0xc7 -57 } : BV:8
59 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
60 : eq(44, 59) : BOOL
61 : 1 { 0x1 } : BV:8
62 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
63 : eq(44, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
66 : eq(44, 65) : BOOL
67 : 236 { 0xec -20 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(54, 55, 72) : BV:8
74 : ite(52, 50, 73) : BV:8
75 : ite(49, 50, 74) : BV:8
76 : ite(46, 47, 75) : BV:8
77 : bvadd(11, 43, 3) : BV:32
78 : eq(77, 45) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 51) : BOOL
81 : eq(77, 53) : BOOL
82 : eq(77, 56) : BOOL
83 : eq(77, 59) : BOOL
84 : eq(77, 62) : BOOL
85 : eq(77, 65) : BOOL
86 : ite(85, 67, 68) : BV:8
87 : ite(84, 64, 86) : BV:8
88 : ite(83, 61, 87) : BV:8
89 : ite(82, 58, 88) : BV:8
90 : ite(81, 55, 89) : BV:8
91 : ite(80, 50, 90) : BV:8
92 : ite(79, 50, 91) : BV:8
93 : ite(78, 47, 92) : BV:8
94 : bvadd(7, 43, 3) : BV:32
95 : eq(94, 45) : BOOL
96 : eq(94, 48) : BOOL
97 : eq(94, 51) : BOOL
98 : eq(94, 53) : BOOL
99 : eq(94, 56) : BOOL
100 : eq(94, 59) : BOOL
101 : eq(94, 62) : BOOL
102 : eq(94, 65) : BOOL
103 : ite(102, 67, 68) : BV:8
104 : ite(101, 64, 103) : BV:8
105 : ite(100, 61, 104) : BV:8
106 : ite(99, 58, 105) : BV:8
107 : ite(98, 55, 106) : BV:8
108 : ite(97, 50, 107) : BV:8
109 : ite(96, 50, 108) : BV:8
110 : ite(95, 47, 109) : BV:8
111 : bvadd(43, 3) : BV:32
112 : eq(111, 45) : BOOL
113 : eq(111, 48) : BOOL
114 : eq(111, 51) : BOOL
115 : eq(111, 53) : BOOL
116 : eq(111, 56) : BOOL
117 : eq(111, 59) : BOOL
118 : eq(111, 62) : BOOL
119 : eq(111, 65) : BOOL
120 : ite(119, 67, 68) : BV:8
121 : ite(118, 64, 120) : BV:8
122 : ite(117, 61, 121) : BV:8
123 : ite(116, 58, 122) : BV:8
124 : ite(115, 55, 123) : BV:8
125 : ite(114, 50, 124) : BV:8
126 : ite(113, 50, 125) : BV:8
127 : ite(112, 47, 126) : BV:8
128 : bvconcat(76, 93, 110, 127) : BV:32
129 : ite(40, 128, 128) : BV:32
130 : lambda(24, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(23, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda27532 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda27533 : BV:32
25 : bvule(3, 24) : BOOL
26 : bvule(24, 3) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(7, 24) : BOOL
29 : bvule(24, 7) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(11, 24) : BOOL
32 : bvule(24, 13) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 11, 11) : BV:32
35 : ite(30, 7, 34) : BV:32
36 : ite(27, 3, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : and(2, 37) : BOOL
39 : ite(38, 2, 21) : BOOL
40 : and(2, 39) : BOOL
41 : 3 { 0x3 +1.35e129 } : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 24) : BV:32
44 : bvadd(41, 43, 3) : BV:32
45 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
46 : eq(44, 45) : BOOL
47 : 232 { 0xe8 -24 } : BV:8
48 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
49 : eq(44, 48) : BOOL
50 : 32 { 0x20 } : BV:8
51 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
52 : eq(44, 51) : BOOL
53 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
54 : eq(44, 53) : BOOL
55 : 47 { 0x2f } : BV:8
56 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
57 : eq(44, 56) : BOOL
58 : 199 { 0xc7 -57 } : BV:8
59 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
60 : eq(44, 59) : BOOL
61 : 1 { 0x1 } : BV:8
62 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
63 : eq(44, 62) : BOOL
64 : 2 { 0x2 } : BV:8
65 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
66 : eq(44, 65) : BOOL
67 : 236 { 0xec -20 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(63, 64, 69) : BV:8
71 : ite(60, 61, 70) : BV:8
72 : ite(57, 58, 71) : BV:8
73 : ite(54, 55, 72) : BV:8
74 : ite(52, 50, 73) : BV:8
75 : ite(49, 50, 74) : BV:8
76 : ite(46, 47, 75) : BV:8
77 : bvadd(11, 43, 3) : BV:32
78 : eq(77, 45) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 51) : BOOL
81 : eq(77, 53) : BOOL
82 : eq(77, 56) : BOOL
83 : eq(77, 59) : BOOL
84 : eq(77, 62) : BOOL
85 : eq(77, 65) : BOOL
86 : ite(85, 67, 68) : BV:8
87 : ite(84, 64, 86) : BV:8
88 : ite(83, 61, 87) : BV:8
89 : ite(82, 58, 88) : BV:8
90 : ite(81, 55, 89) : BV:8
91 : ite(80, 50, 90) : BV:8
92 : ite(79, 50, 91) : BV:8
93 : ite(78, 47, 92) : BV:8
94 : bvadd(7, 43, 3) : BV:32
95 : eq(94, 45) : BOOL
96 : eq(94, 48) : BOOL
97 : eq(94, 51) : BOOL
98 : eq(94, 53) : BOOL
99 : eq(94, 56) : BOOL
100 : eq(94, 59) : BOOL
101 : eq(94, 62) : BOOL
102 : eq(94, 65) : BOOL
103 : ite(102, 67, 68) : BV:8
104 : ite(101, 64, 103) : BV:8
105 : ite(100, 61, 104) : BV:8
106 : ite(99, 58, 105) : BV:8
107 : ite(98, 55, 106) : BV:8
108 : ite(97, 50, 107) : BV:8
109 : ite(96, 50, 108) : BV:8
110 : ite(95, 47, 109) : BV:8
111 : bvadd(43, 3) : BV:32
112 : eq(111, 45) : BOOL
113 : eq(111, 48) : BOOL
114 : eq(111, 51) : BOOL
115 : eq(111, 53) : BOOL
116 : eq(111, 56) : BOOL
117 : eq(111, 59) : BOOL
118 : eq(111, 62) : BOOL
119 : eq(111, 65) : BOOL
120 : ite(119, 67, 68) : BV:8
121 : ite(118, 64, 120) : BV:8
122 : ite(117, 61, 121) : BV:8
123 : ite(116, 58, 122) : BV:8
124 : ite(115, 55, 123) : BV:8
125 : ite(114, 50, 124) : BV:8
126 : ite(113, 50, 125) : BV:8
127 : ite(112, 47, 126) : BV:8
128 : bvconcat(76, 93, 110, 127) : BV:32
129 : ite(40, 128, 128) : BV:32
130 : lambda(24, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(23, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1113587719 ] -> true, [ 1113587720; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1113587719 ] -> true, [ 1113587720; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27432 : BV:32
2 : Lambda27433 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27437 : BV:32
2 : Lambda27438 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
54 : eq(52, 53) : BOOL
55 : 232 { 0xe8 -24 } : BV:8
56 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
57 : eq(52, 56) : BOOL
58 : 32 { 0x20 } : BV:8
59 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
60 : eq(52, 59) : BOOL
61 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
62 : eq(52, 61) : BOOL
63 : 47 { 0x2f } : BV:8
64 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
65 : eq(52, 64) : BOOL
66 : 199 { 0xc7 -57 } : BV:8
67 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
68 : eq(52, 67) : BOOL
69 : 1 { 0x1 } : BV:8
70 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
71 : eq(52, 70) : BOOL
72 : 2 { 0x2 } : BV:8
73 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
74 : eq(52, 73) : BOOL
75 : 236 { 0xec -20 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(60, 58, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : ite(54, 55, 83) : BV:8
85 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
86 : bvadd(85, 51) : BV:32
87 : eq(86, 53) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 61) : BOOL
91 : eq(86, 64) : BOOL
92 : eq(86, 67) : BOOL
93 : eq(86, 70) : BOOL
94 : eq(86, 73) : BOOL
95 : ite(94, 75, 76) : BV:8
96 : ite(93, 72, 95) : BV:8
97 : ite(92, 69, 96) : BV:8
98 : ite(91, 66, 97) : BV:8
99 : ite(90, 63, 98) : BV:8
100 : ite(89, 58, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 55, 101) : BV:8
103 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
104 : bvadd(103, 51) : BV:32
105 : eq(104, 53) : BOOL
106 : eq(104, 56) : BOOL
107 : eq(104, 59) : BOOL
108 : eq(104, 61) : BOOL
109 : eq(104, 64) : BOOL
110 : eq(104, 67) : BOOL
111 : eq(104, 70) : BOOL
112 : eq(104, 73) : BOOL
113 : ite(112, 75, 76) : BV:8
114 : ite(111, 72, 113) : BV:8
115 : ite(110, 69, 114) : BV:8
116 : ite(109, 66, 115) : BV:8
117 : ite(108, 63, 116) : BV:8
118 : ite(107, 58, 117) : BV:8
119 : ite(106, 58, 118) : BV:8
120 : ite(105, 55, 119) : BV:8
121 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
122 : bvadd(121, 51) : BV:32
123 : eq(122, 53) : BOOL
124 : eq(122, 56) : BOOL
125 : eq(122, 59) : BOOL
126 : eq(122, 61) : BOOL
127 : eq(122, 64) : BOOL
128 : eq(122, 67) : BOOL
129 : eq(122, 70) : BOOL
130 : eq(122, 73) : BOOL
131 : ite(130, 75, 76) : BV:8
132 : ite(129, 72, 131) : BV:8
133 : ite(128, 69, 132) : BV:8
134 : ite(127, 66, 133) : BV:8
135 : ite(126, 63, 134) : BV:8
136 : ite(125, 58, 135) : BV:8
137 : ite(124, 58, 136) : BV:8
138 : ite(123, 55, 137) : BV:8
139 : bvconcat(84, 102, 120, 138) : BV:32
140 : bvadd(47, 49, 139) : BV:32
141 : eq(140, 53) : BOOL
142 : eq(140, 56) : BOOL
143 : eq(140, 59) : BOOL
144 : eq(140, 61) : BOOL
145 : eq(140, 64) : BOOL
146 : eq(140, 67) : BOOL
147 : eq(140, 70) : BOOL
148 : eq(140, 73) : BOOL
149 : ite(148, 75, 76) : BV:8
150 : ite(147, 72, 149) : BV:8
151 : ite(146, 69, 150) : BV:8
152 : ite(145, 66, 151) : BV:8
153 : ite(144, 63, 152) : BV:8
154 : ite(143, 58, 153) : BV:8
155 : ite(142, 58, 154) : BV:8
156 : ite(141, 55, 155) : BV:8
157 : bvadd(36, 49, 139) : BV:32
158 : eq(157, 53) : BOOL
159 : eq(157, 56) : BOOL
160 : eq(157, 59) : BOOL
161 : eq(157, 61) : BOOL
162 : eq(157, 64) : BOOL
163 : eq(157, 67) : BOOL
164 : eq(157, 70) : BOOL
165 : eq(157, 73) : BOOL
166 : ite(165, 75, 76) : BV:8
167 : ite(164, 72, 166) : BV:8
168 : ite(163, 69, 167) : BV:8
169 : ite(162, 66, 168) : BV:8
170 : ite(161, 63, 169) : BV:8
171 : ite(160, 58, 170) : BV:8
172 : ite(159, 58, 171) : BV:8
173 : ite(158, 55, 172) : BV:8
174 : bvadd(32, 49, 139) : BV:32
175 : eq(174, 53) : BOOL
176 : eq(174, 56) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 61) : BOOL
179 : eq(174, 64) : BOOL
180 : eq(174, 67) : BOOL
181 : eq(174, 70) : BOOL
182 : eq(174, 73) : BOOL
183 : ite(182, 75, 76) : BV:8
184 : ite(181, 72, 183) : BV:8
185 : ite(180, 69, 184) : BV:8
186 : ite(179, 66, 185) : BV:8
187 : ite(178, 63, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 55, 189) : BV:8
191 : bvadd(49, 139) : BV:32
192 : eq(191, 53) : BOOL
193 : eq(191, 56) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 61) : BOOL
196 : eq(191, 64) : BOOL
197 : eq(191, 67) : BOOL
198 : eq(191, 70) : BOOL
199 : eq(191, 73) : BOOL
200 : ite(199, 75, 76) : BV:8
201 : ite(198, 72, 200) : BV:8
202 : ite(197, 69, 201) : BV:8
203 : ite(196, 66, 202) : BV:8
204 : ite(195, 63, 203) : BV:8
205 : ite(194, 58, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 55, 206) : BV:8
208 : bvconcat(156, 173, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(46, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27441 : BV:32
2 : Lambda27442 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1113587719 { 0x42600007 +1.75000083e5 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1113587720 { 0x42600008 +1.75000095e5 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1113587721 { 0x42600009 +1.75000107e5 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27439 : BV:32
2 : Lambda27440 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
17 : eq(12, 16) : BOOL
18 : 32 { 0x20 } : BV:8
19 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
20 : eq(12, 19) : BOOL
21 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 47 { 0x2f } : BV:8
24 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 199 { 0xc7 -57 } : BV:8
27 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
28 : eq(12, 27) : BOOL
29 : 1 { 0x1 } : BV:8
30 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 236 { 0xec -20 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(20, 18, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : eq(46, 13) : BOOL
48 : eq(46, 16) : BOOL
49 : eq(46, 19) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 18, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(47, 15, 61) : BV:8
63 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
64 : bvadd(63, 11) : BV:32
65 : eq(64, 13) : BOOL
66 : eq(64, 16) : BOOL
67 : eq(64, 19) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 18, 77) : BV:8
79 : ite(66, 18, 78) : BV:8
80 : ite(65, 15, 79) : BV:8
81 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
82 : bvadd(81, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 21) : BOOL
87 : eq(82, 24) : BOOL
88 : eq(82, 27) : BOOL
89 : eq(82, 30) : BOOL
90 : eq(82, 33) : BOOL
91 : ite(90, 35, 36) : BV:8
92 : ite(89, 32, 91) : BV:8
93 : ite(88, 29, 92) : BV:8
94 : ite(87, 26, 93) : BV:8
95 : ite(86, 23, 94) : BV:8
96 : ite(85, 18, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(44, 62, 80, 98) : BV:32
100 : bvadd(7, 9, 99) : BV:32
101 : eq(100, 13) : BOOL
102 : eq(100, 16) : BOOL
103 : eq(100, 19) : BOOL
104 : eq(100, 21) : BOOL
105 : eq(100, 24) : BOOL
106 : eq(100, 27) : BOOL
107 : eq(100, 30) : BOOL
108 : eq(100, 33) : BOOL
109 : ite(108, 35, 36) : BV:8
110 : ite(107, 32, 109) : BV:8
111 : ite(106, 29, 110) : BV:8
112 : ite(105, 26, 111) : BV:8
113 : ite(104, 23, 112) : BV:8
114 : ite(103, 18, 113) : BV:8
115 : ite(102, 18, 114) : BV:8
116 : ite(101, 15, 115) : BV:8
117 : 2 { 0x2 +1.23e129 } : BV:32
118 : bvadd(117, 9, 99) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 19) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 30) : BOOL
126 : eq(118, 33) : BOOL
127 : ite(126, 35, 36) : BV:8
128 : ite(125, 32, 127) : BV:8
129 : ite(124, 29, 128) : BV:8
130 : ite(123, 26, 129) : BV:8
131 : ite(122, 23, 130) : BV:8
132 : ite(121, 18, 131) : BV:8
133 : ite(120, 18, 132) : BV:8
134 : ite(119, 15, 133) : BV:8
135 : 1 { 0x1 +1.11e129 } : BV:32
136 : bvadd(135, 9, 99) : BV:32
137 : eq(136, 13) : BOOL
138 : eq(136, 16) : BOOL
139 : eq(136, 19) : BOOL
140 : eq(136, 21) : BOOL
141 : eq(136, 24) : BOOL
142 : eq(136, 27) : BOOL
143 : eq(136, 30) : BOOL
144 : eq(136, 33) : BOOL
145 : ite(144, 35, 36) : BV:8
146 : ite(143, 32, 145) : BV:8
147 : ite(142, 29, 146) : BV:8
148 : ite(141, 26, 147) : BV:8
149 : ite(140, 23, 148) : BV:8
150 : ite(139, 18, 149) : BV:8
151 : ite(138, 18, 150) : BV:8
152 : ite(137, 15, 151) : BV:8
153 : bvadd(9, 99) : BV:32
154 : eq(153, 13) : BOOL
155 : eq(153, 16) : BOOL
156 : eq(153, 19) : BOOL
157 : eq(153, 21) : BOOL
158 : eq(153, 24) : BOOL
159 : eq(153, 27) : BOOL
160 : eq(153, 30) : BOOL
161 : eq(153, 33) : BOOL
162 : ite(161, 35, 36) : BV:8
163 : ite(160, 32, 162) : BV:8
164 : ite(159, 29, 163) : BV:8
165 : ite(158, 26, 164) : BV:8
166 : ite(157, 23, 165) : BV:8
167 : ite(156, 18, 166) : BV:8
168 : ite(155, 18, 167) : BV:8
169 : ite(154, 15, 168) : BV:8
170 : bvconcat(116, 134, 152, 169) : BV:32
171 : ite(6, 3, 170) : BV:32
172 : lambda(1, 2, 171) : FUNCTION[BV:32,BV:32 -> BV:32]
173 : sym_const(172) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda27445 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
6 : eq(1, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : not(9) : BOOL
11 : ite(6, 7, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : lambda(1, 12) : FUNCTION[BV:32 -> BOOL]
14 : sym_const(13) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27446 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 3972476904 { 0xecc72fe8 -322490392 -1.55614948e90 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 232 { 0xe8 -24 } : BV:8
13 : 3972476907 { 0xecc72feb -322490389 -1.55614984e90 } : BV:32
14 : eq(9, 13) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 3972476906 { 0xecc72fea -322490390 -1.55614972e90 } : BV:32
17 : eq(9, 16) : BOOL
18 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
19 : eq(9, 18) : BOOL
20 : 47 { 0x2f } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(9, 21) : BOOL
23 : 199 { 0xc7 -57 } : BV:8
24 : eq(9, 8) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 3972476905 { 0xecc72fe9 -322490391 -1.55614960e90 } : BV:32
27 : eq(9, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
30 : eq(9, 29) : BOOL
31 : 236 { 0xec -20 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(17, 15, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 8) : BOOL
49 : eq(42, 26) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 28, 51) : BV:8
53 : ite(48, 25, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 15, 55) : BV:8
57 : ite(44, 15, 56) : BV:8
58 : ite(43, 12, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 7, 8) : BV:32
61 : eq(60, 10) : BOOL
62 : eq(60, 13) : BOOL
63 : eq(60, 16) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 8) : BOOL
67 : eq(60, 26) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 28, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 15, 73) : BV:8
75 : ite(62, 15, 74) : BV:8
76 : ite(61, 12, 75) : BV:8
77 : bvadd(7, 8) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 13) : BOOL
80 : eq(77, 16) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 8) : BOOL
84 : eq(77, 26) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 28, 86) : BV:8
88 : ite(83, 25, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 15, 90) : BV:8
92 : ite(79, 15, 91) : BV:8
93 : ite(78, 12, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 4, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1804058684 { 0x6b87c03c +1.6055402e88 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 538968577 { 0x20200201 +1.25006115e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 16783392 { 0x1001820 +1.73623e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 16783395 { 0x1001823 +1.73659e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147503104 { 0x80004c00 -2147464192 -1.231933e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147503107 { 0x80004c03 -2147464189 -1.231969e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 19524 { 0x4c44 +1.232744e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 19527 { 0x4c47 +1.232779e129 } : BV:32
=counter_example.random_seed
2770433155
=counter_example_end
=global nodece 66 num_edges_traversed 3
=global nodece 66 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 67
=global nodece 67 nodece z3.ce11608.num_edges_traversed1
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3.ce11608 832dee82b8326b6ab42a2eb1d35f3583
=input.spec-%var-x-1
1 : Lambda27739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27742 : BV:32
18 : Lambda27740 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 17 { 0x11 +1.202e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 19 { 0x13 +1.226e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 18 { 0x12 +1.214e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27741 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 112 { 0x70 } : BV:8
65 : eq(61, 59) : BOOL
66 : 214 { 0xd6 -42 } : BV:8
67 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
68 : eq(61, 67) : BOOL
69 : 254 { 0xfe -2 } : BV:8
70 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 196 { 0xc4 -60 } : BV:8
73 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 1 { 0x1 } : BV:8
76 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 186 { 0xba -70 } : BV:8
79 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
82 : eq(61, 81) : BOOL
83 : 187 { 0xbb -69 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 69, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(65, 66, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(76, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 69, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 66, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(79, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 67) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(67, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 59) : BOOL
130 : eq(127, 67) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 69, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 66, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 59) : BOOL
148 : eq(145, 67) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 69, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 66, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 59) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 69, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 66, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 67) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 69, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 66, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 59) : BOOL
201 : eq(198, 67) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 69, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1030287376 { 0x3d68f010 +1.81982612e251 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
=input.dst.llvm-%m
1 : 18 { 0x12 +1.214e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 112, [ 2147483645; 2147483645 ] -> 187, [ 2147483646; 2147483646 ] -> 196, [ 2147483647; 2147483647 ] -> 1, [ 2147483648; 2147483649 ] -> 254, [ 2147483650; 2147483650 ] -> 186, [ 2147483651; 2147483651 ] -> 214, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1610612731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1610612732; 1610612735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1610612736; 2984032759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2984032760; 2984032763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2984032764; 3071879963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3071879964; 3071879967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3071879968; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1610612732 { 0x5ffffffc +1.99999952e64 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2984032760 { 0xb1dcb9f8 -1310934536 -1.72442531e228 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3071879964 { 0xb7192b1c -1223087332 -1.19662809e239 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27746 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27749 : BV:32
18 : Lambda27747 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 17 { 0x11 +1.202e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 19 { 0x13 +1.226e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 18 { 0x12 +1.214e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27748 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 112 { 0x70 } : BV:8
84 : eq(80, 78) : BOOL
85 : 214 { 0xd6 -42 } : BV:8
86 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
87 : eq(80, 86) : BOOL
88 : 254 { 0xfe -2 } : BV:8
89 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 196 { 0xc4 -60 } : BV:8
92 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 186 { 0xba -70 } : BV:8
98 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
101 : eq(80, 100) : BOOL
102 : 187 { 0xbb -69 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 88, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(84, 85, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(95, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 88, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 85, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(98, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 78) : BOOL
132 : eq(129, 86) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 88, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 85, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(86, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 78) : BOOL
149 : eq(146, 86) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 88, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 85, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 78) : BOOL
167 : eq(164, 86) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 88, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 85, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 78) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 88, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 85, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 78) : BOOL
203 : eq(200, 86) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 88, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 85, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 78) : BOOL
220 : eq(217, 86) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 88, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 85, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27743 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27744 : BV:32
7 : 552113054 { 0x20e8939e +1.81700491e194 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27751 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27752 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 29670256 { 0x1c4bb70 +1.53697013e132 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 112 { 0x70 } : BV:8
27 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 196 { 0xc4 -60 } : BV:8
36 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 186 { 0xba -70 } : BV:8
42 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
45 : eq(23, 44) : BOOL
46 : 187 { 0xbb -69 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 32, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 32, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 32, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(19, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2537709567 ] -> true, [ 2537709568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2537709567 ] -> true, [ 2537709568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27688 : BV:32
2 : Lambda27689 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 17 { 0x11 +1.202e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 19 { 0x13 +1.226e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 18 { 0x12 +1.214e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27693 : BV:32
2 : Lambda27694 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 17 { 0x11 +1.202e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 19 { 0x13 +1.226e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 18 { 0x12 +1.214e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 112 { 0x70 } : BV:8
57 : eq(53, 51) : BOOL
58 : 214 { 0xd6 -42 } : BV:8
59 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
60 : eq(53, 59) : BOOL
61 : 254 { 0xfe -2 } : BV:8
62 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 196 { 0xc4 -60 } : BV:8
65 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 186 { 0xba -70 } : BV:8
71 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
74 : eq(53, 73) : BOOL
75 : 187 { 0xbb -69 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 61, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(68, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 61, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 58, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(71, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 51) : BOOL
105 : eq(102, 59) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 58, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(59, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 51) : BOOL
122 : eq(119, 59) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 61, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 58, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 51) : BOOL
140 : eq(137, 59) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 61, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 51) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 61, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 58, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 51) : BOOL
176 : eq(173, 59) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 61, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 58, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 51) : BOOL
193 : eq(190, 59) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 61, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 58, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27697 : BV:32
2 : Lambda27698 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 17 { 0x11 +1.202e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 19 { 0x13 +1.226e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 18 { 0x12 +1.214e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27695 : BV:32
2 : Lambda27696 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 112 { 0x70 } : BV:8
16 : eq(12, 10) : BOOL
17 : 214 { 0xd6 -42 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 254 { 0xfe -2 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 196 { 0xc4 -60 } : BV:8
24 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 186 { 0xba -70 } : BV:8
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
33 : eq(12, 32) : BOOL
34 : 187 { 0xbb -69 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 20, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(27, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 20, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(30, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 10) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 20, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(18, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 10) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 20, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 10) : BOOL
99 : eq(96, 18) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 20, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 17, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 18) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 20, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 17, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 10) : BOOL
135 : eq(132, 18) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 20, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 17, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 10) : BOOL
152 : eq(149, 18) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 20, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27704 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 29670256 { 0x1c4bb70 +1.53697013e132 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 112 { 0x70 } : BV:8
12 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 214 { 0xd6 -42 } : BV:8
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 254 { 0xfe -2 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 196 { 0xc4 -60 } : BV:8
21 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 186 { 0xba -70 } : BV:8
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
30 : eq(8, 29) : BOOL
31 : 187 { 0xbb -69 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 17, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 17, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 17, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 4, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1179034753 { 0x4646a481 +1.55189526e13 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 29670256 { 0x1c4bb70 +1.53697013e132 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 29670268 { 0x1c4bb7c +1.53697156e132 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 29670268 { 0x1c4bb7c +1.53697156e132 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3071879964 { 0xb7192b1c -1223087332 -1.19662809e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3071879967 { 0xb7192b1f -1223087329 -1.19662845e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1610612732 { 0x5ffffffc +1.99999952e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1610612735 { 0x5fffffff +1.99999988e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2984032760 { 0xb1dcb9f8 -1310934536 -1.72442531e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2984032763 { 0xb1dcb9fb -1310934533 -1.72442567e228 } : BV:32
=counter_example.random_seed
2320045569
=counter_example_end
=global nodece 67 num_edges_traversed 1
=global nodece 67 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 68
=global nodece 68 nodece z3.ce11660.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce11660 d71b1a338ca8252e7c315f1ca5364
=input.spec-%var-x-1
1 : Lambda27739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27742 : BV:32
18 : Lambda27740 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 17 { 0x11 +1.202e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 19 { 0x13 +1.226e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 18 { 0x12 +1.214e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27741 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 112 { 0x70 } : BV:8
65 : eq(61, 59) : BOOL
66 : 214 { 0xd6 -42 } : BV:8
67 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
68 : eq(61, 67) : BOOL
69 : 254 { 0xfe -2 } : BV:8
70 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 196 { 0xc4 -60 } : BV:8
73 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 1 { 0x1 } : BV:8
76 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 186 { 0xba -70 } : BV:8
79 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
80 : eq(61, 79) : BOOL
81 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
82 : eq(61, 81) : BOOL
83 : 187 { 0xbb -69 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 69, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(65, 66, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(76, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 59) : BOOL
96 : eq(93, 67) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 69, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 66, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(79, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 59) : BOOL
113 : eq(110, 67) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 66, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(67, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 59) : BOOL
130 : eq(127, 67) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 69, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 66, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 59) : BOOL
148 : eq(145, 67) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 69, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 66, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 59) : BOOL
166 : eq(163, 67) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 69, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 66, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 59) : BOOL
184 : eq(181, 67) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 69, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 66, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 59) : BOOL
201 : eq(198, 67) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 69, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 66, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1030287377 { 0x3d68f011 +1.81982624e251 } : BV:32
=input.dst.llvm-%x
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
=input.dst.llvm-%m
1 : 18 { 0x12 +1.214e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 112, [ 2147483645; 2147483645 ] -> 187, [ 2147483646; 2147483646 ] -> 196, [ 2147483647; 2147483647 ] -> 1, [ 2147483648; 2147483649 ] -> 254, [ 2147483650; 2147483650 ] -> 186, [ 2147483651; 2147483651 ] -> 214, [ 2147483652; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1610612731 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1610612732; 1610612735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1610612736; 2984032759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2984032760; 2984032763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2984032764; 3071879963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3071879964; 3071879967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3071879968; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1610612732 { 0x5ffffffc +1.99999952e64 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2984032760 { 0xb1dcb9f8 -1310934536 -1.72442531e228 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3071879964 { 0xb7192b1c -1223087332 -1.19662809e239 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27746 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27749 : BV:32
18 : Lambda27747 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 17 { 0x11 +1.202e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 19 { 0x13 +1.226e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 18 { 0x12 +1.214e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27748 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 112 { 0x70 } : BV:8
84 : eq(80, 78) : BOOL
85 : 214 { 0xd6 -42 } : BV:8
86 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
87 : eq(80, 86) : BOOL
88 : 254 { 0xfe -2 } : BV:8
89 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 196 { 0xc4 -60 } : BV:8
92 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 1 { 0x1 } : BV:8
95 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 186 { 0xba -70 } : BV:8
98 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
99 : eq(80, 98) : BOOL
100 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
101 : eq(80, 100) : BOOL
102 : 187 { 0xbb -69 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 88, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(84, 85, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(95, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 78) : BOOL
115 : eq(112, 86) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 88, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 85, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(98, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 78) : BOOL
132 : eq(129, 86) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 88, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 85, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(86, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 78) : BOOL
149 : eq(146, 86) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 88, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 85, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 78) : BOOL
167 : eq(164, 86) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 88, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 85, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 78) : BOOL
185 : eq(182, 86) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 88, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 85, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 78) : BOOL
203 : eq(200, 86) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 88, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 85, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 78) : BOOL
220 : eq(217, 86) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 88, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 85, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 234, 235) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27743 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27744 : BV:32
7 : 552113054 { 0x20e8939e +1.81700491e194 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27751 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27752 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 29670256 { 0x1c4bb70 +1.53697013e132 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 112 { 0x70 } : BV:8
27 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 254 { 0xfe -2 } : BV:8
33 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
34 : eq(23, 33) : BOOL
35 : 196 { 0xc4 -60 } : BV:8
36 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
40 : eq(23, 39) : BOOL
41 : 186 { 0xba -70 } : BV:8
42 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
43 : eq(23, 42) : BOOL
44 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
45 : eq(23, 44) : BOOL
46 : 187 { 0xbb -69 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(43, 32, 48) : BV:8
50 : ite(40, 41, 49) : BV:8
51 : ite(37, 38, 50) : BV:8
52 : ite(34, 35, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 21, 22) : BV:32
58 : eq(57, 24) : BOOL
59 : eq(57, 27) : BOOL
60 : eq(57, 30) : BOOL
61 : eq(57, 33) : BOOL
62 : eq(57, 36) : BOOL
63 : eq(57, 39) : BOOL
64 : eq(57, 42) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 41, 67) : BV:8
69 : ite(62, 38, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(60, 32, 70) : BV:8
72 : ite(59, 29, 71) : BV:8
73 : ite(58, 26, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 32, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 32, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(19, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2537709567 ] -> true, [ 2537709568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2537709567 ] -> true, [ 2537709568; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27688 : BV:32
2 : Lambda27689 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 17 { 0x11 +1.202e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 19 { 0x13 +1.226e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 18 { 0x12 +1.214e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27693 : BV:32
2 : Lambda27694 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 17 { 0x11 +1.202e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 19 { 0x13 +1.226e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 18 { 0x12 +1.214e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 112 { 0x70 } : BV:8
57 : eq(53, 51) : BOOL
58 : 214 { 0xd6 -42 } : BV:8
59 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
60 : eq(53, 59) : BOOL
61 : 254 { 0xfe -2 } : BV:8
62 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 196 { 0xc4 -60 } : BV:8
65 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 1 { 0x1 } : BV:8
68 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 186 { 0xba -70 } : BV:8
71 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
72 : eq(53, 71) : BOOL
73 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
74 : eq(53, 73) : BOOL
75 : 187 { 0xbb -69 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 61, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(57, 58, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(68, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 51) : BOOL
88 : eq(85, 59) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 61, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 58, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(71, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 51) : BOOL
105 : eq(102, 59) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 58, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(59, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 51) : BOOL
122 : eq(119, 59) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 61, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 58, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 51) : BOOL
140 : eq(137, 59) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 61, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 58, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 51) : BOOL
158 : eq(155, 59) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 61, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 58, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 51) : BOOL
176 : eq(173, 59) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 61, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 58, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 51) : BOOL
193 : eq(190, 59) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 61, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 58, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 207, 208) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27697 : BV:32
2 : Lambda27698 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2537709567 { 0x97425fff -1757257729 -1.51855456e175 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2537709568 { 0x97426000 -1757257728 -1.51855468e175 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2537709569 { 0x97426001 -1757257727 -1.51855480e175 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 17 { 0x11 +1.202e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 19 { 0x13 +1.226e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 18 { 0x12 +1.214e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27695 : BV:32
2 : Lambda27696 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 112 { 0x70 } : BV:8
16 : eq(12, 10) : BOOL
17 : 214 { 0xd6 -42 } : BV:8
18 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 254 { 0xfe -2 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 196 { 0xc4 -60 } : BV:8
24 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 186 { 0xba -70 } : BV:8
30 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
33 : eq(12, 32) : BOOL
34 : 187 { 0xbb -69 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 20, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(27, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 10) : BOOL
47 : eq(44, 18) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 20, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 17, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(30, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 10) : BOOL
64 : eq(61, 18) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 20, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 17, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(18, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 10) : BOOL
81 : eq(78, 18) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 20, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 17, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 10) : BOOL
99 : eq(96, 18) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 20, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 17, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 10) : BOOL
117 : eq(114, 18) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 20, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 17, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 10) : BOOL
135 : eq(132, 18) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 20, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 17, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 10) : BOOL
152 : eq(149, 18) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 20, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 17, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27704 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 29670256 { 0x1c4bb70 +1.53697013e132 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 112 { 0x70 } : BV:8
12 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 214 { 0xd6 -42 } : BV:8
15 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 254 { 0xfe -2 } : BV:8
18 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
19 : eq(8, 18) : BOOL
20 : 196 { 0xc4 -60 } : BV:8
21 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
25 : eq(8, 24) : BOOL
26 : 186 { 0xba -70 } : BV:8
27 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
28 : eq(8, 27) : BOOL
29 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
30 : eq(8, 29) : BOOL
31 : 187 { 0xbb -69 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 17, 33) : BV:8
35 : ite(25, 26, 34) : BV:8
36 : ite(22, 23, 35) : BV:8
37 : ite(19, 20, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(13, 14, 38) : BV:8
40 : ite(10, 11, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 6, 7) : BV:32
43 : eq(42, 9) : BOOL
44 : eq(42, 12) : BOOL
45 : eq(42, 15) : BOOL
46 : eq(42, 18) : BOOL
47 : eq(42, 21) : BOOL
48 : eq(42, 24) : BOOL
49 : eq(42, 27) : BOOL
50 : eq(42, 29) : BOOL
51 : ite(50, 31, 32) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 26, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : ite(46, 20, 54) : BV:8
56 : ite(45, 17, 55) : BV:8
57 : ite(44, 14, 56) : BV:8
58 : ite(43, 11, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 9) : BOOL
62 : eq(60, 12) : BOOL
63 : eq(60, 15) : BOOL
64 : eq(60, 18) : BOOL
65 : eq(60, 21) : BOOL
66 : eq(60, 24) : BOOL
67 : eq(60, 27) : BOOL
68 : eq(60, 29) : BOOL
69 : ite(68, 31, 32) : BV:8
70 : ite(67, 17, 69) : BV:8
71 : ite(66, 26, 70) : BV:8
72 : ite(65, 23, 71) : BV:8
73 : ite(64, 20, 72) : BV:8
74 : ite(63, 17, 73) : BV:8
75 : ite(62, 14, 74) : BV:8
76 : ite(61, 11, 75) : BV:8
77 : bvadd(6, 7) : BV:32
78 : eq(77, 9) : BOOL
79 : eq(77, 12) : BOOL
80 : eq(77, 15) : BOOL
81 : eq(77, 18) : BOOL
82 : eq(77, 21) : BOOL
83 : eq(77, 24) : BOOL
84 : eq(77, 27) : BOOL
85 : eq(77, 29) : BOOL
86 : ite(85, 31, 32) : BV:8
87 : ite(84, 17, 86) : BV:8
88 : ite(83, 26, 87) : BV:8
89 : ite(82, 23, 88) : BV:8
90 : ite(81, 20, 89) : BV:8
91 : ite(80, 17, 90) : BV:8
92 : ite(79, 14, 91) : BV:8
93 : ite(78, 11, 92) : BV:8
94 : bvconcat(40, 58, 76, 93) : BV:32
95 : ite(3, 4, 94) : BV:32
96 : lambda(1, 95) : FUNCTION[BV:32 -> BV:32]
97 : sym_const(96) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1179034754 { 0x4646a482 +1.55189538e13 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3071879964 { 0xb7192b1c -1223087332 -1.19662809e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3071879967 { 0xb7192b1f -1223087329 -1.19662845e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1610612732 { 0x5ffffffc +1.99999952e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1610612735 { 0x5fffffff +1.99999988e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2984032760 { 0xb1dcb9f8 -1310934536 -1.72442531e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2984032763 { 0xb1dcb9fb -1310934533 -1.72442567e228 } : BV:32
=counter_example.random_seed
2320045569
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 69
=global nodece 69 nodece z3.ce11702.num_edges_traversed1
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce11702 9ef90554387489e25d1aa3963788b8
=input.spec-%var-x-1
1 : Lambda27860 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27863 : BV:32
18 : Lambda27861 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27862 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 232 { 0xe8 -24 } : BV:8
65 : eq(61, 59) : BOOL
66 : 127 { 0x7f } : BV:8
67 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
68 : eq(61, 67) : BOOL
69 : 247 { 0xf7 -9 } : BV:8
70 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 97 { 0x61 } : BV:8
73 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 18 { 0x12 } : BV:8
76 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
77 : eq(61, 76) : BOOL
78 : 223 { 0xdf -33 } : BV:8
79 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
80 : eq(61, 79) : BOOL
81 : 119 { 0x77 } : BV:8
82 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
83 : eq(61, 82) : BOOL
84 : 161 { 0xa1 -95 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(76, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(79, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(67, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 13378815 { 0xcc24ff +1.59487903e130 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 13378816 { 0xcc2500 +1.59487915e130 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1670107339 { 0x638bd0cb +1.9230935e72 } : BV:32
=input.dst.llvm-%x
1 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
=input.dst.llvm-%n
1 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
=input.dst.llvm-%m
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2096065535 ] -> 0, [ 2096065536; 2096065536 ] -> 247, [ 2096065537; 2096065537 ] -> 119, [ 2096065538; 2096065538 ] -> 223, [ 2096065539; 2096065539 ] -> 127, [ 2096065540; 2149580795 ] -> 0, [ 2149580796; 2149580796 ] -> 232, [ 2149580797; 2149580797 ] -> 161, [ 2149580798; 2149580798 ] -> 97, [ 2149580799; 2149580799 ] -> 18, [ 2149580800; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 169592667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 169592668; 169592671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 169592672; 997669995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 997669996; 997669999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 997670000; 2281909355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2281909356; 2281909359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2281909360; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2281909356 { 0x88032c6c -2013057940 -1.2479314e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 169592668 { 0xa1bc75c +1.21702146e149 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 997669996 { 0x3b773c6c +1.93153142e247 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27870 : BV:32
18 : Lambda27868 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27869 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 232 { 0xe8 -24 } : BV:8
84 : eq(80, 78) : BOOL
85 : 127 { 0x7f } : BV:8
86 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
87 : eq(80, 86) : BOOL
88 : 247 { 0xf7 -9 } : BV:8
89 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 97 { 0x61 } : BV:8
92 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 18 { 0x12 } : BV:8
95 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
96 : eq(80, 95) : BOOL
97 : 223 { 0xdf -33 } : BV:8
98 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
99 : eq(80, 98) : BOOL
100 : 119 { 0x77 } : BV:8
101 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
102 : eq(80, 101) : BOOL
103 : 161 { 0xa1 -95 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(95, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(98, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(86, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27864 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27865 : BV:32
7 : 1724824914 { 0x66cebd52 +1.61515259e78 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27872 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27873 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 308388328 { 0x1261a1e8 +1.76275348e165 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 232 { 0xe8 -24 } : BV:8
27 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
28 : eq(23, 27) : BOOL
29 : 127 { 0x7f } : BV:8
30 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
31 : eq(23, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 97 { 0x61 } : BV:8
36 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 18 { 0x12 } : BV:8
39 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
40 : eq(23, 39) : BOOL
41 : 223 { 0xdf -33 } : BV:8
42 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
43 : eq(23, 42) : BOOL
44 : 119 { 0x77 } : BV:8
45 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
46 : eq(23, 45) : BOOL
47 : 161 { 0xa1 -95 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 13378815 { 0xcc24ff +1.59487903e130 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1083740615 ] -> true, [ 1083740616; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1083740615 ] -> true, [ 1083740616; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27809 : BV:32
2 : Lambda27810 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27814 : BV:32
2 : Lambda27815 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 232 { 0xe8 -24 } : BV:8
57 : eq(53, 51) : BOOL
58 : 127 { 0x7f } : BV:8
59 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
60 : eq(53, 59) : BOOL
61 : 247 { 0xf7 -9 } : BV:8
62 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 97 { 0x61 } : BV:8
65 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 18 { 0x12 } : BV:8
68 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
69 : eq(53, 68) : BOOL
70 : 223 { 0xdf -33 } : BV:8
71 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
72 : eq(53, 71) : BOOL
73 : 119 { 0x77 } : BV:8
74 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
75 : eq(53, 74) : BOOL
76 : 161 { 0xa1 -95 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(68, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(71, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(59, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27818 : BV:32
2 : Lambda27819 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27816 : BV:32
2 : Lambda27817 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : eq(12, 10) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
19 : eq(12, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 18 { 0x12 } : BV:8
27 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
28 : eq(12, 27) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
31 : eq(12, 30) : BOOL
32 : 119 { 0x77 } : BV:8
33 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
34 : eq(12, 33) : BOOL
35 : 161 { 0xa1 -95 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4194304 ] -> true, [ 4194305; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27825 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 308388328 { 0x1261a1e8 +1.76275348e165 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 232 { 0xe8 -24 } : BV:8
12 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
13 : eq(8, 12) : BOOL
14 : 127 { 0x7f } : BV:8
15 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
16 : eq(8, 15) : BOOL
17 : 247 { 0xf7 -9 } : BV:8
18 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 97 { 0x61 } : BV:8
21 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 18 { 0x12 } : BV:8
24 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
25 : eq(8, 24) : BOOL
26 : 223 { 0xdf -33 } : BV:8
27 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
28 : eq(8, 27) : BOOL
29 : 119 { 0x77 } : BV:8
30 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
31 : eq(8, 30) : BOOL
32 : 161 { 0xa1 -95 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 13378815 { 0xcc24ff +1.59487903e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2096597889 { 0x7cf78b81 +1.93394482e122 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 308388328 { 0x1261a1e8 +1.76275348e165 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 53515260 { 0x33093fc +1.37951612e135 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 53515260 { 0x33093fc +1.37951612e135 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 308388344 { 0x1261a1f8 +1.76275539e165 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 308388344 { 0x1261a1f8 +1.76275539e165 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 997669996 { 0x3b773c6c +1.93153142e247 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 997669999 { 0x3b773c6f +1.93153178e247 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2281909356 { 0x88032c6c -2013057940 -1.2479314e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2281909359 { 0x88032c6f -2013057937 -1.2479350e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 169592668 { 0xa1bc75c +1.21702146e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 169592671 { 0xa1bc75f +1.21702182e149 } : BV:32
=counter_example.random_seed
498328071
=counter_example_end
=global nodece 69 num_edges_traversed 1
=global nodece 69 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 70
=global nodece 70 nodece z3.ce11754.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce11754 555e3a5b5047b6a1cce61044b13ff1dd
=input.spec-%var-x-1
1 : Lambda27860 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27863 : BV:32
18 : Lambda27861 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27862 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 232 { 0xe8 -24 } : BV:8
65 : eq(61, 59) : BOOL
66 : 127 { 0x7f } : BV:8
67 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
68 : eq(61, 67) : BOOL
69 : 247 { 0xf7 -9 } : BV:8
70 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
71 : eq(61, 70) : BOOL
72 : 97 { 0x61 } : BV:8
73 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 18 { 0x12 } : BV:8
76 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
77 : eq(61, 76) : BOOL
78 : 223 { 0xdf -33 } : BV:8
79 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
80 : eq(61, 79) : BOOL
81 : 119 { 0x77 } : BV:8
82 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
83 : eq(61, 82) : BOOL
84 : 161 { 0xa1 -95 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(76, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(79, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(67, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 13378815 { 0xcc24ff +1.59487903e130 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 13378816 { 0xcc2500 +1.59487915e130 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1670107340 { 0x638bd0cc +1.9230947e72 } : BV:32
=input.dst.llvm-%x
1 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
=input.dst.llvm-%n
1 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
=input.dst.llvm-%m
1 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2096065535 ] -> 0, [ 2096065536; 2096065536 ] -> 247, [ 2096065537; 2096065537 ] -> 119, [ 2096065538; 2096065538 ] -> 223, [ 2096065539; 2096065539 ] -> 127, [ 2096065540; 2149580795 ] -> 0, [ 2149580796; 2149580796 ] -> 232, [ 2149580797; 2149580797 ] -> 161, [ 2149580798; 2149580798 ] -> 97, [ 2149580799; 2149580799 ] -> 18, [ 2149580800; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 169592667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 169592668; 169592671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 169592672; 997669995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 997669996; 997669999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 997670000; 2281909355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2281909356; 2281909359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2281909360; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2281909356 { 0x88032c6c -2013057940 -1.2479314e145 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 169592668 { 0xa1bc75c +1.21702146e149 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 997669996 { 0x3b773c6c +1.93153142e247 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27870 : BV:32
18 : Lambda27868 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27869 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 232 { 0xe8 -24 } : BV:8
84 : eq(80, 78) : BOOL
85 : 127 { 0x7f } : BV:8
86 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
87 : eq(80, 86) : BOOL
88 : 247 { 0xf7 -9 } : BV:8
89 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
90 : eq(80, 89) : BOOL
91 : 97 { 0x61 } : BV:8
92 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 18 { 0x12 } : BV:8
95 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
96 : eq(80, 95) : BOOL
97 : 223 { 0xdf -33 } : BV:8
98 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
99 : eq(80, 98) : BOOL
100 : 119 { 0x77 } : BV:8
101 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
102 : eq(80, 101) : BOOL
103 : 161 { 0xa1 -95 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(95, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(98, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(86, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27864 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27865 : BV:32
7 : 1724824914 { 0x66cebd52 +1.61515259e78 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27872 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27873 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 308388328 { 0x1261a1e8 +1.76275348e165 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 232 { 0xe8 -24 } : BV:8
27 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
28 : eq(23, 27) : BOOL
29 : 127 { 0x7f } : BV:8
30 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
31 : eq(23, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 97 { 0x61 } : BV:8
36 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 18 { 0x12 } : BV:8
39 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
40 : eq(23, 39) : BOOL
41 : 223 { 0xdf -33 } : BV:8
42 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
43 : eq(23, 42) : BOOL
44 : 119 { 0x77 } : BV:8
45 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
46 : eq(23, 45) : BOOL
47 : 161 { 0xa1 -95 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 13378815 { 0xcc24ff +1.59487903e130 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1083740615 ] -> true, [ 1083740616; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1083740615 ] -> true, [ 1083740616; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27809 : BV:32
2 : Lambda27810 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27814 : BV:32
2 : Lambda27815 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 232 { 0xe8 -24 } : BV:8
57 : eq(53, 51) : BOOL
58 : 127 { 0x7f } : BV:8
59 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
60 : eq(53, 59) : BOOL
61 : 247 { 0xf7 -9 } : BV:8
62 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
63 : eq(53, 62) : BOOL
64 : 97 { 0x61 } : BV:8
65 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 18 { 0x12 } : BV:8
68 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
69 : eq(53, 68) : BOOL
70 : 223 { 0xdf -33 } : BV:8
71 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
72 : eq(53, 71) : BOOL
73 : 119 { 0x77 } : BV:8
74 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
75 : eq(53, 74) : BOOL
76 : 161 { 0xa1 -95 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(68, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(71, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(59, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27818 : BV:32
2 : Lambda27819 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083740615 { 0x409891c7 +1.19194877e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083740616 { 0x409891c8 +1.19194889e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083740617 { 0x409891c9 +1.19194900e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4194305 { 0x400001 +1.50000011e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4194306 { 0x400002 +1.50000023e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27816 : BV:32
2 : Lambda27817 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 232 { 0xe8 -24 } : BV:8
16 : eq(12, 10) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
19 : eq(12, 18) : BOOL
20 : 247 { 0xf7 -9 } : BV:8
21 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 97 { 0x61 } : BV:8
24 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 18 { 0x12 } : BV:8
27 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
28 : eq(12, 27) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
31 : eq(12, 30) : BOOL
32 : 119 { 0x77 } : BV:8
33 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
34 : eq(12, 33) : BOOL
35 : 161 { 0xa1 -95 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4194304 ] -> true, [ 4194305; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27825 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 308388328 { 0x1261a1e8 +1.76275348e165 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2149580796 { 0x801ffffc -2145386500 -1.24999952e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 232 { 0xe8 -24 } : BV:8
12 : 2096065539 { 0x7cef6c03 +1.87048375e122 } : BV:32
13 : eq(8, 12) : BOOL
14 : 127 { 0x7f } : BV:8
15 : 2096065536 { 0x7cef6c00 +1.87048339e122 } : BV:32
16 : eq(8, 15) : BOOL
17 : 247 { 0xf7 -9 } : BV:8
18 : 2149580798 { 0x801ffffe -2145386498 -1.24999976e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 97 { 0x61 } : BV:8
21 : 2149580799 { 0x801fffff -2145386497 -1.24999988e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 18 { 0x12 } : BV:8
24 : 2096065538 { 0x7cef6c02 +1.87048363e122 } : BV:32
25 : eq(8, 24) : BOOL
26 : 223 { 0xdf -33 } : BV:8
27 : 2096065537 { 0x7cef6c01 +1.87048351e122 } : BV:32
28 : eq(8, 27) : BOOL
29 : 119 { 0x77 } : BV:8
30 : 2149580797 { 0x801ffffd -2145386499 -1.24999964e129 } : BV:32
31 : eq(8, 30) : BOOL
32 : 161 { 0xa1 -95 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 13378815 { 0xcc24ff +1.59487903e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2096597890 { 0x7cf78b82 +1.93394494e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 997669996 { 0x3b773c6c +1.93153142e247 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 997669999 { 0x3b773c6f +1.93153178e247 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2281909356 { 0x88032c6c -2013057940 -1.2479314e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2281909359 { 0x88032c6f -2013057937 -1.2479350e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 169592668 { 0xa1bc75c +1.21702146e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 169592671 { 0xa1bc75f +1.21702182e149 } : BV:32
=counter_example.random_seed
498328071
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 71
=global nodece 71 nodece z3.ce11796.num_edges_traversed1
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3.ce11796 23668085f51f51023adb21512618b14
=input.spec-%var-x-1
1 : Lambda28056 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28059 : BV:32
18 : Lambda28057 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28058 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
66 : eq(61, 65) : BOOL
67 : 97 { 0x61 } : BV:8
68 : eq(61, 59) : BOOL
69 : 58 { 0x3a } : BV:8
70 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
71 : eq(61, 70) : BOOL
72 : 245 { 0xf5 -11 } : BV:8
73 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
74 : eq(61, 73) : BOOL
75 : 38 { 0x26 } : BV:8
76 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
77 : eq(61, 76) : BOOL
78 : 205 { 0xcd -51 } : BV:8
79 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
80 : eq(61, 79) : BOOL
81 : 223 { 0xdf -33 } : BV:8
82 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
83 : eq(61, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 713039424 { 0x2a801e40 +1.92315e214 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 713039425 { 0x2a801e41 +1.92327e214 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1277945764 { 0x4c2be7a4 +1.34300661e25 } : BV:32
=input.dst.llvm-%x
1 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
=input.dst.llvm-%n
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.dst.llvm-%m
1 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 872415227 ] -> 0, [ 872415228; 872415228 ] -> 4, [ 872415229; 872415229 ] -> 97, [ 872415230; 872415230 ] -> 38, [ 872415231; 872415231 ] -> 205, [ 872415232; 2315224827 ] -> 0, [ 2315224828; 2315224828 ] -> 245, [ 2315224829; 2315224829 ] -> 255, [ 2315224830; 2315224830 ] -> 223, [ 2315224831; 2315224831 ] -> 58, [ 2315224832; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1611720815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1611720816; 1611720819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1611720820; 2685522147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2685522148; 2685522151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2685522152; 3262340223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3262340224; 3262340227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3262340228; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3262340224 { 0xc2735c80 -1032627072 -1.90126037e5 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1611720816 { 0x6010e870 +1.13209342e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2685522148 { 0xa011d0e4 -1609445148 -1.13918733e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28063 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28066 : BV:32
18 : Lambda28064 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28065 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
85 : eq(80, 84) : BOOL
86 : 97 { 0x61 } : BV:8
87 : eq(80, 78) : BOOL
88 : 58 { 0x3a } : BV:8
89 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
90 : eq(80, 89) : BOOL
91 : 245 { 0xf5 -11 } : BV:8
92 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
93 : eq(80, 92) : BOOL
94 : 38 { 0x26 } : BV:8
95 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
96 : eq(80, 95) : BOOL
97 : 205 { 0xcd -51 } : BV:8
98 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
99 : eq(80, 98) : BOOL
100 : 223 { 0xdf -33 } : BV:8
101 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
102 : eq(80, 101) : BOOL
103 : 255 { 0xff -1 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda28060 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28061 : BV:32
7 : 1869305803 { 0x6f6b57cb +1.83861672e95 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda28068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28069 : BV:32
18 : 713039425 { 0x2a801e41 +1.92327e214 } : BV:32
19 : eq(17, 18) : BOOL
20 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3441844484 { 0xcd266104 -853122812 -1.29983568e27 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
31 : eq(26, 30) : BOOL
32 : 97 { 0x61 } : BV:8
33 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
34 : eq(26, 33) : BOOL
35 : 58 { 0x3a } : BV:8
36 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
37 : eq(26, 36) : BOOL
38 : 245 { 0xf5 -11 } : BV:8
39 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
40 : eq(26, 39) : BOOL
41 : 38 { 0x26 } : BV:8
42 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
43 : eq(26, 42) : BOOL
44 : 205 { 0xcd -51 } : BV:8
45 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
46 : eq(26, 45) : BOOL
47 : 223 { 0xdf -33 } : BV:8
48 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
49 : eq(26, 48) : BOOL
50 : 255 { 0xff -1 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 713039424 { 0x2a801e40 +1.92315e214 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 948182272 ] -> true, [ 948182273; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 948182272 ] -> true, [ 948182273; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda28026 : BV:32
2 : Lambda28027 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda28031 : BV:32
2 : Lambda28032 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
58 : eq(53, 57) : BOOL
59 : 97 { 0x61 } : BV:8
60 : eq(53, 51) : BOOL
61 : 58 { 0x3a } : BV:8
62 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
63 : eq(53, 62) : BOOL
64 : 245 { 0xf5 -11 } : BV:8
65 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
66 : eq(53, 65) : BOOL
67 : 38 { 0x26 } : BV:8
68 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
69 : eq(53, 68) : BOOL
70 : 205 { 0xcd -51 } : BV:8
71 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
72 : eq(53, 71) : BOOL
73 : 223 { 0xdf -33 } : BV:8
74 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
75 : eq(53, 74) : BOOL
76 : 255 { 0xff -1 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda28035 : BV:32
2 : Lambda28036 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda28033 : BV:32
2 : Lambda28034 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
17 : eq(12, 16) : BOOL
18 : 97 { 0x61 } : BV:8
19 : eq(12, 10) : BOOL
20 : 58 { 0x3a } : BV:8
21 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
22 : eq(12, 21) : BOOL
23 : 245 { 0xf5 -11 } : BV:8
24 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
25 : eq(12, 24) : BOOL
26 : 38 { 0x26 } : BV:8
27 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
28 : eq(12, 27) : BOOL
29 : 205 { 0xcd -51 } : BV:8
30 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
31 : eq(12, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
34 : eq(12, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1686379521 ] -> true, [ 1686379522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda28042 : BV:32
2 : 713039425 { 0x2a801e41 +1.92327e214 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3441844484 { 0xcd266104 -853122812 -1.29983568e27 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
16 : eq(11, 15) : BOOL
17 : 97 { 0x61 } : BV:8
18 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
19 : eq(11, 18) : BOOL
20 : 58 { 0x3a } : BV:8
21 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
22 : eq(11, 21) : BOOL
23 : 245 { 0xf5 -11 } : BV:8
24 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
25 : eq(11, 24) : BOOL
26 : 38 { 0x26 } : BV:8
27 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
28 : eq(11, 27) : BOOL
29 : 205 { 0xcd -51 } : BV:8
30 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
31 : eq(11, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
34 : eq(11, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 713039424 { 0x2a801e40 +1.92315e214 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1576545322 { 0x5df82c2a +1.93884778e60 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 3441844484 { 0xcd266104 -853122812 -1.29983568e27 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 3792729088 { 0xe2107400 -502238208 -1.12854003e69 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2939606276 { 0xaf36d504 -1355361020 -1.42837572e223 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 3792729088 { 0xe2107400 -502238208 -1.12854003e69 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2939606276 { 0xaf36d504 -1355361020 -1.42837572e223 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 2852157696 { 0xaa007900 -1442809600 -1.369262e213 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 2852157696 { 0xaa007900 -1442809600 -1.369262e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2685522148 { 0xa011d0e4 -1609445148 -1.13918733e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2685522151 { 0xa011d0e7 -1609445145 -1.13918769e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3262340224 { 0xc2735c80 -1032627072 -1.90126037e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3262340227 { 0xc2735c83 -1032627069 -1.90126073e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1611720816 { 0x6010e870 +1.13209342e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1611720819 { 0x6010e873 +1.13209378e65 } : BV:32
=counter_example.random_seed
3630811409
=counter_example_end
=global nodece 71 num_edges_traversed 1
=global nodece 71 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 72
=global nodece 72 nodece z3.ce11847.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3.ce11847 e21625b38d944bf565557657eefb
=input.spec-%var-x-1
1 : Lambda28056 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28059 : BV:32
18 : Lambda28057 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28058 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
66 : eq(61, 65) : BOOL
67 : 97 { 0x61 } : BV:8
68 : eq(61, 59) : BOOL
69 : 58 { 0x3a } : BV:8
70 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
71 : eq(61, 70) : BOOL
72 : 245 { 0xf5 -11 } : BV:8
73 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
74 : eq(61, 73) : BOOL
75 : 38 { 0x26 } : BV:8
76 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
77 : eq(61, 76) : BOOL
78 : 205 { 0xcd -51 } : BV:8
79 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
80 : eq(61, 79) : BOOL
81 : 223 { 0xdf -33 } : BV:8
82 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
83 : eq(61, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 713039424 { 0x2a801e40 +1.92315e214 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 713039425 { 0x2a801e41 +1.92327e214 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1277945765 { 0x4c2be7a5 +1.34300673e25 } : BV:32
=input.dst.llvm-%x
1 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
=input.dst.llvm-%n
1 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
=input.dst.llvm-%m
1 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 872415227 ] -> 0, [ 872415228; 872415228 ] -> 4, [ 872415229; 872415229 ] -> 97, [ 872415230; 872415230 ] -> 38, [ 872415231; 872415231 ] -> 205, [ 872415232; 2315224827 ] -> 0, [ 2315224828; 2315224828 ] -> 245, [ 2315224829; 2315224829 ] -> 255, [ 2315224830; 2315224830 ] -> 223, [ 2315224831; 2315224831 ] -> 58, [ 2315224832; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1611720815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1611720816; 1611720819 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1611720820; 2685522147 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2685522148; 2685522151 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2685522152; 3262340223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3262340224; 3262340227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3262340228; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3262340224 { 0xc2735c80 -1032627072 -1.90126037e5 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1611720816 { 0x6010e870 +1.13209342e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2685522148 { 0xa011d0e4 -1609445148 -1.13918733e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28063 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28066 : BV:32
18 : Lambda28064 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28065 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
85 : eq(80, 84) : BOOL
86 : 97 { 0x61 } : BV:8
87 : eq(80, 78) : BOOL
88 : 58 { 0x3a } : BV:8
89 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
90 : eq(80, 89) : BOOL
91 : 245 { 0xf5 -11 } : BV:8
92 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
93 : eq(80, 92) : BOOL
94 : 38 { 0x26 } : BV:8
95 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
96 : eq(80, 95) : BOOL
97 : 205 { 0xcd -51 } : BV:8
98 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
99 : eq(80, 98) : BOOL
100 : 223 { 0xdf -33 } : BV:8
101 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
102 : eq(80, 101) : BOOL
103 : 255 { 0xff -1 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda28060 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28061 : BV:32
7 : 1869305803 { 0x6f6b57cb +1.83861672e95 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda28068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28069 : BV:32
18 : 713039425 { 0x2a801e41 +1.92327e214 } : BV:32
19 : eq(17, 18) : BOOL
20 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3441844484 { 0xcd266104 -853122812 -1.29983568e27 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
31 : eq(26, 30) : BOOL
32 : 97 { 0x61 } : BV:8
33 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
34 : eq(26, 33) : BOOL
35 : 58 { 0x3a } : BV:8
36 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
37 : eq(26, 36) : BOOL
38 : 245 { 0xf5 -11 } : BV:8
39 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
40 : eq(26, 39) : BOOL
41 : 38 { 0x26 } : BV:8
42 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
43 : eq(26, 42) : BOOL
44 : 205 { 0xcd -51 } : BV:8
45 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
46 : eq(26, 45) : BOOL
47 : 223 { 0xdf -33 } : BV:8
48 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
49 : eq(26, 48) : BOOL
50 : 255 { 0xff -1 } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 713039424 { 0x2a801e40 +1.92315e214 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 948182272 ] -> true, [ 948182273; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 948182272 ] -> true, [ 948182273; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda28026 : BV:32
2 : Lambda28027 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda28031 : BV:32
2 : Lambda28032 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
58 : eq(53, 57) : BOOL
59 : 97 { 0x61 } : BV:8
60 : eq(53, 51) : BOOL
61 : 58 { 0x3a } : BV:8
62 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
63 : eq(53, 62) : BOOL
64 : 245 { 0xf5 -11 } : BV:8
65 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
66 : eq(53, 65) : BOOL
67 : 38 { 0x26 } : BV:8
68 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
69 : eq(53, 68) : BOOL
70 : 205 { 0xcd -51 } : BV:8
71 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
72 : eq(53, 71) : BOOL
73 : 223 { 0xdf -33 } : BV:8
74 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
75 : eq(53, 74) : BOOL
76 : 255 { 0xff -1 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda28035 : BV:32
2 : Lambda28036 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 948182273 { 0x38841d01 +1.3213512e242 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1686379521 { 0x64841c01 +1.3210461e74 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1686379522 { 0x64841c02 +1.3210473e74 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1686379523 { 0x64841c03 +1.3210484e74 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda28033 : BV:32
2 : Lambda28034 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
17 : eq(12, 16) : BOOL
18 : 97 { 0x61 } : BV:8
19 : eq(12, 10) : BOOL
20 : 58 { 0x3a } : BV:8
21 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
22 : eq(12, 21) : BOOL
23 : 245 { 0xf5 -11 } : BV:8
24 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
25 : eq(12, 24) : BOOL
26 : 38 { 0x26 } : BV:8
27 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
28 : eq(12, 27) : BOOL
29 : 205 { 0xcd -51 } : BV:8
30 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
31 : eq(12, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
34 : eq(12, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1686379521 ] -> true, [ 1686379522; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda28042 : BV:32
2 : 713039425 { 0x2a801e41 +1.92327e214 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 948182272 { 0x38841d00 +1.3213500e242 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3441844484 { 0xcd266104 -853122812 -1.29983568e27 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 872415228 { 0x33fffffc +1.99999952e232 } : BV:32
13 : eq(11, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 872415229 { 0x33fffffd +1.99999964e232 } : BV:32
16 : eq(11, 15) : BOOL
17 : 97 { 0x61 } : BV:8
18 : 2315224831 { 0x89ff86ff -1979742465 -1.99630725e148 } : BV:32
19 : eq(11, 18) : BOOL
20 : 58 { 0x3a } : BV:8
21 : 2315224828 { 0x89ff86fc -1979742468 -1.99630689e148 } : BV:32
22 : eq(11, 21) : BOOL
23 : 245 { 0xf5 -11 } : BV:8
24 : 872415230 { 0x33fffffe +1.99999976e232 } : BV:32
25 : eq(11, 24) : BOOL
26 : 38 { 0x26 } : BV:8
27 : 872415231 { 0x33ffffff +1.99999988e232 } : BV:32
28 : eq(11, 27) : BOOL
29 : 205 { 0xcd -51 } : BV:8
30 : 2315224830 { 0x89ff86fe -1979742466 -1.99630713e148 } : BV:32
31 : eq(11, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2315224829 { 0x89ff86fd -1979742467 -1.99630701e148 } : BV:32
34 : eq(11, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 713039424 { 0x2a801e40 +1.92315e214 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 948182274 { 0x38841d02 +1.3213524e242 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1576545323 { 0x5df82c2b +1.93884789e60 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2685522148 { 0xa011d0e4 -1609445148 -1.13918733e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2685522151 { 0xa011d0e7 -1609445145 -1.13918769e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3262340224 { 0xc2735c80 -1032627072 -1.90126037e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3262340227 { 0xc2735c83 -1032627069 -1.90126073e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1611720816 { 0x6010e870 +1.13209342e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1611720819 { 0x6010e873 +1.13209378e65 } : BV:32
=counter_example.random_seed
3630811409
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 73
=global nodece 73 nodece z3.ce11858.num_edges_traversed1
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3.ce11858 1b53a3566ddf31ee90129ec6b72c691c
=input.spec-%var-x-1
1 : Lambda28375 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28378 : BV:32
18 : Lambda28376 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28377 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 40 { 0x28 } : BV:8
65 : eq(61, 59) : BOOL
66 : 111 { 0x6f } : BV:8
67 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
68 : eq(61, 67) : BOOL
69 : 251 { 0xfb -5 } : BV:8
70 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 204 { 0xcc -52 } : BV:8
73 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 94 { 0x5e } : BV:8
76 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
77 : eq(61, 76) : BOOL
78 : 214 { 0xd6 -42 } : BV:8
79 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
80 : eq(61, 79) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(63, 64, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 59) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 62) : BOOL
107 : eq(105, 59) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 64, 118) : BV:8
120 : bvadd(67, 60) : BV:32
121 : eq(120, 62) : BOOL
122 : eq(120, 59) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 64, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 62) : BOOL
138 : eq(136, 59) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 64, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 62) : BOOL
154 : eq(152, 59) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 64, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 62) : BOOL
170 : eq(168, 59) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 64, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 62) : BOOL
185 : eq(183, 59) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 64, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 8953921 { 0x88a041 +1.6739056e130 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 8953922 { 0x88a042 +1.6739068e130 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 480304852 { 0x1ca0ded4 +1.25680017e186 } : BV:32
=input.dst.llvm-%x
1 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
=input.dst.llvm-%n
1 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
=input.dst.llvm-%m
1 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2111667959 ] -> 0, [ 2111667960; 2111667960 ] -> 251, [ 2111667961; 2111667961 ] -> 255, [ 2111667962; 2111667962 ] -> 214, [ 2111667963; 2111667963 ] -> 111, [ 2111667964; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 40, [ 2147483646; 2147483646 ] -> 204, [ 2147483647; 2147483647 ] -> 94, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1198074451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1198074452; 1198074455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1198074456; 3259642903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3259642904; 3259642907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3259642908; 3590250231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3590250232; 3590250235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3590250236; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1198074452 { 0x47692a54 +1.82160425e15 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3590250232 { 0xd5fedef8 -704717064 -1.99117946e44 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3259642904 { 0xc24a3418 -1035324392 -1.57971477e5 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28382 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28385 : BV:32
18 : Lambda28383 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28384 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 40 { 0x28 } : BV:8
84 : eq(80, 78) : BOOL
85 : 111 { 0x6f } : BV:8
86 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
87 : eq(80, 86) : BOOL
88 : 251 { 0xfb -5 } : BV:8
89 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 204 { 0xcc -52 } : BV:8
92 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 94 { 0x5e } : BV:8
95 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
96 : eq(80, 95) : BOOL
97 : 214 { 0xd6 -42 } : BV:8
98 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
99 : eq(80, 98) : BOOL
100 : 255 { 0xff -1 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(82, 83, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 78) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 83, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 81) : BOOL
126 : eq(124, 78) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 83, 137) : BV:8
139 : bvadd(86, 79) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 78) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 83, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 81) : BOOL
157 : eq(155, 78) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 83, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 81) : BOOL
173 : eq(171, 78) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 83, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 81) : BOOL
189 : eq(187, 78) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 83, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 81) : BOOL
204 : eq(202, 78) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 83, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda28379 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28380 : BV:32
7 : 735673487 { 0x2bd97c8f +1.69911372e216 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda28387 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28388 : BV:32
18 : 8953922 { 0x88a042 +1.6739068e130 } : BV:32
19 : eq(17, 18) : BOOL
20 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1590437888 { 0x5ecc2800 +1.59497070e62 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 40 { 0x28 } : BV:8
30 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
31 : eq(26, 30) : BOOL
32 : 111 { 0x6f } : BV:8
33 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
34 : eq(26, 33) : BOOL
35 : 251 { 0xfb -5 } : BV:8
36 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
37 : eq(26, 36) : BOOL
38 : 204 { 0xcc -52 } : BV:8
39 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
40 : eq(26, 39) : BOOL
41 : 94 { 0x5e } : BV:8
42 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
43 : eq(26, 42) : BOOL
44 : 214 { 0xd6 -42 } : BV:8
45 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
46 : eq(26, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(19, 2, 104) : BV:32
106 : lambda(17, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(16, 106) : MAP[BV:32 -> BV:32]
108 : sym_const(107) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 8953921 { 0x88a041 +1.6739056e130 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 18964487 ] -> true, [ 18964488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 18964487 ] -> true, [ 18964488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda28324 : BV:32
2 : Lambda28325 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda28329 : BV:32
2 : Lambda28330 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 40 { 0x28 } : BV:8
57 : eq(53, 51) : BOOL
58 : 111 { 0x6f } : BV:8
59 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
60 : eq(53, 59) : BOOL
61 : 251 { 0xfb -5 } : BV:8
62 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 204 { 0xcc -52 } : BV:8
65 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 94 { 0x5e } : BV:8
68 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
69 : eq(53, 68) : BOOL
70 : 214 { 0xd6 -42 } : BV:8
71 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
72 : eq(53, 71) : BOOL
73 : 255 { 0xff -1 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 51) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 54) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 56, 110) : BV:8
112 : bvadd(59, 52) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 51) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 56, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 54) : BOOL
130 : eq(128, 51) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 56, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 54) : BOOL
146 : eq(144, 51) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 56, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 54) : BOOL
162 : eq(160, 51) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 56, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 54) : BOOL
177 : eq(175, 51) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 56, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda28333 : BV:32
2 : Lambda28334 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda28331 : BV:32
2 : Lambda28332 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 40 { 0x28 } : BV:8
16 : eq(12, 10) : BOOL
17 : 111 { 0x6f } : BV:8
18 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
19 : eq(12, 18) : BOOL
20 : 251 { 0xfb -5 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 204 { 0xcc -52 } : BV:8
24 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
28 : eq(12, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
31 : eq(12, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1074077704 ] -> true, [ 1074077705; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda28340 : BV:32
2 : 8953922 { 0x88a042 +1.6739068e130 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1590437888 { 0x5ecc2800 +1.59497070e62 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 40 { 0x28 } : BV:8
15 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
16 : eq(11, 15) : BOOL
17 : 111 { 0x6f } : BV:8
18 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
19 : eq(11, 18) : BOOL
20 : 251 { 0xfb -5 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 204 { 0xcc -52 } : BV:8
24 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
28 : eq(11, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
31 : eq(11, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8953921 { 0x88a041 +1.6739056e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 963164497 { 0x3968b951 +1.81815540e243 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 1590437888 { 0x5ecc2800 +1.59497070e62 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 75857952 { 0x4858020 +1.4297256e138 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1666295840 { 0x6351a820 +1.63794326e71 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 75857952 { 0x4858020 +1.4297256e138 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 1666295840 { 0x6351a820 +1.63794326e71 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 35815684 { 0x2228104 +1.26956224e133 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 35815684 { 0x2228104 +1.26956224e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3259642904 { 0xc24a3418 -1035324392 -1.57971477e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3259642907 { 0xc24a341b -1035324389 -1.57971513e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1198074452 { 0x47692a54 +1.82160425e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1198074455 { 0x47692a57 +1.82160460e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3590250232 { 0xd5fedef8 -704717064 -1.99117946e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3590250235 { 0xd5fedefb -704717061 -1.99117982e44 } : BV:32
=counter_example.random_seed
3868369617
=counter_example_end
=global nodece 73 num_edges_traversed 1
=global nodece 73 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 74
=global nodece 74 nodece z3.ce11910.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3.ce11910 40ee3cf3e4cc95e7c45c25ba66d70
=input.spec-%var-x-1
1 : Lambda28375 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28378 : BV:32
18 : Lambda28376 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28377 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 40 { 0x28 } : BV:8
65 : eq(61, 59) : BOOL
66 : 111 { 0x6f } : BV:8
67 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
68 : eq(61, 67) : BOOL
69 : 251 { 0xfb -5 } : BV:8
70 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 204 { 0xcc -52 } : BV:8
73 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 94 { 0x5e } : BV:8
76 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
77 : eq(61, 76) : BOOL
78 : 214 { 0xd6 -42 } : BV:8
79 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
80 : eq(61, 79) : BOOL
81 : 255 { 0xff -1 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(71, 72, 85) : BV:8
87 : ite(68, 69, 86) : BV:8
88 : ite(65, 66, 87) : BV:8
89 : ite(63, 64, 88) : BV:8
90 : bvadd(76, 60) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 59) : BOOL
93 : eq(90, 67) : BOOL
94 : eq(90, 70) : BOOL
95 : eq(90, 73) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 72, 100) : BV:8
102 : ite(93, 69, 101) : BV:8
103 : ite(92, 66, 102) : BV:8
104 : ite(91, 64, 103) : BV:8
105 : bvadd(79, 60) : BV:32
106 : eq(105, 62) : BOOL
107 : eq(105, 59) : BOOL
108 : eq(105, 67) : BOOL
109 : eq(105, 70) : BOOL
110 : eq(105, 73) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 72, 115) : BV:8
117 : ite(108, 69, 116) : BV:8
118 : ite(107, 66, 117) : BV:8
119 : ite(106, 64, 118) : BV:8
120 : bvadd(67, 60) : BV:32
121 : eq(120, 62) : BOOL
122 : eq(120, 59) : BOOL
123 : eq(120, 67) : BOOL
124 : eq(120, 70) : BOOL
125 : eq(120, 73) : BOOL
126 : eq(120, 76) : BOOL
127 : eq(120, 79) : BOOL
128 : ite(127, 81, 82) : BV:8
129 : ite(126, 78, 128) : BV:8
130 : ite(125, 75, 129) : BV:8
131 : ite(124, 72, 130) : BV:8
132 : ite(123, 69, 131) : BV:8
133 : ite(122, 66, 132) : BV:8
134 : ite(121, 64, 133) : BV:8
135 : bvconcat(89, 104, 119, 134) : BV:32
136 : bvadd(56, 58, 135) : BV:32
137 : eq(136, 62) : BOOL
138 : eq(136, 59) : BOOL
139 : eq(136, 67) : BOOL
140 : eq(136, 70) : BOOL
141 : eq(136, 73) : BOOL
142 : eq(136, 76) : BOOL
143 : eq(136, 79) : BOOL
144 : ite(143, 81, 82) : BV:8
145 : ite(142, 78, 144) : BV:8
146 : ite(141, 75, 145) : BV:8
147 : ite(140, 72, 146) : BV:8
148 : ite(139, 69, 147) : BV:8
149 : ite(138, 66, 148) : BV:8
150 : ite(137, 64, 149) : BV:8
151 : 2 { 0x2 +1.23e129 } : BV:32
152 : bvadd(151, 58, 135) : BV:32
153 : eq(152, 62) : BOOL
154 : eq(152, 59) : BOOL
155 : eq(152, 67) : BOOL
156 : eq(152, 70) : BOOL
157 : eq(152, 73) : BOOL
158 : eq(152, 76) : BOOL
159 : eq(152, 79) : BOOL
160 : ite(159, 81, 82) : BV:8
161 : ite(158, 78, 160) : BV:8
162 : ite(157, 75, 161) : BV:8
163 : ite(156, 72, 162) : BV:8
164 : ite(155, 69, 163) : BV:8
165 : ite(154, 66, 164) : BV:8
166 : ite(153, 64, 165) : BV:8
167 : 1 { 0x1 +1.11e129 } : BV:32
168 : bvadd(167, 58, 135) : BV:32
169 : eq(168, 62) : BOOL
170 : eq(168, 59) : BOOL
171 : eq(168, 67) : BOOL
172 : eq(168, 70) : BOOL
173 : eq(168, 73) : BOOL
174 : eq(168, 76) : BOOL
175 : eq(168, 79) : BOOL
176 : ite(175, 81, 82) : BV:8
177 : ite(174, 78, 176) : BV:8
178 : ite(173, 75, 177) : BV:8
179 : ite(172, 72, 178) : BV:8
180 : ite(171, 69, 179) : BV:8
181 : ite(170, 66, 180) : BV:8
182 : ite(169, 64, 181) : BV:8
183 : bvadd(58, 135) : BV:32
184 : eq(183, 62) : BOOL
185 : eq(183, 59) : BOOL
186 : eq(183, 67) : BOOL
187 : eq(183, 70) : BOOL
188 : eq(183, 73) : BOOL
189 : eq(183, 76) : BOOL
190 : eq(183, 79) : BOOL
191 : ite(190, 81, 82) : BV:8
192 : ite(189, 78, 191) : BV:8
193 : ite(188, 75, 192) : BV:8
194 : ite(187, 72, 193) : BV:8
195 : ite(186, 69, 194) : BV:8
196 : ite(185, 66, 195) : BV:8
197 : ite(184, 64, 196) : BV:8
198 : bvconcat(150, 166, 182, 197) : BV:32
199 : ite(55, 2, 198) : BV:32
200 : lambda(52, 199) : FUNCTION[BV:32 -> BV:32]
201 : map(51, 200) : MAP[BV:32 -> BV:32]
202 : lambda(17, 201) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
203 : map(16, 202) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
204 : sym_const(203) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 8953921 { 0x88a041 +1.6739056e130 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 8953922 { 0x88a042 +1.6739068e130 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 18964490 { 0x121600a +1.26074337e131 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 480304853 { 0x1ca0ded5 +1.25680029e186 } : BV:32
=input.dst.llvm-%x
1 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
=input.dst.llvm-%n
1 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
=input.dst.llvm-%m
1 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2111667959 ] -> 0, [ 2111667960; 2111667960 ] -> 251, [ 2111667961; 2111667961 ] -> 255, [ 2111667962; 2111667962 ] -> 214, [ 2111667963; 2111667963 ] -> 111, [ 2111667964; 2147483644 ] -> 0, [ 2147483645; 2147483645 ] -> 40, [ 2147483646; 2147483646 ] -> 204, [ 2147483647; 2147483647 ] -> 94, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1198074451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1198074452; 1198074455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1198074456; 3259642903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3259642904; 3259642907 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3259642908; 3590250231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3590250232; 3590250235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3590250236; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1198074452 { 0x47692a54 +1.82160425e15 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3590250232 { 0xd5fedef8 -704717064 -1.99117946e44 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3259642904 { 0xc24a3418 -1035324392 -1.57971477e5 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28382 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28385 : BV:32
18 : Lambda28383 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28384 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 40 { 0x28 } : BV:8
84 : eq(80, 78) : BOOL
85 : 111 { 0x6f } : BV:8
86 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
87 : eq(80, 86) : BOOL
88 : 251 { 0xfb -5 } : BV:8
89 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 204 { 0xcc -52 } : BV:8
92 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 94 { 0x5e } : BV:8
95 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
96 : eq(80, 95) : BOOL
97 : 214 { 0xd6 -42 } : BV:8
98 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
99 : eq(80, 98) : BOOL
100 : 255 { 0xff -1 } : BV:8
101 : 0 { 0x0 } : BV:8
102 : ite(99, 100, 101) : BV:8
103 : ite(96, 97, 102) : BV:8
104 : ite(93, 94, 103) : BV:8
105 : ite(90, 91, 104) : BV:8
106 : ite(87, 88, 105) : BV:8
107 : ite(84, 85, 106) : BV:8
108 : ite(82, 83, 107) : BV:8
109 : bvadd(95, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 78) : BOOL
112 : eq(109, 86) : BOOL
113 : eq(109, 89) : BOOL
114 : eq(109, 92) : BOOL
115 : eq(109, 95) : BOOL
116 : eq(109, 98) : BOOL
117 : ite(116, 100, 101) : BV:8
118 : ite(115, 97, 117) : BV:8
119 : ite(114, 94, 118) : BV:8
120 : ite(113, 91, 119) : BV:8
121 : ite(112, 88, 120) : BV:8
122 : ite(111, 85, 121) : BV:8
123 : ite(110, 83, 122) : BV:8
124 : bvadd(98, 79) : BV:32
125 : eq(124, 81) : BOOL
126 : eq(124, 78) : BOOL
127 : eq(124, 86) : BOOL
128 : eq(124, 89) : BOOL
129 : eq(124, 92) : BOOL
130 : eq(124, 95) : BOOL
131 : eq(124, 98) : BOOL
132 : ite(131, 100, 101) : BV:8
133 : ite(130, 97, 132) : BV:8
134 : ite(129, 94, 133) : BV:8
135 : ite(128, 91, 134) : BV:8
136 : ite(127, 88, 135) : BV:8
137 : ite(126, 85, 136) : BV:8
138 : ite(125, 83, 137) : BV:8
139 : bvadd(86, 79) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 78) : BOOL
142 : eq(139, 86) : BOOL
143 : eq(139, 89) : BOOL
144 : eq(139, 92) : BOOL
145 : eq(139, 95) : BOOL
146 : eq(139, 98) : BOOL
147 : ite(146, 100, 101) : BV:8
148 : ite(145, 97, 147) : BV:8
149 : ite(144, 94, 148) : BV:8
150 : ite(143, 91, 149) : BV:8
151 : ite(142, 88, 150) : BV:8
152 : ite(141, 85, 151) : BV:8
153 : ite(140, 83, 152) : BV:8
154 : bvconcat(108, 123, 138, 153) : BV:32
155 : bvadd(75, 77, 154) : BV:32
156 : eq(155, 81) : BOOL
157 : eq(155, 78) : BOOL
158 : eq(155, 86) : BOOL
159 : eq(155, 89) : BOOL
160 : eq(155, 92) : BOOL
161 : eq(155, 95) : BOOL
162 : eq(155, 98) : BOOL
163 : ite(162, 100, 101) : BV:8
164 : ite(161, 97, 163) : BV:8
165 : ite(160, 94, 164) : BV:8
166 : ite(159, 91, 165) : BV:8
167 : ite(158, 88, 166) : BV:8
168 : ite(157, 85, 167) : BV:8
169 : ite(156, 83, 168) : BV:8
170 : 2 { 0x2 +1.23e129 } : BV:32
171 : bvadd(170, 77, 154) : BV:32
172 : eq(171, 81) : BOOL
173 : eq(171, 78) : BOOL
174 : eq(171, 86) : BOOL
175 : eq(171, 89) : BOOL
176 : eq(171, 92) : BOOL
177 : eq(171, 95) : BOOL
178 : eq(171, 98) : BOOL
179 : ite(178, 100, 101) : BV:8
180 : ite(177, 97, 179) : BV:8
181 : ite(176, 94, 180) : BV:8
182 : ite(175, 91, 181) : BV:8
183 : ite(174, 88, 182) : BV:8
184 : ite(173, 85, 183) : BV:8
185 : ite(172, 83, 184) : BV:8
186 : 1 { 0x1 +1.11e129 } : BV:32
187 : bvadd(186, 77, 154) : BV:32
188 : eq(187, 81) : BOOL
189 : eq(187, 78) : BOOL
190 : eq(187, 86) : BOOL
191 : eq(187, 89) : BOOL
192 : eq(187, 92) : BOOL
193 : eq(187, 95) : BOOL
194 : eq(187, 98) : BOOL
195 : ite(194, 100, 101) : BV:8
196 : ite(193, 97, 195) : BV:8
197 : ite(192, 94, 196) : BV:8
198 : ite(191, 91, 197) : BV:8
199 : ite(190, 88, 198) : BV:8
200 : ite(189, 85, 199) : BV:8
201 : ite(188, 83, 200) : BV:8
202 : bvadd(77, 154) : BV:32
203 : eq(202, 81) : BOOL
204 : eq(202, 78) : BOOL
205 : eq(202, 86) : BOOL
206 : eq(202, 89) : BOOL
207 : eq(202, 92) : BOOL
208 : eq(202, 95) : BOOL
209 : eq(202, 98) : BOOL
210 : ite(209, 100, 101) : BV:8
211 : ite(208, 97, 210) : BV:8
212 : ite(207, 94, 211) : BV:8
213 : ite(206, 91, 212) : BV:8
214 : ite(205, 88, 213) : BV:8
215 : ite(204, 85, 214) : BV:8
216 : ite(203, 83, 215) : BV:8
217 : bvconcat(169, 185, 201, 216) : BV:32
218 : ite(55, 2, 217) : BV:32
219 : ite(74, 217, 218) : BV:32
220 : ite(55, 2, 219) : BV:32
221 : lambda(52, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(51, 221) : MAP[BV:32 -> BV:32]
223 : lambda(17, 222) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
224 : map(16, 223) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
225 : sym_const(224) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda28379 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28380 : BV:32
7 : 735673487 { 0x2bd97c8f +1.69911372e216 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda28387 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28388 : BV:32
18 : 8953922 { 0x88a042 +1.6739068e130 } : BV:32
19 : eq(17, 18) : BOOL
20 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 1590437888 { 0x5ecc2800 +1.59497070e62 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 40 { 0x28 } : BV:8
30 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
31 : eq(26, 30) : BOOL
32 : 111 { 0x6f } : BV:8
33 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
34 : eq(26, 33) : BOOL
35 : 251 { 0xfb -5 } : BV:8
36 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
37 : eq(26, 36) : BOOL
38 : 204 { 0xcc -52 } : BV:8
39 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
40 : eq(26, 39) : BOOL
41 : 94 { 0x5e } : BV:8
42 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
43 : eq(26, 42) : BOOL
44 : 214 { 0xd6 -42 } : BV:8
45 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
46 : eq(26, 45) : BOOL
47 : 255 { 0xff -1 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 24, 25) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : eq(57, 33) : BOOL
61 : eq(57, 36) : BOOL
62 : eq(57, 39) : BOOL
63 : eq(57, 42) : BOOL
64 : eq(57, 45) : BOOL
65 : ite(64, 47, 48) : BV:8
66 : ite(63, 44, 65) : BV:8
67 : ite(62, 41, 66) : BV:8
68 : ite(61, 38, 67) : BV:8
69 : ite(60, 35, 68) : BV:8
70 : ite(59, 32, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : bvadd(72, 24, 25) : BV:32
74 : eq(73, 27) : BOOL
75 : eq(73, 30) : BOOL
76 : eq(73, 33) : BOOL
77 : eq(73, 36) : BOOL
78 : eq(73, 39) : BOOL
79 : eq(73, 42) : BOOL
80 : eq(73, 45) : BOOL
81 : ite(80, 47, 48) : BV:8
82 : ite(79, 44, 81) : BV:8
83 : ite(78, 41, 82) : BV:8
84 : ite(77, 38, 83) : BV:8
85 : ite(76, 35, 84) : BV:8
86 : ite(75, 32, 85) : BV:8
87 : ite(74, 29, 86) : BV:8
88 : bvadd(24, 25) : BV:32
89 : eq(88, 27) : BOOL
90 : eq(88, 30) : BOOL
91 : eq(88, 33) : BOOL
92 : eq(88, 36) : BOOL
93 : eq(88, 39) : BOOL
94 : eq(88, 42) : BOOL
95 : eq(88, 45) : BOOL
96 : ite(95, 47, 48) : BV:8
97 : ite(94, 44, 96) : BV:8
98 : ite(93, 41, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 35, 99) : BV:8
101 : ite(90, 32, 100) : BV:8
102 : ite(89, 29, 101) : BV:8
103 : bvconcat(55, 71, 87, 102) : BV:32
104 : ite(21, 2, 103) : BV:32
105 : ite(19, 2, 104) : BV:32
106 : lambda(17, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(16, 106) : MAP[BV:32 -> BV:32]
108 : sym_const(107) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 8953921 { 0x88a041 +1.6739056e130 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 18964487 ] -> true, [ 18964488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 18964487 ] -> true, [ 18964488; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda28324 : BV:32
2 : Lambda28325 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda28329 : BV:32
2 : Lambda28330 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 40 { 0x28 } : BV:8
57 : eq(53, 51) : BOOL
58 : 111 { 0x6f } : BV:8
59 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
60 : eq(53, 59) : BOOL
61 : 251 { 0xfb -5 } : BV:8
62 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 204 { 0xcc -52 } : BV:8
65 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 94 { 0x5e } : BV:8
68 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
69 : eq(53, 68) : BOOL
70 : 214 { 0xd6 -42 } : BV:8
71 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
72 : eq(53, 71) : BOOL
73 : 255 { 0xff -1 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : ite(60, 61, 78) : BV:8
80 : ite(57, 58, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : bvadd(68, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 51) : BOOL
85 : eq(82, 59) : BOOL
86 : eq(82, 62) : BOOL
87 : eq(82, 65) : BOOL
88 : eq(82, 68) : BOOL
89 : eq(82, 71) : BOOL
90 : ite(89, 73, 74) : BV:8
91 : ite(88, 70, 90) : BV:8
92 : ite(87, 67, 91) : BV:8
93 : ite(86, 64, 92) : BV:8
94 : ite(85, 61, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : bvadd(71, 52) : BV:32
98 : eq(97, 54) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : eq(97, 65) : BOOL
103 : eq(97, 68) : BOOL
104 : eq(97, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : ite(100, 61, 108) : BV:8
110 : ite(99, 58, 109) : BV:8
111 : ite(98, 56, 110) : BV:8
112 : bvadd(59, 52) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 51) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 62) : BOOL
117 : eq(112, 65) : BOOL
118 : eq(112, 68) : BOOL
119 : eq(112, 71) : BOOL
120 : ite(119, 73, 74) : BV:8
121 : ite(118, 70, 120) : BV:8
122 : ite(117, 67, 121) : BV:8
123 : ite(116, 64, 122) : BV:8
124 : ite(115, 61, 123) : BV:8
125 : ite(114, 58, 124) : BV:8
126 : ite(113, 56, 125) : BV:8
127 : bvconcat(81, 96, 111, 126) : BV:32
128 : bvadd(48, 50, 127) : BV:32
129 : eq(128, 54) : BOOL
130 : eq(128, 51) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 62) : BOOL
133 : eq(128, 65) : BOOL
134 : eq(128, 68) : BOOL
135 : eq(128, 71) : BOOL
136 : ite(135, 73, 74) : BV:8
137 : ite(134, 70, 136) : BV:8
138 : ite(133, 67, 137) : BV:8
139 : ite(132, 64, 138) : BV:8
140 : ite(131, 61, 139) : BV:8
141 : ite(130, 58, 140) : BV:8
142 : ite(129, 56, 141) : BV:8
143 : 2 { 0x2 +1.23e129 } : BV:32
144 : bvadd(143, 50, 127) : BV:32
145 : eq(144, 54) : BOOL
146 : eq(144, 51) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 62) : BOOL
149 : eq(144, 65) : BOOL
150 : eq(144, 68) : BOOL
151 : eq(144, 71) : BOOL
152 : ite(151, 73, 74) : BV:8
153 : ite(150, 70, 152) : BV:8
154 : ite(149, 67, 153) : BV:8
155 : ite(148, 64, 154) : BV:8
156 : ite(147, 61, 155) : BV:8
157 : ite(146, 58, 156) : BV:8
158 : ite(145, 56, 157) : BV:8
159 : 1 { 0x1 +1.11e129 } : BV:32
160 : bvadd(159, 50, 127) : BV:32
161 : eq(160, 54) : BOOL
162 : eq(160, 51) : BOOL
163 : eq(160, 59) : BOOL
164 : eq(160, 62) : BOOL
165 : eq(160, 65) : BOOL
166 : eq(160, 68) : BOOL
167 : eq(160, 71) : BOOL
168 : ite(167, 73, 74) : BV:8
169 : ite(166, 70, 168) : BV:8
170 : ite(165, 67, 169) : BV:8
171 : ite(164, 64, 170) : BV:8
172 : ite(163, 61, 171) : BV:8
173 : ite(162, 58, 172) : BV:8
174 : ite(161, 56, 173) : BV:8
175 : bvadd(50, 127) : BV:32
176 : eq(175, 54) : BOOL
177 : eq(175, 51) : BOOL
178 : eq(175, 59) : BOOL
179 : eq(175, 62) : BOOL
180 : eq(175, 65) : BOOL
181 : eq(175, 68) : BOOL
182 : eq(175, 71) : BOOL
183 : ite(182, 73, 74) : BV:8
184 : ite(181, 70, 183) : BV:8
185 : ite(180, 67, 184) : BV:8
186 : ite(179, 64, 185) : BV:8
187 : ite(178, 61, 186) : BV:8
188 : ite(177, 58, 187) : BV:8
189 : ite(176, 56, 188) : BV:8
190 : bvconcat(142, 158, 174, 189) : BV:32
191 : ite(6, 3, 190) : BV:32
192 : ite(47, 190, 191) : BV:32
193 : ite(6, 3, 192) : BV:32
194 : lambda(1, 2, 193) : FUNCTION[BV:32,BV:32 -> BV:32]
195 : sym_const(194) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda28333 : BV:32
2 : Lambda28334 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 18964487 { 0x1216007 +1.26074302e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 18964489 { 0x1216009 +1.26074326e131 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1074077704 { 0x40052008 +1.4004001e1 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1074077706 { 0x4005200a +1.4004025e1 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 1074077705 { 0x40052009 +1.4004013e1 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda28331 : BV:32
2 : Lambda28332 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 40 { 0x28 } : BV:8
16 : eq(12, 10) : BOOL
17 : 111 { 0x6f } : BV:8
18 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
19 : eq(12, 18) : BOOL
20 : 251 { 0xfb -5 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 204 { 0xcc -52 } : BV:8
24 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
28 : eq(12, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
31 : eq(12, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(14, 15, 39) : BV:8
41 : bvadd(27, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 10) : BOOL
44 : eq(41, 18) : BOOL
45 : eq(41, 21) : BOOL
46 : eq(41, 24) : BOOL
47 : eq(41, 27) : BOOL
48 : eq(41, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 26, 50) : BV:8
52 : ite(45, 23, 51) : BV:8
53 : ite(44, 20, 52) : BV:8
54 : ite(43, 17, 53) : BV:8
55 : ite(42, 15, 54) : BV:8
56 : bvadd(30, 11) : BV:32
57 : eq(56, 13) : BOOL
58 : eq(56, 10) : BOOL
59 : eq(56, 18) : BOOL
60 : eq(56, 21) : BOOL
61 : eq(56, 24) : BOOL
62 : eq(56, 27) : BOOL
63 : eq(56, 30) : BOOL
64 : ite(63, 32, 33) : BV:8
65 : ite(62, 29, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 23, 66) : BV:8
68 : ite(59, 20, 67) : BV:8
69 : ite(58, 17, 68) : BV:8
70 : ite(57, 15, 69) : BV:8
71 : bvadd(18, 11) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 10) : BOOL
74 : eq(71, 18) : BOOL
75 : eq(71, 21) : BOOL
76 : eq(71, 24) : BOOL
77 : eq(71, 27) : BOOL
78 : eq(71, 30) : BOOL
79 : ite(78, 32, 33) : BV:8
80 : ite(77, 29, 79) : BV:8
81 : ite(76, 26, 80) : BV:8
82 : ite(75, 23, 81) : BV:8
83 : ite(74, 20, 82) : BV:8
84 : ite(73, 17, 83) : BV:8
85 : ite(72, 15, 84) : BV:8
86 : bvconcat(40, 55, 70, 85) : BV:32
87 : bvadd(7, 9, 86) : BV:32
88 : eq(87, 13) : BOOL
89 : eq(87, 10) : BOOL
90 : eq(87, 18) : BOOL
91 : eq(87, 21) : BOOL
92 : eq(87, 24) : BOOL
93 : eq(87, 27) : BOOL
94 : eq(87, 30) : BOOL
95 : ite(94, 32, 33) : BV:8
96 : ite(93, 29, 95) : BV:8
97 : ite(92, 26, 96) : BV:8
98 : ite(91, 23, 97) : BV:8
99 : ite(90, 20, 98) : BV:8
100 : ite(89, 17, 99) : BV:8
101 : ite(88, 15, 100) : BV:8
102 : 2 { 0x2 +1.23e129 } : BV:32
103 : bvadd(102, 9, 86) : BV:32
104 : eq(103, 13) : BOOL
105 : eq(103, 10) : BOOL
106 : eq(103, 18) : BOOL
107 : eq(103, 21) : BOOL
108 : eq(103, 24) : BOOL
109 : eq(103, 27) : BOOL
110 : eq(103, 30) : BOOL
111 : ite(110, 32, 33) : BV:8
112 : ite(109, 29, 111) : BV:8
113 : ite(108, 26, 112) : BV:8
114 : ite(107, 23, 113) : BV:8
115 : ite(106, 20, 114) : BV:8
116 : ite(105, 17, 115) : BV:8
117 : ite(104, 15, 116) : BV:8
118 : 1 { 0x1 +1.11e129 } : BV:32
119 : bvadd(118, 9, 86) : BV:32
120 : eq(119, 13) : BOOL
121 : eq(119, 10) : BOOL
122 : eq(119, 18) : BOOL
123 : eq(119, 21) : BOOL
124 : eq(119, 24) : BOOL
125 : eq(119, 27) : BOOL
126 : eq(119, 30) : BOOL
127 : ite(126, 32, 33) : BV:8
128 : ite(125, 29, 127) : BV:8
129 : ite(124, 26, 128) : BV:8
130 : ite(123, 23, 129) : BV:8
131 : ite(122, 20, 130) : BV:8
132 : ite(121, 17, 131) : BV:8
133 : ite(120, 15, 132) : BV:8
134 : bvadd(9, 86) : BV:32
135 : eq(134, 13) : BOOL
136 : eq(134, 10) : BOOL
137 : eq(134, 18) : BOOL
138 : eq(134, 21) : BOOL
139 : eq(134, 24) : BOOL
140 : eq(134, 27) : BOOL
141 : eq(134, 30) : BOOL
142 : ite(141, 32, 33) : BV:8
143 : ite(140, 29, 142) : BV:8
144 : ite(139, 26, 143) : BV:8
145 : ite(138, 23, 144) : BV:8
146 : ite(137, 20, 145) : BV:8
147 : ite(136, 17, 146) : BV:8
148 : ite(135, 15, 147) : BV:8
149 : bvconcat(101, 117, 133, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1074077704 ] -> true, [ 1074077705; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda28340 : BV:32
2 : 8953922 { 0x88a042 +1.6739068e130 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 18964488 { 0x1216008 +1.26074314e131 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 1590437888 { 0x5ecc2800 +1.59497070e62 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 40 { 0x28 } : BV:8
15 : 2111667963 { 0x7ddd7efb +1.73043763e124 } : BV:32
16 : eq(11, 15) : BOOL
17 : 111 { 0x6f } : BV:8
18 : 2111667960 { 0x7ddd7ef8 +1.73043727e124 } : BV:32
19 : eq(11, 18) : BOOL
20 : 251 { 0xfb -5 } : BV:8
21 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
22 : eq(11, 21) : BOOL
23 : 204 { 0xcc -52 } : BV:8
24 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 94 { 0x5e } : BV:8
27 : 2111667962 { 0x7ddd7efa +1.73043751e124 } : BV:32
28 : eq(11, 27) : BOOL
29 : 214 { 0xd6 -42 } : BV:8
30 : 2111667961 { 0x7ddd7ef9 +1.73043739e124 } : BV:32
31 : eq(11, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 9, 10) : BV:32
43 : eq(42, 12) : BOOL
44 : eq(42, 15) : BOOL
45 : eq(42, 18) : BOOL
46 : eq(42, 21) : BOOL
47 : eq(42, 24) : BOOL
48 : eq(42, 27) : BOOL
49 : eq(42, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : ite(46, 23, 52) : BV:8
54 : ite(45, 20, 53) : BV:8
55 : ite(44, 17, 54) : BV:8
56 : ite(43, 14, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 9, 10) : BV:32
59 : eq(58, 12) : BOOL
60 : eq(58, 15) : BOOL
61 : eq(58, 18) : BOOL
62 : eq(58, 21) : BOOL
63 : eq(58, 24) : BOOL
64 : eq(58, 27) : BOOL
65 : eq(58, 30) : BOOL
66 : ite(65, 32, 33) : BV:8
67 : ite(64, 29, 66) : BV:8
68 : ite(63, 26, 67) : BV:8
69 : ite(62, 23, 68) : BV:8
70 : ite(61, 20, 69) : BV:8
71 : ite(60, 17, 70) : BV:8
72 : ite(59, 14, 71) : BV:8
73 : bvadd(9, 10) : BV:32
74 : eq(73, 12) : BOOL
75 : eq(73, 15) : BOOL
76 : eq(73, 18) : BOOL
77 : eq(73, 21) : BOOL
78 : eq(73, 24) : BOOL
79 : eq(73, 27) : BOOL
80 : eq(73, 30) : BOOL
81 : ite(80, 32, 33) : BV:8
82 : ite(79, 29, 81) : BV:8
83 : ite(78, 26, 82) : BV:8
84 : ite(77, 23, 83) : BV:8
85 : ite(76, 20, 84) : BV:8
86 : ite(75, 17, 85) : BV:8
87 : ite(74, 14, 86) : BV:8
88 : bvconcat(40, 56, 72, 87) : BV:32
89 : ite(6, 4, 88) : BV:32
90 : ite(3, 4, 89) : BV:32
91 : lambda(1, 90) : FUNCTION[BV:32 -> BV:32]
92 : sym_const(91) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8953921 { 0x88a041 +1.6739056e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 18964490 { 0x121600a +1.26074337e131 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 963164498 { 0x3968b952 +1.81815552e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3259642904 { 0xc24a3418 -1035324392 -1.57971477e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3259642907 { 0xc24a341b -1035324389 -1.57971513e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1198074452 { 0x47692a54 +1.82160425e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1198074455 { 0x47692a57 +1.82160460e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3590250232 { 0xd5fedef8 -704717064 -1.99117946e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3590250235 { 0xd5fedefb -704717061 -1.99117982e44 } : BV:32
=counter_example.random_seed
3868369617
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 75
=global nodece 75 nodece z3v487.ce11952.num_edges_traversed1
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3v487.ce11952 1a34f1da9cbf7246c0c28d72bf306caf
=input.spec-%var-x-1
1 : Lambda28977 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28980 : BV:32
18 : Lambda28978 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1146384337 { 0x44546fd1 +1.65966236e9 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1146384339 { 0x44546fd3 +1.65966260e9 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28979 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 2 { 0x2 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : 2 { 0x2 +1.23e129 } : BV:32
66 : bvadd(65, 59) : BV:32
67 : eq(66, 2) : BOOL
68 : ite(67, 62, 63) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 59) : BV:32
71 : eq(70, 2) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : eq(59, 2) : BOOL
74 : ite(73, 62, 63) : BV:8
75 : bvconcat(64, 68, 72, 74) : BV:32
76 : bvadd(56, 58, 75) : BV:32
77 : eq(76, 2) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : bvadd(65, 58, 75) : BV:32
80 : eq(79, 2) : BOOL
81 : ite(80, 62, 63) : BV:8
82 : bvadd(69, 58, 75) : BV:32
83 : eq(82, 2) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : bvadd(58, 75) : BV:32
86 : eq(85, 2) : BOOL
87 : ite(86, 62, 63) : BV:8
88 : bvconcat(78, 81, 84, 87) : BV:32
89 : ite(55, 2, 88) : BV:32
90 : lambda(52, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(51, 90) : MAP[BV:32 -> BV:32]
92 : lambda(17, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(16, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2912; 2915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2916; 11987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 11988; 11991 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 11992; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2912 { 0xb60 +1.34713e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 11988 { 0x2ed4 +1.142908e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28987 : BV:32
18 : Lambda28985 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1146384337 { 0x44546fd1 +1.65966236e9 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1146384339 { 0x44546fd3 +1.65966260e9 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda28986 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : 2 { 0x2 +1.23e129 } : BV:32
85 : bvadd(84, 78) : BV:32
86 : eq(85, 2) : BOOL
87 : ite(86, 81, 82) : BV:8
88 : 1 { 0x1 +1.11e129 } : BV:32
89 : bvadd(88, 78) : BV:32
90 : eq(89, 2) : BOOL
91 : ite(90, 81, 82) : BV:8
92 : eq(78, 2) : BOOL
93 : ite(92, 81, 82) : BV:8
94 : bvconcat(83, 87, 91, 93) : BV:32
95 : bvadd(75, 77, 94) : BV:32
96 : eq(95, 2) : BOOL
97 : ite(96, 81, 82) : BV:8
98 : bvadd(84, 77, 94) : BV:32
99 : eq(98, 2) : BOOL
100 : ite(99, 81, 82) : BV:8
101 : bvadd(88, 77, 94) : BV:32
102 : eq(101, 2) : BOOL
103 : ite(102, 81, 82) : BV:8
104 : bvadd(77, 94) : BV:32
105 : eq(104, 2) : BOOL
106 : ite(105, 81, 82) : BV:8
107 : bvconcat(97, 100, 103, 106) : BV:32
108 : ite(55, 2, 107) : BV:32
109 : ite(74, 107, 108) : BV:32
110 : ite(55, 2, 109) : BV:32
111 : lambda(52, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(51, 111) : MAP[BV:32 -> BV:32]
113 : lambda(17, 112) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
114 : map(16, 113) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
115 : sym_const(114) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda28981 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28982 : BV:32
7 : 933799814 { 0x37a8a786 +1.31761240e240 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 331586841 { 0x13c39d19 +1.52823173e168 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda28988 : BV:32
2 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : bvule(2, 1) : BOOL
6 : not(5) : BOOL
7 : ite(3, 4, 6) : BOOL
8 : lambda(1, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda28989 : BV:32
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 9) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : bvadd(10, 12, 13) : BV:32
15 : eq(14, 13) : BOOL
16 : 2 { 0x2 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 12, 13) : BV:32
21 : eq(20, 13) : BOOL
22 : ite(21, 16, 17) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 12, 13) : BV:32
25 : eq(24, 13) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : bvadd(12, 13) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : bvconcat(18, 22, 26, 29) : BV:32
31 : lambda(9, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(8, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1610612735 { 0x5fffffff +1.99999988e64 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda28949 : BV:32
2 : Lambda28950 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1146384337 { 0x44546fd1 +1.65966236e9 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1146384339 { 0x44546fd3 +1.65966260e9 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda28954 : BV:32
2 : Lambda28955 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1146384337 { 0x44546fd1 +1.65966236e9 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1146384339 { 0x44546fd3 +1.65966260e9 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 2 { 0x2 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 51) : BV:32
59 : eq(58, 3) : BOOL
60 : ite(59, 54, 55) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 51) : BV:32
63 : eq(62, 3) : BOOL
64 : ite(63, 54, 55) : BV:8
65 : eq(51, 3) : BOOL
66 : ite(65, 54, 55) : BV:8
67 : bvconcat(56, 60, 64, 66) : BV:32
68 : bvadd(48, 50, 67) : BV:32
69 : eq(68, 3) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : bvadd(57, 50, 67) : BV:32
72 : eq(71, 3) : BOOL
73 : ite(72, 54, 55) : BV:8
74 : bvadd(61, 50, 67) : BV:32
75 : eq(74, 3) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : bvadd(50, 67) : BV:32
78 : eq(77, 3) : BOOL
79 : ite(78, 54, 55) : BV:8
80 : bvconcat(70, 73, 76, 79) : BV:32
81 : ite(6, 3, 80) : BV:32
82 : ite(47, 80, 81) : BV:32
83 : ite(6, 3, 82) : BV:32
84 : lambda(1, 2, 83) : FUNCTION[BV:32,BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda28958 : BV:32
2 : Lambda28959 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1146384337 { 0x44546fd1 +1.65966236e9 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1146384339 { 0x44546fd3 +1.65966260e9 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda28956 : BV:32
2 : Lambda28957 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 10) : BV:32
18 : eq(17, 3) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 10) : BV:32
22 : eq(21, 3) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : eq(10, 3) : BOOL
25 : ite(24, 13, 14) : BV:8
26 : bvconcat(15, 19, 23, 25) : BV:32
27 : bvadd(7, 9, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : ite(28, 13, 14) : BV:8
30 : bvadd(16, 9, 26) : BV:32
31 : eq(30, 3) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : bvadd(20, 9, 26) : BV:32
34 : eq(33, 3) : BOOL
35 : ite(34, 13, 14) : BV:8
36 : bvadd(9, 26) : BV:32
37 : eq(36, 3) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : bvconcat(29, 32, 35, 38) : BV:32
40 : ite(6, 3, 39) : BV:32
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BV:32]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda28962 : BV:32
2 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : bvule(2, 1) : BOOL
6 : not(5) : BOOL
7 : ite(3, 4, 6) : BOOL
8 : lambda(1, 7) : FUNCTION[BV:32 -> BOOL]
9 : sym_const(8) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda28963 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : eq(6, 5) : BOOL
8 : 2 { 0x2 } : BV:8
9 : 0 { 0x0 } : BV:8
10 : ite(7, 8, 9) : BV:8
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvadd(11, 4, 5) : BV:32
13 : eq(12, 5) : BOOL
14 : ite(13, 8, 9) : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : bvadd(15, 4, 5) : BV:32
17 : eq(16, 5) : BOOL
18 : ite(17, 8, 9) : BV:8
19 : bvadd(4, 5) : BV:32
20 : eq(19, 5) : BOOL
21 : ite(20, 8, 9) : BV:8
22 : bvconcat(10, 14, 18, 21) : BV:32
23 : lambda(1, 22) : FUNCTION[BV:32 -> BV:32]
24 : sym_const(23) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1181984577 { 0x4673a741 +1.90354168e13 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1146384338 { 0x44546fd2 +1.65966248e9 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 127 { 0x7f +1.1513e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2912 { 0xb60 +1.34713e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2915 { 0xb63 +1.34749e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 11988 { 0x2ed4 +1.142908e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 11991 { 0x2ed7 +1.142943e129 } : BV:32
=counter_example.random_seed
3337280246
=counter_example_end
=global nodece 75 num_edges_traversed 1
=global nodece 75 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 76
=global nodece 76 nodece z3.ce11998.num_edges_traversed0
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3.ce11998 21b52732e55fe2d485846c2a88fe5ec
=input.spec-%var-x-1
1 : Lambda29323 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 737905863 { 0x2bfb8cc7 +1.96523368e216 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 737905864 { 0x2bfb8cc8 +1.96523380e216 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29326 : BV:32
18 : Lambda29324 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29325 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 128 { 0x80 -128 } : BV:8
28 : eq(25, 21) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 227 { 0xe3 -29 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 737905864 { 0x2bfb8cc8 +1.96523380e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 737905864 { 0x2bfb8cc8 +1.96523380e216 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 128, [ 1; 1 ] -> 227, [ 2; 2 ] -> 251, [ 3; 3 ] -> 191, [ 4; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2869894991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2869894992; 2869894995 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2869894996; 3003304947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3003304948; 3003304951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3003304952; 4059702895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4059702896; 4059702899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4059702900; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4059702896 { 0xf1fa2670 -235264400 -1.95429801e100 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3003304948 { 0xb302cbf4 -1291662348 -1.2184915e231 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2869894992 { 0xab0f1f50 -1425072304 -1.11814308e215 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda29330 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 737905863 { 0x2bfb8cc7 +1.96523368e216 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 737905864 { 0x2bfb8cc8 +1.96523380e216 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29333 : BV:32
18 : Lambda29331 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29332 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 128 { 0x80 -128 } : BV:8
28 : eq(25, 21) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 227 { 0xe3 -29 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 737905863 ] -> true, [ 737905864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 737905863 ] -> true, [ 737905864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda29292 : BV:32
2 : Lambda29293 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 128 { 0x80 -128 } : BV:8
11 : eq(7, 3) : BOOL
12 : 191 { 0xbf -65 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 227 { 0xe3 -29 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda29294 : BV:32
2 : Lambda29295 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 128 { 0x80 -128 } : BV:8
11 : eq(7, 3) : BOOL
12 : 191 { 0xbf -65 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 227 { 0xe3 -29 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 737905864 { 0x2bfb8cc8 +1.96523380e216 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2869894992 { 0xab0f1f50 -1425072304 -1.11814308e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2869894995 { 0xab0f1f53 -1425072301 -1.11814343e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4059702896 { 0xf1fa2670 -235264400 -1.95429801e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4059702899 { 0xf1fa2673 -235264397 -1.95429837e100 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3003304948 { 0xb302cbf4 -1291662348 -1.2184915e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3003304951 { 0xb302cbf7 -1291662345 -1.2184951e231 } : BV:32
=counter_example.random_seed
3730993281
=counter_example_end
=global nodece 76 num_edges_traversed 0
=global nodece 76 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 77
=global nodece 77 nodece z3v487.ce11999.num_edges_traversed0
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(epsilon)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3v487.ce11999 557c5e25375a1516edae79a24acfc69
=input.spec-%var-x-1
1 : Lambda29347 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 325221967 { 0x13627e4f +1.76947963e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 325221968 { 0x13627e50 +1.76947975e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29350 : BV:32
18 : Lambda29348 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29349 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 325221968 { 0x13627e50 +1.76947975e167 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 325221968 { 0x13627e50 +1.76947975e167 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 425470655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 425470656; 425470659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 425470660; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 425470656 { 0x195c2ac0 +1.72005462e179 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda29356 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 325221967 { 0x13627e4f +1.76947963e167 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 325221968 { 0x13627e50 +1.76947975e167 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29359 : BV:32
18 : Lambda29357 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29358 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 325221967 ] -> true, [ 325221968; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 325221967 ] -> true, [ 325221968; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 325221968 { 0x13627e50 +1.76947975e167 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 425470656 { 0x195c2ac0 +1.72005462e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 425470659 { 0x195c2ac3 +1.72005498e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=counter_example.random_seed
505989614
=counter_example_end
=global nodece 77 num_edges_traversed 0
=global nodece 77 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 78
=global nodece 78 nodece z3.ce12415.num_edges_traversed2
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(epsilon)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3.ce12415 20e9f444d3183f41cc01cdc5971512
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131988591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131988592; 131988595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 131988596; 512610499 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 512610500; 512610503 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 512610504; 547214175 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 547214176; 547214179 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 547214180; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 512610500 { 0x1e8dd0c4 +1.10793352e190 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 547214176 { 0x209dd360 +1.23301315e194 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 131988592 { 0x7ddfc70 +1.73426628e144 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29500 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29501 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 131988592 { 0x7ddfc70 +1.73426628e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 131988595 { 0x7ddfc73 +1.73426663e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 512610500 { 0x1e8dd0c4 +1.10793352e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 512610503 { 0x1e8dd0c7 +1.10793387e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 547214176 { 0x209dd360 +1.23301315e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 547214179 { 0x209dd363 +1.23301351e194 } : BV:32
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 78 num_edges_traversed 2
=global nodece 78 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 79
=global nodece 79 nodece z3.ce12397.num_edges_traversed2
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(epsilon)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3.ce12397 dd77835f9de874577a4892bd5bdeb2
=retaddr_const
1 : 2068079502 { 0x7b44638e +1.53428816e119 } : BV:32
=input.spec-%var-x-1
1 : Lambda137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda140 : BV:32
11 : Lambda138 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda139 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2315155406 ] -> 0, [ 2315155407; 2315155407 ] -> 128, [ 2315155408; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 167673703 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167673704; 167673707 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 167673708; 2315155403 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2315155404; 2315155407 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2315155408; 2315157343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2315157344; 2315157347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2315157348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2315157344 { 0x89fe7f60 -1979809952 -1.98826217e148 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2315155404 { 0x89fe77cc -1979811892 -1.98803091e148 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 167673704 { 0x9fe7f68 +1.98826313e148 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda140 : BV:32
11 : Lambda138 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda139 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29494 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29495 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
12 : eq(10, 11) : BOOL
13 : 128 { 0x80 -128 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda109 : BV:32
2 : Lambda110 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda111 : BV:32
2 : Lambda112 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 951221365 { 0x38b27c75 +1.39442312e242 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 2068079502 { 0x7b44638e +1.53428816e119 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 167673704 { 0x9fe7f68 +1.98826313e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 167673707 { 0x9fe7f6b +1.98826348e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2315157344 { 0x89fe7f60 -1979809952 -1.98826217e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2315157347 { 0x89fe7f63 -1979809949 -1.98826253e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2315155404 { 0x89fe77cc -1979811892 -1.98803091e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2315155407 { 0x89fe77cf -1979811889 -1.98803126e148 } : BV:32
=counter_example.random_seed
3432939377
=counter_example_end
=global nodece 79 num_edges_traversed 2
=global nodece 79 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 80
=global nodece 80 nodece z3v487.ce12379.num_edges_traversed2
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(epsilon)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce12379 5479694885daf79ff83c372981d38f7e
=retaddr_const
1 : 1023645260 { 0x3d03964c +1.2802419e251 } : BV:32
=input.spec-%var-x-1
1 : Lambda159 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda162 : BV:32
11 : Lambda160 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda161 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 6 ] -> 0, [ 7; 7 ] -> 2, [ 8; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8; 32895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32896; 32899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 32900; 2105363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2105364; 2105367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2105368; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2105364 { 0x202014 +1.25097894e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 32896 { 0x8080 +1.392150e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda159 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda162 : BV:32
11 : Lambda160 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda161 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 7 { 0x7 +1.83e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29488 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29489 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 7 { 0x7 +1.83e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda120 : BV:32
2 : Lambda121 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda122 : BV:32
2 : Lambda123 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 7 { 0x7 +1.83e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 908398201 { 0x36250e79 +1.28950417e237 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1023645260 { 0x3d03964c +1.2802419e251 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 493044183 { 0x1d6341d7 +1.77544677e187 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 32896 { 0x8080 +1.392150e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 32899 { 0x8083 +1.392186e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2105364 { 0x202014 +1.25097894e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2105367 { 0x202017 +1.25097930e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
3774610773
=counter_example_end
=global nodece 80 num_edges_traversed 2
=global nodece 80 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 81
=global nodece 81 nodece z3v487.ce12361.num_edges_traversed2
=global nodece 81 nodece_path
=global nodece 81 nodece_path.graph_edge_composition
(epsilon)
=global nodece 81 nodece_cached_counterexample
=counter_example_begin z3v487.ce12361 fba71e53545f86a9663af289b4e3e7
=retaddr_const
1 : 487481914 { 0x1d0e623a +1.11237263e187 } : BV:32
=input.spec-%var-x-1
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda216 : BV:32
11 : Lambda214 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda215 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 71 { 0x47 +1.846e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 70 ] -> 0, [ 71; 71 ] -> 1, [ 72; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 67 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68; 71 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 72; 32799 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32800; 32803 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 32804; 4198403 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4198404; 4198407 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4198408; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4198404 { 0x401004 +1.50048875e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 32800 { 0x8020 +1.391006e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda216 : BV:32
11 : Lambda214 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda215 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 71 { 0x47 +1.846e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29482 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29483 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 71 { 0x47 +1.846e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda185 : BV:32
2 : Lambda186 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 71 { 0x47 +1.846e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda187 : BV:32
2 : Lambda188 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 71 { 0x47 +1.846e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1977543493 { 0x75deeb45 +1.74155485e108 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 487481914 { 0x1d0e623a +1.11237263e187 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 638719981 { 0x261217ed +1.14135515e205 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 32800 { 0x8020 +1.391006e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 32803 { 0x8023 +1.391042e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4198404 { 0x401004 +1.50048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4198407 { 0x401007 +1.50048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 68 { 0x44 +1.810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 71 { 0x47 +1.846e129 } : BV:32
=counter_example.random_seed
3078948147
=counter_example_end
=global nodece 81 num_edges_traversed 2
=global nodece 81 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 82
=global nodece 82 nodece z3.ce12343.num_edges_traversed2
=global nodece 82 nodece_path
=global nodece 82 nodece_path.graph_edge_composition
(epsilon)
=global nodece 82 nodece_cached_counterexample
=counter_example_begin z3.ce12343 a2465af5a0845037d7528f89e7216b6d
=retaddr_const
1 : 920895776 { 0x36e3c120 +1.77933120e238 } : BV:32
=input.spec-%var-x-1
1 : Lambda235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda238 : BV:32
11 : Lambda236 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda237 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3447704125 ] -> 0, [ 3447704126; 3447704126 ] -> 1, [ 3447704127; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3447704123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3447704124; 3447704127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3447704128; 3914195807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3914195808; 3914195811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3914195812; 4185881463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4185881464; 4185881467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4185881468; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3914195808 { 0xe94de360 -380771488 -1.60850143e83 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3447704124 { 0xcd7fca3c -847263172 -1.99835920e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4185881464 { 0xf97f7b78 -109085832 -1.99595546e115 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda238 : BV:32
11 : Lambda236 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda237 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29476 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29477 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda196 : BV:32
2 : Lambda197 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda198 : BV:32
2 : Lambda199 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3447704126 { 0xcd7fca3e -847263170 -1.99835944e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 913526580 { 0x36734f34 +1.90085458e237 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 920895776 { 0x36e3c120 +1.77933120e238 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 872191047 { 0x33fc9447 +1.97327506e232 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4185881464 { 0xf97f7b78 -109085832 -1.99595546e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4185881467 { 0xf97f7b7b -109085829 -1.99595582e115 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3914195808 { 0xe94de360 -380771488 -1.60850143e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3914195811 { 0xe94de363 -380771485 -1.60850179e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3447704124 { 0xcd7fca3c -847263172 -1.99835920e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3447704127 { 0xcd7fca3f -847263169 -1.99835956e27 } : BV:32
=counter_example.random_seed
786964982
=counter_example_end
=global nodece 82 num_edges_traversed 2
=global nodece 82 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 83
=global nodece 83 nodece z3.ce12325.num_edges_traversed2
=global nodece 83 nodece_path
=global nodece 83 nodece_path.graph_edge_composition
(epsilon)
=global nodece 83 nodece_cached_counterexample
=counter_example_begin z3.ce12325 55da8f68907bc78680c7560252c2a3
=retaddr_const
1 : 762750777 { 0x2d76a739 +1.92697823e219 } : BV:32
=input.spec-%var-x-1
1 : Lambda289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda292 : BV:32
11 : Lambda290 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda291 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
20 : eq(18, 19) : BOOL
21 : 32 { 0x20 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3071145963 ] -> 0, [ 3071145964; 3071145964 ] -> 32, [ 3071145965; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1326306367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1326306368; 1326306371 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1326306372; 3071145963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3071145964; 3071145967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3071145968; 3488473047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3488473048; 3488473051 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3488473052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1326306368 { 0x4f0dd440 +1.10803985e31 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3488473048 { 0xcfeddfd8 -806494248 -1.85839366e32 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda292 : BV:32
11 : Lambda290 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda291 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
20 : eq(18, 19) : BOOL
21 : 32 { 0x20 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29470 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29471 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
12 : eq(10, 11) : BOOL
13 : 32 { 0x20 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda261 : BV:32
2 : Lambda262 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda263 : BV:32
2 : Lambda264 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 636444144 { 0x25ef5df0 +1.87005424e204 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 762750777 { 0x2d76a739 +1.92697823e219 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 916421444 { 0x369f7b44 +1.24594926e238 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3488473048 { 0xcfeddfd8 -806494248 -1.85839366e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3488473051 { 0xcfeddfdb -806494245 -1.85839402e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1326306368 { 0x4f0dd440 +1.10803985e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1326306371 { 0x4f0dd443 +1.10804021e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3071145964 { 0xb70df7ec -1223821332 -1.10912847e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3071145967 { 0xb70df7ef -1223821329 -1.10912883e239 } : BV:32
=counter_example.random_seed
1435306660
=counter_example_end
=global nodece 83 num_edges_traversed 2
=global nodece 83 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 84
=global nodece 84 nodece z3.ce12307.num_edges_traversed2
=global nodece 84 nodece_path
=global nodece 84 nodece_path.graph_edge_composition
(epsilon)
=global nodece 84 nodece_cached_counterexample
=counter_example_begin z3.ce12307 e0689afa20c66319b3d7d4160168b64
=retaddr_const
1 : 472621042 { 0x1c2b9ff2 +1.34081864e185 } : BV:32
=input.spec-%var-x-1
1 : Lambda365 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda368 : BV:32
11 : Lambda366 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda367 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3445946563 ] -> 0, [ 3445946564; 3445946564 ] -> 2, [ 3445946565; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2096556023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096556024; 2096556027 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2096556028; 3445946563 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3445946564; 3445946567 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3445946568; 4029117563 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4029117564; 4029117567 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4029117568; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4029117564 { 0xf027747c -265849732 -1.30824232e97 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2096556024 { 0x7cf6e7f8 +1.92895412e122 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda365 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda368 : BV:32
11 : Lambda366 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda367 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
20 : eq(18, 19) : BOOL
21 : 2 { 0x2 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29464 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29465 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
12 : eq(10, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda337 : BV:32
2 : Lambda338 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda339 : BV:32
2 : Lambda340 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 881167082 { 0x34858aea +1.4330182e234 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 472621042 { 0x1c2b9ff2 +1.34081864e185 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 444497282 { 0x1a7e7d82 +1.98820519e181 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2096556024 { 0x7cf6e7f8 +1.92895412e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2096556027 { 0x7cf6e7fb +1.92895448e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4029117564 { 0xf027747c -265849732 -1.30824232e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4029117567 { 0xf027747f -265849729 -1.30824267e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3445946564 { 0xcd64f8c4 -849020732 -1.78884172e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3445946567 { 0xcd64f8c7 -849020729 -1.78884208e27 } : BV:32
=counter_example.random_seed
3425639859
=counter_example_end
=global nodece 84 num_edges_traversed 2
=global nodece 84 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 85
=global nodece 85 nodece z3v487.ce12289.num_edges_traversed2
=global nodece 85 nodece_path
=global nodece 85 nodece_path.graph_edge_composition
(epsilon)
=global nodece 85 nodece_cached_counterexample
=counter_example_begin z3v487.ce12289 83942ae48247f03f5694a2c176505433
=retaddr_const
1 : 1948452470 { 0x74230676 +1.27363467e105 } : BV:32
=input.spec-%var-x-1
1 : Lambda441 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda444 : BV:32
11 : Lambda442 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda443 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 167346379 ] -> 0, [ 167346380; 167346380 ] -> 1, [ 167346381; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 16777215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16777216; 16777219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 16777220; 133791939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 133791940; 133791943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 133791944; 167346379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 167346380; 167346383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 167346384; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 133791940 { 0x7f980c4 +1.94924211e144 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda441 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda444 : BV:32
11 : Lambda442 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda443 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29458 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29459 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda413 : BV:32
2 : Lambda414 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda415 : BV:32
2 : Lambda416 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1973634932 { 0x75a34774 +1.27561807e108 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1948452470 { 0x74230676 +1.27363467e105 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 133791940 { 0x7f980c4 +1.94924211e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 133791943 { 0x7f980c7 +1.94924247e144 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 16777219 { 0x1000003 +1.35e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 167346380 { 0x9f980cc +1.94924306e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 167346383 { 0x9f980cf +1.94924342e148 } : BV:32
=counter_example.random_seed
3249262599
=counter_example_end
=global nodece 85 num_edges_traversed 2
=global nodece 85 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 86
=global nodece 86 nodece z3.ce12271.num_edges_traversed2
=global nodece 86 nodece_path
=global nodece 86 nodece_path.graph_edge_composition
(epsilon)
=global nodece 86 nodece_cached_counterexample
=counter_example_begin z3.ce12271 cba16a564ac55c97d88b048df24db45
=retaddr_const
1 : 1420721024 { 0x54ae7b80 +1.36314392e42 } : BV:32
=input.spec-%var-x-1
1 : Lambda517 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda520 : BV:32
11 : Lambda518 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda519 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
21 : eq(19, 20) : BOOL
22 : 32 { 0x20 } : BV:8
23 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
24 : eq(19, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1982348279 ] -> 0, [ 1982348280; 1982348280 ] -> 64, [ 1982348281; 1982348281 ] -> 0, [ 1982348282; 1982348282 ] -> 32, [ 1982348283; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 121396219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 121396220; 121396223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 121396224; 1982348279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1982348280; 1982348283 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1982348284; 3997973367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3997973368; 3997973371 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3997973372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3997973368 { 0xee4c3b78 -296993928 -1.59556484e93 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 121396220 { 0x73c5bfc +1.47155714e143 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda517 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda520 : BV:32
11 : Lambda518 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda519 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
21 : eq(19, 20) : BOOL
22 : 32 { 0x20 } : BV:8
23 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
24 : eq(19, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(21, 22, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : eq(30, 23) : BOOL
33 : ite(32, 25, 26) : BV:8
34 : ite(31, 22, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 17, 18) : BV:32
37 : eq(36, 20) : BOOL
38 : eq(36, 23) : BOOL
39 : ite(38, 25, 26) : BV:8
40 : ite(37, 22, 39) : BV:8
41 : bvadd(17, 18) : BV:32
42 : eq(41, 20) : BOOL
43 : eq(41, 23) : BOOL
44 : ite(43, 25, 26) : BV:8
45 : ite(42, 22, 44) : BV:8
46 : bvconcat(28, 34, 40, 45) : BV:32
47 : bvadd(14, 16, 46) : BV:32
48 : eq(47, 20) : BOOL
49 : eq(47, 23) : BOOL
50 : ite(49, 25, 26) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : bvadd(29, 16, 46) : BV:32
53 : eq(52, 20) : BOOL
54 : eq(52, 23) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 22, 55) : BV:8
57 : bvadd(35, 16, 46) : BV:32
58 : eq(57, 20) : BOOL
59 : eq(57, 23) : BOOL
60 : ite(59, 25, 26) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : bvadd(16, 46) : BV:32
63 : eq(62, 20) : BOOL
64 : eq(62, 23) : BOOL
65 : ite(64, 25, 26) : BV:8
66 : ite(63, 22, 65) : BV:8
67 : bvconcat(51, 56, 61, 66) : BV:32
68 : lambda(13, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(12, 68) : MAP[BV:32 -> BV:32]
70 : lambda(10, 69) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
71 : map(9, 70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
72 : sym_const(71) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29452 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29453 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
12 : eq(10, 11) : BOOL
13 : 32 { 0x20 } : BV:8
14 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
15 : eq(10, 14) : BOOL
16 : 64 { 0x40 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 1) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 1) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : lambda(6, 37) : FUNCTION[BV:32 -> BV:32]
39 : map(5, 38) : MAP[BV:32 -> BV:32]
40 : sum(1, 2, 39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
41 : sym_const(40) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda489 : BV:32
2 : Lambda490 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda491 : BV:32
2 : Lambda492 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 2097216 { 0x200040 +1.25000762e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1982348282 { 0x76283bfa +1.31433033e109 } : BV:32
10 : eq(8, 9) : BOOL
11 : 32 { 0x20 } : BV:8
12 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
13 : eq(8, 12) : BOOL
14 : 64 { 0x40 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : ite(10, 11, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : eq(19, 12) : BOOL
22 : ite(21, 14, 15) : BV:8
23 : ite(20, 11, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 6, 7) : BV:32
26 : eq(25, 9) : BOOL
27 : eq(25, 12) : BOOL
28 : ite(27, 14, 15) : BV:8
29 : ite(26, 11, 28) : BV:8
30 : bvadd(6, 7) : BV:32
31 : eq(30, 9) : BOOL
32 : eq(30, 12) : BOOL
33 : ite(32, 14, 15) : BV:8
34 : ite(31, 11, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : bvadd(3, 5, 35) : BV:32
37 : eq(36, 9) : BOOL
38 : eq(36, 12) : BOOL
39 : ite(38, 14, 15) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : bvadd(18, 5, 35) : BV:32
42 : eq(41, 9) : BOOL
43 : eq(41, 12) : BOOL
44 : ite(43, 14, 15) : BV:8
45 : ite(42, 11, 44) : BV:8
46 : bvadd(24, 5, 35) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : ite(48, 14, 15) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : bvadd(5, 35) : BV:32
52 : eq(51, 9) : BOOL
53 : eq(51, 12) : BOOL
54 : ite(53, 14, 15) : BV:8
55 : ite(52, 11, 54) : BV:8
56 : bvconcat(40, 45, 50, 55) : BV:32
57 : lambda(1, 2, 56) : FUNCTION[BV:32,BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 155113155 { 0x93ed6c3 +1.49092900e147 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1420721024 { 0x54ae7b80 +1.36314392e42 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1675681086 { 0x63e0dd3e +1.75675177e72 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 121396220 { 0x73c5bfc +1.47155714e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 121396223 { 0x73c5bff +1.47155749e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1982348280 { 0x76283bf8 +1.31433010e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1982348283 { 0x76283bfb +1.31433045e109 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3997973368 { 0xee4c3b78 -296993928 -1.59556484e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3997973371 { 0xee4c3b7b -296993925 -1.59556519e93 } : BV:32
=counter_example.random_seed
3606477944
=counter_example_end
=global nodece 86 num_edges_traversed 2
=global nodece 86 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 87
=global nodece 87 nodece z3v487.ce12253.num_edges_traversed2
=global nodece 87 nodece_path
=global nodece 87 nodece_path.graph_edge_composition
(epsilon)
=global nodece 87 nodece_cached_counterexample
=counter_example_begin z3v487.ce12253 59b9197346e5acc8939ec14d2689c5a
=retaddr_const
1 : 456823650 { 0x1b3a9362 +1.45762276e183 } : BV:32
=input.spec-%var-x-1
1 : Lambda662 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda665 : BV:32
11 : Lambda663 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda664 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 647171 ] -> 0, [ 647172; 647172 ] -> 4, [ 647173; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 376839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 376840; 376843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 376844; 647171 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 647172; 647175 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 647176; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 376840 { 0x5c008 +1.4492282e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda662 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda665 : BV:32
11 : Lambda663 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda664 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 15) : BV:32
19 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 4 { 0x4 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 15) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 15) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 15) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29446 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29447 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda623 : BV:32
2 : Lambda624 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda625 : BV:32
2 : Lambda626 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 0 { 0x0 } : BV:8
12 : ite(9, 10, 11) : BV:8
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvadd(13, 6, 4) : BV:32
15 : eq(14, 8) : BOOL
16 : ite(15, 10, 11) : BV:8
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : ite(19, 10, 11) : BV:8
21 : bvadd(6, 4) : BV:32
22 : eq(21, 8) : BOOL
23 : ite(22, 10, 11) : BV:8
24 : bvconcat(12, 16, 20, 23) : BV:32
25 : bvadd(3, 5, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : ite(26, 10, 11) : BV:8
28 : bvadd(13, 5, 24) : BV:32
29 : eq(28, 8) : BOOL
30 : ite(29, 10, 11) : BV:8
31 : bvadd(17, 5, 24) : BV:32
32 : eq(31, 8) : BOOL
33 : ite(32, 10, 11) : BV:8
34 : bvadd(5, 24) : BV:32
35 : eq(34, 8) : BOOL
36 : ite(35, 10, 11) : BV:8
37 : bvconcat(27, 30, 33, 36) : BV:32
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BV:32]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 430378968 { 0x19a70fd8 +1.30517101e180 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 456823650 { 0x1b3a9362 +1.45762276e183 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 803841585 { 0x2fe9a631 +1.82538425e224 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 647172 { 0x9e004 +1.7714891e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 647175 { 0x9e007 +1.7714927e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 376840 { 0x5c008 +1.4492282e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 376843 { 0x5c00b +1.4492318e129 } : BV:32
=counter_example.random_seed
829379635
=counter_example_end
=global nodece 87 num_edges_traversed 2
=global nodece 87 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 88
=global nodece 88 nodece z3v487.ce12235.num_edges_traversed2
=global nodece 88 nodece_path
=global nodece 88 nodece_path.graph_edge_composition
(epsilon)
=global nodece 88 nodece_cached_counterexample
=counter_example_begin z3v487.ce12235 17c863378c524748576a3dab285e97
=retaddr_const
1 : 1919952765 { 0x7270277d +1.87620508e101 } : BV:32
=input.spec-%var-x-1
1 : Lambda1011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1014 : BV:32
11 : Lambda1012 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1013 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
23 : eq(18, 22) : BOOL
24 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
25 : eq(18, 24) : BOOL
26 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 22548515 ] -> 0, [ 22548516; 22548519 ] -> 255, [ 22548520; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 7752; 7755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 7756; 13927043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 13927044; 13927047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 13927048; 22548515 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 22548516; 22548519 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 22548520; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 13927044 { 0xd48284 +1.66023302e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 7752 { 0x1e48 +1.92411e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda1011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1014 : BV:32
11 : Lambda1012 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1013 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
23 : eq(18, 22) : BOOL
24 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
25 : eq(18, 24) : BOOL
26 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29440 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29441 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
15 : eq(10, 14) : BOOL
16 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
17 : eq(10, 16) : BOOL
18 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 1) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 1) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 1) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : lambda(6, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(5, 55) : MAP[BV:32 -> BV:32]
57 : sum(1, 2, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda983 : BV:32
2 : Lambda984 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
13 : eq(8, 12) : BOOL
14 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
15 : eq(8, 14) : BOOL
16 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda985 : BV:32
2 : Lambda986 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 22548518 { 0x1581026 +1.68799281e131 } : BV:32
13 : eq(8, 12) : BOOL
14 : 22548517 { 0x1581025 +1.68799269e131 } : BV:32
15 : eq(8, 14) : BOOL
16 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2033791778 { 0x79393322 +1.44687294e115 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1919952765 { 0x7270277d +1.87620508e101 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 789188635 { 0x2f0a101b +1.7861649e223 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 7752 { 0x1e48 +1.92411e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7755 { 0x1e4b +1.92446e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 13927044 { 0xd48284 +1.66023302e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 13927047 { 0xd48287 +1.66023337e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 22548516 { 0x1581024 +1.68799257e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 22548519 { 0x1581027 +1.68799293e131 } : BV:32
=counter_example.random_seed
2771766312
=counter_example_end
=global nodece 88 num_edges_traversed 2
=global nodece 88 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 89
=global nodece 89 nodece z3.ce12151.num_edges_traversed2
=global nodece 89 nodece_path
=global nodece 89 nodece_path.graph_edge_composition
(epsilon)
=global nodece 89 nodece_cached_counterexample
=counter_example_begin z3.ce12151 534b17a29d4f3b73cf99d2f6adea35ff
=retaddr_const
1 : 545671804 { 0x20864a7c +1.4914808e194 } : BV:32
=input.spec-%var-x-1
1 : Lambda24972 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24975 : BV:32
18 : Lambda24973 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24974 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 317316911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 317316912; 317316915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 317316916; 1159911895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1159911896; 1159911899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1159911900; 1717698355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1717698356; 1717698359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1717698360; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1717698356 { 0x6661ff34 +1.76560068e77 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 317316912 { 0x12e9df30 +1.82712364e166 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1159911896 { 0x4522d9d8 +1.27227306e11 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24983 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24986 : BV:32
18 : Lambda24984 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24985 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29412 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29413 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1356177874 { 0x50d5a1d2 +1.66900086e34 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1874738221 { 0x6fbe3c2d +1.48621141e96 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2119746592 { 0x7e58c420 +1.69348526e125 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 545671804 { 0x20864a7c +1.4914808e194 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1159911896 { 0x4522d9d8 +1.27227306e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1159911899 { 0x4522d9db +1.27227342e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1717698356 { 0x6661ff34 +1.76560068e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1717698359 { 0x6661ff37 +1.76560103e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 317316912 { 0x12e9df30 +1.82712364e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 317316915 { 0x12e9df33 +1.82712399e166 } : BV:32
=counter_example.random_seed
3142133357
=counter_example_end
=global nodece 89 num_edges_traversed 2
=global nodece 89 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 90
=global nodece 90 nodece z3.ce12079.num_edges_traversed2
=global nodece 90 nodece_path
=global nodece 90 nodece_path.graph_edge_composition
(epsilon)
=global nodece 90 nodece_cached_counterexample
=counter_example_begin z3.ce12079 d3f82c6f152bc8ae8098c47ff74de01
=retaddr_const
1 : 457928406 { 0x1b4b6ed6 +1.58931994e183 } : BV:32
=input.spec-%var-x-1
1 : Lambda26964 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26967 : BV:32
17 : Lambda26965 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26966 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 778342527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 778342528; 778342531 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 778342532; 1446418379 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1446418380; 1446418383 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1446418384; 2339078055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2339078056; 2339078059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2339078060; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2339078056 { 0x8b6b7fa8 -1955889240 -1.83983325e151 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1446418380 { 0x563697cc +1.42650747e45 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 778342528 { 0x2e649080 +1.78565979e221 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26975 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26978 : BV:32
17 : Lambda26976 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26977 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda29388 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda29389 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1625930610 { 0x60e9bb72 +1.82603287e66 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 674593338 { 0x28357a3a +1.41779255e209 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 335158736 { 0x13fa1dd0 +1.95403480e168 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 457928406 { 0x1b4b6ed6 +1.58931994e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 778342528 { 0x2e649080 +1.78565979e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 778342531 { 0x2e649083 +1.78566014e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2339078056 { 0x8b6b7fa8 -1955889240 -1.83983325e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2339078059 { 0x8b6b7fab -1955889237 -1.83983361e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1446418380 { 0x563697cc +1.42650747e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1446418383 { 0x563697cf +1.42650783e45 } : BV:32
=counter_example.random_seed
2437732023
=counter_example_end
=global nodece 90 num_edges_traversed 2
=global nodece 90 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 42
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 43
1 : spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 44
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 45
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 46
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 47
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 77
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 78
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 80
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 81
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%x : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 10) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 82
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 83
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%m : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 84
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%x : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 4) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 90
1 : spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L4%6%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 91
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 92
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3v487.ce157
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce157 expr point z3v487.ce157 done
=inductive-invariants point_set point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce25 expr point z3.ce25 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 6 for input.dst.llvm-%m
33554432
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point z3v487.ce212
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce212 expr point z3v487.ce212 done
=inductive-invariants point_set point z3v487.ce47
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 6 for input.dst.llvm-%m
16777216
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce47 expr point z3v487.ce47 done
=inductive-invariants point_set point z3.ce48
=inductive-invariants point_set point z3.ce48 expr point z3.ce48
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 6 for input.dst.llvm-%m
65536
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce48 expr point z3.ce48 done
=inductive-invariants point_set point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 6 for input.dst.llvm-%m
32
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 done
=inductive-invariants point_set point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 6 for input.dst.llvm-%m
32768
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce70 expr point z3v487.ce70 done
=inductive-invariants point_set point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 done
=inductive-invariants point_set point z3.ce114
=inductive-invariants point_set point z3.ce114 expr point z3.ce114
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce114 expr point z3.ce114 done
=inductive-invariants point_set point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce91 expr point z3.ce91 done
=inductive-invariants point_set point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce92 expr point z3v487.ce92 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.dst.llvm-%x
2097216
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.dst.llvm-%x
1073741888
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3v487.ce169
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce169 expr point z3v487.ce169 done
=inductive-invariants point_set point z3.ce168
=inductive-invariants point_set point z3.ce168 expr point z3.ce168
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce168 expr point z3.ce168 done
=inductive-invariants point_set point z3v487.ce190
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 done
=inductive-invariants point_set point z3.ce191
=inductive-invariants point_set point z3.ce191 expr point z3.ce191
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 5 for input.dst.llvm-%n
272
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 done
=inductive-invariants point_set point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 done
=inductive-invariants point_set point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 done
=inductive-invariants point_set point z3v487.ce246
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce246 expr point z3v487.ce246 done
=inductive-invariants point_set point z3.ce245
=inductive-invariants point_set point z3.ce245 expr point z3.ce245
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce245 expr point z3.ce245 done
=inductive-invariants point_set point z3v487.ce267
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 done
=inductive-invariants point_set point z3.ce268
=inductive-invariants point_set point z3.ce268 expr point z3.ce268
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce268 expr point z3.ce268 done
=inductive-invariants point_set point z3v487.ce289
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 4 for input.dst.llvm-%x
4194372
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 5 for input.dst.llvm-%n
1233
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 6 for input.dst.llvm-%m
268697601
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce289 expr point z3v487.ce289 done
=inductive-invariants point_set point z3.ce290
=inductive-invariants point_set point z3.ce290 expr point z3.ce290
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 4 for input.dst.llvm-%x
1561894936
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 5 for input.dst.llvm-%n
135878426
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 6 for input.dst.llvm-%m
2147483650
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce290 expr point z3.ce290 done
=inductive-invariants point_set point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 4 for input.dst.llvm-%x
148040
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 6 for input.dst.llvm-%m
2099713
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 done
=inductive-invariants point_set point z3.ce322
=inductive-invariants point_set point z3.ce322 expr point z3.ce322
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 4 for input.dst.llvm-%x
1077428632
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce322 expr point z3.ce322 done
=inductive-invariants point_set point z3v487.ce323
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce323 expr point z3v487.ce323 done
=inductive-invariants point_set point z3v487.ce344
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 4 for input.dst.llvm-%x
72
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 done
=inductive-invariants point_set point z3v487.ce355
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 4 for input.dst.llvm-%x
72
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 done
=inductive-invariants point_set point z3v487.ce366
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 4 for input.dst.llvm-%x
278929968
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 6 for input.dst.llvm-%m
269488144
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce366 expr point z3v487.ce366 done
=inductive-invariants point_set point z3v487.ce377
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 4 for input.dst.llvm-%x
148040
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 6 for input.dst.llvm-%m
2099713
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce377 expr point z3v487.ce377 done
=inductive-invariants point_set point z3v487.ce388
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 4 for input.dst.llvm-%x
136323280
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce388 expr point z3v487.ce388 done
=inductive-invariants point_set point z3.ce389
=inductive-invariants point_set point z3.ce389 expr point z3.ce389
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 4 for input.dst.llvm-%x
4294670264
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 5 for input.dst.llvm-%n
8721
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce389 expr point z3.ce389 done
=inductive-invariants point_set point z3.ce410
=inductive-invariants point_set point z3.ce410 expr point z3.ce410
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 4 for input.dst.llvm-%x
453257344
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce410 expr point z3.ce410 done
=inductive-invariants point_set point z3v487.ce411
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce411 expr point z3v487.ce411 done
=inductive-invariants point_set point z3.ce432
=inductive-invariants point_set point z3.ce432 expr point z3.ce432
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 done
=inductive-invariants point_set point z3v487.ce433
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 done
=inductive-invariants point_set point z3v487.ce1485
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1485 expr point z3v487.ce1485 done
=inductive-invariants point_set point z3.ce1486
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1486 expr point z3.ce1486 done
=inductive-invariants point_set point z3.ce11507
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 2 for input.spec-%var-i-1.L4%6%bbentry
268435456
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1077952640
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 4 for input.dst.llvm-%x
268435456
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 5 for input.dst.llvm-%n
2157123602
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 45 for input.spec-%var-i-0.L4%18%bbentry
268435456
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 46 for input.spec-%var-ret-0.L4%18%bbentry
1077952640
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
268435457
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1077952640
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11507 expr point z3.ce11507 done
=inductive-invariants point_set point z3v487.ce11070
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 4 for input.dst.llvm-%x
2147483664
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 5 for input.dst.llvm-%n
2709520384
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 6 for input.dst.llvm-%m
65536
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11070 expr point z3v487.ce11070 done
=inductive-invariants point_set point z3.ce11086
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 2 for input.spec-%var-i-1.L4%6%bbentry
571127635
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 4 for input.dst.llvm-%x
2150117888
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 5 for input.dst.llvm-%n
1343139220
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 6 for input.dst.llvm-%m
33554432
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
571127635
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 45 for input.spec-%var-i-0.L4%18%bbentry
571127635
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
571127636
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11086 expr point z3.ce11086 done
=inductive-invariants point_set point z3v487.ce10730
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 2 for input.spec-%var-i-1.L4%6%bbentry
6
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 5 for input.dst.llvm-%n
9
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 45 for input.spec-%var-i-0.L4%18%bbentry
6
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
7
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10730 expr point z3v487.ce10730 done
=inductive-invariants point_set point z3v487.ce6906
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6906 expr point z3v487.ce6906 done
=inductive-invariants point_set point z3v487.ce11568
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 3 for input.spec-%var-ret-1.L4%6%bbentry
538968577
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 4 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 5 for input.dst.llvm-%n
1113587720
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 46 for input.spec-%var-ret-0.L4%18%bbentry
538968577
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741825
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
538968577
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11568 expr point z3v487.ce11568 done
=inductive-invariants point_set point z3.ce6907
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 4 for input.dst.llvm-%x
4260803788
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6907 expr point z3.ce6907 done
=inductive-invariants point_set point z3.ce10615
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 5 for input.dst.llvm-%n
2147483650
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10615 expr point z3.ce10615 done
=inductive-invariants point_set point z3v487.ce10614
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10614 expr point z3v487.ce10614 done
=inductive-invariants point_set point z3v487.ce6626
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 5 for input.dst.llvm-%n
131072
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6626 expr point z3v487.ce6626 done
=inductive-invariants point_set point z3.ce6627
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6627 expr point z3.ce6627 done
=inductive-invariants point_set point z3.ce6586
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 5 for input.dst.llvm-%n
134217728
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6586 expr point z3.ce6586 done
=inductive-invariants point_set point z3v487.ce6587
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 6 for input.dst.llvm-%m
1073741824
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6587 expr point z3v487.ce6587 done
=inductive-invariants point_set point z3.ce6666
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6666 expr point z3.ce6666 done
=inductive-invariants point_set point z3v487.ce6667
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6667 expr point z3v487.ce6667 done
=inductive-invariants point_set point z3.ce6706
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6706 expr point z3.ce6706 done
=inductive-invariants point_set point z3v487.ce6707
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6707 expr point z3v487.ce6707 done
=inductive-invariants point_set point z3v487.ce10996
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10996 expr point z3v487.ce10996 done
=inductive-invariants point_set point z3.ce10995
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10995 expr point z3.ce10995 done
=inductive-invariants point_set point z3.ce6746
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 4 for input.dst.llvm-%x
3578677856
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6746 expr point z3.ce6746 done
=inductive-invariants point_set point z3v487.ce6747
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 4 for input.dst.llvm-%x
2218299392
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6747 expr point z3v487.ce6747 done
=inductive-invariants point_set point z3.ce6786
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 4 for input.dst.llvm-%x
551856032
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6786 expr point z3.ce6786 done
=inductive-invariants point_set point z3v487.ce6787
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 4 for input.dst.llvm-%x
1711407128
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6787 expr point z3v487.ce6787 done
=inductive-invariants point_set point z3v487.ce11242
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 44 for input.spec-%var-j-0.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11242 expr point z3v487.ce11242 done
=inductive-invariants point_set point z3v487.ce6826
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6826 expr point z3v487.ce6826 done
=inductive-invariants point_set point z3.ce6827
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 4 for input.dst.llvm-%x
1316997108
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6827 expr point z3.ce6827 done
=inductive-invariants point_set point z3v487.ce6866
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 4 for input.dst.llvm-%x
1477050372
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6866 expr point z3v487.ce6866 done
=inductive-invariants point_set point z3.ce6867
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 4 for input.dst.llvm-%x
2620163212
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6867 expr point z3.ce6867 done
=inductive-invariants point_set point z3.ce11487
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 2 for input.spec-%var-i-1.L4%6%bbentry
268435456
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1077952640
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 4 for input.dst.llvm-%x
268435456
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 5 for input.dst.llvm-%n
2157123602
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1077952640
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11487 expr point z3.ce11487 done
=inductive-invariants point_set point z3.ce6946
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 4 for input.dst.llvm-%x
3371507796
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6946 expr point z3.ce6946 done
=inductive-invariants point_set point z3v487.ce6947
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 4 for input.dst.llvm-%x
406913032
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6947 expr point z3v487.ce6947 done
=inductive-invariants point_set point z3v487.ce6986
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6986 expr point z3v487.ce6986 done
=inductive-invariants point_set point z3.ce6987
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6987 expr point z3.ce6987 done
=inductive-invariants point_set point z3v487.ce7066
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7066 expr point z3v487.ce7066 done
=inductive-invariants point_set point z3.ce7067
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 4 for input.dst.llvm-%x
4260803788
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7067 expr point z3.ce7067 done
=inductive-invariants point_set point z3.ce7026
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 4 for input.dst.llvm-%x
3578677856
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7026 expr point z3.ce7026 done
=inductive-invariants point_set point z3v487.ce7027
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 4 for input.dst.llvm-%x
2218299392
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7027 expr point z3v487.ce7027 done
=inductive-invariants point_set point z3.ce7106
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 4 for input.dst.llvm-%x
3578677856
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7106 expr point z3.ce7106 done
=inductive-invariants point_set point z3v487.ce7107
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 4 for input.dst.llvm-%x
2218299392
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7107 expr point z3v487.ce7107 done
=inductive-invariants point_set point z3v487.ce7146
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7146 expr point z3v487.ce7146 done
=inductive-invariants point_set point z3.ce7147
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7147 expr point z3.ce7147 done
=inductive-invariants point_set point z3.ce7186
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 4 for input.dst.llvm-%x
3162495912
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7186 expr point z3.ce7186 done
=inductive-invariants point_set point z3v487.ce7187
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 6 for input.dst.llvm-%m
64
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7187 expr point z3v487.ce7187 done
=inductive-invariants point_set point z3v487.ce7226
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 6 for input.dst.llvm-%m
795393
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7226 expr point z3v487.ce7226 done
=inductive-invariants point_set point z3.ce7227
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 4 for input.dst.llvm-%x
4226809852
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7227 expr point z3.ce7227 done
=inductive-invariants point_set point z3.ce7266
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 4 for input.dst.llvm-%x
4226809852
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7266 expr point z3.ce7266 done
=inductive-invariants point_set point z3v487.ce7267
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 6 for input.dst.llvm-%m
795393
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7267 expr point z3v487.ce7267 done
=inductive-invariants point_set point z3v487.ce7346
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7346 expr point z3v487.ce7346 done
=inductive-invariants point_set point z3.ce7347
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7347 expr point z3.ce7347 done
=inductive-invariants point_set point z3v487.ce7306
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7306 expr point z3v487.ce7306 done
=inductive-invariants point_set point z3.ce7307
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7307 expr point z3.ce7307 done
=inductive-invariants point_set point z3.ce7386
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 4 for input.dst.llvm-%x
2063382328
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7386 expr point z3.ce7386 done
=inductive-invariants point_set point z3v487.ce7406
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7406 expr point z3v487.ce7406 done
=inductive-invariants point_set point z3.ce7407
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7407 expr point z3.ce7407 done
=inductive-invariants point_set point z3v487.ce7446
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 4 for input.dst.llvm-%x
1711407128
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7446 expr point z3v487.ce7446 done
=inductive-invariants point_set point z3.ce7466
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 4 for input.dst.llvm-%x
3640548732
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7466 expr point z3.ce7466 done
=inductive-invariants point_set point z3v487.ce7467
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7467 expr point z3v487.ce7467 done
=inductive-invariants point_set point z3v487.ce7506
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 4 for input.dst.llvm-%x
8964096
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7506 expr point z3v487.ce7506 done
=inductive-invariants point_set point z3v487.ce7526
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 6 for input.dst.llvm-%m
795393
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7526 expr point z3v487.ce7526 done
=inductive-invariants point_set point z3.ce7527
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 4 for input.dst.llvm-%x
4226809852
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7527 expr point z3.ce7527 done
=inductive-invariants point_set point z3.ce7566
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 4 for input.dst.llvm-%x
3820628160
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 6 for input.dst.llvm-%m
16777217
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7566 expr point z3.ce7566 done
=inductive-invariants point_set point z3v487.ce11981
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 2 for input.spec-%var-i-1.L4%6%bbentry
1610612736
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 3 for input.spec-%var-ret-1.L4%6%bbentry
127
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 6 for input.dst.llvm-%m
1146384338
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1610612736
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 45 for input.spec-%var-i-0.L4%18%bbentry
1610612736
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 46 for input.spec-%var-ret-0.L4%18%bbentry
127
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1610612737
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
127
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11981 expr point z3v487.ce11981 done
=inductive-invariants point_set point z3v487.ce7567
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 4 for input.dst.llvm-%x
91619348
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 6 for input.dst.llvm-%m
67108866
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7567 expr point z3v487.ce7567 done
=inductive-invariants point_set point z3.ce7607
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 4 for input.dst.llvm-%x
1145331968
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7607 expr point z3.ce7607 done
=inductive-invariants point_set point z3v487.ce7606
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 4 for input.dst.llvm-%x
18874372
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7606 expr point z3v487.ce7606 done
=inductive-invariants point_set point z3.ce10177
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10177 expr point z3.ce10177 done
=inductive-invariants point_set point z3.ce10137
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10137 expr point z3.ce10137 done
=inductive-invariants point_set point z3v487.ce10155
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 5 for input.dst.llvm-%n
131072
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10155 expr point z3v487.ce10155 done
=inductive-invariants point_set point z3v487.ce10187
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10187 expr point z3v487.ce10187 done
=inductive-invariants point_set point z3v487.ce10207
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10207 expr point z3v487.ce10207 done
=inductive-invariants point_set point z3.ce10217
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10217 expr point z3.ce10217 done
=inductive-invariants point_set point z3v487.ce10227
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10227 expr point z3v487.ce10227 done
=inductive-invariants point_set point z3v487.ce10262
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 2 for input.spec-%var-i-1.L4%6%bbentry
2
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 4 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 5 for input.dst.llvm-%n
4194304
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 45 for input.spec-%var-i-0.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10262 expr point z3v487.ce10262 done
=inductive-invariants point_set point z3v487.ce10127
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10127 expr point z3v487.ce10127 done
=inductive-invariants point_set point z3.ce10452
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10452 expr point z3.ce10452 done
=inductive-invariants point_set point z3.ce10476
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 2 for input.spec-%var-i-1.L4%6%bbentry
2
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 done
=inductive-invariants point_set point z3v487.ce10477
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 2 for input.spec-%var-i-1.L4%6%bbentry
2
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 done
=inductive-invariants point_set point z3.ce10521
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 2 for input.spec-%var-i-1.L4%6%bbentry
3
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 45 for input.spec-%var-i-0.L4%18%bbentry
3
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10521 expr point z3.ce10521 done
=inductive-invariants point_set point z3v487.ce10520
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 2 for input.spec-%var-i-1.L4%6%bbentry
3
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 5 for input.dst.llvm-%n
512
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 45 for input.spec-%var-i-0.L4%18%bbentry
3
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10520 expr point z3v487.ce10520 done
=inductive-invariants point_set point z3v487.ce10553
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 5 for input.dst.llvm-%n
512
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 45 for input.spec-%var-i-0.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10553 expr point z3v487.ce10553 done
=inductive-invariants point_set point z3v487.ce10644
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 45 for input.spec-%var-i-0.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10644 expr point z3v487.ce10644 done
=inductive-invariants point_set point z3v487.ce10677
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 2 for input.spec-%var-i-1.L4%6%bbentry
5
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 5 for input.dst.llvm-%n
9
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 done
=inductive-invariants point_set point z3.ce10678
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 2 for input.spec-%var-i-1.L4%6%bbentry
5
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 5 for input.dst.llvm-%n
5
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 done
=inductive-invariants point_set point z3v487.ce10707
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 2 for input.spec-%var-i-1.L4%6%bbentry
5
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 5 for input.dst.llvm-%n
9
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 45 for input.spec-%var-i-0.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
6
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10707 expr point z3v487.ce10707 done
=inductive-invariants point_set point z3v487.ce10775
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 5 for input.dst.llvm-%n
2951475106
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 45 for input.spec-%var-i-0.L4%18%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10775 expr point z3v487.ce10775 done
=inductive-invariants point_set point z3.ce10776
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483647
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 5 for input.dst.llvm-%n
3177838200
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 45 for input.spec-%var-i-0.L4%18%bbentry
2147483647
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2147483648
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10776 expr point z3.ce10776 done
=inductive-invariants point_set point z3v487.ce10808
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 5 for input.dst.llvm-%n
2951475106
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 45 for input.spec-%var-i-0.L4%18%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10808 expr point z3v487.ce10808 done
=inductive-invariants point_set point z3v487.ce10869
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 2 for input.spec-%var-i-1.L4%6%bbentry
3005218816
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 5 for input.dst.llvm-%n
3288334336
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3005218816
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10869 expr point z3v487.ce10869 done
=inductive-invariants point_set point z3.ce10870
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 2 for input.spec-%var-i-1.L4%6%bbentry
2291543329
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 5 for input.dst.llvm-%n
2761100929
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2291543329
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10870 expr point z3.ce10870 done
=inductive-invariants point_set point z3v487.ce10899
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 2 for input.spec-%var-i-1.L4%6%bbentry
3005218816
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 5 for input.dst.llvm-%n
3288334336
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3005218816
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 45 for input.spec-%var-i-0.L4%18%bbentry
3005218816
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3005218817
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10899 expr point z3v487.ce10899 done
=inductive-invariants point_set point z3.ce10932
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967294
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 45 for input.spec-%var-i-0.L4%18%bbentry
4294967294
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4294967295
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10932 expr point z3.ce10932 done
=inductive-invariants point_set point z3v487.ce10933
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 45 for input.spec-%var-i-0.L4%18%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10933 expr point z3v487.ce10933 done
=inductive-invariants point_set point z3.ce11314
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 5 for input.dst.llvm-%n
134217728
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 44 for input.spec-%var-j-0.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11314 expr point z3.ce11314 done
=inductive-invariants point_set point z3.ce11346
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 5 for input.dst.llvm-%n
8192
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 done
=inductive-invariants point_set point z3.ce11419
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 2 for input.spec-%var-i-1.L4%6%bbentry
268435455
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 4 for input.dst.llvm-%x
268435456
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 5 for input.dst.llvm-%n
2157123602
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 45 for input.spec-%var-i-0.L4%18%bbentry
268435455
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 46 for input.spec-%var-ret-0.L4%18%bbentry
1077952640
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
268435456
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1077952640
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11419 expr point z3.ce11419 done
=inductive-invariants point_set point z3v487.ce11420
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 4 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 5 for input.dst.llvm-%n
1113587720
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 46 for input.spec-%var-ret-0.L4%18%bbentry
538968577
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
538968577
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11420 expr point z3v487.ce11420 done
=inductive-invariants point_set point z3.ce11608
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 3 for input.spec-%var-ret-1.L4%6%bbentry
965137238
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 4 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 5 for input.dst.llvm-%n
2537709568
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 6 for input.dst.llvm-%m
18
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 44 for input.spec-%var-j-0.L4%18%bbentry
4
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11608 expr point z3.ce11608 done
=inductive-invariants point_set point z3v487.ce11609
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 2 for input.spec-%var-i-1.L4%6%bbentry
3758096383
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 3 for input.spec-%var-ret-1.L4%6%bbentry
993878259
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 4 for input.dst.llvm-%x
313524224
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 5 for input.dst.llvm-%n
4290785280
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 6 for input.dst.llvm-%m
536870914
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3758096383
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 44 for input.spec-%var-j-0.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 45 for input.spec-%var-i-0.L4%18%bbentry
3758096383
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3758096384
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11609 expr point z3v487.ce11609 done
=inductive-invariants point_set point z3.ce11702
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 2 for input.spec-%var-i-1.L4%6%bbentry
13378815
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1308371611
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 4 for input.dst.llvm-%x
2096065536
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 5 for input.dst.llvm-%n
1083740616
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 6 for input.dst.llvm-%m
4194305
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
13378815
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 44 for input.spec-%var-j-0.L4%18%bbentry
5
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 45 for input.spec-%var-i-0.L4%18%bbentry
13378815
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
13378816
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11702 expr point z3.ce11702 done
=inductive-invariants point_set point z3v487.ce11703
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1559046073
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 4 for input.dst.llvm-%x
3619684352
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 5 for input.dst.llvm-%n
2014426144
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 6 for input.dst.llvm-%m
17
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 44 for input.spec-%var-j-0.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11703 expr point z3v487.ce11703 done
=inductive-invariants point_set point z3.ce11796
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 2 for input.spec-%var-i-1.L4%6%bbentry
713039424
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1194579652
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 4 for input.dst.llvm-%x
2315224828
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 5 for input.dst.llvm-%n
948182273
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 6 for input.dst.llvm-%m
1686379522
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
713039424
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 44 for input.spec-%var-j-0.L4%18%bbentry
948182273
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 45 for input.spec-%var-i-0.L4%18%bbentry
713039424
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
713039425
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
948182273
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11796 expr point z3.ce11796 done
=inductive-invariants point_set point z3.ce11858
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 2 for input.spec-%var-i-1.L4%6%bbentry
8953921
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 3 for input.spec-%var-ret-1.L4%6%bbentry
186175567
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 4 for input.dst.llvm-%x
2111667960
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 5 for input.dst.llvm-%n
18964488
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 6 for input.dst.llvm-%m
1074077705
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8953921
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 44 for input.spec-%var-j-0.L4%18%bbentry
18964489
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 45 for input.spec-%var-i-0.L4%18%bbentry
8953921
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
8953922
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
18964489
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11858 expr point z3.ce11858 done
=inductive-invariants point_set point z3v487.ce11859
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 2 for input.spec-%var-i-1.L4%6%bbentry
536870911
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 3 for input.spec-%var-ret-1.L4%6%bbentry
2094587483
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 5 for input.dst.llvm-%n
536879234
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 6 for input.dst.llvm-%m
536887361
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 44 for input.spec-%var-j-0.L4%18%bbentry
536879235
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 45 for input.spec-%var-i-0.L4%18%bbentry
536870911
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
536870912
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536879235
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11859 expr point z3v487.ce11859 done
=inductive-invariants point_set point z3v487.ce11952
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 2 for input.spec-%var-i-1.L4%6%bbentry
1610612736
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 3 for input.spec-%var-ret-1.L4%6%bbentry
127
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 6 for input.dst.llvm-%m
1146384338
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1610612736
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
127
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11952 expr point z3v487.ce11952 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L4%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L4%18%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L4%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce157
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce25
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce26
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce212
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce47
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce48
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce69
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce113
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce91
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce135
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce169
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3.ce168
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3v487.ce190
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3.ce11487
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 15: z3.ce10137
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 16: z3v487.ce11952
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=17; number of preds=3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 8->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce10614
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce10995
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce10137
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce10476
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce10677
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce10869
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce157
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce223
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce245
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce25
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce26
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce267
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce10614
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce10995
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce10137
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3.ce10476
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce10677
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3v487.ce10869
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3v487.ce157
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce25
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3v487.ce26
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce223
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3.ce10137
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 11 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 39
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 40
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 41
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 42
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 43
1 : spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=11; number of visited CEs=1; number of preds=2
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L4%18%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 13 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 45
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 46
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 47
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 49
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 50
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.50
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-32-free_var_idx.49
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.48
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.47
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-1.L4%6%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.45
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 6
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce212
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce168
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce190
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce1485
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce11507
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce11086
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce11568
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce6626
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce6586
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce6666
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce11242
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce10227
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3.ce11419
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3v487.ce11420
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=13; number of visited CEs=15; number of preds=7
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 44->0; 45->0; 46->0; 47->0; 48->0; 49->0; 50->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 44->0; 45->0; 46->0; 47->0; 48->0; 49->0; 50->0; 
45
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->1; 46->0; 47->0; 48->0; 49->0; 50->0; 
47
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->0; 46->0; 47->1; 48->0; 49->0; 50->0; 
48
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 44->4294967295; 45->0; 46->0; 47->0; 48->1; 49->0; 50->0; 
49
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->0; 46->0; 47->0; 48->0; 49->1; 50->0; 
50
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->0; 46->4294967295; 47->0; 48->0; 49->0; 50->1; 
matrix done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 44
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce11242
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce11608
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce11702
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 45
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce10227
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce10262
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce10553
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce10707
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce10808
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 47
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce10227
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce10520
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce10553
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3v487.ce10775
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce10932
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce212
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce223
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce245
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce1485
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce6586
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3v487.ce6587
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 4: z3.ce6706
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce10227
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3v487.ce10262
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3v487.ce10553
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 4: z3v487.ce10707
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 5: z3v487.ce10808
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 1: z3v487.ce11242
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 2: z3.ce11608
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 3: z3.ce11702
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini name dst-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini expr_group_type HOUDINI with 48 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 51
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 52
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 54
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 56
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 58
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 59
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 60
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 63
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 64
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 70
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 71
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 72
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 73
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 74
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 1: z3v487.ce223
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 2: z3v487.ce1485
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 3: z3.ce6586
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 4: z3v487.ce11242
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 5: z3v487.ce10227
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 6: z3v487.ce10808
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 7: z3.ce11796
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 8: z3.ce11858
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based name spec-coupling-invariants
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 26 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 39
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 40
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 41
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 77
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 78
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 80
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 81
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%x : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 10) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 82
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 83
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%m : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 84
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%x : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 4) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 90
1 : spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L4%6%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 91
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 92
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ce 0: z3v487.ce157
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based summary: number of exprs=26; number of visited CEs=1; number of preds=3
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%6%bbentry_Lfor.cond%1%bbentry.to_pcL4%18%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-1.L4%6%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-1.L4%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%18%bbentry_Lfor.cond1%1%bbentry.to_pcL4%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L4%18%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%18%bbentry_Lfor.cond1%1%bbentry.to_pcL4%18%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
11 : input.spec-%var-j-0.L4%18%bbentry : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 1 { 0x1 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : input.spec-%var-i-0.L4%18%bbentry : BV:32
16 : bvugt(15, 11) : BOOL
17 : not(16) : BOOL
18 : or(16, 17) : BOOL
19 : and(14, 18) : BOOL
20 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
21 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
23 : sum_is(22, 13) : BOOL
24 : 0 { 0x0 +1.0e1025 } : INT
25 : sum_is(12, 24) : BOOL
26 : and(23, 25) : BOOL
27 : or(19, 26) : BOOL
28 : or(9, 27) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L4%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L4%18%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=SRC Ranking expr 3
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=SRC Tie Breaking expr 2
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 3
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 4
1 : input.spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 5
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 6
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140539 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140432 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140540 : select(140429, 140430, 140539, 140432, 140412, 140413) : BV:32
=RhsExpr
140428 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140541 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140433 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140542 : select(140429, 140430, 140541, 140433, 140412, 140413) : BV:32
=RhsExpr
140427 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140431 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140544 : select(140429, 140430, 140543, 140431, 140412, 140413) : BV:32
=RhsExpr
140426 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140426 : input.dst.llvm-%x : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140439 : islangaligned(140426, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
141177 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
141179 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
141180 : bvule(141177, 141179) : BOOL
140409 : 4 { 0x4 +1.47e129 } : BV:32
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141181 : bvadd(140409, 140337) : BV:32
141182 : bvadd(141177, 141181) : BV:32
141183 : eq(141179, 141182) : BOOL
141184 : and(141180, 141183) : BOOL
141185 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141186 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141187 : bvule(141185, 141186) : BOOL
141188 : and(141184, 141187) : BOOL
141189 : bvadd(141185, 141181) : BV:32
141190 : eq(141186, 141189) : BOOL
141191 : and(141188, 141190) : BOOL
141192 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
141193 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
141194 : bvule(141192, 141193) : BOOL
141195 : and(141191, 141194) : BOOL
141196 : bvadd(141192, 141181) : BV:32
141197 : eq(141193, 141196) : BOOL
141198 : and(141195, 141197) : BOOL
141199 : bvuge(141177, 141185) : BOOL
141200 : bvule(141177, 141186) : BOOL
141201 : and(141199, 141200) : BOOL
141203 : bvuge(141179, 141185) : BOOL
141204 : bvule(141179, 141186) : BOOL
141205 : and(141203, 141204) : BOOL
141206 : not(141205) : BOOL
141207 : andnot1(141201, 141206) : BOOL
141202 : bvuge(141185, 141177) : BOOL
141208 : bvule(141185, 141179) : BOOL
141209 : and(141202, 141208) : BOOL
141211 : bvuge(141186, 141177) : BOOL
141212 : bvule(141186, 141179) : BOOL
141213 : and(141211, 141212) : BOOL
141214 : not(141213) : BOOL
141215 : andnot1(141209, 141214) : BOOL
141210 : and(141207, 141215) : BOOL
141216 : bvuge(141177, 141192) : BOOL
141217 : bvule(141177, 141193) : BOOL
141218 : and(141216, 141217) : BOOL
141220 : bvuge(141179, 141192) : BOOL
141221 : bvule(141179, 141193) : BOOL
141222 : and(141220, 141221) : BOOL
141223 : not(141222) : BOOL
141224 : andnot1(141218, 141223) : BOOL
141227 : and(141210, 141224) : BOOL
141219 : bvuge(141192, 141177) : BOOL
141225 : bvule(141192, 141179) : BOOL
141226 : and(141219, 141225) : BOOL
141228 : bvuge(141193, 141177) : BOOL
141229 : bvule(141193, 141179) : BOOL
141230 : and(141228, 141229) : BOOL
141231 : not(141230) : BOOL
141232 : andnot1(141226, 141231) : BOOL
141233 : and(141227, 141232) : BOOL
141234 : bvuge(141185, 141192) : BOOL
141235 : bvule(141185, 141193) : BOOL
141236 : and(141234, 141235) : BOOL
141238 : bvuge(141186, 141192) : BOOL
141239 : bvule(141186, 141193) : BOOL
141240 : and(141238, 141239) : BOOL
141241 : not(141240) : BOOL
141242 : andnot1(141236, 141241) : BOOL
141245 : and(141233, 141242) : BOOL
141237 : bvuge(141192, 141185) : BOOL
141243 : bvule(141192, 141186) : BOOL
141244 : and(141237, 141243) : BOOL
141246 : bvuge(141193, 141185) : BOOL
141247 : bvule(141193, 141186) : BOOL
141248 : and(141246, 141247) : BOOL
141249 : not(141248) : BOOL
141250 : andnot1(141244, 141249) : BOOL
141251 : and(141245, 141250) : BOOL
141252 : and(141198, 141251) : BOOL
140433 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
141253 : 3 { 0x3 +1.35e129 } : BV:32
141254 : bvand(140433, 141253) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141255 : eq(141254, 140276) : BOOL
140431 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
141256 : bvand(140431, 141253) : BV:32
141257 : eq(141256, 140276) : BOOL
141258 : and(141255, 141257) : BOOL
140432 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
141259 : bvand(140432, 141253) : BV:32
141260 : eq(141259, 140276) : BOOL
141261 : and(141258, 141260) : BOOL
141262 : and(141252, 141261) : BOOL
141263 : eq(140433, 141177) : BOOL
141264 : eq(140431, 141185) : BOOL
141265 : and(141263, 141264) : BOOL
141266 : eq(140432, 141192) : BOOL
141267 : and(141265, 141266) : BOOL
141268 : and(141262, 141267) : BOOL
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140434 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141269 : region_agrees_with_memlabel(140430, 140276, 140288, 140434) : BOOL
141270 : and(141268, 141269) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140393 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140397 : bvule(140276, 140393) : BOOL
140427 : input.dst.llvm-%n : BV:32
141271 : bvult(140393, 140427) : BOOL
141272 : and(140397, 141271) : BOOL
141273 : lambda(140393, 141272) : FUNCTION[BV:32 -> BOOL]
140394 : Lambda1 : BV:32
140401 : bvule(140276, 140394) : BOOL
140428 : input.dst.llvm-%m : BV:32
141274 : bvult(140394, 140428) : BOOL
141275 : and(140401, 141274) : BOOL
141293 : lambda(140394, 141275) : FUNCTION[BV:32 -> BOOL]
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140407 : memlabel-top : MEMLABEL
140409 : 4 { 0x4 +1.47e129 } : BV:32
140415 : bvmul(140394, 140409) : BV:32
140410 : bvmul(140393, 140409) : BV:32
140426 : input.dst.llvm-%x : BV:32
141313 : bvadd(140410, 140426) : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
141314 : select(140429, 140430, 140407, 141313, 140412, 140413) : BV:32
141317 : bvadd(140415, 141314) : BV:32
141319 : select(140429, 140430, 140407, 141317, 140412, 140413) : BV:32
141321 : lambda(140394, 141319) : FUNCTION[BV:32 -> BV:32]
141322 : map(141293, 141321) : MAP[BV:32 -> BV:32]
141326 : lambda(140393, 141322) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141327 : map(141273, 141326) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141339 : eq(140273, 141327) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
fold-conjunct
=LhsExpr
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140428 : input.dst.llvm-%m : BV:32
140810 : bvult(140800, 140428) : BOOL
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140801 : bvugt(140799, 140800) : BOOL
497774 : not(140801) : BOOL
497775 : or(140801, 497774) : BOOL
497786 : and(140810, 497775) : BOOL
140589 : 4 { 0x4 +1.0e1025 } : BV:64
140460 : 32 { 0x20 +1.0e1025 } : INT
140829 : bvsign_ext(140799, 140460) : BV:64
140980 : bvmul(140589, 140829) : BV:64
140464 : 63 { 0x3f +1.0e1025 } : INT
140981 : bvextract(140980, 140464, 140460) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140828 : bvslt(140799, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140994 : ite(140828, 140337, 140276) : BV:32
140996 : eq(140981, 140994) : BOOL
140412 : 4 { 0x4 +1.0e1025 } : INT
140998 : isindexforsize(140996, 140412) : BOOL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
141000 : isgepoffset(140924, 140921) : BOOL
141004 : islangaligned(140924, 140412) : BOOL
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
141006 : islangaligned(140930, 140412) : BOOL
141009 : and(141004, 141006) : BOOL
140844 : bvsign_ext(140800, 140460) : BV:64
141022 : bvmul(140589, 140844) : BV:64
141023 : bvextract(141022, 140464, 140460) : BV:32
140843 : bvslt(140800, 140276) : BOOL
141036 : ite(140843, 140337, 140276) : BV:32
141038 : eq(141023, 141036) : BOOL
141040 : isindexforsize(141038, 140412) : BOOL
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
141042 : isgepoffset(140935, 140933) : BOOL
141047 : and(140998, 141000, 141004, 141009, 141040, 141042) : BOOL
140962 : islangaligned(140935, 140412) : BOOL
500884 : and(141047, 140962) : BOOL
140275 : 1 { 0x1 } : BOOL
500885 : eq(500884, 140275) : BOOL
500889 : implies(497774, 500885) : BOOL
500890 : implies(140801, 500885) : BOOL
500891 : and(500889, 500890) : BOOL
500886 : eq(500891, 140275) : BOOL
500887 : implies(497786, 500886) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L4%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 10
=bv_rank at L4%18%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 24
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
