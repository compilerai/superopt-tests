==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x13 $x15)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x13 $x15)))
 (let (($x19 (and $x10 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x207 (= true false)))
 (let (($x208 (= $x207 true)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x196 (concat ?x193 (concat ?x189 ?x187)))))
 (let (($x198 (= ?x197 input.dst.llvm-%l)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x180 (not $x179)))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x170 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x176 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x169 $x170)))))))
 (let (($x164 (= $x176 true)))
 (let (($x165 (= $x164 true)))
 (let (($x177 (= $x165 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x155)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x151 $x153)))
 (let (($x157 (and $x154 $x156)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x139 $x157)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x144)))))))
 (let (($x159 (and $x150 $x158)))
 (let (($x160 (= $x159 true)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x118 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x129 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x118 (_ bv3 32)))))
 (let (($x135 (=> (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x129)))))))
 (let (($x120 (= $x135 true)))
 (let (($x121 (= $x120 true)))
 (let (($x136 (= $x121 true)))
 (let (($x163 (and $x136 $x162)))
 (let (($x178 (and $x163 $x177)))
 (let (($x184 (and $x178 $x183)))
 (let (($x201 (and $x184 $x200)))
 (let (($x114 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x202 (and $x114 $x201)))
 (let (($x106 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x107 (and $x106 true)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x108 (=> $x102 $x107)))
 (let (($x103 (= $x102 false)))
 (let (($x21 (= false false)))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x100 (=> $x98 $x21)))
 (let (($x99 (= $x98 true)))
 (let (($x101 (and $x99 $x100)))
 (let (($x104 (and $x101 $x103)))
 (let (($x109 (and $x104 $x108)))
 (let (($x96 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x110 (and $x96 $x109)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (=> $x92 $x110)))
 (let (($x93 (= $x92 false)))
 (let (($x88 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x90 (=> $x88 $x21)))
 (let (($x89 (= $x88 true)))
 (let (($x91 (and $x89 $x90)))
 (let (($x94 (and $x91 $x93)))
 (let (($x112 (and $x94 $x111)))
 (let (($x203 (and $x112 $x202)))
 (let (($x78 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x81 (=> $x78 true)))
 (let (($x79 (= $x78 false)))
 (let (($x74 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x76 (=> $x74 $x21)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (and $x75 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x82 (and $x80 $x81)))
 (let (($x72 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x83 (and $x72 $x82)))
 (let (($x68 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x84 (=> $x68 $x83)))
 (let (($x69 (= $x68 false)))
 (let (($x64 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x66 (=> $x64 $x21)))
 (let (($x65 (= $x64 true)))
 (let (($x67 (and $x65 $x66)))
 (let (($x70 (and $x67 $x69)))
 (let (($x85 (and $x70 $x84)))
 (let (($x62 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x86 (and $x62 $x85)))
 (let (($x204 (and $x86 $x203)))
 (let (($x54 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x54 true)))
 (let (($x50 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x56 (=> $x50 $x55)))
 (let (($x51 (= $x50 false)))
 (let (($x15 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x15 $x21)))
 (let (($x33 (= $x15 true)))
 (let (($x14 (and $x33 $x31)))
 (let (($x52 (and $x14 $x51)))
 (let (($x57 (and $x52 $x56)))
 (let (($x28 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x58 (and $x28 $x57)))
 (let (($x30 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x59 (=> $x30 $x58)))
 (let (($x41 (= $x30 true)))
 (let (($x10 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x34 (=> $x10 $x21)))
 (let (($x39 (= $x10 false)))
 (let (($x8 (and $x39 $x34)))
 (let (($x45 (and $x8 $x41)))
 (let (($x60 (and $x45 $x59)))
 (let (($x205 (and $x60 $x204)))
 (let (($x12 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x38 (and $x12 true)))
 (let (($x17 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x6 (=> $x17 $x38)))
 (let (($x22 (= $x17 false)))
 (let (($x29 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x29 $x21)))
 (let (($x40 (= $x29 true)))
 (let (($x48 (and $x40 $x42)))
 (let (($x36 (and $x48 $x22)))
 (let (($x37 (and $x36 $x6)))
 (let (($x49 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x18 (and $x49 $x37)))
 (let (($x46 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x44 (=> $x46 $x18)))
 (let (($x47 (= $x46 true)))
 (let (($x23 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x35 (=> $x23 $x21)))
 (let (($x16 (= $x23 false)))
 (let (($x27 (and $x16 $x35)))
 (let (($x20 (and $x27 $x47)))
 (let (($x13 (and $x20 $x44)))
 (let (($x206 (and $x13 $x205)))
 (let (($x209 (=> $x206 $x208)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x207 (= true false)))
 (let (($x208 (= $x207 true)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x196 (concat ?x193 (concat ?x189 ?x187)))))
 (let (($x198 (= ?x197 input.dst.llvm-%l)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x180 (not $x179)))
 (let (($x181 (= $x180 true)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let (($x170 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x176 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x169 $x170)))))))
 (let (($x164 (= $x176 true)))
 (let (($x165 (= $x164 true)))
 (let (($x177 (= $x165 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x155)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x151 $x153)))
 (let (($x157 (and $x154 $x156)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x139 $x157)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x144)))))))
 (let (($x159 (and $x150 $x158)))
 (let (($x160 (= $x159 true)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x118 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x129 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x118 (_ bv3 32)))))
 (let (($x135 (=> (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x129)))))))
 (let (($x120 (= $x135 true)))
 (let (($x121 (= $x120 true)))
 (let (($x136 (= $x121 true)))
 (let (($x163 (and $x136 $x162)))
 (let (($x178 (and $x163 $x177)))
 (let (($x184 (and $x178 $x183)))
 (let (($x201 (and $x184 $x200)))
 (let (($x114 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x202 (and $x114 $x201)))
 (let (($x106 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x107 (and $x106 true)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x108 (=> $x102 $x107)))
 (let (($x103 (= $x102 false)))
 (let (($x21 (= false false)))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x100 (=> $x98 $x21)))
 (let (($x99 (= $x98 true)))
 (let (($x101 (and $x99 $x100)))
 (let (($x104 (and $x101 $x103)))
 (let (($x109 (and $x104 $x108)))
 (let (($x96 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x110 (and $x96 $x109)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (=> $x92 $x110)))
 (let (($x93 (= $x92 false)))
 (let (($x88 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x90 (=> $x88 $x21)))
 (let (($x89 (= $x88 true)))
 (let (($x91 (and $x89 $x90)))
 (let (($x94 (and $x91 $x93)))
 (let (($x112 (and $x94 $x111)))
 (let (($x203 (and $x112 $x202)))
 (let (($x78 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x81 (=> $x78 true)))
 (let (($x79 (= $x78 false)))
 (let (($x74 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x76 (=> $x74 $x21)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (and $x75 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x82 (and $x80 $x81)))
 (let (($x72 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x83 (and $x72 $x82)))
 (let (($x68 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x84 (=> $x68 $x83)))
 (let (($x69 (= $x68 false)))
 (let (($x64 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x66 (=> $x64 $x21)))
 (let (($x65 (= $x64 true)))
 (let (($x67 (and $x65 $x66)))
 (let (($x70 (and $x67 $x69)))
 (let (($x85 (and $x70 $x84)))
 (let (($x62 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x86 (and $x62 $x85)))
 (let (($x204 (and $x86 $x203)))
 (let (($x54 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x54 true)))
 (let (($x50 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x56 (=> $x50 $x55)))
 (let (($x51 (= $x50 false)))
 (let (($x15 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x15 $x21)))
 (let (($x33 (= $x15 true)))
 (let (($x14 (and $x33 $x31)))
 (let (($x52 (and $x14 $x51)))
 (let (($x57 (and $x52 $x56)))
 (let (($x28 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x58 (and $x28 $x57)))
 (let (($x30 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x59 (=> $x30 $x58)))
 (let (($x41 (= $x30 true)))
 (let (($x10 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x34 (=> $x10 $x21)))
 (let (($x39 (= $x10 false)))
 (let (($x8 (and $x39 $x34)))
 (let (($x45 (and $x8 $x41)))
 (let (($x60 (and $x45 $x59)))
 (let (($x205 (and $x60 $x204)))
 (let (($x12 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x38 (and $x12 true)))
 (let (($x17 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x6 (=> $x17 $x38)))
 (let (($x22 (= $x17 false)))
 (let (($x29 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x29 $x21)))
 (let (($x40 (= $x29 true)))
 (let (($x48 (and $x40 $x42)))
 (let (($x36 (and $x48 $x22)))
 (let (($x37 (and $x36 $x6)))
 (let (($x49 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x18 (and $x49 $x37)))
 (let (($x46 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x44 (=> $x46 $x18)))
 (let (($x47 (= $x46 true)))
 (let (($x23 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x35 (=> $x23 $x21)))
 (let (($x16 (= $x23 false)))
 (let (($x27 (and $x16 $x35)))
 (let (($x20 (and $x27 $x47)))
 (let (($x13 (and $x20 $x44)))
 (let (($x206 (and $x13 $x205)))
 (let (($x209 (=> $x206 $x208)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1011d238)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x39)
                     #x1011d239
                     #xd2)
              #x1011d23b
              #x90)
       #x1011d23a
       #x11))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x9011d239)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1011d23b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1011d238)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv524284 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv524284 32) (_ bv253 8)) (_ bv524285 32) (_ bv255 8)) (_ bv524286 32) (_ bv255 8)) (_ bv524287 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv524287 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv524284 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv524288 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv134217728 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x115 (= true false)))
 (let (($x137 (= $x115 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x197 (concat ?x189 ?x193)))))
 (let (($x202 (= ?x201 input.dst.llvm-%l)))
 (let (($x203 (= $x202 true)))
 (let (($x204 (= $x203 true)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x183 (not $x182)))
 (let (($x184 (= $x183 true)))
 (let (($x185 (= $x184 true)))
 (let (($x195 (= $x185 true)))
 (let (($x174 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x179 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x174)))))))
 (let (($x168 (= $x179 true)))
 (let (($x169 (= $x168 true)))
 (let (($x180 (= $x169 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x158)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x154 $x156)))
 (let (($x160 (and $x157 $x159)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x143 $x160)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x148)))))))
 (let (($x162 (and $x153 $x161)))
 (let (($x163 (= $x162 true)))
 (let (($x166 (= $x163 true)))
 (let (($x167 (= $x166 true)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x132 (bvugt ?x122 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x122 (_ bv3 32)))))
 (let (($x140 (=> (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x132)))))))
 (let (($x134 (= $x140 true)))
 (let (($x124 (= $x134 true)))
 (let (($x141 (= $x124 true)))
 (let (($x175 (and $x141 $x167)))
 (let (($x181 (and $x175 $x180)))
 (let (($x196 (and $x181 $x195)))
 (let (($x205 (and $x196 $x204)))
 (let (($x114 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x206 (and $x114 $x205)))
 (let (($x106 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x107 (and $x106 false)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x108 (=> $x102 $x107)))
 (let (($x103 (= $x102 false)))
 (let (($x21 (= false false)))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x100 (=> $x98 $x21)))
 (let (($x99 (= $x98 true)))
 (let (($x101 (and $x99 $x100)))
 (let (($x104 (and $x101 $x103)))
 (let (($x109 (and $x104 $x108)))
 (let (($x96 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x110 (and $x96 $x109)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (=> $x92 $x110)))
 (let (($x93 (= $x92 false)))
 (let (($x88 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x90 (=> $x88 $x21)))
 (let (($x89 (= $x88 true)))
 (let (($x91 (and $x89 $x90)))
 (let (($x94 (and $x91 $x93)))
 (let (($x112 (and $x94 $x111)))
 (let (($x207 (and $x112 $x206)))
 (let (($x78 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x81 (=> $x78 false)))
 (let (($x79 (= $x78 false)))
 (let (($x74 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x76 (=> $x74 $x21)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (and $x75 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x82 (and $x80 $x81)))
 (let (($x72 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x83 (and $x72 $x82)))
 (let (($x68 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x84 (=> $x68 $x83)))
 (let (($x69 (= $x68 false)))
 (let (($x64 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x66 (=> $x64 $x21)))
 (let (($x65 (= $x64 true)))
 (let (($x67 (and $x65 $x66)))
 (let (($x70 (and $x67 $x69)))
 (let (($x85 (and $x70 $x84)))
 (let (($x62 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x86 (and $x62 $x85)))
 (let (($x208 (and $x86 $x207)))
 (let (($x54 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x54 false)))
 (let (($x50 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x56 (=> $x50 $x55)))
 (let (($x51 (= $x50 false)))
 (let (($x15 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x15 $x21)))
 (let (($x33 (= $x15 true)))
 (let (($x14 (and $x33 $x31)))
 (let (($x52 (and $x14 $x51)))
 (let (($x57 (and $x52 $x56)))
 (let (($x28 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x58 (and $x28 $x57)))
 (let (($x30 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x59 (=> $x30 $x58)))
 (let (($x41 (= $x30 true)))
 (let (($x10 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x34 (=> $x10 $x21)))
 (let (($x39 (= $x10 false)))
 (let (($x8 (and $x39 $x34)))
 (let (($x45 (and $x8 $x41)))
 (let (($x60 (and $x45 $x59)))
 (let (($x209 (and $x60 $x208)))
 (let (($x12 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x38 (and $x12 false)))
 (let (($x17 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x6 (=> $x17 $x38)))
 (let (($x22 (= $x17 false)))
 (let (($x29 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x29 $x21)))
 (let (($x40 (= $x29 true)))
 (let (($x48 (and $x40 $x42)))
 (let (($x36 (and $x48 $x22)))
 (let (($x37 (and $x36 $x6)))
 (let (($x49 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x18 (and $x49 $x37)))
 (let (($x46 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x44 (=> $x46 $x18)))
 (let (($x47 (= $x46 true)))
 (let (($x23 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x35 (=> $x23 $x21)))
 (let (($x16 (= $x23 false)))
 (let (($x27 (and $x16 $x35)))
 (let (($x20 (and $x27 $x47)))
 (let (($x13 (and $x20 $x44)))
 (let (($x210 (and $x13 $x209)))
 (let (($x186 (=> $x210 $x137)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x115 (= true false)))
 (let (($x137 (= $x115 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x197 (concat ?x189 ?x193)))))
 (let (($x202 (= ?x201 input.dst.llvm-%l)))
 (let (($x203 (= $x202 true)))
 (let (($x204 (= $x203 true)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x183 (not $x182)))
 (let (($x184 (= $x183 true)))
 (let (($x185 (= $x184 true)))
 (let (($x195 (= $x185 true)))
 (let (($x174 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x179 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x174)))))))
 (let (($x168 (= $x179 true)))
 (let (($x169 (= $x168 true)))
 (let (($x180 (= $x169 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x158)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x154 $x156)))
 (let (($x160 (and $x157 $x159)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x143 $x160)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x148)))))))
 (let (($x162 (and $x153 $x161)))
 (let (($x163 (= $x162 true)))
 (let (($x166 (= $x163 true)))
 (let (($x167 (= $x166 true)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x132 (bvugt ?x122 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x122 (_ bv3 32)))))
 (let (($x140 (=> (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x132)))))))
 (let (($x134 (= $x140 true)))
 (let (($x124 (= $x134 true)))
 (let (($x141 (= $x124 true)))
 (let (($x175 (and $x141 $x167)))
 (let (($x181 (and $x175 $x180)))
 (let (($x196 (and $x181 $x195)))
 (let (($x205 (and $x196 $x204)))
 (let (($x114 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x206 (and $x114 $x205)))
 (let (($x106 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x107 (and $x106 false)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x108 (=> $x102 $x107)))
 (let (($x103 (= $x102 false)))
 (let (($x21 (= false false)))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x100 (=> $x98 $x21)))
 (let (($x99 (= $x98 true)))
 (let (($x101 (and $x99 $x100)))
 (let (($x104 (and $x101 $x103)))
 (let (($x109 (and $x104 $x108)))
 (let (($x96 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x110 (and $x96 $x109)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x111 (=> $x92 $x110)))
 (let (($x93 (= $x92 false)))
 (let (($x88 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x90 (=> $x88 $x21)))
 (let (($x89 (= $x88 true)))
 (let (($x91 (and $x89 $x90)))
 (let (($x94 (and $x91 $x93)))
 (let (($x112 (and $x94 $x111)))
 (let (($x207 (and $x112 $x206)))
 (let (($x78 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x81 (=> $x78 false)))
 (let (($x79 (= $x78 false)))
 (let (($x74 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x76 (=> $x74 $x21)))
 (let (($x75 (= $x74 true)))
 (let (($x77 (and $x75 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x82 (and $x80 $x81)))
 (let (($x72 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x83 (and $x72 $x82)))
 (let (($x68 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x84 (=> $x68 $x83)))
 (let (($x69 (= $x68 false)))
 (let (($x64 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x66 (=> $x64 $x21)))
 (let (($x65 (= $x64 true)))
 (let (($x67 (and $x65 $x66)))
 (let (($x70 (and $x67 $x69)))
 (let (($x85 (and $x70 $x84)))
 (let (($x62 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x86 (and $x62 $x85)))
 (let (($x208 (and $x86 $x207)))
 (let (($x54 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x55 (and $x54 false)))
 (let (($x50 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x56 (=> $x50 $x55)))
 (let (($x51 (= $x50 false)))
 (let (($x15 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x15 $x21)))
 (let (($x33 (= $x15 true)))
 (let (($x14 (and $x33 $x31)))
 (let (($x52 (and $x14 $x51)))
 (let (($x57 (and $x52 $x56)))
 (let (($x28 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x58 (and $x28 $x57)))
 (let (($x30 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x59 (=> $x30 $x58)))
 (let (($x41 (= $x30 true)))
 (let (($x10 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x34 (=> $x10 $x21)))
 (let (($x39 (= $x10 false)))
 (let (($x8 (and $x39 $x34)))
 (let (($x45 (and $x8 $x41)))
 (let (($x60 (and $x45 $x59)))
 (let (($x209 (and $x60 $x208)))
 (let (($x12 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x38 (and $x12 false)))
 (let (($x17 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x6 (=> $x17 $x38)))
 (let (($x22 (= $x17 false)))
 (let (($x29 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x29 $x21)))
 (let (($x40 (= $x29 true)))
 (let (($x48 (and $x40 $x42)))
 (let (($x36 (and $x48 $x22)))
 (let (($x37 (and $x36 $x6)))
 (let (($x49 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x18 (and $x49 $x37)))
 (let (($x46 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x44 (=> $x46 $x18)))
 (let (($x47 (= $x46 true)))
 (let (($x23 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x35 (=> $x23 $x21)))
 (let (($x16 (= $x23 false)))
 (let (($x27 (and $x16 $x35)))
 (let (($x20 (and $x27 $x47)))
 (let (($x13 (and $x20 $x44)))
 (let (($x210 (and $x13 $x209)))
 (let (($x186 (=> $x210 $x137)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00ffc004)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x02)
                     #x00ffc005
                     #x00)
              #x00ffc007
              #x55)
       #x00ffc006
       #x00))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x55000002)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00ffc007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00ffc004)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv524284 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv524284 32) (_ bv253 8)) (_ bv524285 32) (_ bv255 8)) (_ bv524286 32) (_ bv255 8)) (_ bv524287 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv524287 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv524284 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv524288 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv134217728 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x230 (= false true)))
 (let (($x231 (= $x230 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x116 (concat ?x137 (concat ?x208 ?x206)))))
 (let (($x220 (= ?x149 input.dst.llvm-%l)))
 (let (($x221 (= $x220 true)))
 (let (($x222 (= $x221 true)))
 (let (($x192 (= input.dst.llvm-%l ?x149)))
 (let (($x212 (and $x192 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x198)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x188 $x193)))
 (let (($x202 (and $x187 $x201)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x182 $x202)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x197 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x196)))))))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x165 (= (bvand ?x18 (_ bv4294967292 32)) ?x18)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x161 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x162 (and true $x161)))
 (let (($x167 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x175 (and $x167 $x162)))
 (let (($x170 (and $x161 $x175)))
 (let (($x156 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x18 (bvsub ?x18 (_ bv4 32))) (bvult ?x18 (bvsub ?x18 (_ bv4 32))))))
 (let (($x176 (and (and (and $x156 $x162) $x170) $x172)))
 (let (($x177 (and $x176 $x165)))
 (let (($x215 (and (and (and $x177 $x197) $x203) $x212)))
 (let (($x216 (= $x215 true)))
 (let (($x217 (= $x216 true)))
 (let (($x218 (= $x217 true)))
 (let (($x179 (= $x177 true)))
 (let (($x168 (= $x179 true)))
 (let (($x169 (= $x168 true)))
 (let (($x219 (and $x169 $x218)))
 (let (($x223 (and $x219 $x222)))
 (let (($x153 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x224 (and $x153 $x223)))
 (let (($x152 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x146 (and $x152 true)))
 (let (($x124 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x147 (=> $x124 $x146)))
 (let (($x141 (= $x124 false)))
 (let (($x35 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x140 (=> $x120 $x35)))
 (let (($x121 (= $x120 true)))
 (let (($x134 (and $x121 $x140)))
 (let (($x144 (and $x134 $x141)))
 (let (($x148 (and $x144 $x147)))
 (let (($x133 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x150 (and $x133 $x148)))
 (let (($x130 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x138 (=> $x130 $x150)))
 (let (($x131 (= $x130 false)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x128 (=> $x127 $x35)))
 (let (($x136 (= $x127 true)))
 (let (($x129 (and $x136 $x128)))
 (let (($x125 (and $x129 $x131)))
 (let (($x139 (and $x125 $x138)))
 (let (($x225 (and $x139 $x224)))
 (let (($x108 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x111 (=> $x108 true)))
 (let (($x109 (= $x108 false)))
 (let (($x104 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x106 (=> $x104 $x35)))
 (let (($x105 (= $x104 true)))
 (let (($x107 (and $x105 $x106)))
 (let (($x110 (and $x107 $x109)))
 (let (($x112 (and $x110 $x111)))
 (let (($x102 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x113 (and $x102 $x112)))
 (let (($x98 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x114 (=> $x98 $x113)))
 (let (($x99 (= $x98 false)))
 (let (($x94 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x96 (=> $x94 $x35)))
 (let (($x95 (= $x94 true)))
 (let (($x97 (and $x95 $x96)))
 (let (($x100 (and $x97 $x99)))
 (let (($x118 (and $x100 $x114)))
 (let (($x92 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x122 (and $x92 $x118)))
 (let (($x226 (and $x122 $x225)))
 (let (($x84 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x85 (and $x84 true)))
 (let (($x80 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x86 (=> $x80 $x85)))
 (let (($x81 (= $x80 false)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x78 (=> $x76 $x35)))
 (let (($x77 (= $x76 true)))
 (let (($x79 (and $x77 $x78)))
 (let (($x82 (and $x79 $x81)))
 (let (($x87 (and $x82 $x86)))
 (let (($x74 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x88 (and $x74 $x87)))
 (let (($x70 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x89 (=> $x70 $x88)))
 (let (($x71 (= $x70 true)))
 (let (($x66 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x68 (=> $x66 $x35)))
 (let (($x67 (= $x66 false)))
 (let (($x69 (and $x67 $x68)))
 (let (($x72 (and $x69 $x71)))
 (let (($x90 (and $x72 $x89)))
 (let (($x227 (and $x90 $x226)))
 (let (($x16 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x14 (and $x16 true)))
 (let (($x32 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x53 (=> $x32 $x14)))
 (let (($x43 (= $x32 false)))
 (let (($x6 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x6 $x35)))
 (let (($x33 (= $x6 true)))
 (let (($x11 (and $x33 $x52)))
 (let (($x36 (and $x11 $x43)))
 (let (($x21 (and $x36 $x53)))
 (let (($x45 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x7 (and $x45 $x21)))
 (let (($x51 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x39 (=> $x51 $x7)))
 (let (($x12 (= $x51 true)))
 (let (($x27 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x9 (=> $x27 $x35)))
 (let (($x24 (= $x27 false)))
 (let (($x10 (and $x24 $x9)))
 (let (($x57 (and $x10 $x12)))
 (let (($x64 (and $x57 $x39)))
 (let (($x228 (and $x64 $x227)))
 (let (($x25 (bvugt ?x18 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x18 (_ bv3 32)))))
 (let (($x5 (=> (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x25)))))))
 (let (($x15 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x17 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x15)))))))
 (let (($x46 (and $x17 $x5)))
 (let (($x229 (and $x46 $x228)))
 (let (($x232 (=> $x229 $x231)))
 (not $x232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x230 (= false true)))
 (let (($x231 (= $x230 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x116 (concat ?x137 (concat ?x208 ?x206)))))
 (let (($x220 (= ?x149 input.dst.llvm-%l)))
 (let (($x221 (= $x220 true)))
 (let (($x222 (= $x221 true)))
 (let (($x192 (= input.dst.llvm-%l ?x149)))
 (let (($x212 (and $x192 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x198)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x188 $x193)))
 (let (($x202 (and $x187 $x201)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x182 $x202)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x197 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x195 $x196)))))))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x165 (= (bvand ?x18 (_ bv4294967292 32)) ?x18)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x161 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x162 (and true $x161)))
 (let (($x167 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x175 (and $x167 $x162)))
 (let (($x170 (and $x161 $x175)))
 (let (($x156 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x18 (bvsub ?x18 (_ bv4 32))) (bvult ?x18 (bvsub ?x18 (_ bv4 32))))))
 (let (($x176 (and (and (and $x156 $x162) $x170) $x172)))
 (let (($x177 (and $x176 $x165)))
 (let (($x215 (and (and (and $x177 $x197) $x203) $x212)))
 (let (($x216 (= $x215 true)))
 (let (($x217 (= $x216 true)))
 (let (($x218 (= $x217 true)))
 (let (($x179 (= $x177 true)))
 (let (($x168 (= $x179 true)))
 (let (($x169 (= $x168 true)))
 (let (($x219 (and $x169 $x218)))
 (let (($x223 (and $x219 $x222)))
 (let (($x153 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x224 (and $x153 $x223)))
 (let (($x152 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x146 (and $x152 true)))
 (let (($x124 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x147 (=> $x124 $x146)))
 (let (($x141 (= $x124 false)))
 (let (($x35 (= false false)))
 (let (($x120 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x140 (=> $x120 $x35)))
 (let (($x121 (= $x120 true)))
 (let (($x134 (and $x121 $x140)))
 (let (($x144 (and $x134 $x141)))
 (let (($x148 (and $x144 $x147)))
 (let (($x133 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x150 (and $x133 $x148)))
 (let (($x130 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x138 (=> $x130 $x150)))
 (let (($x131 (= $x130 false)))
 (let (($x127 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x128 (=> $x127 $x35)))
 (let (($x136 (= $x127 true)))
 (let (($x129 (and $x136 $x128)))
 (let (($x125 (and $x129 $x131)))
 (let (($x139 (and $x125 $x138)))
 (let (($x225 (and $x139 $x224)))
 (let (($x108 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x111 (=> $x108 true)))
 (let (($x109 (= $x108 false)))
 (let (($x104 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x106 (=> $x104 $x35)))
 (let (($x105 (= $x104 true)))
 (let (($x107 (and $x105 $x106)))
 (let (($x110 (and $x107 $x109)))
 (let (($x112 (and $x110 $x111)))
 (let (($x102 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x113 (and $x102 $x112)))
 (let (($x98 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x114 (=> $x98 $x113)))
 (let (($x99 (= $x98 false)))
 (let (($x94 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x96 (=> $x94 $x35)))
 (let (($x95 (= $x94 true)))
 (let (($x97 (and $x95 $x96)))
 (let (($x100 (and $x97 $x99)))
 (let (($x118 (and $x100 $x114)))
 (let (($x92 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x122 (and $x92 $x118)))
 (let (($x226 (and $x122 $x225)))
 (let (($x84 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x85 (and $x84 true)))
 (let (($x80 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x86 (=> $x80 $x85)))
 (let (($x81 (= $x80 false)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x78 (=> $x76 $x35)))
 (let (($x77 (= $x76 true)))
 (let (($x79 (and $x77 $x78)))
 (let (($x82 (and $x79 $x81)))
 (let (($x87 (and $x82 $x86)))
 (let (($x74 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x88 (and $x74 $x87)))
 (let (($x70 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x89 (=> $x70 $x88)))
 (let (($x71 (= $x70 true)))
 (let (($x66 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x68 (=> $x66 $x35)))
 (let (($x67 (= $x66 false)))
 (let (($x69 (and $x67 $x68)))
 (let (($x72 (and $x69 $x71)))
 (let (($x90 (and $x72 $x89)))
 (let (($x227 (and $x90 $x226)))
 (let (($x16 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x14 (and $x16 true)))
 (let (($x32 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x53 (=> $x32 $x14)))
 (let (($x43 (= $x32 false)))
 (let (($x6 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x52 (=> $x6 $x35)))
 (let (($x33 (= $x6 true)))
 (let (($x11 (and $x33 $x52)))
 (let (($x36 (and $x11 $x43)))
 (let (($x21 (and $x36 $x53)))
 (let (($x45 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x7 (and $x45 $x21)))
 (let (($x51 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x39 (=> $x51 $x7)))
 (let (($x12 (= $x51 true)))
 (let (($x27 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x9 (=> $x27 $x35)))
 (let (($x24 (= $x27 false)))
 (let (($x10 (and $x24 $x9)))
 (let (($x57 (and $x10 $x12)))
 (let (($x64 (and $x57 $x39)))
 (let (($x228 (and $x64 $x227)))
 (let (($x25 (bvugt ?x18 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x18 (_ bv3 32)))))
 (let (($x5 (=> (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x25)))))))
 (let (($x15 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x17 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x15)))))))
 (let (($x46 (and $x17 $x5)))
 (let (($x229 (and $x46 $x228)))
 (let (($x232 (=> $x229 $x231)))
 (not $x232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb3b0fc84)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x6e)
                     #xb3b0fc84
                     #x18)
              #xb3b0fc85
              #x63)
       #xb3b0fc86
       #xcc))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x6ecc6318)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb3b0fc87)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb3b0fc84)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2fffda80)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x78)
                     #x2fffda83
                     #x24)
              #x2fffda81
              #xd2)
       #x2fffda82
       #x4e))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x244ed278)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2fffda83)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2fffda80)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x237 (=> true false)))
 (let (($x212 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x26 (ite $x212 (_ bv0 32) (_ bv1 32))))
 (let (($x234 (bvuge ?x26 (_ bv1 32))))
 (let (($x235 (= true $x234)))
 (let (($x180 (= ?x26 (_ bv0 32))))
 (let (($x205 (= false $x180)))
 (let (($x61 (and $x205 true)))
 (let (($x236 (and $x61 $x235)))
 (let (($x238 (and $x236 $x237)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x192 (concat ?x209 (concat ?x137 ?x210)))))
 (let (($x224 (= ?x123 input.dst.llvm-%l)))
 (let (($x225 (= $x224 true)))
 (let (($x226 (= $x225 true)))
 (let (($x211 (= input.dst.llvm-%l ?x123)))
 (let (($x216 (and $x211 (not $x212))))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x187)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x193 $x198)))
 (let (($x214 (and $x201 $x203)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x195 $x214)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x190)))))))
 (let ((?x44 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x179 (= (bvand ?x44 (_ bv4294967292 32)) ?x44)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x163 (and true $x173)))
 (let (($x175 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x170 (and $x175 $x163)))
 (let (($x174 (and $x173 $x170)))
 (let (($x157 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x44 (bvsub ?x44 (_ bv4 32))) (bvult ?x44 (bvsub ?x44 (_ bv4 32))))))
 (let (($x165 (and (and (and $x157 $x163) $x174) $x172)))
 (let (($x168 (and $x165 $x179)))
 (let (($x219 (and (and (and $x168 $x189) $x204) $x216)))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let (($x222 (= $x221 true)))
 (let (($x169 (= $x168 true)))
 (let (($x183 (= $x169 true)))
 (let (($x184 (= $x183 true)))
 (let (($x223 (and $x184 $x222)))
 (let (($x227 (and $x223 $x226)))
 (let (($x142 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x228 (and $x142 $x227)))
 (let (($x147 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x148 (and $x147 true)))
 (let (($x144 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x150 (=> $x144 $x148)))
 (let (($x145 (= $x144 false)))
 (let (($x10 (= false false)))
 (let (($x140 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x124 (=> $x140 $x10)))
 (let (($x134 (= $x140 true)))
 (let (($x141 (and $x134 $x124)))
 (let (($x152 (and $x141 $x145)))
 (let (($x138 (and $x152 $x150)))
 (let (($x120 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x139 (and $x120 $x138)))
 (let (($x125 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x151 (=> $x125 $x139)))
 (let (($x132 (= $x125 false)))
 (let (($x128 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x130 (=> $x128 $x10)))
 (let (($x129 (= $x128 true)))
 (let (($x131 (and $x129 $x130)))
 (let (($x133 (and $x131 $x132)))
 (let (($x153 (and $x133 $x151)))
 (let (($x229 (and $x153 $x228)))
 (let (($x110 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x113 (=> $x110 true)))
 (let (($x111 (= $x110 false)))
 (let (($x106 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x108 (=> $x106 $x10)))
 (let (($x107 (= $x106 true)))
 (let (($x109 (and $x107 $x108)))
 (let (($x112 (and $x109 $x111)))
 (let (($x114 (and $x112 $x113)))
 (let (($x104 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x118 (and $x104 $x114)))
 (let (($x100 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x122 (=> $x100 $x118)))
 (let (($x101 (= $x100 false)))
 (let (($x96 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x98 (=> $x96 $x10)))
 (let (($x97 (= $x96 true)))
 (let (($x99 (and $x97 $x98)))
 (let (($x102 (and $x99 $x101)))
 (let (($x126 (and $x102 $x122)))
 (let (($x94 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x127 (and $x94 $x126)))
 (let (($x230 (and $x127 $x229)))
 (let (($x86 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x87 (and $x86 true)))
 (let (($x82 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x88 (=> $x82 $x87)))
 (let (($x83 (= $x82 false)))
 (let (($x78 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x80 (=> $x78 $x10)))
 (let (($x79 (= $x78 true)))
 (let (($x81 (and $x79 $x80)))
 (let (($x84 (and $x81 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x90 (and $x76 $x89)))
 (let (($x72 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x91 (=> $x72 $x90)))
 (let (($x73 (= $x72 true)))
 (let (($x68 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x70 (=> $x68 $x10)))
 (let (($x69 (= $x68 false)))
 (let (($x71 (and $x69 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x92 (and $x74 $x91)))
 (let (($x231 (and $x92 $x230)))
 (let (($x53 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x21 (and $x53 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x7 (=> $x36 $x21)))
 (let (($x58 (= $x36 false)))
 (let (($x52 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x32 (=> $x52 $x10)))
 (let (($x11 (= $x52 true)))
 (let (($x43 (and $x11 $x32)))
 (let (($x16 (and $x43 $x58)))
 (let (($x39 (and $x16 $x7)))
 (let (($x6 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x64 (and $x6 $x39)))
 (let (($x57 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x65 (=> $x57 $x64)))
 (let (($x28 (= $x57 true)))
 (let (($x35 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x51 (=> $x35 $x10)))
 (let (($x9 (= $x35 false)))
 (let (($x12 (and $x9 $x51)))
 (let (($x55 (and $x12 $x28)))
 (let (($x66 (and $x55 $x65)))
 (let (($x232 (and $x66 $x231)))
 (let (($x22 (bvugt ?x44 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x44 (_ bv3 32)))))
 (let (($x27 (=> (bvule ?x44 (bvsub (bvadd ?x44 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x22)))))))
 (let (($x23 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x37 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x23)))))))
 (let (($x19 (and $x37 $x27)))
 (let (($x233 (and $x19 $x232)))
 (let (($x241 (=> $x233 $x240)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x237 (=> true false)))
 (let (($x212 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x26 (ite $x212 (_ bv0 32) (_ bv1 32))))
 (let (($x234 (bvuge ?x26 (_ bv1 32))))
 (let (($x235 (= true $x234)))
 (let (($x180 (= ?x26 (_ bv0 32))))
 (let (($x205 (= false $x180)))
 (let (($x61 (and $x205 true)))
 (let (($x236 (and $x61 $x235)))
 (let (($x238 (and $x236 $x237)))
 (let (($x239 (= $x238 true)))
 (let (($x240 (= $x239 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x192 (concat ?x209 (concat ?x137 ?x210)))))
 (let (($x224 (= ?x123 input.dst.llvm-%l)))
 (let (($x225 (= $x224 true)))
 (let (($x226 (= $x225 true)))
 (let (($x211 (= input.dst.llvm-%l ?x123)))
 (let (($x216 (and $x211 (not $x212))))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x187)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x193 $x198)))
 (let (($x214 (and $x201 $x203)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x195 $x214)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x190)))))))
 (let ((?x44 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x179 (= (bvand ?x44 (_ bv4294967292 32)) ?x44)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x163 (and true $x173)))
 (let (($x175 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x170 (and $x175 $x163)))
 (let (($x174 (and $x173 $x170)))
 (let (($x157 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x44 (bvsub ?x44 (_ bv4 32))) (bvult ?x44 (bvsub ?x44 (_ bv4 32))))))
 (let (($x165 (and (and (and $x157 $x163) $x174) $x172)))
 (let (($x168 (and $x165 $x179)))
 (let (($x219 (and (and (and $x168 $x189) $x204) $x216)))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let (($x222 (= $x221 true)))
 (let (($x169 (= $x168 true)))
 (let (($x183 (= $x169 true)))
 (let (($x184 (= $x183 true)))
 (let (($x223 (and $x184 $x222)))
 (let (($x227 (and $x223 $x226)))
 (let (($x142 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x228 (and $x142 $x227)))
 (let (($x147 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x148 (and $x147 true)))
 (let (($x144 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x150 (=> $x144 $x148)))
 (let (($x145 (= $x144 false)))
 (let (($x10 (= false false)))
 (let (($x140 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x124 (=> $x140 $x10)))
 (let (($x134 (= $x140 true)))
 (let (($x141 (and $x134 $x124)))
 (let (($x152 (and $x141 $x145)))
 (let (($x138 (and $x152 $x150)))
 (let (($x120 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x139 (and $x120 $x138)))
 (let (($x125 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x151 (=> $x125 $x139)))
 (let (($x132 (= $x125 false)))
 (let (($x128 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x130 (=> $x128 $x10)))
 (let (($x129 (= $x128 true)))
 (let (($x131 (and $x129 $x130)))
 (let (($x133 (and $x131 $x132)))
 (let (($x153 (and $x133 $x151)))
 (let (($x229 (and $x153 $x228)))
 (let (($x110 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x113 (=> $x110 true)))
 (let (($x111 (= $x110 false)))
 (let (($x106 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x108 (=> $x106 $x10)))
 (let (($x107 (= $x106 true)))
 (let (($x109 (and $x107 $x108)))
 (let (($x112 (and $x109 $x111)))
 (let (($x114 (and $x112 $x113)))
 (let (($x104 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x118 (and $x104 $x114)))
 (let (($x100 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x122 (=> $x100 $x118)))
 (let (($x101 (= $x100 false)))
 (let (($x96 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x98 (=> $x96 $x10)))
 (let (($x97 (= $x96 true)))
 (let (($x99 (and $x97 $x98)))
 (let (($x102 (and $x99 $x101)))
 (let (($x126 (and $x102 $x122)))
 (let (($x94 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x127 (and $x94 $x126)))
 (let (($x230 (and $x127 $x229)))
 (let (($x86 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x87 (and $x86 true)))
 (let (($x82 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x88 (=> $x82 $x87)))
 (let (($x83 (= $x82 false)))
 (let (($x78 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x80 (=> $x78 $x10)))
 (let (($x79 (= $x78 true)))
 (let (($x81 (and $x79 $x80)))
 (let (($x84 (and $x81 $x83)))
 (let (($x89 (and $x84 $x88)))
 (let (($x76 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x90 (and $x76 $x89)))
 (let (($x72 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x91 (=> $x72 $x90)))
 (let (($x73 (= $x72 true)))
 (let (($x68 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x70 (=> $x68 $x10)))
 (let (($x69 (= $x68 false)))
 (let (($x71 (and $x69 $x70)))
 (let (($x74 (and $x71 $x73)))
 (let (($x92 (and $x74 $x91)))
 (let (($x231 (and $x92 $x230)))
 (let (($x53 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x21 (and $x53 true)))
 (let (($x36 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x7 (=> $x36 $x21)))
 (let (($x58 (= $x36 false)))
 (let (($x52 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x32 (=> $x52 $x10)))
 (let (($x11 (= $x52 true)))
 (let (($x43 (and $x11 $x32)))
 (let (($x16 (and $x43 $x58)))
 (let (($x39 (and $x16 $x7)))
 (let (($x6 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x64 (and $x6 $x39)))
 (let (($x57 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x65 (=> $x57 $x64)))
 (let (($x28 (= $x57 true)))
 (let (($x35 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x51 (=> $x35 $x10)))
 (let (($x9 (= $x35 false)))
 (let (($x12 (and $x9 $x51)))
 (let (($x55 (and $x12 $x28)))
 (let (($x66 (and $x55 $x65)))
 (let (($x232 (and $x66 $x231)))
 (let (($x22 (bvugt ?x44 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x44 (_ bv3 32)))))
 (let (($x27 (=> (bvule ?x44 (bvsub (bvadd ?x44 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x22)))))))
 (let (($x23 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x37 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x23)))))))
 (let (($x19 (and $x37 $x27)))
 (let (($x233 (and $x19 $x232)))
 (let (($x241 (=> $x233 $x240)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb3b0fc84)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x6e)
                     #xb3b0fc84
                     #x18)
              #xb3b0fc85
              #x63)
       #xb3b0fc86
       #xcc))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x6ecc6318)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb3b0fc87)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb3b0fc84)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x97e2bfb4)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x97e2bfb7
                     #x92)
              #x97e2bfb5
              #xa9)
       #x97e2bfb6
       #x10))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x9210a980)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x97e2bfb7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x97e2bfb4)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x50 (bvadd ?x59 (_ bv3 32))))
 (let ((?x63 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x244 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x116 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x117 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x247 (store (store (store ?x117 ?x116 ((_ extract 15 8) (_ bv42 32))) ?x244 ((_ extract 23 16) (_ bv42 32))) ?x63 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x253 (store (store ?x247 (bvadd ?x59 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x59 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x258 (store (store ?x253 (bvadd ?x59 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x50 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x263 (concat (select ?x258 ?x244) (concat (select ?x258 ?x116) (select ?x258 input.dst.llvm-%l)))))
 (let ((?x265 (concat (select ?x258 ?x63) ?x263)))
 (let (($x266 (= (_ bv42 32) ?x265)))
 (let (($x267 (and $x266 false)))
 (let (($x268 (=> true $x267)))
 (let (($x216 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x238 (bvuge ?x234 (_ bv1 32))))
 (let (($x239 (= true $x238)))
 (let (($x235 (= ?x234 (_ bv0 32))))
 (let (($x236 (= false $x235)))
 (let (($x237 (and $x236 true)))
 (let (($x240 (and $x237 $x239)))
 (let (($x269 (and $x240 $x268)))
 (let (($x270 (= $x269 true)))
 (let (($x271 (= $x270 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x211 (concat ?x207 (concat ?x209 ?x208)))))
 (let (($x228 (= ?x212 input.dst.llvm-%l)))
 (let (($x229 (= $x228 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= input.dst.llvm-%l ?x212)))
 (let (($x220 (and $x215 (not $x216))))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x214)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x198 $x202)))
 (let (($x218 (and $x203 $x204)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x200 $x218)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x182)))))))
 (let (($x169 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x176 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x166 (and true $x176)))
 (let (($x170 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and $x170 $x166)))
 (let (($x164 (and $x176 $x174)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x179 (and (and (and $x159 $x166) $x164) $x172)))
 (let (($x183 (and $x179 $x169)))
 (let (($x223 (and (and (and $x183 $x187) $x119) $x220)))
 (let (($x224 (= $x223 true)))
 (let (($x225 (= $x224 true)))
 (let (($x226 (= $x225 true)))
 (let (($x184 (= $x183 true)))
 (let (($x196 (= $x184 true)))
 (let (($x191 (= $x196 true)))
 (let (($x227 (and $x191 $x226)))
 (let (($x231 (and $x227 $x230)))
 (let (($x154 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x232 (and $x154 $x231)))
 (let (($x150 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x138 (and $x150 true)))
 (let (($x152 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x139 (=> $x152 $x138)))
 (let (($x146 (= $x152 false)))
 (let (($x12 (= false false)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x144 (=> $x124 $x12)))
 (let (($x141 (= $x124 true)))
 (let (($x145 (and $x141 $x144)))
 (let (($x147 (and $x145 $x146)))
 (let (($x151 (and $x147 $x139)))
 (let (($x140 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x153 (and $x140 $x151)))
 (let (($x133 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x143 (=> $x133 $x153)))
 (let (($x135 (= $x133 false)))
 (let (($x130 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x125 (=> $x130 $x12)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (and $x131 $x125)))
 (let (($x120 (and $x132 $x135)))
 (let (($x142 (and $x120 $x143)))
 (let (($x233 (and $x142 $x232)))
 (let (($x112 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x118 (=> $x112 true)))
 (let (($x113 (= $x112 false)))
 (let (($x108 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x110 (=> $x108 $x12)))
 (let (($x109 (= $x108 true)))
 (let (($x111 (and $x109 $x110)))
 (let (($x114 (and $x111 $x113)))
 (let (($x122 (and $x114 $x118)))
 (let (($x106 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x126 (and $x106 $x122)))
 (let (($x102 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x127 (=> $x102 $x126)))
 (let (($x103 (= $x102 false)))
 (let (($x98 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x100 (=> $x98 $x12)))
 (let (($x99 (= $x98 true)))
 (let (($x101 (and $x99 $x100)))
 (let (($x104 (and $x101 $x103)))
 (let (($x136 (and $x104 $x127)))
 (let (($x96 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x128 (and $x96 $x136)))
 (let (($x26 (and $x128 $x233)))
 (let (($x88 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x89 (and $x88 true)))
 (let (($x84 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x84 $x89)))
 (let (($x85 (= $x84 false)))
 (let (($x80 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x82 (=> $x80 $x12)))
 (let (($x81 (= $x80 true)))
 (let (($x83 (and $x81 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x78 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x92 (and $x78 $x91)))
 (let (($x74 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x93 (=> $x74 $x92)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x70 $x12)))
 (let (($x71 (= $x70 false)))
 (let (($x73 (and $x71 $x72)))
 (let (($x76 (and $x73 $x75)))
 (let (($x94 (and $x76 $x93)))
 (let (($x180 (and $x94 $x26)))
 (let (($x7 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x39 (and $x7 true)))
 (let (($x16 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x64 (=> $x16 $x39)))
 (let (($x14 (= $x16 false)))
 (let (($x32 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x32 $x12)))
 (let (($x43 (= $x32 true)))
 (let (($x58 (and $x43 $x36)))
 (let (($x53 (and $x58 $x14)))
 (let (($x65 (and $x53 $x64)))
 (let (($x52 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x66 (and $x52 $x65)))
 (let (($x55 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x67 (=> $x55 $x66)))
 (let (($x45 (= $x55 true)))
 (let (($x10 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x57 (=> $x10 $x12)))
 (let (($x51 (= $x10 false)))
 (let (($x28 (and $x51 $x57)))
 (let (($x31 (and $x28 $x45)))
 (let (($x68 (and $x31 $x67)))
 (let (($x205 (and $x68 $x180)))
 (let (($x46 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x35 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x46)))))))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x60 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x18)))))))
 (let (($x34 (and $x60 $x35)))
 (let (($x61 (and $x34 $x205)))
 (let (($x272 (=> $x61 $x271)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x50 (bvadd ?x59 (_ bv3 32))))
 (let ((?x63 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x244 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x116 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x117 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x247 (store (store (store ?x117 ?x116 ((_ extract 15 8) (_ bv42 32))) ?x244 ((_ extract 23 16) (_ bv42 32))) ?x63 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x253 (store (store ?x247 (bvadd ?x59 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x59 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x258 (store (store ?x253 (bvadd ?x59 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x50 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x263 (concat (select ?x258 ?x244) (concat (select ?x258 ?x116) (select ?x258 input.dst.llvm-%l)))))
 (let ((?x265 (concat (select ?x258 ?x63) ?x263)))
 (let (($x266 (= (_ bv42 32) ?x265)))
 (let (($x267 (and $x266 false)))
 (let (($x268 (=> true $x267)))
 (let (($x216 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x238 (bvuge ?x234 (_ bv1 32))))
 (let (($x239 (= true $x238)))
 (let (($x235 (= ?x234 (_ bv0 32))))
 (let (($x236 (= false $x235)))
 (let (($x237 (and $x236 true)))
 (let (($x240 (and $x237 $x239)))
 (let (($x269 (and $x240 $x268)))
 (let (($x270 (= $x269 true)))
 (let (($x271 (= $x270 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x211 (concat ?x207 (concat ?x209 ?x208)))))
 (let (($x228 (= ?x212 input.dst.llvm-%l)))
 (let (($x229 (= $x228 true)))
 (let (($x230 (= $x229 true)))
 (let (($x215 (= input.dst.llvm-%l ?x212)))
 (let (($x220 (and $x215 (not $x216))))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x214)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x198 $x202)))
 (let (($x218 (and $x203 $x204)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x200 $x218)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x182)))))))
 (let (($x169 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x176 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x166 (and true $x176)))
 (let (($x170 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and $x170 $x166)))
 (let (($x164 (and $x176 $x174)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x179 (and (and (and $x159 $x166) $x164) $x172)))
 (let (($x183 (and $x179 $x169)))
 (let (($x223 (and (and (and $x183 $x187) $x119) $x220)))
 (let (($x224 (= $x223 true)))
 (let (($x225 (= $x224 true)))
 (let (($x226 (= $x225 true)))
 (let (($x184 (= $x183 true)))
 (let (($x196 (= $x184 true)))
 (let (($x191 (= $x196 true)))
 (let (($x227 (and $x191 $x226)))
 (let (($x231 (and $x227 $x230)))
 (let (($x154 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x232 (and $x154 $x231)))
 (let (($x150 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x138 (and $x150 true)))
 (let (($x152 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x139 (=> $x152 $x138)))
 (let (($x146 (= $x152 false)))
 (let (($x12 (= false false)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x144 (=> $x124 $x12)))
 (let (($x141 (= $x124 true)))
 (let (($x145 (and $x141 $x144)))
 (let (($x147 (and $x145 $x146)))
 (let (($x151 (and $x147 $x139)))
 (let (($x140 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x153 (and $x140 $x151)))
 (let (($x133 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x143 (=> $x133 $x153)))
 (let (($x135 (= $x133 false)))
 (let (($x130 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x125 (=> $x130 $x12)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (and $x131 $x125)))
 (let (($x120 (and $x132 $x135)))
 (let (($x142 (and $x120 $x143)))
 (let (($x233 (and $x142 $x232)))
 (let (($x112 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x118 (=> $x112 true)))
 (let (($x113 (= $x112 false)))
 (let (($x108 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x110 (=> $x108 $x12)))
 (let (($x109 (= $x108 true)))
 (let (($x111 (and $x109 $x110)))
 (let (($x114 (and $x111 $x113)))
 (let (($x122 (and $x114 $x118)))
 (let (($x106 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x126 (and $x106 $x122)))
 (let (($x102 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x127 (=> $x102 $x126)))
 (let (($x103 (= $x102 false)))
 (let (($x98 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x100 (=> $x98 $x12)))
 (let (($x99 (= $x98 true)))
 (let (($x101 (and $x99 $x100)))
 (let (($x104 (and $x101 $x103)))
 (let (($x136 (and $x104 $x127)))
 (let (($x96 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x128 (and $x96 $x136)))
 (let (($x26 (and $x128 $x233)))
 (let (($x88 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x89 (and $x88 true)))
 (let (($x84 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x84 $x89)))
 (let (($x85 (= $x84 false)))
 (let (($x80 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x82 (=> $x80 $x12)))
 (let (($x81 (= $x80 true)))
 (let (($x83 (and $x81 $x82)))
 (let (($x86 (and $x83 $x85)))
 (let (($x91 (and $x86 $x90)))
 (let (($x78 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x92 (and $x78 $x91)))
 (let (($x74 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x93 (=> $x74 $x92)))
 (let (($x75 (= $x74 true)))
 (let (($x70 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x70 $x12)))
 (let (($x71 (= $x70 false)))
 (let (($x73 (and $x71 $x72)))
 (let (($x76 (and $x73 $x75)))
 (let (($x94 (and $x76 $x93)))
 (let (($x180 (and $x94 $x26)))
 (let (($x7 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x39 (and $x7 true)))
 (let (($x16 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x64 (=> $x16 $x39)))
 (let (($x14 (= $x16 false)))
 (let (($x32 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x32 $x12)))
 (let (($x43 (= $x32 true)))
 (let (($x58 (and $x43 $x36)))
 (let (($x53 (and $x58 $x14)))
 (let (($x65 (and $x53 $x64)))
 (let (($x52 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x66 (and $x52 $x65)))
 (let (($x55 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x67 (=> $x55 $x66)))
 (let (($x45 (= $x55 true)))
 (let (($x10 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x57 (=> $x10 $x12)))
 (let (($x51 (= $x10 false)))
 (let (($x28 (and $x51 $x57)))
 (let (($x31 (and $x28 $x45)))
 (let (($x68 (and $x31 $x67)))
 (let (($x205 (and $x68 $x180)))
 (let (($x46 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x35 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x46)))))))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x60 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x18)))))))
 (let (($x34 (and $x60 $x35)))
 (let (($x61 (and $x34 $x205)))
 (let (($x272 (=> $x61 $x271)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x0d9fd001
                     #x4f)
              #x0d9fd003
              #x08)
       #x0d9fd002
       #x82))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x703f767c)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x703f767f
                     #x70)
              #x703f767e
              #x2c)
       #x703f767d
       #x02))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x702c0280)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x703f767f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x703f767c)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x41 (bvadd ?x48 (_ bv3 32))))
 (let ((?x38 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x249 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x245 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x244 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x252 (store (store (store ?x244 ?x245 ((_ extract 15 8) (_ bv42 32))) ?x249 ((_ extract 23 16) (_ bv42 32))) ?x38 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x257 (store (store ?x252 (bvadd ?x48 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x48 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x259 (store (store ?x257 (bvadd ?x48 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x41 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x62 (concat (select ?x259 (bvadd ?x54 (_ bv2 32))) (concat (select ?x259 (bvadd ?x54 (_ bv1 32))) (select ?x259 ?x54)))))
 (let ((?x276 (concat (select ?x259 (bvadd ?x54 (_ bv3 32))) ?x62)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x278 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x278 (_ bv1 32))))
 (let (($x283 (= false $x282)))
 (let (($x279 (= ?x278 (_ bv0 32))))
 (let (($x280 (= true $x279)))
 (let (($x281 (and $x280 true)))
 (let (($x284 (and $x281 $x283)))
 (let (($x285 (and $x284 true)))
 (let ((?x267 (concat (select ?x259 ?x249) (concat (select ?x259 ?x245) (select ?x259 input.dst.llvm-%l)))))
 (let ((?x269 (concat (select ?x259 ?x38) ?x267)))
 (let (($x270 (= (_ bv42 32) ?x269)))
 (let (($x286 (and $x270 $x285)))
 (let (($x287 (=> true $x286)))
 (let (($x220 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x238 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x238 (_ bv1 32))))
 (let (($x117 (= true $x241)))
 (let (($x239 (= ?x238 (_ bv0 32))))
 (let (($x240 (= false $x239)))
 (let (($x242 (and $x240 true)))
 (let (($x116 (and $x242 $x117)))
 (let (($x288 (and $x116 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x290 (= $x289 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x216 (concat ?x215 (concat ?x115 (concat ?x207 ?x137)))))
 (let (($x232 (= ?x216 input.dst.llvm-%l)))
 (let (($x233 (= $x232 true)))
 (let (($x26 (= $x233 true)))
 (let (($x219 (= input.dst.llvm-%l ?x216)))
 (let (($x224 (and $x219 (not $x220))))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x218)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (and $x202 $x214)))
 (let (($x222 (and $x204 $x119)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x181 $x222)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x195)))))))
 (let (($x184 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x167 (and true $x165)))
 (let (($x174 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x164 (and $x174 $x167)))
 (let (($x177 (and $x165 $x164)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x169 (and (and (and $x161 $x167) $x177) $x172)))
 (let (($x196 (and $x169 $x184)))
 (let (($x227 (and (and (and $x196 $x201) $x149) $x224)))
 (let (($x228 (= $x227 true)))
 (let (($x229 (= $x228 true)))
 (let (($x230 (= $x229 true)))
 (let (($x191 (= $x196 true)))
 (let (($x190 (= $x191 true)))
 (let (($x197 (= $x190 true)))
 (let (($x231 (and $x197 $x230)))
 (let (($x180 (and $x231 $x26)))
 (let (($x156 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x205 (and $x156 $x180)))
 (let (($x139 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x151 (and $x139 true)))
 (let (($x147 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x153 (=> $x147 $x151)))
 (let (($x148 (= $x147 false)))
 (let (($x28 (= false false)))
 (let (($x144 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x152 (=> $x144 $x28)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (and $x145 $x152)))
 (let (($x150 (and $x146 $x148)))
 (let (($x143 (and $x150 $x153)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x142 (and $x124 $x143)))
 (let (($x120 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x155 (=> $x120 $x142)))
 (let (($x121 (= $x120 false)))
 (let (($x125 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x133 (=> $x125 $x28)))
 (let (($x132 (= $x125 true)))
 (let (($x135 (and $x132 $x133)))
 (let (($x140 (and $x135 $x121)))
 (let (($x154 (and $x140 $x155)))
 (let (($x61 (and $x154 $x205)))
 (let (($x114 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x126 (=> $x114 true)))
 (let (($x118 (= $x114 false)))
 (let (($x110 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x112 (=> $x110 $x28)))
 (let (($x111 (= $x110 true)))
 (let (($x113 (and $x111 $x112)))
 (let (($x122 (and $x113 $x118)))
 (let (($x127 (and $x122 $x126)))
 (let (($x108 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x136 (and $x108 $x127)))
 (let (($x104 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x128 (=> $x104 $x136)))
 (let (($x105 (= $x104 false)))
 (let (($x100 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x102 (=> $x100 $x28)))
 (let (($x101 (= $x100 true)))
 (let (($x103 (and $x101 $x102)))
 (let (($x106 (and $x103 $x105)))
 (let (($x129 (and $x106 $x128)))
 (let (($x98 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x130 (and $x98 $x129)))
 (let (($x234 (and $x130 $x61)))
 (let (($x90 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x91 (and $x90 true)))
 (let (($x86 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x92 (=> $x86 $x91)))
 (let (($x87 (= $x86 false)))
 (let (($x82 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x84 (=> $x82 $x28)))
 (let (($x83 (= $x82 true)))
 (let (($x85 (and $x83 $x84)))
 (let (($x88 (and $x85 $x87)))
 (let (($x93 (and $x88 $x92)))
 (let (($x80 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x94 (and $x80 $x93)))
 (let (($x76 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x95 (=> $x76 $x94)))
 (let (($x77 (= $x76 true)))
 (let (($x72 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x74 (=> $x72 $x28)))
 (let (($x73 (= $x72 false)))
 (let (($x75 (and $x73 $x74)))
 (let (($x78 (and $x75 $x77)))
 (let (($x96 (and $x78 $x95)))
 (let (($x235 (and $x96 $x234)))
 (let (($x64 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x65 (and $x64 true)))
 (let (($x53 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x66 (=> $x53 $x65)))
 (let (($x21 (= $x53 false)))
 (let (($x36 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x16 (=> $x36 $x28)))
 (let (($x58 (= $x36 true)))
 (let (($x14 (and $x58 $x16)))
 (let (($x7 (and $x14 $x21)))
 (let (($x67 (and $x7 $x66)))
 (let (($x32 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x68 (and $x32 $x67)))
 (let (($x31 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x69 (=> $x31 $x68)))
 (let (($x6 (= $x31 true)))
 (let (($x12 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x55 (=> $x12 $x28)))
 (let (($x57 (= $x12 false)))
 (let (($x45 (and $x57 $x55)))
 (let (($x33 (and $x45 $x6)))
 (let (($x70 (and $x33 $x69)))
 (let (($x236 (and $x70 $x235)))
 (let (($x19 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x10 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x19)))))))
 (let (($x44 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x24 (=> (bvule input.dst.llvm-%l (bvsub ?x54 (_ bv1 32))) (or false (or false (and true (or $x37 $x44)))))))
 (let (($x25 (and $x24 $x10)))
 (let (($x237 (and $x25 $x236)))
 (let (($x291 (=> $x237 $x290)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x41 (bvadd ?x48 (_ bv3 32))))
 (let ((?x38 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x249 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x245 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x244 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x252 (store (store (store ?x244 ?x245 ((_ extract 15 8) (_ bv42 32))) ?x249 ((_ extract 23 16) (_ bv42 32))) ?x38 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x257 (store (store ?x252 (bvadd ?x48 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x48 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x259 (store (store ?x257 (bvadd ?x48 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x41 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x62 (concat (select ?x259 (bvadd ?x54 (_ bv2 32))) (concat (select ?x259 (bvadd ?x54 (_ bv1 32))) (select ?x259 ?x54)))))
 (let ((?x276 (concat (select ?x259 (bvadd ?x54 (_ bv3 32))) ?x62)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x278 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x278 (_ bv1 32))))
 (let (($x283 (= false $x282)))
 (let (($x279 (= ?x278 (_ bv0 32))))
 (let (($x280 (= true $x279)))
 (let (($x281 (and $x280 true)))
 (let (($x284 (and $x281 $x283)))
 (let (($x285 (and $x284 true)))
 (let ((?x267 (concat (select ?x259 ?x249) (concat (select ?x259 ?x245) (select ?x259 input.dst.llvm-%l)))))
 (let ((?x269 (concat (select ?x259 ?x38) ?x267)))
 (let (($x270 (= (_ bv42 32) ?x269)))
 (let (($x286 (and $x270 $x285)))
 (let (($x287 (=> true $x286)))
 (let (($x220 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x238 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x238 (_ bv1 32))))
 (let (($x117 (= true $x241)))
 (let (($x239 (= ?x238 (_ bv0 32))))
 (let (($x240 (= false $x239)))
 (let (($x242 (and $x240 true)))
 (let (($x116 (and $x242 $x117)))
 (let (($x288 (and $x116 $x287)))
 (let (($x289 (= $x288 true)))
 (let (($x290 (= $x289 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x216 (concat ?x215 (concat ?x115 (concat ?x207 ?x137)))))
 (let (($x232 (= ?x216 input.dst.llvm-%l)))
 (let (($x233 (= $x232 true)))
 (let (($x26 (= $x233 true)))
 (let (($x219 (= input.dst.llvm-%l ?x216)))
 (let (($x224 (and $x219 (not $x220))))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x218)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (and $x202 $x214)))
 (let (($x222 (and $x204 $x119)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x181 $x222)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x195)))))))
 (let (($x184 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x172 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x167 (and true $x165)))
 (let (($x174 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x164 (and $x174 $x167)))
 (let (($x177 (and $x165 $x164)))
 (let (($x161 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x169 (and (and (and $x161 $x167) $x177) $x172)))
 (let (($x196 (and $x169 $x184)))
 (let (($x227 (and (and (and $x196 $x201) $x149) $x224)))
 (let (($x228 (= $x227 true)))
 (let (($x229 (= $x228 true)))
 (let (($x230 (= $x229 true)))
 (let (($x191 (= $x196 true)))
 (let (($x190 (= $x191 true)))
 (let (($x197 (= $x190 true)))
 (let (($x231 (and $x197 $x230)))
 (let (($x180 (and $x231 $x26)))
 (let (($x156 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x205 (and $x156 $x180)))
 (let (($x139 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x151 (and $x139 true)))
 (let (($x147 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x153 (=> $x147 $x151)))
 (let (($x148 (= $x147 false)))
 (let (($x28 (= false false)))
 (let (($x144 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x152 (=> $x144 $x28)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (and $x145 $x152)))
 (let (($x150 (and $x146 $x148)))
 (let (($x143 (and $x150 $x153)))
 (let (($x124 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x142 (and $x124 $x143)))
 (let (($x120 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x155 (=> $x120 $x142)))
 (let (($x121 (= $x120 false)))
 (let (($x125 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x133 (=> $x125 $x28)))
 (let (($x132 (= $x125 true)))
 (let (($x135 (and $x132 $x133)))
 (let (($x140 (and $x135 $x121)))
 (let (($x154 (and $x140 $x155)))
 (let (($x61 (and $x154 $x205)))
 (let (($x114 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x126 (=> $x114 true)))
 (let (($x118 (= $x114 false)))
 (let (($x110 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x112 (=> $x110 $x28)))
 (let (($x111 (= $x110 true)))
 (let (($x113 (and $x111 $x112)))
 (let (($x122 (and $x113 $x118)))
 (let (($x127 (and $x122 $x126)))
 (let (($x108 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x136 (and $x108 $x127)))
 (let (($x104 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x128 (=> $x104 $x136)))
 (let (($x105 (= $x104 false)))
 (let (($x100 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x102 (=> $x100 $x28)))
 (let (($x101 (= $x100 true)))
 (let (($x103 (and $x101 $x102)))
 (let (($x106 (and $x103 $x105)))
 (let (($x129 (and $x106 $x128)))
 (let (($x98 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x130 (and $x98 $x129)))
 (let (($x234 (and $x130 $x61)))
 (let (($x90 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x91 (and $x90 true)))
 (let (($x86 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x92 (=> $x86 $x91)))
 (let (($x87 (= $x86 false)))
 (let (($x82 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x84 (=> $x82 $x28)))
 (let (($x83 (= $x82 true)))
 (let (($x85 (and $x83 $x84)))
 (let (($x88 (and $x85 $x87)))
 (let (($x93 (and $x88 $x92)))
 (let (($x80 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x94 (and $x80 $x93)))
 (let (($x76 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x95 (=> $x76 $x94)))
 (let (($x77 (= $x76 true)))
 (let (($x72 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x74 (=> $x72 $x28)))
 (let (($x73 (= $x72 false)))
 (let (($x75 (and $x73 $x74)))
 (let (($x78 (and $x75 $x77)))
 (let (($x96 (and $x78 $x95)))
 (let (($x235 (and $x96 $x234)))
 (let (($x64 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x65 (and $x64 true)))
 (let (($x53 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x66 (=> $x53 $x65)))
 (let (($x21 (= $x53 false)))
 (let (($x36 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x16 (=> $x36 $x28)))
 (let (($x58 (= $x36 true)))
 (let (($x14 (and $x58 $x16)))
 (let (($x7 (and $x14 $x21)))
 (let (($x67 (and $x7 $x66)))
 (let (($x32 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x68 (and $x32 $x67)))
 (let (($x31 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x69 (=> $x31 $x68)))
 (let (($x6 (= $x31 true)))
 (let (($x12 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x55 (=> $x12 $x28)))
 (let (($x57 (= $x12 false)))
 (let (($x45 (and $x57 $x55)))
 (let (($x33 (and $x45 $x6)))
 (let (($x70 (and $x33 $x69)))
 (let (($x236 (and $x70 $x235)))
 (let (($x19 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x10 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x19)))))))
 (let (($x44 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x24 (=> (bvule input.dst.llvm-%l (bvsub ?x54 (_ bv1 32))) (or false (or false (and true (or $x37 $x44)))))))
 (let (($x25 (and $x24 $x10)))
 (let (($x237 (and $x25 $x236)))
 (let (($x291 (=> $x237 $x290)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460809/query
