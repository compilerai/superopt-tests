==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x14 $x15)))
 (let (($x19 (and $x5 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x14 $x15)))
 (let (($x19 (and $x5 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x266 (= true false)))
 (let (($x267 (= $x266 true)))
 (let ((?x246 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x256 (concat ?x255 (concat ?x252 (concat ?x248 ?x246)))))
 (let (($x257 (= ?x256 input.dst.llvm-%l)))
 (let (($x258 (= $x257 true)))
 (let (($x259 (= $x258 true)))
 (let (($x238 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x239 (not $x238)))
 (let (($x240 (= $x239 true)))
 (let (($x241 (= $x240 true)))
 (let (($x242 (= $x241 true)))
 (let (($x229 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x235 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x229)))))))
 (let (($x223 (= $x235 true)))
 (let (($x224 (= $x223 true)))
 (let (($x236 (= $x224 true)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x215)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x211 $x213)))
 (let (($x217 (and $x214 $x216)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x210 $x217)))
 (let (($x219 (= $x218 true)))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let ((?x190 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x201 (bvugt ?x190 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x190 (_ bv3 32)))))
 (let (($x207 (=> (bvule ?x190 (bvsub (bvadd ?x190 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x201)))))))
 (let (($x192 (= $x207 true)))
 (let (($x193 (= $x192 true)))
 (let (($x208 (= $x193 true)))
 (let (($x222 (and $x208 $x221)))
 (let (($x237 (and $x222 $x236)))
 (let (($x243 (and $x237 $x242)))
 (let (($x260 (and $x243 $x259)))
 (let (($x186 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x261 (and $x186 $x260)))
 (let (($x177 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x179 (and $x177 true)))
 (let (($x173 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x180 (=> $x173 $x179)))
 (let (($x171 (= $x173 false)))
 (let (($x28 (= false false)))
 (let (($x167 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x165 (=> $x167 $x28)))
 (let (($x164 (= $x167 true)))
 (let (($x168 (and $x164 $x165)))
 (let (($x172 (and $x168 $x171)))
 (let (($x181 (and $x172 $x180)))
 (let (($x159 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x182 (and $x159 $x181)))
 (let (($x152 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x183 (=> $x152 $x182)))
 (let (($x153 (= $x152 false)))
 (let (($x146 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x146 $x28)))
 (let (($x147 (= $x146 true)))
 (let (($x149 (and $x147 $x148)))
 (let (($x154 (and $x149 $x153)))
 (let (($x184 (and $x154 $x183)))
 (let (($x262 (and $x184 $x261)))
 (let (($x134 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x135 (=> $x134 true)))
 (let (($x132 (= $x134 false)))
 (let (($x128 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x126 (=> $x128 $x28)))
 (let (($x125 (= $x128 true)))
 (let (($x129 (and $x125 $x126)))
 (let (($x133 (and $x129 $x132)))
 (let (($x136 (and $x133 $x135)))
 (let (($x119 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x137 (and $x119 $x136)))
 (let (($x113 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x138 (=> $x113 $x137)))
 (let (($x114 (= $x113 false)))
 (let (($x107 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x109 (=> $x107 $x28)))
 (let (($x108 (= $x107 true)))
 (let (($x110 (and $x108 $x109)))
 (let (($x115 (and $x110 $x114)))
 (let (($x139 (and $x115 $x138)))
 (let (($x101 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x140 (and $x101 $x139)))
 (let (($x263 (and $x140 $x262)))
 (let (($x89 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x91 (and $x89 true)))
 (let (($x85 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x92 (=> $x85 $x91)))
 (let (($x83 (= $x85 false)))
 (let (($x79 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x77 (=> $x79 $x28)))
 (let (($x76 (= $x79 true)))
 (let (($x80 (and $x76 $x77)))
 (let (($x84 (and $x80 $x83)))
 (let (($x93 (and $x84 $x92)))
 (let (($x71 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x94 (and $x71 $x93)))
 (let (($x64 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x95 (=> $x64 $x94)))
 (let (($x65 (= $x64 true)))
 (let (($x58 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x60 (=> $x58 $x28)))
 (let (($x59 (= $x58 false)))
 (let (($x61 (and $x59 $x60)))
 (let (($x66 (and $x61 $x65)))
 (let (($x96 (and $x66 $x95)))
 (let (($x264 (and $x96 $x263)))
 (let (($x29 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x31 (and $x29 true)))
 (let (($x5 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x48 (=> $x5 $x31)))
 (let (($x14 (= $x5 false)))
 (let (($x6 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x35 (=> $x6 $x28)))
 (let (($x26 (= $x6 true)))
 (let (($x38 (and $x26 $x35)))
 (let (($x16 (and $x38 $x14)))
 (let (($x49 (and $x16 $x48)))
 (let (($x20 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x50 (and $x20 $x49)))
 (let (($x39 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x51 (=> $x39 $x50)))
 (let (($x18 (= $x39 true)))
 (let (($x32 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x17 (=> $x32 $x28)))
 (let (($x33 (= $x32 false)))
 (let (($x37 (and $x33 $x17)))
 (let (($x13 (and $x37 $x18)))
 (let (($x52 (and $x13 $x51)))
 (let (($x265 (and $x52 $x264)))
 (let (($x268 (=> $x265 $x267)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x266 (= true false)))
 (let (($x267 (= $x266 true)))
 (let ((?x246 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x256 (concat ?x255 (concat ?x252 (concat ?x248 ?x246)))))
 (let (($x257 (= ?x256 input.dst.llvm-%l)))
 (let (($x258 (= $x257 true)))
 (let (($x259 (= $x258 true)))
 (let (($x238 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x239 (not $x238)))
 (let (($x240 (= $x239 true)))
 (let (($x241 (= $x240 true)))
 (let (($x242 (= $x241 true)))
 (let (($x229 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x235 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x229)))))))
 (let (($x223 (= $x235 true)))
 (let (($x224 (= $x223 true)))
 (let (($x236 (= $x224 true)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x215)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x211 $x213)))
 (let (($x217 (and $x214 $x216)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x210 $x217)))
 (let (($x219 (= $x218 true)))
 (let (($x220 (= $x219 true)))
 (let (($x221 (= $x220 true)))
 (let ((?x190 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x201 (bvugt ?x190 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x190 (_ bv3 32)))))
 (let (($x207 (=> (bvule ?x190 (bvsub (bvadd ?x190 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x200 $x201)))))))
 (let (($x192 (= $x207 true)))
 (let (($x193 (= $x192 true)))
 (let (($x208 (= $x193 true)))
 (let (($x222 (and $x208 $x221)))
 (let (($x237 (and $x222 $x236)))
 (let (($x243 (and $x237 $x242)))
 (let (($x260 (and $x243 $x259)))
 (let (($x186 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x261 (and $x186 $x260)))
 (let (($x177 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x179 (and $x177 true)))
 (let (($x173 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x180 (=> $x173 $x179)))
 (let (($x171 (= $x173 false)))
 (let (($x28 (= false false)))
 (let (($x167 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x165 (=> $x167 $x28)))
 (let (($x164 (= $x167 true)))
 (let (($x168 (and $x164 $x165)))
 (let (($x172 (and $x168 $x171)))
 (let (($x181 (and $x172 $x180)))
 (let (($x159 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x182 (and $x159 $x181)))
 (let (($x152 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x183 (=> $x152 $x182)))
 (let (($x153 (= $x152 false)))
 (let (($x146 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x146 $x28)))
 (let (($x147 (= $x146 true)))
 (let (($x149 (and $x147 $x148)))
 (let (($x154 (and $x149 $x153)))
 (let (($x184 (and $x154 $x183)))
 (let (($x262 (and $x184 $x261)))
 (let (($x134 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x135 (=> $x134 true)))
 (let (($x132 (= $x134 false)))
 (let (($x128 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x126 (=> $x128 $x28)))
 (let (($x125 (= $x128 true)))
 (let (($x129 (and $x125 $x126)))
 (let (($x133 (and $x129 $x132)))
 (let (($x136 (and $x133 $x135)))
 (let (($x119 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x137 (and $x119 $x136)))
 (let (($x113 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x138 (=> $x113 $x137)))
 (let (($x114 (= $x113 false)))
 (let (($x107 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x109 (=> $x107 $x28)))
 (let (($x108 (= $x107 true)))
 (let (($x110 (and $x108 $x109)))
 (let (($x115 (and $x110 $x114)))
 (let (($x139 (and $x115 $x138)))
 (let (($x101 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x140 (and $x101 $x139)))
 (let (($x263 (and $x140 $x262)))
 (let (($x89 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x91 (and $x89 true)))
 (let (($x85 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x92 (=> $x85 $x91)))
 (let (($x83 (= $x85 false)))
 (let (($x79 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x77 (=> $x79 $x28)))
 (let (($x76 (= $x79 true)))
 (let (($x80 (and $x76 $x77)))
 (let (($x84 (and $x80 $x83)))
 (let (($x93 (and $x84 $x92)))
 (let (($x71 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x94 (and $x71 $x93)))
 (let (($x64 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x95 (=> $x64 $x94)))
 (let (($x65 (= $x64 true)))
 (let (($x58 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x60 (=> $x58 $x28)))
 (let (($x59 (= $x58 false)))
 (let (($x61 (and $x59 $x60)))
 (let (($x66 (and $x61 $x65)))
 (let (($x96 (and $x66 $x95)))
 (let (($x264 (and $x96 $x263)))
 (let (($x29 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x31 (and $x29 true)))
 (let (($x5 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x48 (=> $x5 $x31)))
 (let (($x14 (= $x5 false)))
 (let (($x6 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x35 (=> $x6 $x28)))
 (let (($x26 (= $x6 true)))
 (let (($x38 (and $x26 $x35)))
 (let (($x16 (and $x38 $x14)))
 (let (($x49 (and $x16 $x48)))
 (let (($x20 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x50 (and $x20 $x49)))
 (let (($x39 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x51 (=> $x39 $x50)))
 (let (($x18 (= $x39 true)))
 (let (($x32 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x17 (=> $x32 $x28)))
 (let (($x33 (= $x32 false)))
 (let (($x37 (and $x33 $x17)))
 (let (($x13 (and $x37 $x18)))
 (let (($x52 (and $x13 $x51)))
 (let (($x265 (and $x52 $x264)))
 (let (($x268 (=> $x265 $x267)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d3bbf24)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x22)
                     #x0d3bbf25
                     #xbe)
              #x0d3bbf27
              #x1d)
       #x0d3bbf26
       #x3a))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x1d3abe22)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d3bbf27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d3bbf24)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967295 32) (_ bv255 8)) (_ bv4294967292 32) (_ bv253 8)) (_ bv4294967293 32) (_ bv255 8)) (_ bv4294967294 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv134217728 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x10 (= true false)))
 (let (($x12 (= $x10 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x15 (concat ?x86 (concat ?x74 ?x73)))))
 (let (($x43 (= ?x47 input.dst.llvm-%l)))
 (let (($x46 (= $x43 true)))
 (let (($x22 (= $x46 true)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x56 (not $x55)))
 (let (($x62 (= $x56 true)))
 (let (($x63 (= $x62 true)))
 (let (($x67 (= $x63 true)))
 (let (($x116 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x122 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x116)))))))
 (let (($x102 (= $x122 true)))
 (let (($x103 (= $x102 true)))
 (let (($x130 (= $x103 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x176)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x156 $x160)))
 (let (($x163 (and $x161 $x162)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x155 $x163)))
 (let (($x170 (= $x169 true)))
 (let (($x174 (= $x170 true)))
 (let (($x175 (= $x174 true)))
 (let ((?x265 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x97 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x265 (_ bv3 32)))))
 (let (($x144 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x97)))))))
 (let (($x267 (= $x144 true)))
 (let (($x268 (= $x267 true)))
 (let (($x150 (= $x268 true)))
 (let (($x99 (and $x150 $x175)))
 (let (($x131 (and $x99 $x130)))
 (let (($x68 (and $x131 $x67)))
 (let (($x24 (and $x68 $x22)))
 (let (($x261 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x11 (and $x261 $x24)))
 (let (($x248 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x249 (and $x248 false)))
 (let (($x250 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x253 (=> $x250 $x249)))
 (let (($x254 (= $x250 false)))
 (let (($x39 (= false false)))
 (let (($x241 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x239 (=> $x241 $x39)))
 (let (($x238 (= $x241 true)))
 (let (($x242 (and $x238 $x239)))
 (let (($x255 (and $x242 $x254)))
 (let (($x256 (and $x255 $x253)))
 (let (($x235 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x257 (and $x235 $x256)))
 (let (($x227 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x258 (=> $x227 $x257)))
 (let (($x228 (= $x227 false)))
 (let (($x220 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x222 (=> $x220 $x39)))
 (let (($x221 (= $x220 true)))
 (let (($x225 (and $x221 $x222)))
 (let (($x229 (and $x225 $x228)))
 (let (($x259 (and $x229 $x258)))
 (let (($x8 (and $x259 $x11)))
 (let (($x208 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x209 (=> $x208 false)))
 (let (($x192 (= $x208 false)))
 (let (($x203 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x201 (=> $x203 $x39)))
 (let (($x197 (= $x203 true)))
 (let (($x204 (and $x197 $x201)))
 (let (($x193 (and $x204 $x192)))
 (let (($x210 (and $x193 $x209)))
 (let (($x195 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x211 (and $x195 $x210)))
 (let (($x185 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x212 (=> $x185 $x211)))
 (let (($x186 (= $x185 false)))
 (let (($x179 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x181 (=> $x179 $x39)))
 (let (($x180 (= $x179 true)))
 (let (($x182 (and $x180 $x181)))
 (let (($x188 (and $x182 $x186)))
 (let (($x213 (and $x188 $x212)))
 (let (($x168 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x214 (and $x168 $x213)))
 (let (($x36 (and $x214 $x8)))
 (let (($x147 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x149 (and $x147 false)))
 (let (($x139 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (=> $x139 $x149)))
 (let (($x137 (= $x139 false)))
 (let (($x132 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x129 (=> $x132 $x39)))
 (let (($x126 (= $x132 true)))
 (let (($x133 (and $x126 $x129)))
 (let (($x138 (and $x133 $x137)))
 (let (($x153 (and $x138 $x152)))
 (let (($x120 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x154 (and $x120 $x153)))
 (let (($x107 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x158 (=> $x107 $x154)))
 (let (($x108 (= $x107 true)))
 (let (($x94 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x96 (=> $x94 $x39)))
 (let (($x95 (= $x94 false)))
 (let (($x100 (and $x95 $x96)))
 (let (($x109 (and $x100 $x108)))
 (let (($x159 (and $x109 $x158)))
 (let (($x25 (and $x159 $x36)))
 (let (($x78 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x76 (and $x78 false)))
 (let (($x65 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x77 (=> $x65 $x76)))
 (let (($x61 (= $x65 false)))
 (let (($x57 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x57 $x39)))
 (let (($x50 (= $x57 true)))
 (let (($x58 (and $x50 $x51)))
 (let (($x64 (and $x58 $x61)))
 (let (($x80 (and $x64 $x77)))
 (let (($x41 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x85 (and $x41 $x80)))
 (let (($x7 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x83 (=> $x7 $x85)))
 (let (($x6 (= $x7 true)))
 (let (($x37 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x37 $x39)))
 (let (($x42 (= $x37 false)))
 (let (($x13 (and $x42 $x18)))
 (let (($x26 (and $x13 $x6)))
 (let (($x84 (and $x26 $x83)))
 (let (($x40 (and $x84 $x25)))
 (let (($x23 (=> $x40 $x12)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let (($x10 (= true false)))
 (let (($x12 (= $x10 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x15 (concat ?x86 (concat ?x74 ?x73)))))
 (let (($x43 (= ?x47 input.dst.llvm-%l)))
 (let (($x46 (= $x43 true)))
 (let (($x22 (= $x46 true)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x56 (not $x55)))
 (let (($x62 (= $x56 true)))
 (let (($x63 (= $x62 true)))
 (let (($x67 (= $x63 true)))
 (let (($x116 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x122 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x116)))))))
 (let (($x102 (= $x122 true)))
 (let (($x103 (= $x102 true)))
 (let (($x130 (= $x103 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x176)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x156 $x160)))
 (let (($x163 (and $x161 $x162)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x155 $x163)))
 (let (($x170 (= $x169 true)))
 (let (($x174 (= $x170 true)))
 (let (($x175 (= $x174 true)))
 (let ((?x265 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x97 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x265 (_ bv3 32)))))
 (let (($x144 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x97)))))))
 (let (($x267 (= $x144 true)))
 (let (($x268 (= $x267 true)))
 (let (($x150 (= $x268 true)))
 (let (($x99 (and $x150 $x175)))
 (let (($x131 (and $x99 $x130)))
 (let (($x68 (and $x131 $x67)))
 (let (($x24 (and $x68 $x22)))
 (let (($x261 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x11 (and $x261 $x24)))
 (let (($x248 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x249 (and $x248 false)))
 (let (($x250 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x253 (=> $x250 $x249)))
 (let (($x254 (= $x250 false)))
 (let (($x39 (= false false)))
 (let (($x241 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x239 (=> $x241 $x39)))
 (let (($x238 (= $x241 true)))
 (let (($x242 (and $x238 $x239)))
 (let (($x255 (and $x242 $x254)))
 (let (($x256 (and $x255 $x253)))
 (let (($x235 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x257 (and $x235 $x256)))
 (let (($x227 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x258 (=> $x227 $x257)))
 (let (($x228 (= $x227 false)))
 (let (($x220 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x222 (=> $x220 $x39)))
 (let (($x221 (= $x220 true)))
 (let (($x225 (and $x221 $x222)))
 (let (($x229 (and $x225 $x228)))
 (let (($x259 (and $x229 $x258)))
 (let (($x8 (and $x259 $x11)))
 (let (($x208 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x209 (=> $x208 false)))
 (let (($x192 (= $x208 false)))
 (let (($x203 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x201 (=> $x203 $x39)))
 (let (($x197 (= $x203 true)))
 (let (($x204 (and $x197 $x201)))
 (let (($x193 (and $x204 $x192)))
 (let (($x210 (and $x193 $x209)))
 (let (($x195 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x211 (and $x195 $x210)))
 (let (($x185 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x212 (=> $x185 $x211)))
 (let (($x186 (= $x185 false)))
 (let (($x179 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x181 (=> $x179 $x39)))
 (let (($x180 (= $x179 true)))
 (let (($x182 (and $x180 $x181)))
 (let (($x188 (and $x182 $x186)))
 (let (($x213 (and $x188 $x212)))
 (let (($x168 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x214 (and $x168 $x213)))
 (let (($x36 (and $x214 $x8)))
 (let (($x147 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x149 (and $x147 false)))
 (let (($x139 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (=> $x139 $x149)))
 (let (($x137 (= $x139 false)))
 (let (($x132 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x129 (=> $x132 $x39)))
 (let (($x126 (= $x132 true)))
 (let (($x133 (and $x126 $x129)))
 (let (($x138 (and $x133 $x137)))
 (let (($x153 (and $x138 $x152)))
 (let (($x120 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x154 (and $x120 $x153)))
 (let (($x107 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x158 (=> $x107 $x154)))
 (let (($x108 (= $x107 true)))
 (let (($x94 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x96 (=> $x94 $x39)))
 (let (($x95 (= $x94 false)))
 (let (($x100 (and $x95 $x96)))
 (let (($x109 (and $x100 $x108)))
 (let (($x159 (and $x109 $x158)))
 (let (($x25 (and $x159 $x36)))
 (let (($x78 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x76 (and $x78 false)))
 (let (($x65 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x77 (=> $x65 $x76)))
 (let (($x61 (= $x65 false)))
 (let (($x57 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x57 $x39)))
 (let (($x50 (= $x57 true)))
 (let (($x58 (and $x50 $x51)))
 (let (($x64 (and $x58 $x61)))
 (let (($x80 (and $x64 $x77)))
 (let (($x41 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x85 (and $x41 $x80)))
 (let (($x7 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x83 (=> $x7 $x85)))
 (let (($x6 (= $x7 true)))
 (let (($x37 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x37 $x39)))
 (let (($x42 (= $x37 false)))
 (let (($x13 (and $x42 $x18)))
 (let (($x26 (and $x13 $x6)))
 (let (($x84 (and $x26 $x83)))
 (let (($x40 (and $x84 $x25)))
 (let (($x23 (=> $x40 $x12)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4ffed01c)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfe)
              #x4ffed01d
              #xa7)
       #x4ffed01f
       #x4f))
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x4ffea7fe)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4ffed01f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4ffed01c)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967293 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967295 32) (_ bv255 8)) (_ bv4294967292 32) (_ bv253 8)) (_ bv4294967293 32) (_ bv255 8)) (_ bv4294967294 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv4 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv134217728 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 ((_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x421 (ite (= (_ bv0 32) smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x432 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv4 32))))
 (let ((?x96 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x39 (bvadd ?x96 (_ bv3 32))))
 (let ((?x26 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x325 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x331 (store (store ?x325 (bvadd input.dst.llvm-%l (_ bv1 32)) ((_ extract 15 8) (_ bv42 32))) (bvadd input.dst.llvm-%l (_ bv2 32)) ((_ extract 23 16) (_ bv42 32)))))
 (let ((?x333 (store ?x331 ?x26 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x339 (store (store ?x333 (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x344 (store (store ?x339 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x39 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x439 (concat (select ?x344 (bvadd ?x432 (_ bv2 32))) (concat (select ?x344 (bvadd ?x432 (_ bv1 32))) (select ?x344 ?x432)))))
 (let ((?x442 (concat (select ?x344 (bvadd ?x432 (_ bv3 32))) ?x439)))
 (let ((?x424 (select ?x344 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv1 32)))))
 (let ((?x425 (concat ?x424 (select ?x344 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0))))
 (let ((?x427 (select ?x344 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv2 32)))))
 (let ((?x430 (select ?x344 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv3 32)))))
 (let ((?x431 (concat ?x430 (concat ?x427 ?x425))))
 (let (($x443 (axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 (_ bv1 32) false (_ bv42 32) (_ bv0 32) false smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 input.dst.llvm-%l ?x421 false ?x431 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 ?x442 ?x421 false ?x431 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 ?x442 ?x421 false)))
 (let (($x393 (= $x443 true)))
 (let (($x394 (= $x393 true)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x292 (concat ?x291 (concat ?x288 (concat ?x284 ?x282)))))
 (let (($x304 (= ?x292 input.dst.llvm-%l)))
 (let (($x305 (= $x304 true)))
 (let (($x306 (= $x305 true)))
 (let (($x293 (= input.dst.llvm-%l ?x292)))
 (let (($x296 (and $x293 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x277)))
 (let ((?x274 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x274)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x273 $x275)))
 (let (($x279 (and $x276 $x278)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x29 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x145 (and true $x140)))
 (let (($x27 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (and $x27 $x145)))
 (let (($x35 (and $x140 $x20)))
 (let (($x146 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x96 (bvsub ?x96 (_ bv4 32))) (bvult ?x96 (bvsub ?x96 (_ bv4 32))))))
 (let (($x48 (and (and (and $x146 $x145) $x35) $x29)))
 (let (($x60 (and $x48 $x59)))
 (let (($x299 (and (and (and $x60 $x272) $x279) $x296)))
 (let (($x300 (= $x299 true)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let (($x66 (= $x60 true)))
 (let (($x70 (= $x66 true)))
 (let (($x270 (= $x70 true)))
 (let (($x303 (and $x270 $x302)))
 (let (($x307 (and $x303 $x306)))
 (let (($x110 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x308 (and $x110 $x307)))
 (let (($x91 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-1.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x172 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x194 (and $x172 $x91)))
 (let (($x252 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x196 (=> $x252 $x194)))
 (let (($x244 (= $x252 false)))
 (let (($x109 (= false false)))
 (let (($x247 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x223 (=> $x247 $x109)))
 (let (($x232 (= $x247 true)))
 (let (($x236 (and $x232 $x223)))
 (let (($x251 (and $x236 $x244)))
 (let (($x198 (and $x251 $x196)))
 (let (($x218 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x205 (and $x218 $x198)))
 (let (($x216 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x92 (=> $x216 $x205)))
 (let (($x166 (= $x216 false)))
 (let (($x34 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x34 $x109)))
 (let (($x262 (= $x34 true)))
 (let (($x44 (and $x262 $x72)))
 (let (($x167 (and $x44 $x166)))
 (let (($x101 (and $x167 $x92)))
 (let (($x309 (and $x101 $x308)))
 (let (($x43 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x46 (=> $x43 true)))
 (let (($x87 (= $x43 false)))
 (let (($x88 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x82 (=> $x88 $x109)))
 (let (($x81 (= $x88 true)))
 (let (($x74 (and $x81 $x82)))
 (let (($x47 (and $x74 $x87)))
 (let (($x22 (and $x47 $x46)))
 (let (($x63 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x24 (and $x63 $x22)))
 (let (($x103 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x11 (=> $x103 $x24)))
 (let (($x130 (= $x103 false)))
 (let (($x117 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x124 (=> $x117 $x109)))
 (let (($x123 (= $x117 true)))
 (let (($x118 (and $x123 $x124)))
 (let (($x131 (and $x118 $x130)))
 (let (($x8 (and $x131 $x11)))
 (let (($x104 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x36 (and $x104 $x8)))
 (let (($x310 (and $x36 $x309)))
 (let (($x162 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-3.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x268 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x156 (and $x268 $x162)))
 (let (($x54 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x157 (=> $x54 $x156)))
 (let (($x98 (= $x54 false)))
 (let (($x141 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x245 (=> $x141 $x109)))
 (let (($x143 (= $x141 true)))
 (let (($x142 (and $x143 $x245)))
 (let (($x53 (and $x142 $x98)))
 (let (($x160 (and $x53 $x157)))
 (let (($x261 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x161 (and $x261 $x160)))
 (let (($x249 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x163 (=> $x249 $x161)))
 (let (($x253 (= $x249 true)))
 (let (($x242 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x254 (=> $x242 $x109)))
 (let (($x250 (= $x242 false)))
 (let (($x255 (and $x250 $x254)))
 (let (($x256 (and $x255 $x253)))
 (let (($x169 (and $x256 $x163)))
 (let (($x311 (and $x169 $x310)))
 (let (($x214 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-4.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x197 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x211 (and $x197 $x214)))
 (let (($x206 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x212 (=> $x206 $x211)))
 (let (($x186 (= $x206 false)))
 (let (($x180 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x177 (=> $x180 $x109)))
 (let (($x168 (= $x180 true)))
 (let (($x181 (and $x168 $x177)))
 (let (($x188 (and $x181 $x186)))
 (let (($x213 (and $x188 $x212)))
 (let (($x126 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x228 (and $x126 $x213)))
 (let (($x134 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (=> $x134 $x228)))
 (let (($x139 (= $x134 true)))
 (let (($x64 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x64 $x109)))
 (let (($x149 (= $x64 false)))
 (let (($x107 (and $x149 $x148)))
 (let (($x108 (and $x107 $x139)))
 (let (($x233 (and $x108 $x229)))
 (let (($x312 (and $x233 $x311)))
 (let (($x57 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x14 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x57)))))))
 (let (($x50 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x154 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x50)))))))
 (let (($x30 (and $x154 $x14)))
 (let (($x313 (and $x30 $x312)))
 (let (($x395 (=> $x313 $x394)))
 (not $x395))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 ((_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x421 (ite (= (_ bv0 32) smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x432 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv4 32))))
 (let ((?x96 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x39 (bvadd ?x96 (_ bv3 32))))
 (let ((?x26 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x325 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x331 (store (store ?x325 (bvadd input.dst.llvm-%l (_ bv1 32)) ((_ extract 15 8) (_ bv42 32))) (bvadd input.dst.llvm-%l (_ bv2 32)) ((_ extract 23 16) (_ bv42 32)))))
 (let ((?x333 (store ?x331 ?x26 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x339 (store (store ?x333 (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x344 (store (store ?x339 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x39 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x439 (concat (select ?x344 (bvadd ?x432 (_ bv2 32))) (concat (select ?x344 (bvadd ?x432 (_ bv1 32))) (select ?x344 ?x432)))))
 (let ((?x442 (concat (select ?x344 (bvadd ?x432 (_ bv3 32))) ?x439)))
 (let ((?x424 (select ?x344 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv1 32)))))
 (let ((?x425 (concat ?x424 (select ?x344 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0))))
 (let ((?x427 (select ?x344 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv2 32)))))
 (let ((?x430 (select ?x344 (bvadd smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 (_ bv3 32)))))
 (let ((?x431 (concat ?x430 (concat ?x427 ?x425))))
 (let (($x443 (axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 (_ bv1 32) false (_ bv42 32) (_ bv0 32) false smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 input.dst.llvm-%l ?x421 false ?x431 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 ?x442 ?x421 false ?x431 smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 ?x442 ?x421 false)))
 (let (($x393 (= $x443 true)))
 (let (($x394 (= $x393 true)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x292 (concat ?x291 (concat ?x288 (concat ?x284 ?x282)))))
 (let (($x304 (= ?x292 input.dst.llvm-%l)))
 (let (($x305 (= $x304 true)))
 (let (($x306 (= $x305 true)))
 (let (($x293 (= input.dst.llvm-%l ?x292)))
 (let (($x296 (and $x293 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x277)))
 (let ((?x274 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x274)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x273 $x275)))
 (let (($x279 (and $x276 $x278)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x29 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x145 (and true $x140)))
 (let (($x27 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (and $x27 $x145)))
 (let (($x35 (and $x140 $x20)))
 (let (($x146 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x96 (bvsub ?x96 (_ bv4 32))) (bvult ?x96 (bvsub ?x96 (_ bv4 32))))))
 (let (($x48 (and (and (and $x146 $x145) $x35) $x29)))
 (let (($x60 (and $x48 $x59)))
 (let (($x299 (and (and (and $x60 $x272) $x279) $x296)))
 (let (($x300 (= $x299 true)))
 (let (($x301 (= $x300 true)))
 (let (($x302 (= $x301 true)))
 (let (($x66 (= $x60 true)))
 (let (($x70 (= $x66 true)))
 (let (($x270 (= $x70 true)))
 (let (($x303 (and $x270 $x302)))
 (let (($x307 (and $x303 $x306)))
 (let (($x110 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x308 (and $x110 $x307)))
 (let (($x91 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-1.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x172 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x194 (and $x172 $x91)))
 (let (($x252 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x196 (=> $x252 $x194)))
 (let (($x244 (= $x252 false)))
 (let (($x109 (= false false)))
 (let (($x247 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x223 (=> $x247 $x109)))
 (let (($x232 (= $x247 true)))
 (let (($x236 (and $x232 $x223)))
 (let (($x251 (and $x236 $x244)))
 (let (($x198 (and $x251 $x196)))
 (let (($x218 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x205 (and $x218 $x198)))
 (let (($x216 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x92 (=> $x216 $x205)))
 (let (($x166 (= $x216 false)))
 (let (($x34 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x72 (=> $x34 $x109)))
 (let (($x262 (= $x34 true)))
 (let (($x44 (and $x262 $x72)))
 (let (($x167 (and $x44 $x166)))
 (let (($x101 (and $x167 $x92)))
 (let (($x309 (and $x101 $x308)))
 (let (($x43 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x46 (=> $x43 true)))
 (let (($x87 (= $x43 false)))
 (let (($x88 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x82 (=> $x88 $x109)))
 (let (($x81 (= $x88 true)))
 (let (($x74 (and $x81 $x82)))
 (let (($x47 (and $x74 $x87)))
 (let (($x22 (and $x47 $x46)))
 (let (($x63 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x24 (and $x63 $x22)))
 (let (($x103 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x11 (=> $x103 $x24)))
 (let (($x130 (= $x103 false)))
 (let (($x117 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x124 (=> $x117 $x109)))
 (let (($x123 (= $x117 true)))
 (let (($x118 (and $x123 $x124)))
 (let (($x131 (and $x118 $x130)))
 (let (($x8 (and $x131 $x11)))
 (let (($x104 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x36 (and $x104 $x8)))
 (let (($x310 (and $x36 $x309)))
 (let (($x162 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-3.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x268 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x156 (and $x268 $x162)))
 (let (($x54 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x157 (=> $x54 $x156)))
 (let (($x98 (= $x54 false)))
 (let (($x141 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x245 (=> $x141 $x109)))
 (let (($x143 (= $x141 true)))
 (let (($x142 (and $x143 $x245)))
 (let (($x53 (and $x142 $x98)))
 (let (($x160 (and $x53 $x157)))
 (let (($x261 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x161 (and $x261 $x160)))
 (let (($x249 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x163 (=> $x249 $x161)))
 (let (($x253 (= $x249 true)))
 (let (($x242 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x254 (=> $x242 $x109)))
 (let (($x250 (= $x242 false)))
 (let (($x255 (and $x250 $x254)))
 (let (($x256 (and $x255 $x253)))
 (let (($x169 (and $x256 $x163)))
 (let (($x311 (and $x169 $x310)))
 (let (($x214 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-4.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x197 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x211 (and $x197 $x214)))
 (let (($x206 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x212 (=> $x206 $x211)))
 (let (($x186 (= $x206 false)))
 (let (($x180 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x177 (=> $x180 $x109)))
 (let (($x168 (= $x180 true)))
 (let (($x181 (and $x168 $x177)))
 (let (($x188 (and $x181 $x186)))
 (let (($x213 (and $x188 $x212)))
 (let (($x126 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x228 (and $x126 $x213)))
 (let (($x134 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (=> $x134 $x228)))
 (let (($x139 (= $x134 true)))
 (let (($x64 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x64 $x109)))
 (let (($x149 (= $x64 false)))
 (let (($x107 (and $x149 $x148)))
 (let (($x108 (and $x107 $x139)))
 (let (($x233 (and $x108 $x229)))
 (let (($x312 (and $x233 $x311)))
 (let (($x57 (bvugt ?x96 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x14 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x57)))))))
 (let (($x50 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x154 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x50)))))))
 (let (($x30 (and $x154 $x14)))
 (let (($x313 (and $x30 $x312)))
 (let (($x395 (=> $x313 $x394)))
 (not $x395))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 @fun_40)
(= input.dst.llvm-mem @fun_37)
(= axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_58)
(function @fun_40
 (type
  (FunType26 (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) Bool Bool))
 (=
  (@fun_40 #b00000000000000000000000000000001 false #b00000000000000000000000000101010 #b00000000000000000000000000000000 false
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_37 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_37 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000000) #b00000000)
 (= (@fun_37 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000001) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000010) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000011) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000100) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000101) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000110) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000111) #b00000000)
 (default #b10000000))
(function @fun_58
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_58 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7dd80000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7fdc0000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7dd80003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7dd80000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7dd80003) #x7f
    (ite (= x!0 #x7dd80000) #x00
    (ite (= x!0 #x7dd80002) #xdc
    (ite (= x!0 #x7dd80001) #x00
      #x00)))))
  (define-fun axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 ((x!0
    (_ BitVec 32))
   (x!1 Bool)
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 Bool)
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 Bool)
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))
   (x!14 (_ BitVec 32))
   (x!15 Bool)
   (x!16 (_ BitVec 32))
   (x!17 (_ BitVec 32))
   (x!18 (_ BitVec 32))
   (x!19 (_ BitVec 32))
   (x!20 Bool)
   (x!21 (_ BitVec 32))
   (x!22 (_ BitVec 32))
   (x!23 (_ BitVec 32))
   (x!24 (_ BitVec 32))
   (x!25 Bool)) Bool
    (ite (and (= x!0 #x00000001)
              (= x!1 false)
              (= x!2 #x0000002a)
              (= x!3 #x00000000)
              (= x!4 false)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 false)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x7fdc0000)
              (= x!14 #x00000000)
              (= x!15 false)
              (= x!16 #x00000000)
              (= x!17 #x00000000)
              (= x!18 #x00000000)
              (= x!19 #x00000000)
              (= x!20 false)
              (= x!21 #x00000000)
              (= x!22 #x00000000)
              (= x!23 #x00000000)
              (= x!24 #x00000000)
              (= x!25 false))
      false
      false))
  (define-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7f80c000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x00000020)
  (define-fun smt-tree-norm-var-c71a71b3b3e9675cd65c246b3146ca2-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-cc126478c0b7a1d68a70207d924ef96-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x71898000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7f80c003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7f80c000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f80c002) #x89
    (ite (= x!0 #x7f80c001) #x80
    (ite (= x!0 #x7f80c003) #x71
    (ite (= x!0 #x7f80c000) #x00
      #x89)))))
  (define-fun axpred-spec-indeq143.c71a71b3b3e9675cd65c246b3146ca2.cc126478c0b7a1d68a70207d924ef96 ((x!0
    (_ BitVec 32))
   (x!1 Bool)
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 Bool)
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 Bool)
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))
   (x!14 (_ BitVec 32))
   (x!15 Bool)
   (x!16 (_ BitVec 32))
   (x!17 (_ BitVec 32))
   (x!18 (_ BitVec 32))
   (x!19 (_ BitVec 32))
   (x!20 Bool)
   (x!21 (_ BitVec 32))
   (x!22 (_ BitVec 32))
   (x!23 (_ BitVec 32))
   (x!24 (_ BitVec 32))
   (x!25 Bool)) Bool
    (ite (and (= x!0 #x00000001)
              (= x!1 false)
              (= x!2 #x0000002a)
              (= x!3 #x00000000)
              (= x!4 false)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 false)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x71898000)
              (= x!14 #x00000000)
              (= x!15 false)
              (= x!16 #x89898989)
              (= x!17 #x00000000)
              (= x!18 #x89898989)
              (= x!19 #x00000000)
              (= x!20 false)
              (= x!21 #x89898989)
              (= x!22 #x00000000)
              (= x!23 #x89898989)
              (= x!24 #x00000000)
              (= x!25 false))
      false
      false))
  (define-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 ((_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq150.ebf3fcf6ed01bff562311407e84441d.87f4b9bc4173dbdb489f8cc157ba3577 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x468 (ite (= (_ bv0 32) smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x456 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv4 32))))
 (let ((?x85 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x58 (bvadd ?x85 (_ bv3 32))))
 (let ((?x138 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x226 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x243 (store (store ?x226 (bvadd input.dst.llvm-%l (_ bv1 32)) ((_ extract 15 8) (_ bv42 32))) (bvadd input.dst.llvm-%l (_ bv2 32)) ((_ extract 23 16) (_ bv42 32)))))
 (let ((?x173 (store ?x243 ?x138 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x200 (store (store ?x173 (bvadd ?x85 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x85 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x112 (store (store ?x200 (bvadd ?x85 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x58 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x463 (concat (select ?x112 (bvadd ?x456 (_ bv2 32))) (concat (select ?x112 (bvadd ?x456 (_ bv1 32))) (select ?x112 ?x456)))))
 (let ((?x466 (concat (select ?x112 (bvadd ?x456 (_ bv3 32))) ?x463)))
 (let ((?x448 (select ?x112 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv1 32)))))
 (let ((?x449 (concat ?x448 (select ?x112 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0))))
 (let ((?x451 (select ?x112 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv2 32)))))
 (let ((?x454 (select ?x112 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv3 32)))))
 (let ((?x455 (concat ?x454 (concat ?x451 ?x449))))
 (let (($x469 (axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 (_ bv42 32) (_ bv0 32) false smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 input.dst.llvm-%l ?x455 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 ?x466 ?x468 false ?x455 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 ?x466 ?x468 false)))
 (let (($x372 (=> true $x469)))
 (let (($x352 (= true (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x354 (= false (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x350 (and $x354 true)))
 (let (($x355 (and $x350 $x352)))
 (let (($x375 (and $x355 $x372)))
 (let (($x417 (= $x375 true)))
 (let (($x400 (= $x417 true)))
 (let ((?x420 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x443 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x345 (concat ?x322 (concat ?x396 (concat ?x443 ?x420)))))
 (let (($x315 (= ?x345 input.dst.llvm-%l)))
 (let (($x316 (= $x315 true)))
 (let (($x317 (= $x316 true)))
 (let (($x263 (= input.dst.llvm-%l ?x345)))
 (let (($x84 (and $x263 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x435 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x433 (= (_ bv0 32) ?x435)))
 (let ((?x437 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x438 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x437)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x434 (and $x441 $x438)))
 (let (($x436 (and $x434 $x433)))
 (let (($x440 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x424 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x429 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x338 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x337 (and true $x338)))
 (let (($x340 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x342 (and $x340 $x337)))
 (let (($x343 (and $x338 $x342)))
 (let (($x332 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv4 32))) (bvult ?x85 (bvsub ?x85 (_ bv4 32))))))
 (let (($x427 (and (and (and $x332 $x337) $x343) $x429)))
 (let (($x422 (and $x427 $x424)))
 (let (($x170 (and (and (and $x422 $x440) $x436) $x84)))
 (let (($x174 (= $x170 true)))
 (let (($x235 (= $x174 true)))
 (let (($x240 (= $x235 true)))
 (let (($x425 (= $x422 true)))
 (let (($x428 (= $x425 true)))
 (let (($x431 (= $x428 true)))
 (let (($x314 (and $x431 $x240)))
 (let (($x318 (and $x314 $x317)))
 (let (($x326 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x319 (and $x326 $x318)))
 (let (($x310 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x312 (and $x310 true)))
 (let (($x306 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x313 (=> $x306 $x312)))
 (let (($x304 (= $x306 false)))
 (let (($x37 (= false false)))
 (let (($x300 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x296 (=> $x300 $x37)))
 (let (($x295 (= $x300 true)))
 (let (($x301 (and $x295 $x296)))
 (let (($x305 (and $x301 $x304)))
 (let (($x418 (and $x305 $x313)))
 (let (($x285 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x324 (and $x285 $x418)))
 (let (($x291 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x323 (=> $x291 $x324)))
 (let (($x286 (= $x291 false)))
 (let (($x277 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x279 (=> $x277 $x37)))
 (let (($x278 (= $x277 true)))
 (let (($x298 (and $x278 $x279)))
 (let (($x287 (and $x298 $x286)))
 (let (($x325 (and $x287 $x323)))
 (let (($x320 (and $x325 $x319)))
 (let (($x29 (axpred-spec-indeq150.ebf3fcf6ed01bff562311407e84441d.87f4b9bc4173dbdb489f8cc157ba3577 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 input.spec-%tmpvar-2.E0%0%d.1.2.1.2 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.0 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.0 false smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.2 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0)))
 (let (($x145 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x145 $x29)))
 (let (($x136 (= $x145 false)))
 (let (($x146 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x119 (=> $x146 $x37)))
 (let (($x113 (= $x146 true)))
 (let (($x125 (and $x113 $x119)))
 (let (($x140 (and $x125 $x136)))
 (let (($x38 (and $x140 $x71)))
 (let (($x205 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x5 (and $x205 $x38)))
 (let (($x172 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x270 (=> $x172 $x5)))
 (let (($x207 (= $x172 false)))
 (let (($x223 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x252 (=> $x223 $x37)))
 (let (($x236 (= $x223 true)))
 (let (($x244 (and $x236 $x252)))
 (let (($x91 (and $x244 $x207)))
 (let (($x271 (and $x91 $x270)))
 (let (($x167 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x272 (and $x167 $x271)))
 (let (($x51 (and $x272 $x320)))
 (let (($x22 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x11 (and $x22 true)))
 (let (($x43 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x8 (=> $x43 $x11)))
 (let (($x82 (= $x43 false)))
 (let (($x63 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x131 (=> $x63 $x37)))
 (let (($x130 (= $x63 true)))
 (let (($x86 (and $x130 $x131)))
 (let (($x74 (and $x86 $x82)))
 (let (($x36 (and $x74 $x8)))
 (let (($x117 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x23 (and $x117 $x36)))
 (let (($x160 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x34 (=> $x160 $x23)))
 (let (($x161 (= $x160 true)))
 (let (($x150 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x176 (=> $x150 $x37)))
 (let (($x268 (= $x150 false)))
 (let (($x162 (and $x268 $x176)))
 (let (($x163 (and $x162 $x161)))
 (let (($x262 (and $x163 $x34)))
 (let (($x10 (and $x262 $x51)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x256 (and $x249 true)))
 (let (($x242 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x260 (=> $x242 $x256)))
 (let (($x233 (= $x242 false)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x214 (=> $x212 $x37)))
 (let (($x220 (= $x212 true)))
 (let (($x213 (and $x220 $x214)))
 (let (($x239 (and $x213 $x233)))
 (let (($x261 (and $x239 $x260)))
 (let (($x219 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x19 (and $x219 $x261)))
 (let (($x168 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x141 (=> $x168 $x19)))
 (let (($x177 (= $x168 true)))
 (let (($x139 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x152 (=> $x139 $x37)))
 (let (($x108 (= $x139 false)))
 (let (($x126 (and $x108 $x152)))
 (let (($x181 (and $x126 $x177)))
 (let (($x143 (and $x181 $x141)))
 (let (($x12 (and $x143 $x10)))
 (let (($x94 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x64 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x94)))))))
 (let (($x165 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x129 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x165)))))))
 (let (($x61 (and $x129 $x64)))
 (let (($x45 (and $x61 $x12)))
 (let (($x403 (=> $x45 $x400)))
 (not $x403))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 ((_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun axpred-spec-indeq150.ebf3fcf6ed01bff562311407e84441d.87f4b9bc4173dbdb489f8cc157ba3577 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.2 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x468 (ite (= (_ bv0 32) smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x456 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv4 32))))
 (let ((?x85 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x58 (bvadd ?x85 (_ bv3 32))))
 (let ((?x138 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x226 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x243 (store (store ?x226 (bvadd input.dst.llvm-%l (_ bv1 32)) ((_ extract 15 8) (_ bv42 32))) (bvadd input.dst.llvm-%l (_ bv2 32)) ((_ extract 23 16) (_ bv42 32)))))
 (let ((?x173 (store ?x243 ?x138 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x200 (store (store ?x173 (bvadd ?x85 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x85 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x112 (store (store ?x200 (bvadd ?x85 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x58 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x463 (concat (select ?x112 (bvadd ?x456 (_ bv2 32))) (concat (select ?x112 (bvadd ?x456 (_ bv1 32))) (select ?x112 ?x456)))))
 (let ((?x466 (concat (select ?x112 (bvadd ?x456 (_ bv3 32))) ?x463)))
 (let ((?x448 (select ?x112 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv1 32)))))
 (let ((?x449 (concat ?x448 (select ?x112 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0))))
 (let ((?x451 (select ?x112 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv2 32)))))
 (let ((?x454 (select ?x112 (bvadd smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 (_ bv3 32)))))
 (let ((?x455 (concat ?x454 (concat ?x451 ?x449))))
 (let (($x469 (axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 (_ bv42 32) (_ bv0 32) false smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 input.dst.llvm-%l ?x455 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 ?x466 ?x468 false ?x455 smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 ?x466 ?x468 false)))
 (let (($x372 (=> true $x469)))
 (let (($x352 (= true (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x354 (= false (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x350 (and $x354 true)))
 (let (($x355 (and $x350 $x352)))
 (let (($x375 (and $x355 $x372)))
 (let (($x417 (= $x375 true)))
 (let (($x400 (= $x417 true)))
 (let ((?x420 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x443 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x345 (concat ?x322 (concat ?x396 (concat ?x443 ?x420)))))
 (let (($x315 (= ?x345 input.dst.llvm-%l)))
 (let (($x316 (= $x315 true)))
 (let (($x317 (= $x316 true)))
 (let (($x263 (= input.dst.llvm-%l ?x345)))
 (let (($x84 (and $x263 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x435 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x433 (= (_ bv0 32) ?x435)))
 (let ((?x437 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x438 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x437)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x434 (and $x441 $x438)))
 (let (($x436 (and $x434 $x433)))
 (let (($x440 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x424 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x429 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x338 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x337 (and true $x338)))
 (let (($x340 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x342 (and $x340 $x337)))
 (let (($x343 (and $x338 $x342)))
 (let (($x332 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv4 32))) (bvult ?x85 (bvsub ?x85 (_ bv4 32))))))
 (let (($x427 (and (and (and $x332 $x337) $x343) $x429)))
 (let (($x422 (and $x427 $x424)))
 (let (($x170 (and (and (and $x422 $x440) $x436) $x84)))
 (let (($x174 (= $x170 true)))
 (let (($x235 (= $x174 true)))
 (let (($x240 (= $x235 true)))
 (let (($x425 (= $x422 true)))
 (let (($x428 (= $x425 true)))
 (let (($x431 (= $x428 true)))
 (let (($x314 (and $x431 $x240)))
 (let (($x318 (and $x314 $x317)))
 (let (($x326 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x319 (and $x326 $x318)))
 (let (($x310 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x312 (and $x310 true)))
 (let (($x306 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x313 (=> $x306 $x312)))
 (let (($x304 (= $x306 false)))
 (let (($x37 (= false false)))
 (let (($x300 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x296 (=> $x300 $x37)))
 (let (($x295 (= $x300 true)))
 (let (($x301 (and $x295 $x296)))
 (let (($x305 (and $x301 $x304)))
 (let (($x418 (and $x305 $x313)))
 (let (($x285 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x324 (and $x285 $x418)))
 (let (($x291 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x323 (=> $x291 $x324)))
 (let (($x286 (= $x291 false)))
 (let (($x277 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x279 (=> $x277 $x37)))
 (let (($x278 (= $x277 true)))
 (let (($x298 (and $x278 $x279)))
 (let (($x287 (and $x298 $x286)))
 (let (($x325 (and $x287 $x323)))
 (let (($x320 (and $x325 $x319)))
 (let (($x29 (axpred-spec-indeq150.ebf3fcf6ed01bff562311407e84441d.87f4b9bc4173dbdb489f8cc157ba3577 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 input.spec-%tmpvar-2.E0%0%d.1.2.1.2 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.0 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.0 false smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.2 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0)))
 (let (($x145 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x71 (=> $x145 $x29)))
 (let (($x136 (= $x145 false)))
 (let (($x146 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x119 (=> $x146 $x37)))
 (let (($x113 (= $x146 true)))
 (let (($x125 (and $x113 $x119)))
 (let (($x140 (and $x125 $x136)))
 (let (($x38 (and $x140 $x71)))
 (let (($x205 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x5 (and $x205 $x38)))
 (let (($x172 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x270 (=> $x172 $x5)))
 (let (($x207 (= $x172 false)))
 (let (($x223 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x252 (=> $x223 $x37)))
 (let (($x236 (= $x223 true)))
 (let (($x244 (and $x236 $x252)))
 (let (($x91 (and $x244 $x207)))
 (let (($x271 (and $x91 $x270)))
 (let (($x167 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x272 (and $x167 $x271)))
 (let (($x51 (and $x272 $x320)))
 (let (($x22 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x11 (and $x22 true)))
 (let (($x43 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x8 (=> $x43 $x11)))
 (let (($x82 (= $x43 false)))
 (let (($x63 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x131 (=> $x63 $x37)))
 (let (($x130 (= $x63 true)))
 (let (($x86 (and $x130 $x131)))
 (let (($x74 (and $x86 $x82)))
 (let (($x36 (and $x74 $x8)))
 (let (($x117 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x23 (and $x117 $x36)))
 (let (($x160 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x34 (=> $x160 $x23)))
 (let (($x161 (= $x160 true)))
 (let (($x150 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x176 (=> $x150 $x37)))
 (let (($x268 (= $x150 false)))
 (let (($x162 (and $x268 $x176)))
 (let (($x163 (and $x162 $x161)))
 (let (($x262 (and $x163 $x34)))
 (let (($x10 (and $x262 $x51)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x256 (and $x249 true)))
 (let (($x242 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x260 (=> $x242 $x256)))
 (let (($x233 (= $x242 false)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x214 (=> $x212 $x37)))
 (let (($x220 (= $x212 true)))
 (let (($x213 (and $x220 $x214)))
 (let (($x239 (and $x213 $x233)))
 (let (($x261 (and $x239 $x260)))
 (let (($x219 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x19 (and $x219 $x261)))
 (let (($x168 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x141 (=> $x168 $x19)))
 (let (($x177 (= $x168 true)))
 (let (($x139 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x152 (=> $x139 $x37)))
 (let (($x108 (= $x139 false)))
 (let (($x126 (and $x108 $x152)))
 (let (($x181 (and $x126 $x177)))
 (let (($x143 (and $x181 $x141)))
 (let (($x12 (and $x143 $x10)))
 (let (($x94 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x64 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x94)))))))
 (let (($x165 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x129 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x165)))))))
 (let (($x61 (and $x129 $x64)))
 (let (($x45 (and $x61 $x12)))
 (let (($x403 (=> $x45 $x400)))
 (not $x403))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 @fun_40)
(= input.dst.llvm-mem @fun_37)
(function @fun_40
 (type
  (FunType22 (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_40 #b00000000000000000000000000101010 #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b11000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_37 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000000) #b00000000)
 (= (@fun_37 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_37 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000001) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000010) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000011) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000100) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000101) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000110) #b00000000)
 (= (@fun_37 #b11000000000000000000000000000111) #b00000000)
 (default #b10000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7dd80000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7fdc0000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7dd80003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7dd80000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7dd80003) #x7f
    (ite (= x!0 #x7dd80000) #x00
    (ite (= x!0 #x7dd80002) #xdc
    (ite (= x!0 #x7dd80001) #x00
      #x00)))))
  (define-fun axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 Bool)
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 Bool)
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))
   (x!14 (_ BitVec 32))
   (x!15 (_ BitVec 32))
   (x!16 Bool)
   (x!17 (_ BitVec 32))
   (x!18 (_ BitVec 32))
   (x!19 (_ BitVec 32))
   (x!20 (_ BitVec 32))
   (x!21 Bool)) Bool
    (ite (and (= x!0 #x0000002a)
              (= x!1 #x00000000)
              (= x!2 false)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 false)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x7fdc0000)
              (= x!12 #x00000000)
              (= x!13 #x00000000)
              (= x!14 #x00000000)
              (= x!15 #x00000000)
              (= x!16 false)
              (= x!17 #x00000000)
              (= x!18 #x00000000)
              (= x!19 #x00000000)
              (= x!20 #x00000000)
              (= x!21 false))
      false
      false))
  (define-fun axpred-spec-indeq150.ebf3fcf6ed01bff562311407e84441d.87f4b9bc4173dbdb489f8cc157ba3577 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 Bool)
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 Bool)
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7f80c000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun smt-tree-norm-var-11e0c99e754c5c86b887b6f5b57bf0cf-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-6edb18a32e2ce7d8534745f245e90-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x71898000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7f80c003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7f80c000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-87f4b9bc4173dbdb489f8cc157ba3577-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.1.2 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-ebf3fcf6ed01bff562311407e84441d-0 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f80c002) #x89
    (ite (= x!0 #x7f80c001) #x80
    (ite (= x!0 #x7f80c003) #x71
    (ite (= x!0 #x7f80c000) #x00
      #x89)))))
  (define-fun axpred-spec-indeq150.11e0c99e754c5c86b887b6f5b57bf0cf.6edb18a32e2ce7d8534745f245e90 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 Bool)
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 Bool)
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))
   (x!14 (_ BitVec 32))
   (x!15 (_ BitVec 32))
   (x!16 Bool)
   (x!17 (_ BitVec 32))
   (x!18 (_ BitVec 32))
   (x!19 (_ BitVec 32))
   (x!20 (_ BitVec 32))
   (x!21 Bool)) Bool
    (ite (and (= x!0 #x0000002a)
              (= x!1 #x00000000)
              (= x!2 false)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 false)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x71898000)
              (= x!12 #x89898989)
              (= x!13 #x00000000)
              (= x!14 #x89898989)
              (= x!15 #x00000000)
              (= x!16 false)
              (= x!17 #x89898989)
              (= x!18 #x00000000)
              (= x!19 #x89898989)
              (= x!20 #x00000000)
              (= x!21 false))
      false
      false))
  (define-fun axpred-spec-indeq150.ebf3fcf6ed01bff562311407e84441d.87f4b9bc4173dbdb489f8cc157ba3577 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 Bool)
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 Bool)
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 ((_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x511 (ite (= (_ bv0 32) smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x522 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv4 32))))
 (let ((?x26 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x158 (bvadd ?x26 (_ bv3 32))))
 (let ((?x18 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x114 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x194 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x251 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x106 (store (store (store ?x251 ?x194 ((_ extract 15 8) (_ bv42 32))) ?x114 ((_ extract 23 16) (_ bv42 32))) ?x18 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x27 (store (store ?x106 (bvadd ?x26 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x26 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x54 (store (store ?x27 (bvadd ?x26 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x158 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x529 (concat (select ?x54 (bvadd ?x522 (_ bv2 32))) (concat (select ?x54 (bvadd ?x522 (_ bv1 32))) (select ?x54 ?x522)))))
 (let ((?x514 (select ?x54 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv1 32)))))
 (let ((?x515 (concat ?x514 (select ?x54 smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0))))
 (let ((?x517 (select ?x54 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv2 32)))))
 (let ((?x520 (select ?x54 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv3 32)))))
 (let ((?x502 (concat (select ?x54 (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (select ?x54 (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x505 (concat (select ?x54 (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32))) ?x502)))
 (let ((?x508 (concat (select ?x54 (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32))) ?x505)))
 (let (($x533 (axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 (_ bv0 32) false smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 ?x508 ?x511 false (concat ?x520 (concat ?x517 ?x515)) smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (concat (select ?x54 (bvadd ?x522 (_ bv3 32))) ?x529) ?x511 false)))
 (let ((?x391 (concat (select ?x54 ?x114) (concat (select ?x54 ?x194) (select ?x54 input.dst.llvm-%l)))))
 (let (($x365 (= (_ bv42 32) (concat (select ?x54 ?x18) ?x391))))
 (let (($x473 (and $x365 $x533)))
 (let (($x474 (=> true $x473)))
 (let (($x42 (= true (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x257 (= false (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x264 (and $x257 true)))
 (let (($x93 (and $x264 $x42)))
 (let (($x475 (and $x93 $x474)))
 (let (($x476 (= $x475 true)))
 (let (($x487 (= $x476 true)))
 (let ((?x357 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x273 (concat ?x39 (concat ?x90 ?x357)))))
 (let (($x289 (= ?x72 input.dst.llvm-%l)))
 (let (($x292 (= $x289 true)))
 (let (($x309 (= $x292 true)))
 (let (($x44 (= input.dst.llvm-%l ?x72)))
 (let (($x80 (and $x44 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x375 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x417 (= (_ bv0 32) ?x375)))
 (let ((?x468 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x469 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x468)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x372 (and $x467 $x469)))
 (let (($x400 (and $x372 $x417)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= (bvand ?x26 (_ bv4294967292 32)) ?x26)))
 (let (($x455 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x453 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x454 (and true $x453)))
 (let (($x447 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x448 (and $x447 $x454)))
 (let (($x446 (and $x453 $x448)))
 (let (($x175 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x26 (bvsub ?x26 (_ bv4 32))) (bvult ?x26 (bvsub ?x26 (_ bv4 32))))))
 (let (($x465 (and (and (and $x175 $x454) $x446) $x455)))
 (let (($x458 (and $x465 $x462)))
 (let (($x280 (and (and (and $x458 $x466) $x400) $x80)))
 (let (($x290 (= $x280 true)))
 (let (($x288 (= $x290 true)))
 (let (($x283 (= $x288 true)))
 (let (($x459 (= $x458 true)))
 (let (($x457 (= $x459 true)))
 (let (($x460 (= $x457 true)))
 (let (($x284 (and $x460 $x283)))
 (let (($x293 (and $x284 $x309)))
 (let (($x189 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x294 (and $x189 $x293)))
 (let (($x164 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-1.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x349 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x234 (and $x349 $x164)))
 (let (($x208 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x230 (=> $x208 $x234)))
 (let (($x12 (= $x208 false)))
 (let (($x197 (= false false)))
 (let (($x319 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x317 (=> $x319 $x197)))
 (let (($x316 (= $x319 true)))
 (let (($x320 (and $x316 $x317)))
 (let (($x45 (and $x320 $x12)))
 (let (($x237 (and $x45 $x230)))
 (let (($x174 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x231 (and $x174 $x237)))
 (let (($x356 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x173 (=> $x356 $x231)))
 (let (($x345 (= $x356 false)))
 (let (($x395 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x421 (=> $x395 $x197)))
 (let (($x396 (= $x395 true)))
 (let (($x443 (and $x396 $x421)))
 (let (($x263 (and $x443 $x345)))
 (let (($x184 (and $x263 $x173)))
 (let (($x302 (and $x184 $x294)))
 (let (($x441 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x437 (=> $x441 true)))
 (let (($x440 (= $x441 false)))
 (let (($x425 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x424 (=> $x425 $x197)))
 (let (($x423 (= $x425 true)))
 (let (($x428 (and $x423 $x424)))
 (let (($x25 (and $x428 $x440)))
 (let (($x438 (and $x25 $x437)))
 (let (($x343 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x434 (and $x343 $x438)))
 (let (($x337 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x435 (=> $x337 $x434)))
 (let (($x430 (= $x337 false)))
 (let (($x332 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x333 (=> $x332 $x197)))
 (let (($x335 (= $x332 true)))
 (let (($x334 (and $x335 $x333)))
 (let (($x339 (and $x334 $x430)))
 (let (($x433 (and $x339 $x435)))
 (let (($x327 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x436 (and $x327 $x433)))
 (let (($x303 (and $x436 $x302)))
 (let (($x310 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-3.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x299 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x301 (and $x299 $x310)))
 (let (($x286 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x306 (=> $x286 $x301)))
 (let (($x298 (= $x286 false)))
 (let (($x276 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x271 (=> $x276 $x197)))
 (let (($x270 (= $x276 true)))
 (let (($x277 (and $x270 $x271)))
 (let (($x291 (and $x277 $x298)))
 (let (($x304 (and $x291 $x306)))
 (let (($x49 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x305 (and $x49 $x304)))
 (let (($x136 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x312 (=> $x136 $x305)))
 (let (($x140 (= $x136 true)))
 (let (($x127 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x113 (=> $x127 $x197)))
 (let (($x146 (= $x127 false)))
 (let (($x119 (and $x146 $x113)))
 (let (($x48 (and $x119 $x140)))
 (let (($x313 (and $x48 $x312)))
 (let (($x307 (and $x313 $x303)))
 (let (($x23 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-4.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x130 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x11 (and $x130 $x23)))
 (let (($x116 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x8 (=> $x116 $x11)))
 (let (($x161 (= $x116 false)))
 (let (($x268 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x53 (=> $x268 $x197)))
 (let (($x143 (= $x268 true)))
 (let (($x176 (and $x143 $x53)))
 (let (($x163 (and $x176 $x161)))
 (let (($x36 (and $x163 $x8)))
 (let (($x256 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x236 (and $x256 $x36)))
 (let (($x220 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x252 (=> $x220 $x236)))
 (let (($x214 (= $x220 true)))
 (let (($x177 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x201 (=> $x177 $x197)))
 (let (($x181 (= $x177 false)))
 (let (($x219 (and $x181 $x201)))
 (let (($x213 (and $x219 $x214)))
 (let (($x244 (and $x213 $x252)))
 (let (($x308 (and $x244 $x307)))
 (let (($x30 (bvugt ?x26 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x139 (=> (bvule ?x26 (bvsub (bvadd ?x26 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x30)))))))
 (let (($x96 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x16 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x96)))))))
 (let (($x77 (and $x16 $x139)))
 (let (($x216 (and $x77 $x308)))
 (let (($x495 (=> $x216 $x487)))
 (not $x495)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 ((_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x511 (ite (= (_ bv0 32) smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x522 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv4 32))))
 (let ((?x26 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x158 (bvadd ?x26 (_ bv3 32))))
 (let ((?x18 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x114 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x194 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x251 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x106 (store (store (store ?x251 ?x194 ((_ extract 15 8) (_ bv42 32))) ?x114 ((_ extract 23 16) (_ bv42 32))) ?x18 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x27 (store (store ?x106 (bvadd ?x26 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x26 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x54 (store (store ?x27 (bvadd ?x26 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x158 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x529 (concat (select ?x54 (bvadd ?x522 (_ bv2 32))) (concat (select ?x54 (bvadd ?x522 (_ bv1 32))) (select ?x54 ?x522)))))
 (let ((?x514 (select ?x54 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv1 32)))))
 (let ((?x515 (concat ?x514 (select ?x54 smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0))))
 (let ((?x517 (select ?x54 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv2 32)))))
 (let ((?x520 (select ?x54 (bvadd smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (_ bv3 32)))))
 (let ((?x502 (concat (select ?x54 (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (select ?x54 (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x505 (concat (select ?x54 (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32))) ?x502)))
 (let ((?x508 (concat (select ?x54 (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32))) ?x505)))
 (let (($x533 (axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 (_ bv0 32) false smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 (_ bv0 32) (_ bv0 32) (_ bv0 32) false smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 ?x508 ?x511 false (concat ?x520 (concat ?x517 ?x515)) smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 (concat (select ?x54 (bvadd ?x522 (_ bv3 32))) ?x529) ?x511 false)))
 (let ((?x391 (concat (select ?x54 ?x114) (concat (select ?x54 ?x194) (select ?x54 input.dst.llvm-%l)))))
 (let (($x365 (= (_ bv42 32) (concat (select ?x54 ?x18) ?x391))))
 (let (($x473 (and $x365 $x533)))
 (let (($x474 (=> true $x473)))
 (let (($x42 (= true (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x257 (= false (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x264 (and $x257 true)))
 (let (($x93 (and $x264 $x42)))
 (let (($x475 (and $x93 $x474)))
 (let (($x476 (= $x475 true)))
 (let (($x487 (= $x476 true)))
 (let ((?x357 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x273 (concat ?x39 (concat ?x90 ?x357)))))
 (let (($x289 (= ?x72 input.dst.llvm-%l)))
 (let (($x292 (= $x289 true)))
 (let (($x309 (= $x292 true)))
 (let (($x44 (= input.dst.llvm-%l ?x72)))
 (let (($x80 (and $x44 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x375 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x417 (= (_ bv0 32) ?x375)))
 (let ((?x468 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x469 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x468)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x372 (and $x467 $x469)))
 (let (($x400 (and $x372 $x417)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= (bvand ?x26 (_ bv4294967292 32)) ?x26)))
 (let (($x455 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x453 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x454 (and true $x453)))
 (let (($x447 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x448 (and $x447 $x454)))
 (let (($x446 (and $x453 $x448)))
 (let (($x175 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x26 (bvsub ?x26 (_ bv4 32))) (bvult ?x26 (bvsub ?x26 (_ bv4 32))))))
 (let (($x465 (and (and (and $x175 $x454) $x446) $x455)))
 (let (($x458 (and $x465 $x462)))
 (let (($x280 (and (and (and $x458 $x466) $x400) $x80)))
 (let (($x290 (= $x280 true)))
 (let (($x288 (= $x290 true)))
 (let (($x283 (= $x288 true)))
 (let (($x459 (= $x458 true)))
 (let (($x457 (= $x459 true)))
 (let (($x460 (= $x457 true)))
 (let (($x284 (and $x460 $x283)))
 (let (($x293 (and $x284 $x309)))
 (let (($x189 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x294 (and $x189 $x293)))
 (let (($x164 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-1.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x349 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x234 (and $x349 $x164)))
 (let (($x208 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x230 (=> $x208 $x234)))
 (let (($x12 (= $x208 false)))
 (let (($x197 (= false false)))
 (let (($x319 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x317 (=> $x319 $x197)))
 (let (($x316 (= $x319 true)))
 (let (($x320 (and $x316 $x317)))
 (let (($x45 (and $x320 $x12)))
 (let (($x237 (and $x45 $x230)))
 (let (($x174 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x231 (and $x174 $x237)))
 (let (($x356 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x173 (=> $x356 $x231)))
 (let (($x345 (= $x356 false)))
 (let (($x395 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x421 (=> $x395 $x197)))
 (let (($x396 (= $x395 true)))
 (let (($x443 (and $x396 $x421)))
 (let (($x263 (and $x443 $x345)))
 (let (($x184 (and $x263 $x173)))
 (let (($x302 (and $x184 $x294)))
 (let (($x441 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x437 (=> $x441 true)))
 (let (($x440 (= $x441 false)))
 (let (($x425 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x424 (=> $x425 $x197)))
 (let (($x423 (= $x425 true)))
 (let (($x428 (and $x423 $x424)))
 (let (($x25 (and $x428 $x440)))
 (let (($x438 (and $x25 $x437)))
 (let (($x343 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x434 (and $x343 $x438)))
 (let (($x337 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x435 (=> $x337 $x434)))
 (let (($x430 (= $x337 false)))
 (let (($x332 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x333 (=> $x332 $x197)))
 (let (($x335 (= $x332 true)))
 (let (($x334 (and $x335 $x333)))
 (let (($x339 (and $x334 $x430)))
 (let (($x433 (and $x339 $x435)))
 (let (($x327 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x436 (and $x327 $x433)))
 (let (($x303 (and $x436 $x302)))
 (let (($x310 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-3.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x299 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x301 (and $x299 $x310)))
 (let (($x286 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x306 (=> $x286 $x301)))
 (let (($x298 (= $x286 false)))
 (let (($x276 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x271 (=> $x276 $x197)))
 (let (($x270 (= $x276 true)))
 (let (($x277 (and $x270 $x271)))
 (let (($x291 (and $x277 $x298)))
 (let (($x304 (and $x291 $x306)))
 (let (($x49 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x305 (and $x49 $x304)))
 (let (($x136 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x312 (=> $x136 $x305)))
 (let (($x140 (= $x136 true)))
 (let (($x127 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x113 (=> $x127 $x197)))
 (let (($x146 (= $x127 false)))
 (let (($x119 (and $x146 $x113)))
 (let (($x48 (and $x119 $x140)))
 (let (($x313 (and $x48 $x312)))
 (let (($x307 (and $x313 $x303)))
 (let (($x23 (axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%tmpvar-4.E0%0%d.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) (_ bv0 32) false (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let (($x130 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x11 (and $x130 $x23)))
 (let (($x116 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x8 (=> $x116 $x11)))
 (let (($x161 (= $x116 false)))
 (let (($x268 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x53 (=> $x268 $x197)))
 (let (($x143 (= $x268 true)))
 (let (($x176 (and $x143 $x53)))
 (let (($x163 (and $x176 $x161)))
 (let (($x36 (and $x163 $x8)))
 (let (($x256 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x236 (and $x256 $x36)))
 (let (($x220 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x252 (=> $x220 $x236)))
 (let (($x214 (= $x220 true)))
 (let (($x177 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x201 (=> $x177 $x197)))
 (let (($x181 (= $x177 false)))
 (let (($x219 (and $x181 $x201)))
 (let (($x213 (and $x219 $x214)))
 (let (($x244 (and $x213 $x252)))
 (let (($x308 (and $x244 $x307)))
 (let (($x30 (bvugt ?x26 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x139 (=> (bvule ?x26 (bvsub (bvadd ?x26 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x30)))))))
 (let (($x96 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x16 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x96)))))))
 (let (($x77 (and $x16 $x139)))
 (let (($x216 (and $x77 $x308)))
 (let (($x495 (=> $x216 $x487)))
 (not $x495)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 @fun_39)
(= input.dst.llvm-mem @fun_36)
(= axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_57)
(function @fun_39
 (type
  (FunType18 (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_39 #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_36
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_36 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000000) #b00000000)
 (= (@fun_36 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_36 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000001) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000010) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000011) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000100) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000101) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000110) #b00000000)
 (= (@fun_36 #b11000000000000000000000000000111) #b00000000)
 (default #b10000000))
(function @fun_57
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_57 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 false #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7dd80000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7fdc0000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7dd80003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7dd80000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7dd80003) #x7f
    (ite (= x!0 #x7dd80000) #x00
    (ite (= x!0 #x7dd80002) #xdc
    (ite (= x!0 #x7dd80001) #x00
      #x00)))))
  (define-fun axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 ((x!0
    (_ BitVec 32))
   (x!1 Bool)
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 Bool)
   (x!13 (_ BitVec 32))
   (x!14 (_ BitVec 32))
   (x!15 (_ BitVec 32))
   (x!16 (_ BitVec 32))
   (x!17 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 false)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 false)
              (= x!13 #x00000000)
              (= x!14 #x00000000)
              (= x!15 #x00000000)
              (= x!16 #x00000000)
              (= x!17 false))
      false
      false))
  (define-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7f80c000)
  (define-fun smt-tree-norm-var-79442182e6ca1784783efa84a7286-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-bbc8e8a5c8482a4a287815d8451c9-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x71898000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7f80c003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7f80c000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f80c002) #x89
    (ite (= x!0 #x7f80c001) #x80
    (ite (= x!0 #x7f80c003) #x71
    (ite (= x!0 #x7f80c000) #x00
      #x89)))))
  (define-fun axpred-spec-indeq143.79442182e6ca1784783efa84a7286.bbc8e8a5c8482a4a287815d8451c9 ((x!0
    (_ BitVec 32))
   (x!1 Bool)
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 Bool)
   (x!13 (_ BitVec 32))
   (x!14 (_ BitVec 32))
   (x!15 (_ BitVec 32))
   (x!16 (_ BitVec 32))
   (x!17 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 false)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 false)
              (= x!13 #x89898989)
              (= x!14 #x00000000)
              (= x!15 #x89898989)
              (= x!16 #x00000000)
              (= x!17 false))
      false
      false))
  (define-fun axpred-spec-indeq143.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x133 (bvadd ?x138 (_ bv3 32))))
 (let ((?x95 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x473 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x510 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x529 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x476 (store (store (store ?x529 ?x510 ((_ extract 15 8) (_ bv42 32))) ?x473 ((_ extract 23 16) (_ bv42 32))) ?x95 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x218 (store (store ?x476 (bvadd ?x138 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x138 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x108 (store (store ?x218 (bvadd ?x138 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x133 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x202 (concat (select ?x108 (bvadd ?x41 (_ bv2 32))) (concat (select ?x108 (bvadd ?x41 (_ bv1 32))) (select ?x108 ?x41)))))
 (let ((?x203 (ite (= (_ bv0 32) (concat (select ?x108 (bvadd ?x41 (_ bv3 32))) ?x202)) (_ bv0 32) (_ bv1 32))))
 (let (($x377 (= false (bvuge ?x203 (_ bv1 32)))))
 (let (($x249 (= false false)))
 (let (($x204 (=> true $x249)))
 (let (($x151 (= true (= ?x203 (_ bv0 32)))))
 (let (($x351 (and $x151 $x204)))
 (let (($x380 (and $x351 $x377)))
 (let (($x383 (and $x380 true)))
 (let ((?x109 (concat (select ?x108 ?x473) (concat (select ?x108 ?x510) (select ?x108 input.dst.llvm-%l)))))
 (let (($x87 (= (_ bv42 32) (concat (select ?x108 ?x95) ?x109))))
 (let (($x384 (and $x87 $x383)))
 (let (($x399 (=> true $x384)))
 (let (($x285 (= true (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x29 (= false (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x71 (and $x29 true)))
 (let (($x38 (and $x71 $x285)))
 (let (($x381 (and $x38 $x399)))
 (let (($x470 (= $x381 true)))
 (let (($x471 (= $x470 true)))
 (let ((?x392 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x504 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x500 (concat ?x504 (concat ?x506 (concat ?x391 ?x392)))))
 (let (($x514 (= ?x500 input.dst.llvm-%l)))
 (let (($x512 (= $x514 true)))
 (let (($x515 (= $x512 true)))
 (let (($x501 (= input.dst.llvm-%l ?x500)))
 (let (($x505 (and $x501 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x241)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x358 (and $x27 $x20)))
 (let (($x370 (and $x358 $x54)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x178 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x257 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x264 (and true $x257)))
 (let (($x93 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x247 (and $x93 $x264)))
 (let (($x224 (and $x257 $x247)))
 (let (($x307 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x110 (and (and (and $x307 $x264) $x224) $x178)))
 (let (($x106 (and $x110 $x101)))
 (let (($x519 (and (and (and $x106 $x32) $x370) $x505)))
 (let (($x520 (= $x519 true)))
 (let (($x516 (= $x520 true)))
 (let (($x517 (= $x516 true)))
 (let (($x135 (= $x106 true)))
 (let (($x128 (= $x135 true)))
 (let (($x31 (= $x128 true)))
 (let (($x513 (and $x31 $x517)))
 (let (($x518 (and $x513 $x515)))
 (let (($x309 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x521 (and $x309 $x518)))
 (let (($x142 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x280 (and $x142 true)))
 (let (($x149 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x290 (=> $x149 $x280)))
 (let (($x357 (= $x149 false)))
 (let (($x442 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x273 (=> $x442 $x249)))
 (let (($x297 (= $x442 true)))
 (let (($x39 (and $x297 $x273)))
 (let (($x122 (and $x39 $x357)))
 (let (($x288 (and $x122 $x290)))
 (let (($x375 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x283 (and $x375 $x288)))
 (let (($x463 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x284 (=> $x463 $x283)))
 (let (($x466 (= $x463 false)))
 (let (($x461 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x458 (=> $x461 $x249)))
 (let (($x462 (= $x461 true)))
 (let (($x459 (and $x462 $x458)))
 (let (($x274 (and $x459 $x466)))
 (let (($x289 (and $x274 $x284)))
 (let (($x522 (and $x289 $x521)))
 (let (($x454 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x456 (=> $x454 true)))
 (let (($x445 (= $x454 false)))
 (let (($x175 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x200 (=> $x175 $x249)))
 (let (($x199 (= $x175 true)))
 (let (($x111 (and $x199 $x200)))
 (let (($x453 (and $x111 $x445)))
 (let (($x450 (and $x453 $x456)))
 (let (($x231 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x451 (and $x231 $x450)))
 (let (($x349 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x447 (=> $x349 $x451)))
 (let (($x243 (= $x349 false)))
 (let (($x317 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x208 (=> $x317 $x249)))
 (let (($x320 (= $x317 true)))
 (let (($x12 (and $x320 $x208)))
 (let (($x164 (and $x12 $x243)))
 (let (($x448 (and $x164 $x447)))
 (let (($x263 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x446 (and $x263 $x448)))
 (let (($x530 (and $x446 $x522)))
 (let (($x438 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x435 (and $x438 true)))
 (let (($x441 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x433 (=> $x441 $x435)))
 (let (($x424 (= $x441 false)))
 (let (($x343 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x339 (=> $x343 $x249)))
 (let (($x430 (= $x343 true)))
 (let (($x422 (and $x430 $x339)))
 (let (($x428 (and $x422 $x424)))
 (let (($x436 (and $x428 $x433)))
 (let (($x332 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x394 (and $x332 $x436)))
 (let (($x304 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x395 (=> $x304 $x394)))
 (let (($x305 (= $x304 true)))
 (let (($x300 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x311 (=> $x300 $x249)))
 (let (($x299 (= $x300 false)))
 (let (($x310 (and $x299 $x311)))
 (let (($x312 (and $x310 $x305)))
 (let (($x396 (and $x312 $x395)))
 (let (($x531 (and $x396 $x530)))
 (let (($x136 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x48 (and $x136 true)))
 (let (($x127 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x70 (=> $x127 $x48)))
 (let (($x244 (= $x127 false)))
 (let (($x8 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x23 (=> $x8 $x249)))
 (let (($x262 (= $x8 true)))
 (let (($x36 (and $x262 $x23)))
 (let (($x205 (and $x36 $x244)))
 (let (($x49 (and $x205 $x70)))
 (let (($x34 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x272 (and $x34 $x49)))
 (let (($x143 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x276 (=> $x143 $x272)))
 (let (($x53 (= $x143 true)))
 (let (($x214 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x253 (=> $x214 $x249)))
 (let (($x213 (= $x214 false)))
 (let (($x256 (and $x213 $x253)))
 (let (($x176 (and $x256 $x53)))
 (let (($x270 (and $x176 $x276)))
 (let (($x527 (and $x270 $x531)))
 (let (($x61 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x177 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x61)))))))
 (let (($x85 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x148 (=> (bvule input.dst.llvm-%l (bvsub ?x41 (_ bv1 32))) (or false (or false (and true (or $x129 $x85)))))))
 (let (($x57 (and $x148 $x177)))
 (let (($x528 (and $x57 $x527)))
 (let (($x408 (=> $x528 $x471)))
 (not $x408))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x133 (bvadd ?x138 (_ bv3 32))))
 (let ((?x95 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x473 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x510 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x529 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x476 (store (store (store ?x529 ?x510 ((_ extract 15 8) (_ bv42 32))) ?x473 ((_ extract 23 16) (_ bv42 32))) ?x95 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x218 (store (store ?x476 (bvadd ?x138 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x138 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x108 (store (store ?x218 (bvadd ?x138 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x133 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x202 (concat (select ?x108 (bvadd ?x41 (_ bv2 32))) (concat (select ?x108 (bvadd ?x41 (_ bv1 32))) (select ?x108 ?x41)))))
 (let ((?x203 (ite (= (_ bv0 32) (concat (select ?x108 (bvadd ?x41 (_ bv3 32))) ?x202)) (_ bv0 32) (_ bv1 32))))
 (let (($x377 (= false (bvuge ?x203 (_ bv1 32)))))
 (let (($x249 (= false false)))
 (let (($x204 (=> true $x249)))
 (let (($x151 (= true (= ?x203 (_ bv0 32)))))
 (let (($x351 (and $x151 $x204)))
 (let (($x380 (and $x351 $x377)))
 (let (($x383 (and $x380 true)))
 (let ((?x109 (concat (select ?x108 ?x473) (concat (select ?x108 ?x510) (select ?x108 input.dst.llvm-%l)))))
 (let (($x87 (= (_ bv42 32) (concat (select ?x108 ?x95) ?x109))))
 (let (($x384 (and $x87 $x383)))
 (let (($x399 (=> true $x384)))
 (let (($x285 (= true (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x29 (= false (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x71 (and $x29 true)))
 (let (($x38 (and $x71 $x285)))
 (let (($x381 (and $x38 $x399)))
 (let (($x470 (= $x381 true)))
 (let (($x471 (= $x470 true)))
 (let ((?x392 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x504 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x500 (concat ?x504 (concat ?x506 (concat ?x391 ?x392)))))
 (let (($x514 (= ?x500 input.dst.llvm-%l)))
 (let (($x512 (= $x514 true)))
 (let (($x515 (= $x512 true)))
 (let (($x501 (= input.dst.llvm-%l ?x500)))
 (let (($x505 (and $x501 (not (= (_ bv0 32) input.dst.llvm-%l)))))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x241)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x358 (and $x27 $x20)))
 (let (($x370 (and $x358 $x54)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x178 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x257 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x264 (and true $x257)))
 (let (($x93 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x247 (and $x93 $x264)))
 (let (($x224 (and $x257 $x247)))
 (let (($x307 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x110 (and (and (and $x307 $x264) $x224) $x178)))
 (let (($x106 (and $x110 $x101)))
 (let (($x519 (and (and (and $x106 $x32) $x370) $x505)))
 (let (($x520 (= $x519 true)))
 (let (($x516 (= $x520 true)))
 (let (($x517 (= $x516 true)))
 (let (($x135 (= $x106 true)))
 (let (($x128 (= $x135 true)))
 (let (($x31 (= $x128 true)))
 (let (($x513 (and $x31 $x517)))
 (let (($x518 (and $x513 $x515)))
 (let (($x309 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x521 (and $x309 $x518)))
 (let (($x142 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x280 (and $x142 true)))
 (let (($x149 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x290 (=> $x149 $x280)))
 (let (($x357 (= $x149 false)))
 (let (($x442 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x273 (=> $x442 $x249)))
 (let (($x297 (= $x442 true)))
 (let (($x39 (and $x297 $x273)))
 (let (($x122 (and $x39 $x357)))
 (let (($x288 (and $x122 $x290)))
 (let (($x375 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x283 (and $x375 $x288)))
 (let (($x463 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x284 (=> $x463 $x283)))
 (let (($x466 (= $x463 false)))
 (let (($x461 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x458 (=> $x461 $x249)))
 (let (($x462 (= $x461 true)))
 (let (($x459 (and $x462 $x458)))
 (let (($x274 (and $x459 $x466)))
 (let (($x289 (and $x274 $x284)))
 (let (($x522 (and $x289 $x521)))
 (let (($x454 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x456 (=> $x454 true)))
 (let (($x445 (= $x454 false)))
 (let (($x175 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x200 (=> $x175 $x249)))
 (let (($x199 (= $x175 true)))
 (let (($x111 (and $x199 $x200)))
 (let (($x453 (and $x111 $x445)))
 (let (($x450 (and $x453 $x456)))
 (let (($x231 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x451 (and $x231 $x450)))
 (let (($x349 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x447 (=> $x349 $x451)))
 (let (($x243 (= $x349 false)))
 (let (($x317 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x208 (=> $x317 $x249)))
 (let (($x320 (= $x317 true)))
 (let (($x12 (and $x320 $x208)))
 (let (($x164 (and $x12 $x243)))
 (let (($x448 (and $x164 $x447)))
 (let (($x263 (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32))))
 (let (($x446 (and $x263 $x448)))
 (let (($x530 (and $x446 $x522)))
 (let (($x438 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x435 (and $x438 true)))
 (let (($x441 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x433 (=> $x441 $x435)))
 (let (($x424 (= $x441 false)))
 (let (($x343 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x339 (=> $x343 $x249)))
 (let (($x430 (= $x343 true)))
 (let (($x422 (and $x430 $x339)))
 (let (($x428 (and $x422 $x424)))
 (let (($x436 (and $x428 $x433)))
 (let (($x332 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x394 (and $x332 $x436)))
 (let (($x304 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x395 (=> $x304 $x394)))
 (let (($x305 (= $x304 true)))
 (let (($x300 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x311 (=> $x300 $x249)))
 (let (($x299 (= $x300 false)))
 (let (($x310 (and $x299 $x311)))
 (let (($x312 (and $x310 $x305)))
 (let (($x396 (and $x312 $x395)))
 (let (($x531 (and $x396 $x530)))
 (let (($x136 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x48 (and $x136 true)))
 (let (($x127 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x70 (=> $x127 $x48)))
 (let (($x244 (= $x127 false)))
 (let (($x8 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x23 (=> $x8 $x249)))
 (let (($x262 (= $x8 true)))
 (let (($x36 (and $x262 $x23)))
 (let (($x205 (and $x36 $x244)))
 (let (($x49 (and $x205 $x70)))
 (let (($x34 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x272 (and $x34 $x49)))
 (let (($x143 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x276 (=> $x143 $x272)))
 (let (($x53 (= $x143 true)))
 (let (($x214 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x253 (=> $x214 $x249)))
 (let (($x213 (= $x214 false)))
 (let (($x256 (and $x213 $x253)))
 (let (($x176 (and $x256 $x53)))
 (let (($x270 (and $x176 $x276)))
 (let (($x527 (and $x270 $x531)))
 (let (($x61 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x177 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x61)))))))
 (let (($x85 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x148 (=> (bvule input.dst.llvm-%l (bvsub ?x41 (_ bv1 32))) (or false (or false (and true (or $x129 $x85)))))))
 (let (($x57 (and $x148 $x177)))
 (let (($x528 (and $x57 $x527)))
 (let (($x408 (=> $x528 $x471)))
 (not $x408))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888562/query
