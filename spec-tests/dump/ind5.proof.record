==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087442/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(assert
 (let (($x287 (= false true)))
 (let (($x16 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x270 (= $x269 $x16)))
 (let (($x258 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x271 (=> $x258 $x270)))
 (let (($x31 (= false false)))
 (let (($x264 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x267 (and $x258 $x264)))
 (let (($x268 (=> $x267 $x31)))
 (let (($x24 (= (_ bv0 32) (_ bv0 32))))
 (let (($x265 (= $x264 $x24)))
 (let (($x266 (=> $x258 $x265)))
 (let (($x261 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x262 (=> $x258 $x261)))
 (let (($x259 (= $x258 $x16)))
 (let (($x255 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (=> $x255 $x31)))
 (let (($x273 (and (and (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x255 $x24)) $x257)))
 (let (($x278 (and (and (and (and (and $x273 $x259) $x262) $x266) $x268) $x271)))
 (let (($x26 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x32 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x251 (and $x32 $x26)))
 (let (($x279 (=> $x251 $x278)))
 (let (($x280 (= $x279 true)))
 (let (($x238 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x239 (= $x238 $x16)))
 (let (($x227 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x240 (=> $x227 $x239)))
 (let (($x233 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x236 (and $x227 $x233)))
 (let (($x237 (=> $x236 $x31)))
 (let (($x234 (= $x233 $x24)))
 (let (($x235 (=> $x227 $x234)))
 (let (($x230 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x231 (=> $x227 $x230)))
 (let (($x228 (= $x227 $x16)))
 (let (($x224 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x226 (=> $x224 $x31)))
 (let (($x242 (and (and (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x224 $x24)) $x226)))
 (let (($x247 (and (and (and (and (and $x242 $x228) $x231) $x235) $x237) $x240)))
 (let (($x52 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x220 (and $x6 $x52)))
 (let (($x248 (=> $x220 $x247)))
 (let (($x249 (= $x248 true)))
 (let (($x207 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x208 (= $x207 $x16)))
 (let (($x196 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x209 (=> $x196 $x208)))
 (let (($x202 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x205 (and $x196 $x202)))
 (let (($x206 (=> $x205 $x31)))
 (let (($x203 (= $x202 $x24)))
 (let (($x204 (=> $x196 $x203)))
 (let (($x199 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 (_ bv0 32))))
 (let (($x200 (=> $x196 $x199)))
 (let (($x197 (= $x196 $x16)))
 (let (($x193 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x195 (=> $x193 $x31)))
 (let (($x211 (and (and (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32)) (= $x193 $x24)) $x195)))
 (let (($x216 (and (and (and (and (and $x211 $x197) $x200) $x204) $x206) $x209)))
 (let (($x67 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x217 (=> $x67 $x216)))
 (let (($x218 (= $x217 true)))
 (let (($x177 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x178 (= $x177 $x16)))
 (let (($x166 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x179 (=> $x166 $x178)))
 (let (($x172 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x175 (and $x166 $x172)))
 (let (($x176 (=> $x175 $x31)))
 (let (($x173 (= $x172 $x24)))
 (let (($x174 (=> $x166 $x173)))
 (let (($x169 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x170 (=> $x166 $x169)))
 (let (($x167 (= $x166 $x16)))
 (let (($x163 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x165 (=> $x163 $x31)))
 (let (($x181 (and (and (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32)) (= $x163 $x24)) $x165)))
 (let (($x186 (and (and (and (and (and $x181 $x167) $x170) $x174) $x176) $x179)))
 (let (($x76 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (=> $x76 $x186)))
 (let (($x188 (= $x187 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x152 (concat ?x148 ?x146)))))
 (let (($x157 (= ?x156 input.dst.llvm-%l)))
 (let (($x158 (= $x157 true)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x141 (not $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x126 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x133 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x126 (_ bv3 32)))))
 (let (($x139 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x133)))))))
 (let (($x127 (= $x139 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x119)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x115 $x117)))
 (let (($x121 (and $x118 $x120)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x103 $x121)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x108)))))))
 (let (($x123 (and $x114 $x122)))
 (let (($x124 (= $x123 true)))
 (let (($x95 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x101 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x95)))))))
 (let (($x86 (= $x101 true)))
 (let (($x125 (and $x86 $x124)))
 (let (($x128 (and $x125 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x159 (and $x143 $x158)))
 (let (($x189 (and $x159 $x188)))
 (let (($x219 (and $x189 $x218)))
 (let (($x250 (and $x219 $x249)))
 (let (($x281 (and $x250 $x280)))
 (let (($x81 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x282 (and $x81 $x281)))
 (let (($x77 (= $x76 $x16)))
 (let (($x73 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (=> $x73 $x31)))
 (let (($x74 (= $x73 $x24)))
 (let (($x79 (and (and $x74 $x75) $x77)))
 (let (($x283 (and $x79 $x282)))
 (let (($x68 (= $x67 $x16)))
 (let (($x64 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x66 (=> $x64 $x31)))
 (let (($x71 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x64 $x24)) $x66) $x68)))
 (let (($x284 (and $x71 $x283)))
 (let (($x53 (= $x52 $x16)))
 (let (($x54 (=> $x6 $x53)))
 (let (($x42 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x50 (and $x6 $x42)))
 (let (($x51 (=> $x50 $x31)))
 (let (($x48 (= $x42 $x24)))
 (let (($x49 (=> $x6 $x48)))
 (let (($x39 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x14 (=> $x6 $x39)))
 (let (($x36 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x13 (= $x6 $x36)))
 (let (($x20 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x20 $x31)))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= $x20 $x21)))
 (let (($x60 (and (and (and (and (and (and $x5 $x18) $x13) $x14) $x49) $x51) $x54)))
 (let (($x285 (and $x60 $x284)))
 (let (($x8 (= $x26 $x16)))
 (let (($x43 (=> $x32 $x8)))
 (let (($x33 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x30 (and $x32 $x33)))
 (let (($x25 (=> $x30 $x31)))
 (let (($x22 (= $x33 $x24)))
 (let (($x27 (=> $x32 $x22)))
 (let (($x19 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x28 (=> $x32 $x19)))
 (let (($x15 (= $x32 $x36)))
 (let (($x45 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x17 (=> $x45 $x31)))
 (let (($x35 (= $x45 $x21)))
 (let (($x11 (and (and (and (and (and (and $x35 $x17) $x15) $x28) $x27) $x25) $x43)))
 (let (($x286 (and $x11 $x285)))
 (let (($x288 (=> $x286 $x287)))
 (not $x288)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(assert
 (let (($x287 (= false true)))
 (let (($x16 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x270 (= $x269 $x16)))
 (let (($x258 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x271 (=> $x258 $x270)))
 (let (($x31 (= false false)))
 (let (($x264 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x267 (and $x258 $x264)))
 (let (($x268 (=> $x267 $x31)))
 (let (($x24 (= (_ bv0 32) (_ bv0 32))))
 (let (($x265 (= $x264 $x24)))
 (let (($x266 (=> $x258 $x265)))
 (let (($x261 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x262 (=> $x258 $x261)))
 (let (($x259 (= $x258 $x16)))
 (let (($x255 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (=> $x255 $x31)))
 (let (($x273 (and (and (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x255 $x24)) $x257)))
 (let (($x278 (and (and (and (and (and $x273 $x259) $x262) $x266) $x268) $x271)))
 (let (($x26 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x32 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x251 (and $x32 $x26)))
 (let (($x279 (=> $x251 $x278)))
 (let (($x280 (= $x279 true)))
 (let (($x238 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x239 (= $x238 $x16)))
 (let (($x227 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x240 (=> $x227 $x239)))
 (let (($x233 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x236 (and $x227 $x233)))
 (let (($x237 (=> $x236 $x31)))
 (let (($x234 (= $x233 $x24)))
 (let (($x235 (=> $x227 $x234)))
 (let (($x230 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x231 (=> $x227 $x230)))
 (let (($x228 (= $x227 $x16)))
 (let (($x224 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x226 (=> $x224 $x31)))
 (let (($x242 (and (and (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x224 $x24)) $x226)))
 (let (($x247 (and (and (and (and (and $x242 $x228) $x231) $x235) $x237) $x240)))
 (let (($x52 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x220 (and $x6 $x52)))
 (let (($x248 (=> $x220 $x247)))
 (let (($x249 (= $x248 true)))
 (let (($x207 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x208 (= $x207 $x16)))
 (let (($x196 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x209 (=> $x196 $x208)))
 (let (($x202 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x205 (and $x196 $x202)))
 (let (($x206 (=> $x205 $x31)))
 (let (($x203 (= $x202 $x24)))
 (let (($x204 (=> $x196 $x203)))
 (let (($x199 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 (_ bv0 32))))
 (let (($x200 (=> $x196 $x199)))
 (let (($x197 (= $x196 $x16)))
 (let (($x193 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x195 (=> $x193 $x31)))
 (let (($x211 (and (and (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32)) (= $x193 $x24)) $x195)))
 (let (($x216 (and (and (and (and (and $x211 $x197) $x200) $x204) $x206) $x209)))
 (let (($x67 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x217 (=> $x67 $x216)))
 (let (($x218 (= $x217 true)))
 (let (($x177 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x178 (= $x177 $x16)))
 (let (($x166 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x179 (=> $x166 $x178)))
 (let (($x172 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x175 (and $x166 $x172)))
 (let (($x176 (=> $x175 $x31)))
 (let (($x173 (= $x172 $x24)))
 (let (($x174 (=> $x166 $x173)))
 (let (($x169 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x170 (=> $x166 $x169)))
 (let (($x167 (= $x166 $x16)))
 (let (($x163 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x165 (=> $x163 $x31)))
 (let (($x181 (and (and (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32)) (= $x163 $x24)) $x165)))
 (let (($x186 (and (and (and (and (and $x181 $x167) $x170) $x174) $x176) $x179)))
 (let (($x76 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x187 (=> $x76 $x186)))
 (let (($x188 (= $x187 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x152 (concat ?x148 ?x146)))))
 (let (($x157 (= ?x156 input.dst.llvm-%l)))
 (let (($x158 (= $x157 true)))
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x141 (not $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x126 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x133 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x126 (_ bv3 32)))))
 (let (($x139 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x133)))))))
 (let (($x127 (= $x139 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x119)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x115 $x117)))
 (let (($x121 (and $x118 $x120)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x103 $x121)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x108)))))))
 (let (($x123 (and $x114 $x122)))
 (let (($x124 (= $x123 true)))
 (let (($x95 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x101 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x95)))))))
 (let (($x86 (= $x101 true)))
 (let (($x125 (and $x86 $x124)))
 (let (($x128 (and $x125 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x159 (and $x143 $x158)))
 (let (($x189 (and $x159 $x188)))
 (let (($x219 (and $x189 $x218)))
 (let (($x250 (and $x219 $x249)))
 (let (($x281 (and $x250 $x280)))
 (let (($x81 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x282 (and $x81 $x281)))
 (let (($x77 (= $x76 $x16)))
 (let (($x73 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x75 (=> $x73 $x31)))
 (let (($x74 (= $x73 $x24)))
 (let (($x79 (and (and $x74 $x75) $x77)))
 (let (($x283 (and $x79 $x282)))
 (let (($x68 (= $x67 $x16)))
 (let (($x64 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x66 (=> $x64 $x31)))
 (let (($x71 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x64 $x24)) $x66) $x68)))
 (let (($x284 (and $x71 $x283)))
 (let (($x53 (= $x52 $x16)))
 (let (($x54 (=> $x6 $x53)))
 (let (($x42 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x50 (and $x6 $x42)))
 (let (($x51 (=> $x50 $x31)))
 (let (($x48 (= $x42 $x24)))
 (let (($x49 (=> $x6 $x48)))
 (let (($x39 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x14 (=> $x6 $x39)))
 (let (($x36 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x13 (= $x6 $x36)))
 (let (($x20 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x18 (=> $x20 $x31)))
 (let (($x21 (= (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= $x20 $x21)))
 (let (($x60 (and (and (and (and (and (and $x5 $x18) $x13) $x14) $x49) $x51) $x54)))
 (let (($x285 (and $x60 $x284)))
 (let (($x8 (= $x26 $x16)))
 (let (($x43 (=> $x32 $x8)))
 (let (($x33 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x30 (and $x32 $x33)))
 (let (($x25 (=> $x30 $x31)))
 (let (($x22 (= $x33 $x24)))
 (let (($x27 (=> $x32 $x22)))
 (let (($x19 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x28 (=> $x32 $x19)))
 (let (($x15 (= $x32 $x36)))
 (let (($x45 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x17 (=> $x45 $x31)))
 (let (($x35 (= $x45 $x21)))
 (let (($x11 (and (and (and (and (and (and $x35 $x17) $x15) $x28) $x27) $x25) $x43)))
 (let (($x286 (and $x11 $x285)))
 (let (($x288 (=> $x286 $x287)))
 (not $x288)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6800fffc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfc)
                     #x6800fffd
                     #x3f)
              #x6800ffff
              #x7f)
       #x6800fffe
       #x01))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7f013ffc)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6800ffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6800fffc)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x33b7b97c)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x2c)
                     #x33b7b97f
                     #x37)
              #x33b7b97d
              #xa6)
       #x33b7b97e
       #x64))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x3764a62c)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x33b7b97f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x33b7b97c)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087442/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(assert
 (let (($x299 (= false true)))
 (let (($x281 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x266 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x284 (and $x266 $x281)))
 (let (($x285 (not $x284)))
 (let (($x27 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x282 (= $x281 $x27)))
 (let (($x283 (=> $x266 $x282)))
 (let (($x35 (= false false)))
 (let (($x270 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (and $x266 $x270)))
 (let (($x280 (=> $x279 $x35)))
 (let (($x82 (= (_ bv0 32) (_ bv0 32))))
 (let (($x271 (= $x270 $x82)))
 (let (($x278 (=> $x266 $x271)))
 (let (($x268 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x277 (=> $x266 $x268)))
 (let (($x276 (= $x266 $x27)))
 (let (($x263 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x265 (=> $x263 $x35)))
 (let (($x287 (and (and (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x263 $x82)) $x265)))
 (let (($x290 (and (and (and (and (and (and $x287 $x276) $x277) $x278) $x280) $x283) $x285)))
 (let (($x24 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x21 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x260 (and $x21 $x24)))
 (let (($x291 (=> $x260 $x290)))
 (let (($x292 (= $x291 true)))
 (let (($x247 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x232 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x250 (and $x232 $x247)))
 (let (($x251 (not $x250)))
 (let (($x248 (= $x247 $x27)))
 (let (($x249 (=> $x232 $x248)))
 (let (($x237 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x239 (and $x232 $x237)))
 (let (($x240 (=> $x239 $x35)))
 (let (($x246 (= $x237 $x82)))
 (let (($x238 (=> $x232 $x246)))
 (let (($x235 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x245 (=> $x232 $x235)))
 (let (($x233 (= $x232 $x27)))
 (let (($x230 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x244 (=> $x230 $x35)))
 (let (($x253 (and (and (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x230 $x82)) $x244)))
 (let (($x273 (and (and (and (and (and (and $x253 $x233) $x245) $x238) $x240) $x249) $x251)))
 (let (($x48 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x227 (and $x18 $x48)))
 (let (($x258 (=> $x227 $x273)))
 (let (($x259 (= $x258 true)))
 (let (($x207 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x216 (and $x199 $x207)))
 (let (($x217 (not $x216)))
 (let (($x208 (= $x207 $x27)))
 (let (($x209 (=> $x199 $x208)))
 (let (($x204 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x206 (and $x199 $x204)))
 (let (($x215 (=> $x206 $x35)))
 (let (($x214 (= $x204 $x82)))
 (let (($x205 (=> $x199 $x214)))
 (let (($x201 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 (_ bv0 32))))
 (let (($x202 (=> $x199 $x201)))
 (let (($x200 (= $x199 $x27)))
 (let (($x197 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x198 (=> $x197 $x35)))
 (let (($x219 (and (and (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32)) (= $x197 $x82)) $x198)))
 (let (($x225 (and (and (and (and (and (and $x219 $x200) $x202) $x205) $x215) $x209) $x217)))
 (let (($x69 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x241 (=> $x69 $x225)))
 (let (($x226 (= $x241 true)))
 (let (($x175 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x177 (and $x167 $x175)))
 (let (($x178 (not $x177)))
 (let (($x176 (= $x175 $x27)))
 (let (($x185 (=> $x167 $x176)))
 (let (($x171 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x174 (and $x167 $x171)))
 (let (($x184 (=> $x174 $x35)))
 (let (($x172 (= $x171 $x82)))
 (let (($x173 (=> $x167 $x172)))
 (let (($x169 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x170 (=> $x167 $x169)))
 (let (($x182 (= $x167 $x27)))
 (let (($x165 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x166 (=> $x165 $x35)))
 (let (($x186 (and (and (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32)) (= $x165 $x82)) $x166)))
 (let (($x192 (and (and (and (and (and (and $x186 $x182) $x170) $x173) $x184) $x185) $x178)))
 (let (($x75 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (=> $x75 $x192)))
 (let (($x194 (= $x193 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x158 (concat ?x153 (concat ?x147 ?x151)))))
 (let (($x160 (= ?x159 input.dst.llvm-%l)))
 (let (($x161 (= $x160 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x143 (not $x142)))
 (let (($x144 (= $x143 true)))
 (let ((?x130 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x136 (bvugt ?x130 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x130 (_ bv3 32)))))
 (let (($x141 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x136)))))))
 (let (($x138 (= $x141 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x117 $x119)))
 (let (($x123 (and $x120 $x122)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x106 $x123)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x111)))))))
 (let (($x125 (and $x116 $x124)))
 (let (($x126 (= $x125 true)))
 (let (($x97 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x105 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x97)))))))
 (let (($x89 (= $x105 true)))
 (let (($x129 (and $x89 $x126)))
 (let (($x131 (and $x129 $x138)))
 (let (($x154 (and $x131 $x144)))
 (let (($x162 (and $x154 $x161)))
 (let (($x210 (and $x162 $x194)))
 (let (($x242 (and $x210 $x226)))
 (let (($x274 (and $x242 $x259)))
 (let (($x293 (and $x274 $x292)))
 (let (($x80 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x294 (and $x80 $x293)))
 (let (($x78 (= $x75 $x27)))
 (let (($x72 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x74 (=> $x72 $x35)))
 (let (($x73 (= $x72 $x82)))
 (let (($x77 (and (and $x73 $x74) $x78)))
 (let (($x295 (and $x77 $x294)))
 (let (($x66 (= $x69 $x27)))
 (let (($x63 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x65 (=> $x63 $x35)))
 (let (($x68 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x63 $x82)) $x65) $x66)))
 (let (($x296 (and $x68 $x295)))
 (let (($x49 (= $x48 $x27)))
 (let (($x58 (=> $x18 $x49)))
 (let (($x39 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x40 (and $x18 $x39)))
 (let (($x42 (=> $x40 $x35)))
 (let (($x14 (= $x39 $x82)))
 (let (($x57 (=> $x18 $x14)))
 (let (($x13 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x56 (=> $x18 $x13)))
 (let (($x41 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x55 (= $x18 $x41)))
 (let (($x7 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x5 (=> $x7 $x35)))
 (let (($x37 (= (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= $x7 $x37)))
 (let (($x54 (and (and (and (and (and (and $x20 $x5) $x55) $x56) $x57) $x42) $x58)))
 (let (($x297 (and $x54 $x296)))
 (let (($x29 (= $x24 $x27)))
 (let (($x22 (=> $x21 $x29)))
 (let (($x19 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x47 (and $x21 $x19)))
 (let (($x34 (=> $x47 $x35)))
 (let (($x17 (= $x19 $x82)))
 (let (($x23 (=> $x21 $x17)))
 (let (($x10 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x9 (=> $x21 $x10)))
 (let (($x32 (= $x21 $x41)))
 (let (($x45 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x31 (=> $x45 $x35)))
 (let (($x25 (= $x45 $x37)))
 (let (($x43 (and (and (and (and (and (and $x25 $x31) $x32) $x9) $x23) $x34) $x22)))
 (let (($x298 (and $x43 $x297)))
 (let (($x300 (=> $x298 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(assert
 (let (($x299 (= false true)))
 (let (($x281 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x266 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x284 (and $x266 $x281)))
 (let (($x285 (not $x284)))
 (let (($x27 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x282 (= $x281 $x27)))
 (let (($x283 (=> $x266 $x282)))
 (let (($x35 (= false false)))
 (let (($x270 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (and $x266 $x270)))
 (let (($x280 (=> $x279 $x35)))
 (let (($x82 (= (_ bv0 32) (_ bv0 32))))
 (let (($x271 (= $x270 $x82)))
 (let (($x278 (=> $x266 $x271)))
 (let (($x268 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x277 (=> $x266 $x268)))
 (let (($x276 (= $x266 $x27)))
 (let (($x263 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x265 (=> $x263 $x35)))
 (let (($x287 (and (and (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x263 $x82)) $x265)))
 (let (($x290 (and (and (and (and (and (and $x287 $x276) $x277) $x278) $x280) $x283) $x285)))
 (let (($x24 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x21 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x260 (and $x21 $x24)))
 (let (($x291 (=> $x260 $x290)))
 (let (($x292 (= $x291 true)))
 (let (($x247 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x232 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x250 (and $x232 $x247)))
 (let (($x251 (not $x250)))
 (let (($x248 (= $x247 $x27)))
 (let (($x249 (=> $x232 $x248)))
 (let (($x237 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x239 (and $x232 $x237)))
 (let (($x240 (=> $x239 $x35)))
 (let (($x246 (= $x237 $x82)))
 (let (($x238 (=> $x232 $x246)))
 (let (($x235 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x245 (=> $x232 $x235)))
 (let (($x233 (= $x232 $x27)))
 (let (($x230 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x244 (=> $x230 $x35)))
 (let (($x253 (and (and (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x230 $x82)) $x244)))
 (let (($x273 (and (and (and (and (and (and $x253 $x233) $x245) $x238) $x240) $x249) $x251)))
 (let (($x48 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x18 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x227 (and $x18 $x48)))
 (let (($x258 (=> $x227 $x273)))
 (let (($x259 (= $x258 true)))
 (let (($x207 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x216 (and $x199 $x207)))
 (let (($x217 (not $x216)))
 (let (($x208 (= $x207 $x27)))
 (let (($x209 (=> $x199 $x208)))
 (let (($x204 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x206 (and $x199 $x204)))
 (let (($x215 (=> $x206 $x35)))
 (let (($x214 (= $x204 $x82)))
 (let (($x205 (=> $x199 $x214)))
 (let (($x201 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 (_ bv0 32))))
 (let (($x202 (=> $x199 $x201)))
 (let (($x200 (= $x199 $x27)))
 (let (($x197 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x198 (=> $x197 $x35)))
 (let (($x219 (and (and (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32)) (= $x197 $x82)) $x198)))
 (let (($x225 (and (and (and (and (and (and $x219 $x200) $x202) $x205) $x215) $x209) $x217)))
 (let (($x69 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x241 (=> $x69 $x225)))
 (let (($x226 (= $x241 true)))
 (let (($x175 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x167 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x177 (and $x167 $x175)))
 (let (($x178 (not $x177)))
 (let (($x176 (= $x175 $x27)))
 (let (($x185 (=> $x167 $x176)))
 (let (($x171 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x174 (and $x167 $x171)))
 (let (($x184 (=> $x174 $x35)))
 (let (($x172 (= $x171 $x82)))
 (let (($x173 (=> $x167 $x172)))
 (let (($x169 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x170 (=> $x167 $x169)))
 (let (($x182 (= $x167 $x27)))
 (let (($x165 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x166 (=> $x165 $x35)))
 (let (($x186 (and (and (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32)) (= $x165 $x82)) $x166)))
 (let (($x192 (and (and (and (and (and (and $x186 $x182) $x170) $x173) $x184) $x185) $x178)))
 (let (($x75 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (=> $x75 $x192)))
 (let (($x194 (= $x193 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x158 (concat ?x153 (concat ?x147 ?x151)))))
 (let (($x160 (= ?x159 input.dst.llvm-%l)))
 (let (($x161 (= $x160 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x143 (not $x142)))
 (let (($x144 (= $x143 true)))
 (let ((?x130 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x136 (bvugt ?x130 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x130 (_ bv3 32)))))
 (let (($x141 (=> (bvule ?x130 (bvsub (bvadd ?x130 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x136)))))))
 (let (($x138 (= $x141 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x117 $x119)))
 (let (($x123 (and $x120 $x122)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x106 $x123)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x111)))))))
 (let (($x125 (and $x116 $x124)))
 (let (($x126 (= $x125 true)))
 (let (($x97 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x105 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x97)))))))
 (let (($x89 (= $x105 true)))
 (let (($x129 (and $x89 $x126)))
 (let (($x131 (and $x129 $x138)))
 (let (($x154 (and $x131 $x144)))
 (let (($x162 (and $x154 $x161)))
 (let (($x210 (and $x162 $x194)))
 (let (($x242 (and $x210 $x226)))
 (let (($x274 (and $x242 $x259)))
 (let (($x293 (and $x274 $x292)))
 (let (($x80 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x294 (and $x80 $x293)))
 (let (($x78 (= $x75 $x27)))
 (let (($x72 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x74 (=> $x72 $x35)))
 (let (($x73 (= $x72 $x82)))
 (let (($x77 (and (and $x73 $x74) $x78)))
 (let (($x295 (and $x77 $x294)))
 (let (($x66 (= $x69 $x27)))
 (let (($x63 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x65 (=> $x63 $x35)))
 (let (($x68 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x63 $x82)) $x65) $x66)))
 (let (($x296 (and $x68 $x295)))
 (let (($x49 (= $x48 $x27)))
 (let (($x58 (=> $x18 $x49)))
 (let (($x39 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x40 (and $x18 $x39)))
 (let (($x42 (=> $x40 $x35)))
 (let (($x14 (= $x39 $x82)))
 (let (($x57 (=> $x18 $x14)))
 (let (($x13 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x56 (=> $x18 $x13)))
 (let (($x41 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x55 (= $x18 $x41)))
 (let (($x7 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x5 (=> $x7 $x35)))
 (let (($x37 (= (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= $x7 $x37)))
 (let (($x54 (and (and (and (and (and (and $x20 $x5) $x55) $x56) $x57) $x42) $x58)))
 (let (($x297 (and $x54 $x296)))
 (let (($x29 (= $x24 $x27)))
 (let (($x22 (=> $x21 $x29)))
 (let (($x19 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x47 (and $x21 $x19)))
 (let (($x34 (=> $x47 $x35)))
 (let (($x17 (= $x19 $x82)))
 (let (($x23 (=> $x21 $x17)))
 (let (($x10 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x9 (=> $x21 $x10)))
 (let (($x32 (= $x21 $x41)))
 (let (($x45 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x31 (=> $x45 $x35)))
 (let (($x25 (= $x45 $x37)))
 (let (($x43 (and (and (and (and (and (and $x25 $x31) $x32) $x9) $x23) $x34) $x22)))
 (let (($x298 (and $x43 $x297)))
 (let (($x300 (=> $x298 $x299)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6800fffc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfc)
                     #x6800fffd
                     #x3f)
              #x6800ffff
              #x7f)
       #x6800fffe
       #x01))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7f013ffc)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6800ffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6800fffc)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv32768 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967289 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2197815800 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2197815800 32) (_ bv249 8)) (_ bv2197815801 32) (_ bv255 8)) (_ bv2197815802 32) (_ bv255 8)) (_ bv2197815803 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2197815803 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2197815800 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087442/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(assert
 (let (($x56 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x371 (and $x38 $x56)))
 (let (($x405 (and $x371 $x56)))
 (let (($x429 (not $x405)))
 (let ((?x9 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x43 (bvadd ?x50 (_ bv3 32))))
 (let ((?x17 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x327 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x324 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x322 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x330 (store (store (store ?x322 ?x324 ((_ extract 15 8) (_ bv42 32))) ?x327 ((_ extract 23 16) (_ bv42 32))) ?x17 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x336 (store (store ?x330 (bvadd ?x50 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x50 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x341 (store (store ?x336 (bvadd ?x50 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x43 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x357 (concat (select ?x341 (bvadd ?x9 (_ bv2 32))) (concat (select ?x341 (bvadd ?x9 (_ bv1 32))) (select ?x341 ?x9)))))
 (let ((?x360 (concat (select ?x341 (bvadd ?x9 (_ bv3 32))) ?x357)))
 (let ((?x384 (bvadd ?x360 (_ bv4 32))))
 (let ((?x391 (concat (select ?x341 (bvadd ?x384 (_ bv2 32))) (concat (select ?x341 (bvadd ?x384 (_ bv1 32))) (select ?x341 ?x384)))))
 (let ((?x394 (concat (select ?x341 (bvadd ?x384 (_ bv3 32))) ?x391)))
 (let ((?x412 (concat (select ?x341 (bvadd ?x394 (_ bv2 32))) (concat (select ?x341 (bvadd ?x394 (_ bv1 32))) (select ?x341 ?x394)))))
 (let ((?x415 (concat (select ?x341 (bvadd ?x394 (_ bv3 32))) ?x412)))
 (let (($x416 (= (_ bv0 32) ?x415)))
 (let (($x417 (=> $x405 $x416)))
 (let (($x395 (= (_ bv0 32) ?x394)))
 (let ((?x396 (ite $x395 (_ bv0 32) (_ bv1 32))))
 (let (($x402 (bvuge ?x396 (_ bv1 32))))
 (let (($x403 (= $x56 $x402)))
 (let (($x404 (=> $x371 $x403)))
 (let (($x40 (= false false)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let (($x400 (and $x371 $x13)))
 (let (($x401 (=> $x400 $x40)))
 (let (($x397 (= ?x396 (_ bv0 32))))
 (let (($x398 (= $x13 $x397)))
 (let (($x399 (=> $x371 $x398)))
 (let ((?x378 (concat (select ?x341 (bvadd ?x360 (_ bv2 32))) (concat (select ?x341 (bvadd ?x360 (_ bv1 32))) (select ?x341 ?x360)))))
 (let ((?x381 (concat (select ?x341 (bvadd ?x360 (_ bv3 32))) ?x378)))
 (let (($x382 (= (_ bv0 32) ?x381)))
 (let (($x383 (=> $x371 $x382)))
 (let (($x361 (= (_ bv0 32) ?x360)))
 (let ((?x362 (ite $x361 (_ bv0 32) (_ bv1 32))))
 (let (($x368 (bvuge ?x362 (_ bv1 32))))
 (let (($x369 (= $x56 $x368)))
 (let (($x370 (=> $x38 $x369)))
 (let (($x366 (and $x38 $x13)))
 (let (($x367 (=> $x366 $x40)))
 (let (($x363 (= ?x362 (_ bv0 32))))
 (let (($x364 (= $x13 $x363)))
 (let (($x365 (=> $x38 $x364)))
 (let ((?x346 (concat (select ?x341 ?x327) (concat (select ?x341 ?x324) (select ?x341 input.dst.llvm-%l)))))
 (let ((?x348 (concat (select ?x341 ?x17) ?x346)))
 (let (($x349 (= (_ bv42 32) ?x348)))
 (let (($x350 (=> $x38 $x349)))
 (let (($x189 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x314 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x314 (_ bv1 32))))
 (let (($x319 (= $x38 $x318)))
 (let (($x419 (and (and (= (= (_ bv1 32) (_ bv0 32)) (= ?x314 (_ bv0 32))) (=> (= (_ bv1 32) (_ bv0 32)) $x40)) $x319)))
 (let (($x425 (and (and (and (and (and (and $x419 $x350) $x365) $x367) $x370) $x383) $x399)))
 (let (($x428 (and (and (and $x425 $x401) $x404) $x417)))
 (let (($x430 (and $x428 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x299 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x300 (= $x299 $x56)))
 (let (($x284 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x301 (=> $x284 $x300)))
 (let (($x294 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x297 (and $x284 $x294)))
 (let (($x298 (=> $x297 $x40)))
 (let (($x295 (= $x294 $x13)))
 (let (($x296 (=> $x284 $x295)))
 (let (($x291 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x292 (=> $x284 $x291)))
 (let (($x285 (= $x284 $x56)))
 (let (($x282 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x85 (=> $x282 $x40)))
 (let (($x100 (and (and (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x282 $x13)) $x85)))
 (let (($x304 (and (and (and (and (and $x100 $x285) $x292) $x296) $x298) $x301)))
 (let (($x14 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x279 (and $x55 $x14)))
 (let (($x305 (=> $x279 $x304)))
 (let (($x306 (= $x305 true)))
 (let (($x287 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x266 (= $x287 $x56)))
 (let (($x258 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x276 (=> $x258 $x266)))
 (let (($x275 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x286 (and $x258 $x275)))
 (let (($x265 (=> $x286 $x40)))
 (let (($x263 (= $x275 $x13)))
 (let (($x264 (=> $x258 $x263)))
 (let (($x260 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x261 (=> $x258 $x260)))
 (let (($x259 (= $x258 $x56)))
 (let (($x250 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x273 (=> $x250 $x40)))
 (let (($x267 (and (and (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x250 $x13)) $x273)))
 (let (($x270 (and (and (and (and (and $x267 $x259) $x261) $x264) $x265) $x276)))
 (let (($x83 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x247 (and $x68 $x83)))
 (let (($x271 (=> $x247 $x270)))
 (let (($x278 (= $x271 true)))
 (let (($x254 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x234 (= $x254 $x56)))
 (let (($x227 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x235 (=> $x227 $x234)))
 (let (($x252 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x232 (and $x227 $x252)))
 (let (($x233 (=> $x232 $x40)))
 (let (($x244 (= $x252 $x13)))
 (let (($x253 (=> $x227 $x244)))
 (let (($x229 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 (_ bv0 32))))
 (let (($x230 (=> $x227 $x229)))
 (let (($x228 (= $x227 $x56)))
 (let (($x241 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x242 (=> $x241 $x40)))
 (let (($x255 (and (and (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32)) (= $x241 $x13)) $x242)))
 (let (($x256 (and (and (and (and (and $x255 $x228) $x230) $x253) $x233) $x235)))
 (let (($x89 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x239 (=> $x89 $x256)))
 (let (($x240 (= $x239 true)))
 (let (($x221 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x203 (= $x221 $x56)))
 (let (($x197 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x204 (=> $x197 $x203)))
 (let (($x200 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x201 (and $x197 $x200)))
 (let (($x202 (=> $x201 $x40)))
 (let (($x220 (= $x200 $x13)))
 (let (($x213 (=> $x197 $x220)))
 (let (($x198 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x219 (=> $x197 $x198)))
 (let (($x212 (= $x197 $x56)))
 (let (($x195 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x196 (=> $x195 $x40)))
 (let (($x205 (and (and (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32)) (= $x195 $x13)) $x196)))
 (let (($x207 (and (and (and (and (and $x205 $x212) $x219) $x213) $x202) $x204)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x208 (=> $x102 $x207)))
 (let (($x209 (= $x208 true)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x170 (concat ?x182 ?x186)))))
 (let (($x177 (= ?x172 input.dst.llvm-%l)))
 (let (($x178 (= $x177 true)))
 (let (($x173 (= input.dst.llvm-%l ?x172)))
 (let (($x184 (and $x173 (not $x189))))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x164)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x160 $x162)))
 (let (($x165 (and $x163 $x180)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x155 $x165)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x153)))))))
 (let (($x131 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x139 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x140 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x126 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x123 (and true $x122)))
 (let (($x129 (and $x123 $x126)))
 (let (($x130 (and $x129 $x122)))
 (let (($x141 (and (and (and $x123 $x130) $x140) $x139)))
 (let (($x142 (and $x141 $x131)))
 (let (($x176 (and (and (and $x142 $x159) $x181) $x184)))
 (let (($x185 (= $x176 true)))
 (let (($x143 (= $x142 true)))
 (let (($x191 (and $x143 $x185)))
 (let (($x192 (and $x191 $x178)))
 (let (($x224 (and $x192 $x209)))
 (let (($x272 (and $x224 $x240)))
 (let (($x87 (and $x272 $x278)))
 (let (($x307 (and $x87 $x306)))
 (let (($x117 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x308 (and $x117 $x307)))
 (let (($x103 (= $x102 $x56)))
 (let (($x111 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x114 (=> $x111 $x40)))
 (let (($x112 (= $x111 $x13)))
 (let (($x113 (and (and $x112 $x114) $x103)))
 (let (($x309 (and $x113 $x308)))
 (let (($x107 (= $x89 $x56)))
 (let (($x101 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x105 (=> $x101 $x40)))
 (let (($x109 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x101 $x13)) $x105) $x107)))
 (let (($x310 (and $x109 $x309)))
 (let (($x90 (= $x83 $x56)))
 (let (($x92 (=> $x68 $x90)))
 (let (($x75 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x79 (and $x68 $x75)))
 (let (($x80 (=> $x79 $x40)))
 (let (($x78 (= $x75 $x13)))
 (let (($x77 (=> $x68 $x78)))
 (let (($x73 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x74 (=> $x68 $x73)))
 (let (($x71 (= $x68 $x38)))
 (let (($x67 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x66 (=> $x67 $x40)))
 (let (($x26 (= (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= $x67 $x26)))
 (let (($x94 (and (and (and (and (and (and $x69 $x66) $x71) $x74) $x77) $x80) $x92)))
 (let (($x311 (and $x94 $x310)))
 (let (($x34 (= $x14 $x56)))
 (let (($x27 (=> $x55 $x34)))
 (let (($x11 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x59 (and $x55 $x11)))
 (let (($x16 (=> $x59 $x40)))
 (let (($x18 (= $x11 $x13)))
 (let (($x51 (=> $x55 $x18)))
 (let (($x48 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x42 (=> $x55 $x48)))
 (let (($x6 (= $x55 $x38)))
 (let (($x44 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x44 $x40)))
 (let (($x46 (= $x44 $x26)))
 (let (($x70 (and (and (and (and (and (and $x46 $x53) $x6) $x42) $x51) $x16) $x27)))
 (let (($x312 (and $x70 $x311)))
 (let (($x10 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x30 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x10)))))))
 (let (($x39 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x84 (=> (bvule input.dst.llvm-%l (bvsub ?x9 (_ bv1 32))) (or false (or false (and true (or $x23 $x39)))))))
 (let (($x54 (and $x84 $x30)))
 (let (($x313 (and $x54 $x312)))
 (let (($x432 (=> $x313 $x431)))
 (not $x432))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(assert
 (let (($x56 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x371 (and $x38 $x56)))
 (let (($x405 (and $x371 $x56)))
 (let (($x429 (not $x405)))
 (let ((?x9 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x50 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x43 (bvadd ?x50 (_ bv3 32))))
 (let ((?x17 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x327 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x324 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x322 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x330 (store (store (store ?x322 ?x324 ((_ extract 15 8) (_ bv42 32))) ?x327 ((_ extract 23 16) (_ bv42 32))) ?x17 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x336 (store (store ?x330 (bvadd ?x50 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x50 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x341 (store (store ?x336 (bvadd ?x50 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x43 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x357 (concat (select ?x341 (bvadd ?x9 (_ bv2 32))) (concat (select ?x341 (bvadd ?x9 (_ bv1 32))) (select ?x341 ?x9)))))
 (let ((?x360 (concat (select ?x341 (bvadd ?x9 (_ bv3 32))) ?x357)))
 (let ((?x384 (bvadd ?x360 (_ bv4 32))))
 (let ((?x391 (concat (select ?x341 (bvadd ?x384 (_ bv2 32))) (concat (select ?x341 (bvadd ?x384 (_ bv1 32))) (select ?x341 ?x384)))))
 (let ((?x394 (concat (select ?x341 (bvadd ?x384 (_ bv3 32))) ?x391)))
 (let ((?x412 (concat (select ?x341 (bvadd ?x394 (_ bv2 32))) (concat (select ?x341 (bvadd ?x394 (_ bv1 32))) (select ?x341 ?x394)))))
 (let ((?x415 (concat (select ?x341 (bvadd ?x394 (_ bv3 32))) ?x412)))
 (let (($x416 (= (_ bv0 32) ?x415)))
 (let (($x417 (=> $x405 $x416)))
 (let (($x395 (= (_ bv0 32) ?x394)))
 (let ((?x396 (ite $x395 (_ bv0 32) (_ bv1 32))))
 (let (($x402 (bvuge ?x396 (_ bv1 32))))
 (let (($x403 (= $x56 $x402)))
 (let (($x404 (=> $x371 $x403)))
 (let (($x40 (= false false)))
 (let (($x13 (= (_ bv0 32) (_ bv0 32))))
 (let (($x400 (and $x371 $x13)))
 (let (($x401 (=> $x400 $x40)))
 (let (($x397 (= ?x396 (_ bv0 32))))
 (let (($x398 (= $x13 $x397)))
 (let (($x399 (=> $x371 $x398)))
 (let ((?x378 (concat (select ?x341 (bvadd ?x360 (_ bv2 32))) (concat (select ?x341 (bvadd ?x360 (_ bv1 32))) (select ?x341 ?x360)))))
 (let ((?x381 (concat (select ?x341 (bvadd ?x360 (_ bv3 32))) ?x378)))
 (let (($x382 (= (_ bv0 32) ?x381)))
 (let (($x383 (=> $x371 $x382)))
 (let (($x361 (= (_ bv0 32) ?x360)))
 (let ((?x362 (ite $x361 (_ bv0 32) (_ bv1 32))))
 (let (($x368 (bvuge ?x362 (_ bv1 32))))
 (let (($x369 (= $x56 $x368)))
 (let (($x370 (=> $x38 $x369)))
 (let (($x366 (and $x38 $x13)))
 (let (($x367 (=> $x366 $x40)))
 (let (($x363 (= ?x362 (_ bv0 32))))
 (let (($x364 (= $x13 $x363)))
 (let (($x365 (=> $x38 $x364)))
 (let ((?x346 (concat (select ?x341 ?x327) (concat (select ?x341 ?x324) (select ?x341 input.dst.llvm-%l)))))
 (let ((?x348 (concat (select ?x341 ?x17) ?x346)))
 (let (($x349 (= (_ bv42 32) ?x348)))
 (let (($x350 (=> $x38 $x349)))
 (let (($x189 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x314 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x314 (_ bv1 32))))
 (let (($x319 (= $x38 $x318)))
 (let (($x419 (and (and (= (= (_ bv1 32) (_ bv0 32)) (= ?x314 (_ bv0 32))) (=> (= (_ bv1 32) (_ bv0 32)) $x40)) $x319)))
 (let (($x425 (and (and (and (and (and (and $x419 $x350) $x365) $x367) $x370) $x383) $x399)))
 (let (($x428 (and (and (and $x425 $x401) $x404) $x417)))
 (let (($x430 (and $x428 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x299 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x300 (= $x299 $x56)))
 (let (($x284 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x301 (=> $x284 $x300)))
 (let (($x294 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x297 (and $x284 $x294)))
 (let (($x298 (=> $x297 $x40)))
 (let (($x295 (= $x294 $x13)))
 (let (($x296 (=> $x284 $x295)))
 (let (($x291 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x292 (=> $x284 $x291)))
 (let (($x285 (= $x284 $x56)))
 (let (($x282 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x85 (=> $x282 $x40)))
 (let (($x100 (and (and (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x282 $x13)) $x85)))
 (let (($x304 (and (and (and (and (and $x100 $x285) $x292) $x296) $x298) $x301)))
 (let (($x14 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x279 (and $x55 $x14)))
 (let (($x305 (=> $x279 $x304)))
 (let (($x306 (= $x305 true)))
 (let (($x287 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x266 (= $x287 $x56)))
 (let (($x258 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x276 (=> $x258 $x266)))
 (let (($x275 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x286 (and $x258 $x275)))
 (let (($x265 (=> $x286 $x40)))
 (let (($x263 (= $x275 $x13)))
 (let (($x264 (=> $x258 $x263)))
 (let (($x260 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.2.0 (_ bv0 32))))
 (let (($x261 (=> $x258 $x260)))
 (let (($x259 (= $x258 $x56)))
 (let (($x250 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x273 (=> $x250 $x40)))
 (let (($x267 (and (and (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32)) (= $x250 $x13)) $x273)))
 (let (($x270 (and (and (and (and (and $x267 $x259) $x261) $x264) $x265) $x276)))
 (let (($x83 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x247 (and $x68 $x83)))
 (let (($x271 (=> $x247 $x270)))
 (let (($x278 (= $x271 true)))
 (let (($x254 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x234 (= $x254 $x56)))
 (let (($x227 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x235 (=> $x227 $x234)))
 (let (($x252 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x232 (and $x227 $x252)))
 (let (($x233 (=> $x232 $x40)))
 (let (($x244 (= $x252 $x13)))
 (let (($x253 (=> $x227 $x244)))
 (let (($x229 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.2.0 (_ bv0 32))))
 (let (($x230 (=> $x227 $x229)))
 (let (($x228 (= $x227 $x56)))
 (let (($x241 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x242 (=> $x241 $x40)))
 (let (($x255 (and (and (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32)) (= $x241 $x13)) $x242)))
 (let (($x256 (and (and (and (and (and $x255 $x228) $x230) $x253) $x233) $x235)))
 (let (($x89 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x239 (=> $x89 $x256)))
 (let (($x240 (= $x239 true)))
 (let (($x221 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x203 (= $x221 $x56)))
 (let (($x197 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x204 (=> $x197 $x203)))
 (let (($x200 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x201 (and $x197 $x200)))
 (let (($x202 (=> $x201 $x40)))
 (let (($x220 (= $x200 $x13)))
 (let (($x213 (=> $x197 $x220)))
 (let (($x198 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x219 (=> $x197 $x198)))
 (let (($x212 (= $x197 $x56)))
 (let (($x195 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x196 (=> $x195 $x40)))
 (let (($x205 (and (and (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32)) (= $x195 $x13)) $x196)))
 (let (($x207 (and (and (and (and (and $x205 $x212) $x219) $x213) $x202) $x204)))
 (let (($x102 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x208 (=> $x102 $x207)))
 (let (($x209 (= $x208 true)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x170 (concat ?x182 ?x186)))))
 (let (($x177 (= ?x172 input.dst.llvm-%l)))
 (let (($x178 (= $x177 true)))
 (let (($x173 (= input.dst.llvm-%l ?x172)))
 (let (($x184 (and $x173 (not $x189))))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x164)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x160 $x162)))
 (let (($x165 (and $x163 $x180)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x155 $x165)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x153)))))))
 (let (($x131 (= (bvand ?x50 (_ bv4294967292 32)) ?x50)))
 (let (($x139 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x50 (bvsub ?x50 (_ bv4 32))) (bvult ?x50 (bvsub ?x50 (_ bv4 32))))))
 (let (($x140 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x126 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x123 (and true $x122)))
 (let (($x129 (and $x123 $x126)))
 (let (($x130 (and $x129 $x122)))
 (let (($x141 (and (and (and $x123 $x130) $x140) $x139)))
 (let (($x142 (and $x141 $x131)))
 (let (($x176 (and (and (and $x142 $x159) $x181) $x184)))
 (let (($x185 (= $x176 true)))
 (let (($x143 (= $x142 true)))
 (let (($x191 (and $x143 $x185)))
 (let (($x192 (and $x191 $x178)))
 (let (($x224 (and $x192 $x209)))
 (let (($x272 (and $x224 $x240)))
 (let (($x87 (and $x272 $x278)))
 (let (($x307 (and $x87 $x306)))
 (let (($x117 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x308 (and $x117 $x307)))
 (let (($x103 (= $x102 $x56)))
 (let (($x111 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x114 (=> $x111 $x40)))
 (let (($x112 (= $x111 $x13)))
 (let (($x113 (and (and $x112 $x114) $x103)))
 (let (($x309 (and $x113 $x308)))
 (let (($x107 (= $x89 $x56)))
 (let (($x101 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x105 (=> $x101 $x40)))
 (let (($x109 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x101 $x13)) $x105) $x107)))
 (let (($x310 (and $x109 $x309)))
 (let (($x90 (= $x83 $x56)))
 (let (($x92 (=> $x68 $x90)))
 (let (($x75 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x79 (and $x68 $x75)))
 (let (($x80 (=> $x79 $x40)))
 (let (($x78 (= $x75 $x13)))
 (let (($x77 (=> $x68 $x78)))
 (let (($x73 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x74 (=> $x68 $x73)))
 (let (($x71 (= $x68 $x38)))
 (let (($x67 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x66 (=> $x67 $x40)))
 (let (($x26 (= (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= $x67 $x26)))
 (let (($x94 (and (and (and (and (and (and $x69 $x66) $x71) $x74) $x77) $x80) $x92)))
 (let (($x311 (and $x94 $x310)))
 (let (($x34 (= $x14 $x56)))
 (let (($x27 (=> $x55 $x34)))
 (let (($x11 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x59 (and $x55 $x11)))
 (let (($x16 (=> $x59 $x40)))
 (let (($x18 (= $x11 $x13)))
 (let (($x51 (=> $x55 $x18)))
 (let (($x48 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x42 (=> $x55 $x48)))
 (let (($x6 (= $x55 $x38)))
 (let (($x44 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x53 (=> $x44 $x40)))
 (let (($x46 (= $x44 $x26)))
 (let (($x70 (and (and (and (and (and (and $x46 $x53) $x6) $x42) $x51) $x16) $x27)))
 (let (($x312 (and $x70 $x311)))
 (let (($x10 (bvugt ?x50 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x30 (=> (bvule ?x50 (bvsub (bvadd ?x50 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x10)))))))
 (let (($x39 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x84 (=> (bvule input.dst.llvm-%l (bvsub ?x9 (_ bv1 32))) (or false (or false (and true (or $x23 $x39)))))))
 (let (($x54 (and $x84 $x30)))
 (let (($x313 (and $x54 $x312)))
 (let (($x432 (=> $x313 $x431)))
 (not $x432))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087442/query
