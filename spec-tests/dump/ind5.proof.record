==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x40 (or (bvugt input.memlabel-mem--arg.0_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x33 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true (or $x32 $x33)) $x40))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x11 (_ bv0 32))))
 (let ((?x17 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x5 $x10)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677199/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x185 (= true false)))
 (let (($x186 (= $x185 true)))
 (let (($x104 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x175 (= $x174 $x104)))
 (let (($x165 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x176 (=> $x165 $x175)))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let (($x171 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x172 (= $x171 $x99)))
 (let (($x173 (=> $x165 $x172)))
 (let (($x168 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x169 (=> $x165 $x168)))
 (let (($x142 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x166 (= $x165 $x142)))
 (let (($x101 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x164 (=> $x162 $x101)))
 (let (($x138 (= (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= $x162 $x138)))
 (let (($x181 (and (and (and (and (and $x163 $x164) $x166) $x169) $x173) $x176)))
 (let (($x182 (= $x181 true)))
 (let (($x151 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (= $x151 $x104)))
 (let (($x141 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x153 (=> $x141 $x152)))
 (let (($x148 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x149 (= $x148 $x99)))
 (let (($x150 (=> $x141 $x149)))
 (let (($x145 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x146 (=> $x141 $x145)))
 (let (($x143 (= $x141 $x142)))
 (let (($x137 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x140 (=> $x137 $x101)))
 (let (($x139 (= $x137 $x138)))
 (let (($x158 (and (and (and (and (and $x139 $x140) $x143) $x146) $x150) $x153)))
 (let (($x159 (= $x158 true)))
 (let (($x129 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x130 (= $x129 $x104)))
 (let (($x126 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x128 (=> $x126 $x101)))
 (let (($x133 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x126 $x99)) $x128) $x130)))
 (let (($x134 (= $x133 true)))
 (let (($x113 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x114 (= $x113 $x104)))
 (let (($x103 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (=> $x103 $x114)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x111 (= $x110 $x99)))
 (let (($x112 (=> $x103 $x111)))
 (let (($x107 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x108 (=> $x103 $x107)))
 (let (($x105 (= $x103 $x104)))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x102 (=> $x98 $x101)))
 (let (($x100 (= $x98 $x99)))
 (let (($x120 (and (and (and (and (and $x100 $x102) $x105) $x108) $x112) $x115)))
 (let (($x121 (= $x120 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x88 (concat ?x84 ?x82)))))
 (let (($x93 (= ?x92 input.dst.llvm-%l)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x75 (not $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x65 (bvugt ?x58 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x58 (_ bv3 32)))))
 (let (($x71 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x59 (= $x71 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x7)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x43 $x33)))
 (let (($x51 (and $x31 $x50)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x44 $x51)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x34)))))))
 (let (($x53 (and $x28 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x35 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x9 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x35)))))))
 (let (($x32 (= $x9 true)))
 (let (($x49 (= $x32 true)))
 (let (($x38 (= $x49 true)))
 (let (($x57 (and $x38 $x56)))
 (let (($x73 (and $x57 $x72)))
 (let (($x79 (and $x73 $x78)))
 (let (($x96 (and $x79 $x95)))
 (let (($x122 (and $x96 $x121)))
 (let (($x135 (and $x122 $x134)))
 (let (($x160 (and $x135 $x159)))
 (let (($x183 (and $x160 $x182)))
 (let (($x29 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x184 (and $x29 $x183)))
 (let (($x187 (=> $x184 $x186)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x185 (= true false)))
 (let (($x186 (= $x185 true)))
 (let (($x104 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x175 (= $x174 $x104)))
 (let (($x165 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x176 (=> $x165 $x175)))
 (let (($x99 (= (_ bv0 32) (_ bv0 32))))
 (let (($x171 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x172 (= $x171 $x99)))
 (let (($x173 (=> $x165 $x172)))
 (let (($x168 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x169 (=> $x165 $x168)))
 (let (($x142 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x166 (= $x165 $x142)))
 (let (($x101 (= false false)))
 (let (($x162 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x164 (=> $x162 $x101)))
 (let (($x138 (= (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= $x162 $x138)))
 (let (($x181 (and (and (and (and (and $x163 $x164) $x166) $x169) $x173) $x176)))
 (let (($x182 (= $x181 true)))
 (let (($x151 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x152 (= $x151 $x104)))
 (let (($x141 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x153 (=> $x141 $x152)))
 (let (($x148 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x149 (= $x148 $x99)))
 (let (($x150 (=> $x141 $x149)))
 (let (($x145 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x146 (=> $x141 $x145)))
 (let (($x143 (= $x141 $x142)))
 (let (($x137 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x140 (=> $x137 $x101)))
 (let (($x139 (= $x137 $x138)))
 (let (($x158 (and (and (and (and (and $x139 $x140) $x143) $x146) $x150) $x153)))
 (let (($x159 (= $x158 true)))
 (let (($x129 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x130 (= $x129 $x104)))
 (let (($x126 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x128 (=> $x126 $x101)))
 (let (($x133 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x126 $x99)) $x128) $x130)))
 (let (($x134 (= $x133 true)))
 (let (($x113 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x114 (= $x113 $x104)))
 (let (($x103 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (=> $x103 $x114)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x111 (= $x110 $x99)))
 (let (($x112 (=> $x103 $x111)))
 (let (($x107 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x108 (=> $x103 $x107)))
 (let (($x105 (= $x103 $x104)))
 (let (($x98 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x102 (=> $x98 $x101)))
 (let (($x100 (= $x98 $x99)))
 (let (($x120 (and (and (and (and (and $x100 $x102) $x105) $x108) $x112) $x115)))
 (let (($x121 (= $x120 true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x88 (concat ?x84 ?x82)))))
 (let (($x93 (= ?x92 input.dst.llvm-%l)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x75 (not $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x65 (bvugt ?x58 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x58 (_ bv3 32)))))
 (let (($x71 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x65)))))))
 (let (($x59 (= $x71 true)))
 (let (($x60 (= $x59 true)))
 (let (($x72 (= $x60 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x7)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x43 $x33)))
 (let (($x51 (and $x31 $x50)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x44 $x51)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x34)))))))
 (let (($x53 (and $x28 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x35 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x9 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x35)))))))
 (let (($x32 (= $x9 true)))
 (let (($x49 (= $x32 true)))
 (let (($x38 (= $x49 true)))
 (let (($x57 (and $x38 $x56)))
 (let (($x73 (and $x57 $x72)))
 (let (($x79 (and $x73 $x78)))
 (let (($x96 (and $x79 $x95)))
 (let (($x122 (and $x96 $x121)))
 (let (($x135 (and $x122 $x134)))
 (let (($x160 (and $x135 $x159)))
 (let (($x183 (and $x160 $x182)))
 (let (($x29 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x184 (and $x29 $x183)))
 (let (($x187 (=> $x184 $x186)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
                     #xffa000bd
                     #x5b)
              #xffa000bf
              #x00)
       #xffa000be
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00005b20)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa000bf)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592508 32) (_ bv250 8)) (_ bv2214592509 32) (_ bv255 8)) (_ bv2214592510 32) (_ bv255 8)) (_ bv2214592511 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592511 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677199/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x205 (= true false)))
 (let (($x206 (= $x205 true)))
 (let (($x47 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (and $x182 $x47)))
 (let (($x194 (not $x193)))
 (let (($x188 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x191 (and $x182 $x188)))
 (let (($x192 (not $x191)))
 (let (($x117 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x189 (= $x47 $x117)))
 (let (($x190 (=> $x182 $x189)))
 (let (($x102 (= (_ bv0 32) (_ bv0 32))))
 (let (($x37 (= $x188 $x102)))
 (let (($x81 (=> $x182 $x37)))
 (let (($x185 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x186 (=> $x182 $x185)))
 (let (($x150 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x183 (= $x182 $x150)))
 (let (($x103 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x181 (=> $x175 $x103)))
 (let (($x156 (= (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= $x175 $x156)))
 (let (($x200 (and (and (and (and (and (and $x176 $x181) $x183) $x186) $x81) $x190) $x192)))
 (let (($x201 (and $x200 $x194)))
 (let (($x202 (= $x201 true)))
 (let (($x162 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x166 (and $x149 $x162)))
 (let (($x178 (not $x166)))
 (let (($x159 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x177 (and $x149 $x159)))
 (let (($x165 (not $x177)))
 (let (($x163 (= $x162 $x117)))
 (let (($x164 (=> $x149 $x163)))
 (let (($x160 (= $x159 $x102)))
 (let (($x161 (=> $x149 $x160)))
 (let (($x152 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x153 (=> $x149 $x152)))
 (let (($x157 (= $x149 $x150)))
 (let (($x146 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x146 $x103)))
 (let (($x147 (= $x146 $x156)))
 (let (($x171 (and (and (and (and (and (and $x147 $x148) $x157) $x153) $x161) $x164) $x165)))
 (let (($x172 (and $x171 $x178)))
 (let (($x173 (= $x172 true)))
 (let (($x138 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x140 (not $x138)))
 (let (($x139 (= $x138 $x117)))
 (let (($x135 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x137 (=> $x135 $x103)))
 (let (($x142 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x135 $x102)) $x137) $x139)))
 (let (($x143 (and $x142 $x140)))
 (let (($x155 (= $x143 true)))
 (let (($x119 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x105 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x121 (and $x105 $x119)))
 (let (($x122 (not $x121)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x115 (and $x105 $x110)))
 (let (($x120 (not $x115)))
 (let (($x113 (= $x119 $x117)))
 (let (($x114 (=> $x105 $x113)))
 (let (($x111 (= $x110 $x102)))
 (let (($x112 (=> $x105 $x111)))
 (let (($x108 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x118 (=> $x105 $x108)))
 (let (($x106 (= $x105 $x117)))
 (let (($x101 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x104 (=> $x101 $x103)))
 (let (($x116 (= $x101 $x102)))
 (let (($x131 (and (and (and (and (and (and $x116 $x104) $x106) $x118) $x112) $x114) $x120)))
 (let (($x128 (and $x131 $x122)))
 (let (($x132 (= $x128 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x89 (concat ?x83 ?x87)))))
 (let (($x96 (= ?x95 input.dst.llvm-%l)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x77 (not $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let ((?x62 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x68 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x62 (_ bv3 32)))))
 (let (($x73 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x68)))))))
 (let (($x70 (= $x73 true)))
 (let (($x63 (= $x70 true)))
 (let (($x74 (= $x63 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x33 $x7)))
 (let (($x53 (and $x50 $x52)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x48 $x53)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x41)))))))
 (let (($x55 (and $x10 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x9 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x26 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x9)))))))
 (let (($x13 (= $x26 true)))
 (let (($x24 (= $x13 true)))
 (let (($x29 (= $x24 true)))
 (let (($x61 (and $x29 $x58)))
 (let (($x75 (and $x61 $x74)))
 (let (($x90 (and $x75 $x80)))
 (let (($x99 (and $x90 $x98)))
 (let (($x129 (and $x99 $x132)))
 (let (($x144 (and $x129 $x155)))
 (let (($x180 (and $x144 $x173)))
 (let (($x203 (and $x180 $x202)))
 (let (($x49 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x204 (and $x49 $x203)))
 (let (($x207 (=> $x204 $x206)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x205 (= true false)))
 (let (($x206 (= $x205 true)))
 (let (($x47 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x182 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x193 (and $x182 $x47)))
 (let (($x194 (not $x193)))
 (let (($x188 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x191 (and $x182 $x188)))
 (let (($x192 (not $x191)))
 (let (($x117 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x189 (= $x47 $x117)))
 (let (($x190 (=> $x182 $x189)))
 (let (($x102 (= (_ bv0 32) (_ bv0 32))))
 (let (($x37 (= $x188 $x102)))
 (let (($x81 (=> $x182 $x37)))
 (let (($x185 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x186 (=> $x182 $x185)))
 (let (($x150 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x183 (= $x182 $x150)))
 (let (($x103 (= false false)))
 (let (($x175 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x181 (=> $x175 $x103)))
 (let (($x156 (= (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= $x175 $x156)))
 (let (($x200 (and (and (and (and (and (and $x176 $x181) $x183) $x186) $x81) $x190) $x192)))
 (let (($x201 (and $x200 $x194)))
 (let (($x202 (= $x201 true)))
 (let (($x162 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x149 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x166 (and $x149 $x162)))
 (let (($x178 (not $x166)))
 (let (($x159 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x177 (and $x149 $x159)))
 (let (($x165 (not $x177)))
 (let (($x163 (= $x162 $x117)))
 (let (($x164 (=> $x149 $x163)))
 (let (($x160 (= $x159 $x102)))
 (let (($x161 (=> $x149 $x160)))
 (let (($x152 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x153 (=> $x149 $x152)))
 (let (($x157 (= $x149 $x150)))
 (let (($x146 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x148 (=> $x146 $x103)))
 (let (($x147 (= $x146 $x156)))
 (let (($x171 (and (and (and (and (and (and $x147 $x148) $x157) $x153) $x161) $x164) $x165)))
 (let (($x172 (and $x171 $x178)))
 (let (($x173 (= $x172 true)))
 (let (($x138 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x140 (not $x138)))
 (let (($x139 (= $x138 $x117)))
 (let (($x135 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x137 (=> $x135 $x103)))
 (let (($x142 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x135 $x102)) $x137) $x139)))
 (let (($x143 (and $x142 $x140)))
 (let (($x155 (= $x143 true)))
 (let (($x119 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x105 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x121 (and $x105 $x119)))
 (let (($x122 (not $x121)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x115 (and $x105 $x110)))
 (let (($x120 (not $x115)))
 (let (($x113 (= $x119 $x117)))
 (let (($x114 (=> $x105 $x113)))
 (let (($x111 (= $x110 $x102)))
 (let (($x112 (=> $x105 $x111)))
 (let (($x108 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x118 (=> $x105 $x108)))
 (let (($x106 (= $x105 $x117)))
 (let (($x101 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x104 (=> $x101 $x103)))
 (let (($x116 (= $x101 $x102)))
 (let (($x131 (and (and (and (and (and (and $x116 $x104) $x106) $x118) $x112) $x114) $x120)))
 (let (($x128 (and $x131 $x122)))
 (let (($x132 (= $x128 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x89 (concat ?x83 ?x87)))))
 (let (($x96 (= ?x95 input.dst.llvm-%l)))
 (let (($x97 (= $x96 true)))
 (let (($x98 (= $x97 true)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x77 (not $x76)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x80 (= $x79 true)))
 (let ((?x62 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x68 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x62 (_ bv3 32)))))
 (let (($x73 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x68)))))))
 (let (($x70 (= $x73 true)))
 (let (($x63 (= $x70 true)))
 (let (($x74 (= $x63 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x33 $x7)))
 (let (($x53 (and $x50 $x52)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x48 $x53)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x41)))))))
 (let (($x55 (and $x10 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x9 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x26 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x9)))))))
 (let (($x13 (= $x26 true)))
 (let (($x24 (= $x13 true)))
 (let (($x29 (= $x24 true)))
 (let (($x61 (and $x29 $x58)))
 (let (($x75 (and $x61 $x74)))
 (let (($x90 (and $x75 $x80)))
 (let (($x99 (and $x90 $x98)))
 (let (($x129 (and $x99 $x132)))
 (let (($x144 (and $x129 $x155)))
 (let (($x180 (and $x144 $x173)))
 (let (($x203 (and $x180 $x202)))
 (let (($x49 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x204 (and $x49 $x203)))
 (let (($x207 (=> $x204 $x206)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677199/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x252 (= true false)))
 (let (($x253 (= $x252 true)))
 (let (($x124 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x238 (= $x237 $x124)))
 (let (($x224 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (and $x215 $x224)))
 (let (($x239 (=> $x229 $x238)))
 (let (($x104 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x104)))
 (let (($x236 (=> $x229 $x235)))
 (let (($x231 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x232 (=> $x229 $x231)))
 (let (($x105 (= false false)))
 (let (($x221 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x227 (and $x215 $x221)))
 (let (($x228 (=> $x227 $x105)))
 (let (($x225 (= $x224 $x124)))
 (let (($x226 (=> $x215 $x225)))
 (let (($x222 (= $x221 $x104)))
 (let (($x223 (=> $x215 $x222)))
 (let (($x218 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x219 (=> $x215 $x218)))
 (let (($x181 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x216 (= $x215 $x181)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x214 (=> $x212 $x105)))
 (let (($x180 (= (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= $x212 $x180)))
 (let (($x245 (and (and (and (and (and (and $x213 $x214) $x216) $x219) $x223) $x226) $x228)))
 (let (($x248 (and (and (and $x245 $x232) $x236) $x239)))
 (let (($x249 (= $x248 true)))
 (let (($x194 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x194 $x124)))
 (let (($x187 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (and $x176 $x187)))
 (let (($x202 (=> $x47 $x201)))
 (let (($x192 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x200 (= $x192 $x104)))
 (let (($x193 (=> $x47 $x200)))
 (let (($x190 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x199 (=> $x47 $x190)))
 (let (($x185 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x81 (and $x176 $x185)))
 (let (($x198 (=> $x81 $x105)))
 (let (($x188 (= $x187 $x124)))
 (let (($x37 (=> $x176 $x188)))
 (let (($x186 (= $x185 $x104)))
 (let (($x197 (=> $x176 $x186)))
 (let (($x183 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x196 (=> $x176 $x183)))
 (let (($x195 (= $x176 $x181)))
 (let (($x173 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x175 (=> $x173 $x105)))
 (let (($x174 (= $x173 $x180)))
 (let (($x208 (and (and (and (and (and (and $x174 $x175) $x195) $x196) $x197) $x37) $x198)))
 (let (($x42 (and (and (and $x208 $x199) $x193) $x202)))
 (let (($x209 (= $x42 true)))
 (let (($x160 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x161 (= $x160 $x124)))
 (let (($x167 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x179 (=> $x167 $x161)))
 (let (($x152 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x167 $x152)))
 (let (($x159 (=> $x158 $x105)))
 (let (($x153 (= $x152 $x104)))
 (let (($x169 (=> $x167 $x153)))
 (let (($x157 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x167 $x157)))
 (let (($x149 (= $x167 $x124)))
 (let (($x156 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x148 (=> $x156 $x105)))
 (let (($x164 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x156 $x104)) $x148) $x149)))
 (let (($x171 (and (and (and (and $x164 $x168) $x169) $x159) $x179)))
 (let (($x166 (= $x171 true)))
 (let (($x130 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x133 (= $x130 $x124)))
 (let (($x126 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x106 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (and $x106 $x126)))
 (let (($x134 (=> $x115 $x133)))
 (let (($x128 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x132 (= $x128 $x104)))
 (let (($x129 (=> $x115 $x132)))
 (let (($x131 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x121 (=> $x115 $x131)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x114 (and $x106 $x110)))
 (let (($x127 (=> $x114 $x105)))
 (let (($x119 (= $x126 $x124)))
 (let (($x113 (=> $x106 $x119)))
 (let (($x111 (= $x110 $x104)))
 (let (($x112 (=> $x106 $x111)))
 (let (($x118 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x125 (=> $x106 $x118)))
 (let (($x107 (= $x106 $x124)))
 (let (($x103 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x103 $x105)))
 (let (($x123 (= $x103 $x104)))
 (let (($x138 (and (and (and (and (and (and $x123 $x117) $x107) $x125) $x112) $x113) $x127)))
 (let (($x140 (and (and (and $x138 $x121) $x129) $x134)))
 (let (($x143 (= $x140 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x92 (concat ?x88 ?x85)))))
 (let (($x99 (= ?x98 input.dst.llvm-%l)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x79 (not $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x90 (= $x80 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x59 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x65 (_ bv3 32)))))
 (let (($x75 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x59)))))))
 (let (($x72 (= $x75 true)))
 (let (($x66 (= $x72 true)))
 (let (($x76 (= $x66 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x7 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x8 $x55)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x18)))))))
 (let (($x57 (and $x31 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x61 (= $x58 true)))
 (let (($x62 (= $x61 true)))
 (let (($x40 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x22 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x40)))))))
 (let (($x23 (= $x22 true)))
 (let (($x6 (= $x23 true)))
 (let (($x36 (= $x6 true)))
 (let (($x64 (and $x36 $x62)))
 (let (($x77 (and $x64 $x76)))
 (let (($x93 (and $x77 $x91)))
 (let (($x102 (and $x93 $x101)))
 (let (($x155 (and $x102 $x143)))
 (let (($x178 (and $x155 $x166)))
 (let (($x210 (and $x178 $x209)))
 (let (($x250 (and $x210 $x249)))
 (let (($x32 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x251 (and $x32 $x250)))
 (let (($x254 (=> $x251 $x253)))
 (not $x254))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x252 (= true false)))
 (let (($x253 (= $x252 true)))
 (let (($x124 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x238 (= $x237 $x124)))
 (let (($x224 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x229 (and $x215 $x224)))
 (let (($x239 (=> $x229 $x238)))
 (let (($x104 (= (_ bv0 32) (_ bv0 32))))
 (let (($x234 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x234 $x104)))
 (let (($x236 (=> $x229 $x235)))
 (let (($x231 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x232 (=> $x229 $x231)))
 (let (($x105 (= false false)))
 (let (($x221 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x227 (and $x215 $x221)))
 (let (($x228 (=> $x227 $x105)))
 (let (($x225 (= $x224 $x124)))
 (let (($x226 (=> $x215 $x225)))
 (let (($x222 (= $x221 $x104)))
 (let (($x223 (=> $x215 $x222)))
 (let (($x218 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x219 (=> $x215 $x218)))
 (let (($x181 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x216 (= $x215 $x181)))
 (let (($x212 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x214 (=> $x212 $x105)))
 (let (($x180 (= (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= $x212 $x180)))
 (let (($x245 (and (and (and (and (and (and $x213 $x214) $x216) $x219) $x223) $x226) $x228)))
 (let (($x248 (and (and (and $x245 $x232) $x236) $x239)))
 (let (($x249 (= $x248 true)))
 (let (($x194 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x201 (= $x194 $x124)))
 (let (($x187 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x176 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x47 (and $x176 $x187)))
 (let (($x202 (=> $x47 $x201)))
 (let (($x192 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x200 (= $x192 $x104)))
 (let (($x193 (=> $x47 $x200)))
 (let (($x190 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x199 (=> $x47 $x190)))
 (let (($x185 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x81 (and $x176 $x185)))
 (let (($x198 (=> $x81 $x105)))
 (let (($x188 (= $x187 $x124)))
 (let (($x37 (=> $x176 $x188)))
 (let (($x186 (= $x185 $x104)))
 (let (($x197 (=> $x176 $x186)))
 (let (($x183 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x196 (=> $x176 $x183)))
 (let (($x195 (= $x176 $x181)))
 (let (($x173 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x175 (=> $x173 $x105)))
 (let (($x174 (= $x173 $x180)))
 (let (($x208 (and (and (and (and (and (and $x174 $x175) $x195) $x196) $x197) $x37) $x198)))
 (let (($x42 (and (and (and $x208 $x199) $x193) $x202)))
 (let (($x209 (= $x42 true)))
 (let (($x160 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x161 (= $x160 $x124)))
 (let (($x167 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x179 (=> $x167 $x161)))
 (let (($x152 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x167 $x152)))
 (let (($x159 (=> $x158 $x105)))
 (let (($x153 (= $x152 $x104)))
 (let (($x169 (=> $x167 $x153)))
 (let (($x157 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x168 (=> $x167 $x157)))
 (let (($x149 (= $x167 $x124)))
 (let (($x156 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x148 (=> $x156 $x105)))
 (let (($x164 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x156 $x104)) $x148) $x149)))
 (let (($x171 (and (and (and (and $x164 $x168) $x169) $x159) $x179)))
 (let (($x166 (= $x171 true)))
 (let (($x130 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x133 (= $x130 $x124)))
 (let (($x126 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x106 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x115 (and $x106 $x126)))
 (let (($x134 (=> $x115 $x133)))
 (let (($x128 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x132 (= $x128 $x104)))
 (let (($x129 (=> $x115 $x132)))
 (let (($x131 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x121 (=> $x115 $x131)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x114 (and $x106 $x110)))
 (let (($x127 (=> $x114 $x105)))
 (let (($x119 (= $x126 $x124)))
 (let (($x113 (=> $x106 $x119)))
 (let (($x111 (= $x110 $x104)))
 (let (($x112 (=> $x106 $x111)))
 (let (($x118 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x125 (=> $x106 $x118)))
 (let (($x107 (= $x106 $x124)))
 (let (($x103 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x117 (=> $x103 $x105)))
 (let (($x123 (= $x103 $x104)))
 (let (($x138 (and (and (and (and (and (and $x123 $x117) $x107) $x125) $x112) $x113) $x127)))
 (let (($x140 (and (and (and $x138 $x121) $x129) $x134)))
 (let (($x143 (= $x140 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x92 (concat ?x88 ?x85)))))
 (let (($x99 (= ?x98 input.dst.llvm-%l)))
 (let (($x100 (= $x99 true)))
 (let (($x101 (= $x100 true)))
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x79 (not $x78)))
 (let (($x80 (= $x79 true)))
 (let (($x90 (= $x80 true)))
 (let (($x91 (= $x90 true)))
 (let ((?x65 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x59 (bvugt ?x65 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x65 (_ bv3 32)))))
 (let (($x75 (=> (bvule ?x65 (bvsub (bvadd ?x65 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x59)))))))
 (let (($x72 (= $x75 true)))
 (let (($x66 (= $x72 true)))
 (let (($x76 (= $x66 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x7 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x8 $x55)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x18)))))))
 (let (($x57 (and $x31 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x61 (= $x58 true)))
 (let (($x62 (= $x61 true)))
 (let (($x40 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x22 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x40)))))))
 (let (($x23 (= $x22 true)))
 (let (($x6 (= $x23 true)))
 (let (($x36 (= $x6 true)))
 (let (($x64 (and $x36 $x62)))
 (let (($x77 (and $x64 $x76)))
 (let (($x93 (and $x77 $x91)))
 (let (($x102 (and $x93 $x101)))
 (let (($x155 (and $x102 $x143)))
 (let (($x178 (and $x155 $x166)))
 (let (($x210 (and $x178 $x209)))
 (let (($x250 (and $x210 $x249)))
 (let (($x32 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x251 (and $x32 $x250)))
 (let (($x254 (=> $x251 $x253)))
 (not $x254))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
                     #xffa000bd
                     #x5b)
              #xffa000bf
              #x00)
       #xffa000be
       #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00005b20)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffa000bc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffa000bf)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32) (_ bv42 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967290 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2214592508 32) (_ bv250 8)) (_ bv2214592509 32) (_ bv255 8)) (_ bv2214592510 32) (_ bv255 8)) (_ bv2214592511 32) (_ bv255 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2214592511 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2214592508 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv42 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677199/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x273 (= true false)))
 (let (($x274 (= $x273 true)))
 (let (($x255 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x235 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x239 (and $x228 $x235)))
 (let (($x257 (and $x239 $x255)))
 (let (($x258 (not $x257)))
 (let (($x252 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x29 (and $x239 $x252)))
 (let (($x256 (not $x29)))
 (let (($x136 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x34 (= $x255 $x136)))
 (let (($x82 (=> $x239 $x34)))
 (let (($x117 (= (_ bv0 32) (_ bv0 32))))
 (let (($x253 (= $x252 $x117)))
 (let (($x254 (=> $x239 $x253)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x250 (=> $x239 $x249)))
 (let (($x106 (= false false)))
 (let (($x246 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x237 (and $x228 $x246)))
 (let (($x238 (=> $x237 $x106)))
 (let (($x236 (= $x235 $x136)))
 (let (($x247 (=> $x228 $x236)))
 (let (($x233 (= $x246 $x117)))
 (let (($x234 (=> $x228 $x233)))
 (let (($x230 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x231 (=> $x228 $x230)))
 (let (($x206 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x245 (= $x228 $x206)))
 (let (($x226 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x227 (=> $x226 $x106)))
 (let (($x184 (= (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= $x226 $x184)))
 (let (($x264 (and (and (and (and (and (and $x244 $x227) $x245) $x231) $x234) $x247) $x238)))
 (let (($x269 (and (and (and (and (and $x264 $x250) $x254) $x82) $x256) $x258)))
 (let (($x270 (= $x269 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x192 (and $x197 $x189)))
 (let (($x214 (and $x192 $x209)))
 (let (($x240 (not $x214)))
 (let (($x201 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x192 $x201)))
 (let (($x213 (not $x212)))
 (let (($x210 (= $x209 $x136)))
 (let (($x211 (=> $x192 $x210)))
 (let (($x202 (= $x201 $x117)))
 (let (($x42 (=> $x192 $x202)))
 (let (($x193 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x86 (=> $x192 $x193)))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x46 (and $x197 $x198)))
 (let (($x191 (=> $x46 $x106)))
 (let (($x190 (= $x189 $x136)))
 (let (($x199 (=> $x197 $x190)))
 (let (($x208 (= $x198 $x117)))
 (let (($x47 (=> $x197 $x208)))
 (let (($x37 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x207 (=> $x197 $x37)))
 (let (($x187 (= $x197 $x206)))
 (let (($x205 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x186 (=> $x205 $x106)))
 (let (($x185 (= $x205 $x184)))
 (let (($x219 (and (and (and (and (and (and $x185 $x186) $x187) $x207) $x47) $x199) $x191)))
 (let (($x223 (and (and (and (and (and $x219 $x86) $x42) $x211) $x213) $x240)))
 (let (($x243 (= $x223 true)))
 (let (($x171 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x172 (and $x151 $x171)))
 (let (($x173 (not $x172)))
 (let (($x166 (= $x171 $x136)))
 (let (($x178 (=> $x151 $x166)))
 (let (($x159 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x161 (and $x151 $x159)))
 (let (($x179 (=> $x161 $x106)))
 (let (($x165 (= $x159 $x117)))
 (let (($x160 (=> $x151 $x165)))
 (let (($x169 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x177 (=> $x151 $x169)))
 (let (($x152 (= $x151 $x136)))
 (let (($x157 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x106)))
 (let (($x175 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x157 $x117)) $x170) $x152)))
 (let (($x204 (and (and (and (and (and $x175 $x177) $x160) $x179) $x178) $x173)))
 (let (($x182 (= $x204 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x137 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x107 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x114 (and $x107 $x137)))
 (let (($x130 (and $x114 $x122)))
 (let (($x133 (not $x130)))
 (let (($x131 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (and $x114 $x131)))
 (let (($x142 (not $x129)))
 (let (($x128 (= $x122 $x136)))
 (let (($x132 (=> $x114 $x128)))
 (let (($x121 (= $x131 $x117)))
 (let (($x139 (=> $x114 $x121)))
 (let (($x138 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x115 (=> $x114 $x138)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x113 (and $x107 $x110)))
 (let (($x141 (=> $x113 $x106)))
 (let (($x126 (= $x137 $x136)))
 (let (($x119 (=> $x107 $x126)))
 (let (($x111 (= $x110 $x117)))
 (let (($x112 (=> $x107 $x111)))
 (let (($x125 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x154 (=> $x107 $x125)))
 (let (($x108 (= $x107 $x136)))
 (let (($x105 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x124 (=> $x105 $x106)))
 (let (($x135 (= $x105 $x117)))
 (let (($x145 (and (and (and (and (and (and $x135 $x124) $x108) $x154) $x112) $x119) $x141)))
 (let (($x148 (and (and (and (and (and $x145 $x115) $x139) $x132) $x142) $x133)))
 (let (($x163 (= $x148 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x100 (concat ?x95 (concat ?x89 ?x84)))))
 (let (($x102 (= ?x101 input.dst.llvm-%l)))
 (let (($x116 (= $x102 true)))
 (let (($x103 (= $x116 true)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x90 (not $x80)))
 (let (($x91 (= $x90 true)))
 (let (($x93 (= $x91 true)))
 (let (($x94 (= $x93 true)))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x70 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x77 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x70)))))))
 (let (($x74 (= $x77 true)))
 (let (($x69 (= $x74 true)))
 (let (($x78 (= $x69 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x35 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x50 $x57)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x33)))))))
 (let (($x61 (and $x6 $x58)))
 (let (($x62 (= $x61 true)))
 (let (($x64 (= $x62 true)))
 (let (($x65 (= $x64 true)))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x30 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x18)))))))
 (let (($x21 (= $x30 true)))
 (let (($x27 (= $x21 true)))
 (let (($x32 (= $x27 true)))
 (let (($x67 (and $x32 $x65)))
 (let (($x79 (and $x67 $x78)))
 (let (($x96 (and $x79 $x94)))
 (let (($x104 (and $x96 $x103)))
 (let (($x167 (and $x104 $x163)))
 (let (($x183 (and $x167 $x182)))
 (let (($x224 (and $x183 $x243)))
 (let (($x271 (and $x224 $x270)))
 (let (($x20 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x272 (and $x20 $x271)))
 (let (($x275 (=> $x272 $x274)))
 (not $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let (($x273 (= true false)))
 (let (($x274 (= $x273 true)))
 (let (($x255 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x235 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x239 (and $x228 $x235)))
 (let (($x257 (and $x239 $x255)))
 (let (($x258 (not $x257)))
 (let (($x252 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x29 (and $x239 $x252)))
 (let (($x256 (not $x29)))
 (let (($x136 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x34 (= $x255 $x136)))
 (let (($x82 (=> $x239 $x34)))
 (let (($x117 (= (_ bv0 32) (_ bv0 32))))
 (let (($x253 (= $x252 $x117)))
 (let (($x254 (=> $x239 $x253)))
 (let (($x249 (= input.spec-%tmpvar-4.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x250 (=> $x239 $x249)))
 (let (($x106 (= false false)))
 (let (($x246 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x237 (and $x228 $x246)))
 (let (($x238 (=> $x237 $x106)))
 (let (($x236 (= $x235 $x136)))
 (let (($x247 (=> $x228 $x236)))
 (let (($x233 (= $x246 $x117)))
 (let (($x234 (=> $x228 $x233)))
 (let (($x230 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x231 (=> $x228 $x230)))
 (let (($x206 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x245 (= $x228 $x206)))
 (let (($x226 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x227 (=> $x226 $x106)))
 (let (($x184 (= (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= $x226 $x184)))
 (let (($x264 (and (and (and (and (and (and $x244 $x227) $x245) $x231) $x234) $x247) $x238)))
 (let (($x269 (and (and (and (and (and $x264 $x250) $x254) $x82) $x256) $x258)))
 (let (($x270 (= $x269 true)))
 (let (($x209 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x197 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x192 (and $x197 $x189)))
 (let (($x214 (and $x192 $x209)))
 (let (($x240 (not $x214)))
 (let (($x201 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x212 (and $x192 $x201)))
 (let (($x213 (not $x212)))
 (let (($x210 (= $x209 $x136)))
 (let (($x211 (=> $x192 $x210)))
 (let (($x202 (= $x201 $x117)))
 (let (($x42 (=> $x192 $x202)))
 (let (($x193 (= input.spec-%tmpvar-3.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x86 (=> $x192 $x193)))
 (let (($x198 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x46 (and $x197 $x198)))
 (let (($x191 (=> $x46 $x106)))
 (let (($x190 (= $x189 $x136)))
 (let (($x199 (=> $x197 $x190)))
 (let (($x208 (= $x198 $x117)))
 (let (($x47 (=> $x197 $x208)))
 (let (($x37 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x207 (=> $x197 $x37)))
 (let (($x187 (= $x197 $x206)))
 (let (($x205 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x186 (=> $x205 $x106)))
 (let (($x185 (= $x205 $x184)))
 (let (($x219 (and (and (and (and (and (and $x185 $x186) $x187) $x207) $x47) $x199) $x191)))
 (let (($x223 (and (and (and (and (and $x219 $x86) $x42) $x211) $x213) $x240)))
 (let (($x243 (= $x223 true)))
 (let (($x171 (bvuge input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x172 (and $x151 $x171)))
 (let (($x173 (not $x172)))
 (let (($x166 (= $x171 $x136)))
 (let (($x178 (=> $x151 $x166)))
 (let (($x159 (= input.spec-%tmpvar-2.E0%0%d.1.2.1.0 (_ bv0 32))))
 (let (($x161 (and $x151 $x159)))
 (let (($x179 (=> $x161 $x106)))
 (let (($x165 (= $x159 $x117)))
 (let (($x160 (=> $x151 $x165)))
 (let (($x169 (= input.spec-%tmpvar-2.E0%0%d.1.2.0 (_ bv0 32))))
 (let (($x177 (=> $x151 $x169)))
 (let (($x152 (= $x151 $x136)))
 (let (($x157 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x170 (=> $x157 $x106)))
 (let (($x175 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x157 $x117)) $x170) $x152)))
 (let (($x204 (and (and (and (and (and $x175 $x177) $x160) $x179) $x178) $x173)))
 (let (($x182 (= $x204 true)))
 (let (($x122 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv1 32))))
 (let (($x137 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x107 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x114 (and $x107 $x137)))
 (let (($x130 (and $x114 $x122)))
 (let (($x133 (not $x130)))
 (let (($x131 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (and $x114 $x131)))
 (let (($x142 (not $x129)))
 (let (($x128 (= $x122 $x136)))
 (let (($x132 (=> $x114 $x128)))
 (let (($x121 (= $x131 $x117)))
 (let (($x139 (=> $x114 $x121)))
 (let (($x138 (= input.spec-%tmpvar-1.E0%0%d.2.1.2.0 (_ bv0 32))))
 (let (($x115 (=> $x114 $x138)))
 (let (($x110 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x113 (and $x107 $x110)))
 (let (($x141 (=> $x113 $x106)))
 (let (($x126 (= $x137 $x136)))
 (let (($x119 (=> $x107 $x126)))
 (let (($x111 (= $x110 $x117)))
 (let (($x112 (=> $x107 $x111)))
 (let (($x125 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x154 (=> $x107 $x125)))
 (let (($x108 (= $x107 $x136)))
 (let (($x105 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x124 (=> $x105 $x106)))
 (let (($x135 (= $x105 $x117)))
 (let (($x145 (and (and (and (and (and (and $x135 $x124) $x108) $x154) $x112) $x119) $x141)))
 (let (($x148 (and (and (and (and (and $x145 $x115) $x139) $x132) $x142) $x133)))
 (let (($x163 (= $x148 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x100 (concat ?x95 (concat ?x89 ?x84)))))
 (let (($x102 (= ?x101 input.dst.llvm-%l)))
 (let (($x116 (= $x102 true)))
 (let (($x103 (= $x116 true)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x90 (not $x80)))
 (let (($x91 (= $x90 true)))
 (let (($x93 (= $x91 true)))
 (let (($x94 (= $x93 true)))
 (let ((?x68 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let (($x70 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x77 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x70)))))))
 (let (($x74 (= $x77 true)))
 (let (($x69 (= $x74 true)))
 (let (($x78 (= $x69 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x35 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x50 $x57)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x33)))))))
 (let (($x61 (and $x6 $x58)))
 (let (($x62 (= $x61 true)))
 (let (($x64 (= $x62 true)))
 (let (($x65 (= $x64 true)))
 (let (($x18 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l (_ bv3 32)))))
 (let (($x30 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x18)))))))
 (let (($x21 (= $x30 true)))
 (let (($x27 (= $x21 true)))
 (let (($x32 (= $x27 true)))
 (let (($x67 (and $x32 $x65)))
 (let (($x79 (and $x67 $x78)))
 (let (($x96 (and $x79 $x94)))
 (let (($x104 (and $x96 $x103)))
 (let (($x167 (and $x104 $x163)))
 (let (($x183 (and $x167 $x182)))
 (let (($x224 (and $x183 $x243)))
 (let (($x271 (and $x224 $x270)))
 (let (($x20 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x272 (and $x20 $x271)))
 (let (($x275 (=> $x272 $x274)))
 (not $x275))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-4.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-3.E0%0%d.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.E0%0%d.2.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-2.E0%0%d.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.E0%0%d.0 #b00000000000000000000000000101010)
(= input.spec-%tmpvar-1.E0%0%d.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000101010)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ef58198)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x34)
                     #x0ef58199
                     #x93)
              #x0ef5819b
              #x26)
       #x0ef5819a
       #xb9))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x26b99334)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ef58198)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ef5819b)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xfd)
                     #xfffffffb
                     #xff)
              #xfffffffa
              #xff)
       #xfffffff9
       #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffd)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32)
    #x0000002a)
  (define-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.E0%0%d.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.E0%0%d.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.E0%0%d.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677199/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x5 (bvadd ?x36 (_ bv3 32))))
 (let ((?x73 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x224 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x240 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x222 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x244 (store (store (store ?x222 ?x240 ((_ extract 15 8) (_ bv42 32))) ?x224 ((_ extract 23 16) (_ bv42 32))) ?x73 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x229 (store (store ?x244 (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x246 (store (store ?x229 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x5 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x251 (concat (select ?x246 (bvadd ?x40 (_ bv2 32))) (concat (select ?x246 (bvadd ?x40 (_ bv1 32))) (select ?x246 ?x40)))))
 (let ((?x254 (concat (select ?x246 (bvadd ?x40 (_ bv3 32))) ?x251)))
 (let (($x266 (= (_ bv0 32) ?x254)))
 (let ((?x255 (ite $x266 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x255 (_ bv1 32))))
 (let (($x257 (= false $x268)))
 (let (($x181 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x258 (=> $x181 $x257)))
 (let (($x115 (= false false)))
 (let (($x127 (= (_ bv0 32) (_ bv0 32))))
 (let (($x29 (and $x181 $x127)))
 (let (($x256 (=> $x29 $x115)))
 (let (($x34 (= ?x255 (_ bv0 32))))
 (let (($x82 (= true $x34)))
 (let (($x267 (=> $x181 $x82)))
 (let ((?x236 (concat (select ?x246 ?x224) (concat (select ?x246 ?x240) (select ?x246 input.dst.llvm-%l)))))
 (let ((?x263 (concat (select ?x246 ?x73) ?x236)))
 (let (($x237 (= (_ bv42 32) ?x263)))
 (let (($x238 (=> $x181 $x237)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x220 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x220 (_ bv1 32))))
 (let (($x221 (= true $x211)))
 (let (($x209 (= ?x220 (_ bv0 32))))
 (let (($x210 (= false $x209)))
 (let (($x273 (and (and (and (and (and $x210 $x221) $x238) $x267) $x256) $x258)))
 (let (($x42 (= true true)))
 (let (($x274 (and $x42 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x131 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x46 (= $x218 $x131)))
 (let (($x241 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x191 (=> $x241 $x46)))
 (let (($x189 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x190 (= $x189 $x127)))
 (let (($x199 (=> $x241 $x190)))
 (let (($x208 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x47 (=> $x241 $x208)))
 (let (($x81 (= $x241 $x181)))
 (let (($x188 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x207 (=> $x188 $x115)))
 (let (($x160 (= (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= $x188 $x160)))
 (let (($x86 (and (and (and (and (and $x37 $x207) $x81) $x47) $x199) $x191)))
 (let (($x242 (= $x86 true)))
 (let (($x183 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x196 (= $x183 $x131)))
 (let (($x179 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x205 (=> $x179 $x196)))
 (let (($x173 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x204 (= $x173 $x127)))
 (let (($x182 (=> $x179 $x204)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x195 (=> $x179 $x178)))
 (let (($x171 (= $x179 $x181)))
 (let (($x165 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x161 (=> $x165 $x115)))
 (let (($x176 (= $x165 $x160)))
 (let (($x197 (and (and (and (and (and $x176 $x161) $x171) $x195) $x182) $x205)))
 (let (($x206 (= $x197 true)))
 (let (($x152 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x175 (= $x152 $x131)))
 (let (($x170 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x151 (=> $x170 $x115)))
 (let (($x177 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x170 $x127)) $x151) $x175)))
 (let (($x203 (= $x177 true)))
 (let (($x142 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x162 (= $x142 $x131)))
 (let (($x120 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (=> $x120 $x162)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x147 (= $x132 $x127)))
 (let (($x129 (=> $x120 $x147)))
 (let (($x156 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x122 (=> $x120 $x156)))
 (let (($x121 (= $x120 $x131)))
 (let (($x114 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x146 (=> $x114 $x115)))
 (let (($x138 (= $x114 $x127)))
 (let (($x149 (and (and (and (and (and $x138 $x146) $x121) $x122) $x129) $x130)))
 (let (($x164 (= $x149 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x108 (concat ?x134 (concat ?x117 ?x123)))))
 (let (($x119 (= ?x140 input.dst.llvm-%l)))
 (let (($x144 (= $x119 true)))
 (let (($x113 (= $x144 true)))
 (let (($x118 (= input.dst.llvm-%l ?x140)))
 (let (($x143 (and $x118 (not $x125))))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x98)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x92 $x84)))
 (let (($x102 (and $x88 $x101)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x80 $x102)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x96)))))))
 (let (($x45 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x41 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv4 32))) (bvult ?x36 (bvsub ?x36 (_ bv4 32))))))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (and true $x51)))
 (let (($x58 (and $x76 $x28)))
 (let (($x23 (and $x58 $x51)))
 (let (($x24 (and (and (and $x76 $x23) $x53) $x41)))
 (let (($x66 (and $x24 $x45)))
 (let (($x111 (and (and (and $x66 $x95) $x116) $x143)))
 (let (($x112 (= $x111 true)))
 (let (($x155 (= $x112 true)))
 (let (($x137 (= $x155 true)))
 (let (($x77 (= $x66 true)))
 (let (($x74 (= $x77 true)))
 (let (($x69 (= $x74 true)))
 (let (($x126 (and $x69 $x137)))
 (let (($x141 (and $x126 $x113)))
 (let (($x150 (and $x141 $x164)))
 (let (($x158 (and $x150 $x203)))
 (let (($x187 (and $x158 $x206)))
 (let (($x194 (and $x187 $x242)))
 (let (($x17 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x201 (and $x17 $x194)))
 (let (($x25 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x19 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x25)))))))
 (let (($x56 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x38 (=> (bvule input.dst.llvm-%l (bvsub ?x40 (_ bv1 32))) (or false (or false (and true (or $x8 $x56)))))))
 (let (($x14 (and $x38 $x19)))
 (let (($x202 (and $x14 $x201)))
 (let (($x276 (=> $x202 $x275)))
 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd input.dst.llvm-%l (_ bv4 32))))
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l)))
 (let ((?x5 (bvadd ?x36 (_ bv3 32))))
 (let ((?x73 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let ((?x224 (bvadd input.dst.llvm-%l (_ bv2 32))))
 (let ((?x240 (bvadd input.dst.llvm-%l (_ bv1 32))))
 (let ((?x222 (store input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv0 32)) ((_ extract 7 0) (_ bv42 32)))))
 (let ((?x244 (store (store (store ?x222 ?x240 ((_ extract 15 8) (_ bv42 32))) ?x224 ((_ extract 23 16) (_ bv42 32))) ?x73 ((_ extract 31 24) (_ bv42 32)))))
 (let ((?x229 (store (store ?x244 (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) (_ bv0 32))) (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) (_ bv0 32)))))
 (let ((?x246 (store (store ?x229 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) (_ bv0 32))) ?x5 ((_ extract 31 24) (_ bv0 32)))))
 (let ((?x251 (concat (select ?x246 (bvadd ?x40 (_ bv2 32))) (concat (select ?x246 (bvadd ?x40 (_ bv1 32))) (select ?x246 ?x40)))))
 (let ((?x254 (concat (select ?x246 (bvadd ?x40 (_ bv3 32))) ?x251)))
 (let (($x266 (= (_ bv0 32) ?x254)))
 (let ((?x255 (ite $x266 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x255 (_ bv1 32))))
 (let (($x257 (= false $x268)))
 (let (($x181 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x258 (=> $x181 $x257)))
 (let (($x115 (= false false)))
 (let (($x127 (= (_ bv0 32) (_ bv0 32))))
 (let (($x29 (and $x181 $x127)))
 (let (($x256 (=> $x29 $x115)))
 (let (($x34 (= ?x255 (_ bv0 32))))
 (let (($x82 (= true $x34)))
 (let (($x267 (=> $x181 $x82)))
 (let ((?x236 (concat (select ?x246 ?x224) (concat (select ?x246 ?x240) (select ?x246 input.dst.llvm-%l)))))
 (let ((?x263 (concat (select ?x246 ?x73) ?x236)))
 (let (($x237 (= (_ bv42 32) ?x263)))
 (let (($x238 (=> $x181 $x237)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x220 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x220 (_ bv1 32))))
 (let (($x221 (= true $x211)))
 (let (($x209 (= ?x220 (_ bv0 32))))
 (let (($x210 (= false $x209)))
 (let (($x273 (and (and (and (and (and $x210 $x221) $x238) $x267) $x256) $x258)))
 (let (($x42 (= true true)))
 (let (($x274 (and $x42 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x131 (bvuge (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x46 (= $x218 $x131)))
 (let (($x241 (bvuge input.spec-%tmpvar-4.E0%0%d.0 (_ bv1 32))))
 (let (($x191 (=> $x241 $x46)))
 (let (($x189 (= input.spec-%tmpvar-4.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x190 (= $x189 $x127)))
 (let (($x199 (=> $x241 $x190)))
 (let (($x208 (= input.spec-%tmpvar-4.E0%0%d.2.0 (_ bv42 32))))
 (let (($x47 (=> $x241 $x208)))
 (let (($x81 (= $x241 $x181)))
 (let (($x188 (= input.spec-%tmpvar-4.E0%0%d.0 (_ bv0 32))))
 (let (($x207 (=> $x188 $x115)))
 (let (($x160 (= (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= $x188 $x160)))
 (let (($x86 (and (and (and (and (and $x37 $x207) $x81) $x47) $x199) $x191)))
 (let (($x242 (= $x86 true)))
 (let (($x183 (bvuge input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x196 (= $x183 $x131)))
 (let (($x179 (bvuge input.spec-%tmpvar-3.E0%0%d.0 (_ bv1 32))))
 (let (($x205 (=> $x179 $x196)))
 (let (($x173 (= input.spec-%tmpvar-3.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x204 (= $x173 $x127)))
 (let (($x182 (=> $x179 $x204)))
 (let (($x178 (= input.spec-%tmpvar-3.E0%0%d.2.0 (_ bv42 32))))
 (let (($x195 (=> $x179 $x178)))
 (let (($x171 (= $x179 $x181)))
 (let (($x165 (= input.spec-%tmpvar-3.E0%0%d.0 (_ bv0 32))))
 (let (($x161 (=> $x165 $x115)))
 (let (($x176 (= $x165 $x160)))
 (let (($x197 (and (and (and (and (and $x176 $x161) $x171) $x195) $x182) $x205)))
 (let (($x206 (= $x197 true)))
 (let (($x152 (bvuge input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv1 32))))
 (let (($x175 (= $x152 $x131)))
 (let (($x170 (= input.spec-%tmpvar-2.E0%0%d.1.0 (_ bv0 32))))
 (let (($x151 (=> $x170 $x115)))
 (let (($x177 (and (and (and (= input.spec-%tmpvar-2.E0%0%d.0 (_ bv42 32)) (= $x170 $x127)) $x151) $x175)))
 (let (($x203 (= $x177 true)))
 (let (($x142 (bvuge input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv1 32))))
 (let (($x162 (= $x142 $x131)))
 (let (($x120 (bvuge input.spec-%tmpvar-1.E0%0%d.0 (_ bv1 32))))
 (let (($x130 (=> $x120 $x162)))
 (let (($x132 (= input.spec-%tmpvar-1.E0%0%d.2.1.0 (_ bv0 32))))
 (let (($x147 (= $x132 $x127)))
 (let (($x129 (=> $x120 $x147)))
 (let (($x156 (= input.spec-%tmpvar-1.E0%0%d.2.0 (_ bv0 32))))
 (let (($x122 (=> $x120 $x156)))
 (let (($x121 (= $x120 $x131)))
 (let (($x114 (= input.spec-%tmpvar-1.E0%0%d.0 (_ bv0 32))))
 (let (($x146 (=> $x114 $x115)))
 (let (($x138 (= $x114 $x127)))
 (let (($x149 (and (and (and (and (and $x138 $x146) $x121) $x122) $x129) $x130)))
 (let (($x164 (= $x149 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x108 (concat ?x134 (concat ?x117 ?x123)))))
 (let (($x119 (= ?x140 input.dst.llvm-%l)))
 (let (($x144 (= $x119 true)))
 (let (($x113 (= $x144 true)))
 (let (($x118 (= input.dst.llvm-%l ?x140)))
 (let (($x143 (and $x118 (not $x125))))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x98)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x92 $x84)))
 (let (($x102 (and $x88 $x101)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x80 $x102)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x96)))))))
 (let (($x45 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x41 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x36 (bvsub ?x36 (_ bv4 32))) (bvult ?x36 (bvsub ?x36 (_ bv4 32))))))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (and true $x51)))
 (let (($x58 (and $x76 $x28)))
 (let (($x23 (and $x58 $x51)))
 (let (($x24 (and (and (and $x76 $x23) $x53) $x41)))
 (let (($x66 (and $x24 $x45)))
 (let (($x111 (and (and (and $x66 $x95) $x116) $x143)))
 (let (($x112 (= $x111 true)))
 (let (($x155 (= $x112 true)))
 (let (($x137 (= $x155 true)))
 (let (($x77 (= $x66 true)))
 (let (($x74 (= $x77 true)))
 (let (($x69 (= $x74 true)))
 (let (($x126 (and $x69 $x137)))
 (let (($x141 (and $x126 $x113)))
 (let (($x150 (and $x141 $x164)))
 (let (($x158 (and $x150 $x203)))
 (let (($x187 (and $x158 $x206)))
 (let (($x194 (and $x187 $x242)))
 (let (($x17 (= (_ bv42 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x201 (and $x17 $x194)))
 (let (($x25 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x19 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x25)))))))
 (let (($x56 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x38 (=> (bvule input.dst.llvm-%l (bvsub ?x40 (_ bv1 32))) (or false (or false (and true (or $x8 $x56)))))))
 (let (($x14 (and $x38 $x19)))
 (let (($x202 (and $x14 $x201)))
 (let (($x276 (=> $x202 $x275)))
 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2677199/query
