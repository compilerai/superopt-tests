==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x10)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x11 $x10)))
 (let (($x19 (and $x7 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (= true false)))
 (let (($x141 (= $x140 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x120 (concat ?x116 ?x114)))))
 (let (($x125 (= ?x124 input.dst.llvm-%n)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x106 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x109 (= $x108 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x93 $x96)))
 (let (($x100 (and $x97 $x99)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x91 $x100)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x110 (and $x104 $x109)))
 (let (($x128 (and $x110 $x127)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (and $x88 $x128)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x130 (and $x85 $x129)))
 (let (($x82 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x52 (_ bv1 32))))
 (=> $x69 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x71 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x23 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x23 (_ bv1 32))))
 (let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x52 (_ bv1 32))))
 (= $x69 $x66))))))
 ))
 (let (($x59 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x52 (_ bv0 32))))
 (=> $x53 $x56)))))
 ))
 (let (($x55 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x23 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x23 (_ bv0 32))))
 (let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x52 (_ bv0 32))))
 (= $x53 $x29))))))
 ))
 (let (($x60 (and $x55 $x59)))
 (let (($x72 (and $x60 $x71)))
 (let (($x83 (and $x72 $x82)))
 (let (($x131 (and $x83 $x130)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x132 (and $x46 $x131)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x18 $x132)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x134 (and $x43 $x133)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x135 (and $x47 $x134)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x136 (and $x12 $x135)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x137 (and $x44 $x136)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x138 (and $x9 $x137)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x139 (and $x33 $x138)))
 (let (($x142 (=> $x139 $x141)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (= true false)))
 (let (($x141 (= $x140 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x120 (concat ?x116 ?x114)))))
 (let (($x125 (= ?x124 input.dst.llvm-%n)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let (($x106 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x107 (= $x106 true)))
 (let (($x108 (= $x107 true)))
 (let (($x109 (= $x108 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x93 $x96)))
 (let (($x100 (and $x97 $x99)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x91 $x100)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x110 (and $x104 $x109)))
 (let (($x128 (and $x110 $x127)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (and $x88 $x128)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x130 (and $x85 $x129)))
 (let (($x82 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x52 (_ bv1 32))))
 (=> $x69 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x71 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x23 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x23 (_ bv1 32))))
 (let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x52 (_ bv1 32))))
 (= $x69 $x66))))))
 ))
 (let (($x59 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x52 (_ bv0 32))))
 (=> $x53 $x56)))))
 ))
 (let (($x55 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x23 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x23 (_ bv0 32))))
 (let ((?x52 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x53 (= ?x52 (_ bv0 32))))
 (= $x53 $x29))))))
 ))
 (let (($x60 (and $x55 $x59)))
 (let (($x72 (and $x60 $x71)))
 (let (($x83 (and $x72 $x82)))
 (let (($x131 (and $x83 $x130)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x132 (and $x46 $x131)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x133 (and $x18 $x132)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x134 (and $x43 $x133)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x135 (and $x47 $x134)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x136 (and $x12 $x135)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x137 (and $x44 $x136)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x138 (and $x9 $x137)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x139 (and $x33 $x138)))
 (let (($x142 (=> $x139 $x141)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000144)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000147)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000144)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7e22140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd7e22143)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7e22140)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x141)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x136 $x139)))
 (let (($x143 (and $x140 $x142)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x132 $x143)))
 (let (($x67 (= $x65 true)))
 (let (($x68 (= $x67 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x17 (concat ?x5 (concat ?x20 ?x30)))))
 (let (($x25 (= input.dst.llvm-%n ?x13)))
 (let (($x10 (and (and (and $x132 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x143) $x25)))
 (let (($x6 (= $x10 true)))
 (let (($x38 (= $x6 true)))
 (let (($x34 (= $x38 true)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (and $x129 $x34)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x36 (and $x126 $x8)))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x43 (_ bv1 32))))
 (=> $x108 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x110 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x71 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x71 (_ bv1 32))))
 (let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x43 (_ bv1 32))))
 (= $x108 $x105))))))
 ))
 (let (($x98 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x95 (= false false)))
 (let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x43 (_ bv0 32))))
 (=> $x39 $x95)))))
 ))
 (let (($x94 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x71 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x71 (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x43 (_ bv0 32))))
 (= $x39 $x46))))))
 ))
 (let (($x99 (and $x94 $x98)))
 (let (($x111 (and $x99 $x110)))
 (let (($x124 (and $x111 $x121)))
 (let (($x41 (and $x124 $x36)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x31 (and $x93 $x41)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x48 (and $x92 $x31)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x49 (and $x12 $x48)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x57 (and $x44 $x49)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x61 (and $x58 $x57)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x62 (and $x7 $x61)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x63 (and $x19 $x62)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x64 (and $x21 $x63)))
 (let (($x73 (=> $x64 $x68)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x141)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x136 $x139)))
 (let (($x143 (and $x140 $x142)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x132 $x143)))
 (let (($x67 (= $x65 true)))
 (let (($x68 (= $x67 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x17 (concat ?x5 (concat ?x20 ?x30)))))
 (let (($x25 (= input.dst.llvm-%n ?x13)))
 (let (($x10 (and (and (and $x132 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x143) $x25)))
 (let (($x6 (= $x10 true)))
 (let (($x38 (= $x6 true)))
 (let (($x34 (= $x38 true)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (and $x129 $x34)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x36 (and $x126 $x8)))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x43 (_ bv1 32))))
 (=> $x108 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x110 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x71 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x71 (_ bv1 32))))
 (let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x43 (_ bv1 32))))
 (= $x108 $x105))))))
 ))
 (let (($x98 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x95 (= false false)))
 (let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x43 (_ bv0 32))))
 (=> $x39 $x95)))))
 ))
 (let (($x94 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x71 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x46 (= ?x71 (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x43 (_ bv0 32))))
 (= $x39 $x46))))))
 ))
 (let (($x99 (and $x94 $x98)))
 (let (($x111 (and $x99 $x110)))
 (let (($x124 (and $x111 $x121)))
 (let (($x41 (and $x124 $x36)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x31 (and $x93 $x41)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x48 (and $x92 $x31)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x49 (and $x12 $x48)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x57 (and $x44 $x49)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x61 (and $x58 $x57)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x62 (and $x7 $x61)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x63 (and $x19 $x62)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x64 (and $x21 $x63)))
 (let (($x73 (=> $x64 $x68)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x118 (= $x123 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x55 (concat ?x45 (concat ?x72 ?x85)))))
 (let (($x42 (= input.dst.llvm-%n ?x81)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x24)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x67 $x74)))
 (let (($x86 (and $x113 $x16)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and (and (and $x62 $x64) $x86) $x42)))
 (let (($x60 (= $x50 true)))
 (let (($x66 (= $x60 true)))
 (let (($x28 (= $x66 true)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (and $x49 $x28)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x90 (and $x41 $x88)))
 (let (($x34 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x132 (_ bv1 32))))
 (=> $x11 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x5 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x117 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x117 (_ bv1 32))))
 (let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x132 (_ bv1 32))))
 (= $x11 $x112))))))
 ))
 (let (($x138 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x135 (= false false)))
 (let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x132 (_ bv0 32))))
 (=> $x133 $x135)))))
 ))
 (let (($x26 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x117 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x117 (_ bv0 32))))
 (let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x132 (_ bv0 32))))
 (= $x133 $x125))))))
 ))
 (let (($x139 (and $x26 $x138)))
 (let (($x27 (and $x139 $x5)))
 (let (($x8 (and $x27 $x34)))
 (let (($x96 (and $x8 $x90)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x100 (and $x93 $x96)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x101 (and $x92 $x100)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x102 (and $x12 $x101)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x103 (and $x44 $x102)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x104 (and $x58 $x103)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x106 (and $x7 $x104)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x107 (and $x19 $x106)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x122 (and $x21 $x107)))
 (let (($x119 (=> $x122 $x118)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x118 (= $x123 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x81 (concat ?x55 (concat ?x45 (concat ?x72 ?x85)))))
 (let (($x42 (= input.dst.llvm-%n ?x81)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x24)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x67 $x74)))
 (let (($x86 (and $x113 $x16)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and (and (and $x62 $x64) $x86) $x42)))
 (let (($x60 (= $x50 true)))
 (let (($x66 (= $x60 true)))
 (let (($x28 (= $x66 true)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (and $x49 $x28)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x90 (and $x41 $x88)))
 (let (($x34 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x132 (_ bv1 32))))
 (=> $x11 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x5 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x117 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x117 (_ bv1 32))))
 (let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x132 (_ bv1 32))))
 (= $x11 $x112))))))
 ))
 (let (($x138 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x135 (= false false)))
 (let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x132 (_ bv0 32))))
 (=> $x133 $x135)))))
 ))
 (let (($x26 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x117 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x117 (_ bv0 32))))
 (let ((?x132 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x132 (_ bv0 32))))
 (= $x133 $x125))))))
 ))
 (let (($x139 (and $x26 $x138)))
 (let (($x27 (and $x139 $x5)))
 (let (($x8 (and $x27 $x34)))
 (let (($x96 (and $x8 $x90)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x100 (and $x93 $x96)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x101 (and $x92 $x100)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x102 (and $x12 $x101)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x103 (and $x44 $x102)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x104 (and $x58 $x103)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x106 (and $x7 $x104)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x107 (and $x19 $x106)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x122 (and $x21 $x107)))
 (let (($x119 (=> $x122 $x118)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x22)))
 (let (($x25 (= ?x13 input.spec-%var-n-1)))
 (let (($x115 (= $x25 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x99 (concat ?x94 (concat ?x79 ?x111)))))
 (let (($x105 (= input.dst.llvm-%n ?x108)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x83)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x118 $x52)))
 (let (($x39 (and $x69 $x43)))
 (let (($x122 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and (and (and $x106 $x122) $x39) $x105)))
 (let (($x126 (= $x124 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (and $x102 $x128)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x136 (and $x96 $x129)))
 (let (($x28 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x62 (_ bv1 32))))
 (=> $x80 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x45 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x38 (_ bv1 32))))
 (let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x62 (_ bv1 32))))
 (= $x80 $x51))))))
 ))
 (let (($x73 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (=> $x63 $x65)))))
 ))
 (let (($x87 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x38 (_ bv0 32))))
 (let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (= $x63 $x36))))))
 ))
 (let (($x74 (and $x87 $x73)))
 (let (($x59 (and $x74 $x45)))
 (let (($x88 (and $x59 $x28)))
 (let (($x140 (and $x88 $x136)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x141 (and $x93 $x140)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x142 (and $x92 $x141)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x143 (and $x12 $x142)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x35 (and $x44 $x143)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x40 (and $x58 $x35)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x17 (and $x7 $x40)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x20 (and $x21 $x17)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x30 (and $x37 $x20)))
 (let (($x75 (=> $x30 $x115)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x22)))
 (let (($x25 (= ?x13 input.spec-%var-n-1)))
 (let (($x115 (= $x25 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x99 (concat ?x94 (concat ?x79 ?x111)))))
 (let (($x105 (= input.dst.llvm-%n ?x108)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x83)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x118 $x52)))
 (let (($x39 (and $x69 $x43)))
 (let (($x122 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and (and (and $x106 $x122) $x39) $x105)))
 (let (($x126 (= $x124 true)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (and $x102 $x128)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x136 (and $x96 $x129)))
 (let (($x28 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x62 (_ bv1 32))))
 (=> $x80 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x45 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x38 (_ bv1 32))))
 (let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x62 (_ bv1 32))))
 (= $x80 $x51))))))
 ))
 (let (($x73 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (=> $x63 $x65)))))
 ))
 (let (($x87 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x38 (_ bv0 32))))
 (let ((?x62 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (= $x63 $x36))))))
 ))
 (let (($x74 (and $x87 $x73)))
 (let (($x59 (and $x74 $x45)))
 (let (($x88 (and $x59 $x28)))
 (let (($x140 (and $x88 $x136)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x141 (and $x93 $x140)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x142 (and $x92 $x141)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x143 (and $x12 $x142)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x35 (and $x44 $x143)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x40 (and $x58 $x35)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x17 (and $x7 $x40)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x20 (and $x21 $x17)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x30 (and $x37 $x20)))
 (let (($x75 (=> $x30 $x115)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x72)))
 (let (($x18 (= ?x85 input.dst.llvm-%n)))
 (let (($x47 (= $x18 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x26 (concat ?x135 (concat ?x5 ?x117)))))
 (let (($x138 (= input.dst.llvm-%n ?x137)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x76)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x22 $x115)))
 (let (($x110 (and $x75 $x109)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and (and (and $x17 $x30) $x110) $x138)))
 (let (($x34 (= $x112 true)))
 (let (($x6 (= $x34 true)))
 (let (($x8 (= $x6 true)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x41 (and $x143 $x8)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x31 (and $x140 $x41)))
 (let (($x128 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x106 (_ bv1 32))))
 (=> $x46 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x94 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x66 (_ bv1 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x106 (_ bv1 32))))
 (= $x46 $x71))))))
 ))
 (let (($x120 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (=> $x107 $x123)))))
 ))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x66 (_ bv0 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (= $x107 $x90))))))
 ))
 (let (($x52 (and $x121 $x120)))
 (let (($x116 (and $x52 $x94)))
 (let (($x129 (and $x116 $x128)))
 (let (($x48 (and $x129 $x31)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x49 (and $x93 $x48)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x67 (and $x92 $x49)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x113 (and $x12 $x67)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x24 (and $x44 $x113)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x16 (and $x58 $x24)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x86 (and $x7 $x16)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x82 (and $x21 $x86)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x54 (and $x37 $x82)))
 (let (($x81 (=> $x54 $x47)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x72)))
 (let (($x18 (= ?x85 input.dst.llvm-%n)))
 (let (($x47 (= $x18 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x26 (concat ?x135 (concat ?x5 ?x117)))))
 (let (($x138 (= input.dst.llvm-%n ?x137)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x76)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x22 $x115)))
 (let (($x110 (and $x75 $x109)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and (and (and $x17 $x30) $x110) $x138)))
 (let (($x34 (= $x112 true)))
 (let (($x6 (= $x34 true)))
 (let (($x8 (= $x6 true)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x41 (and $x143 $x8)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x31 (and $x140 $x41)))
 (let (($x128 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x106 (_ bv1 32))))
 (=> $x46 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x94 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x66 (_ bv1 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x106 (_ bv1 32))))
 (= $x46 $x71))))))
 ))
 (let (($x120 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (=> $x107 $x123)))))
 ))
 (let (($x121 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x66 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x66 (_ bv0 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x106 (_ bv0 32))))
 (= $x107 $x90))))))
 ))
 (let (($x52 (and $x121 $x120)))
 (let (($x116 (and $x52 $x94)))
 (let (($x129 (and $x116 $x128)))
 (let (($x48 (and $x129 $x31)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x49 (and $x93 $x48)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x67 (and $x92 $x49)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x113 (and $x12 $x67)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x24 (and $x44 $x113)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x16 (and $x58 $x24)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x86 (and $x7 $x16)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x82 (and $x21 $x86)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x54 (and $x37 $x82)))
 (let (($x81 (=> $x54 $x47)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x79 (= $x99 true)))
 (let (($x111 (= $x79 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x87 (concat ?x65 (concat ?x45 ?x38)))))
 (let (($x73 (= input.dst.llvm-%n ?x68)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x42)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x72 $x47)))
 (let (($x133 (and $x81 $x132)))
 (let (($x54 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and (and (and $x86 $x54) $x133) $x73)))
 (let (($x28 (= $x51 true)))
 (let (($x60 (= $x28 true)))
 (let (($x88 (= $x60 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (and $x113 $x88)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x100 (and $x48 $x96)))
 (let (($x8 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x17 (_ bv1 32))))
 (=> $x10 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x135 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x17 (_ bv1 32))))
 (= $x10 $x131))))))
 ))
 (let (($x25 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x15 (= false false)))
 (let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x17 (_ bv0 32))))
 (=> $x20 $x15)))))
 ))
 (let (($x139 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x127 (_ bv0 32))))
 (let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x17 (_ bv0 32))))
 (= $x20 $x136))))))
 ))
 (let (($x115 (and $x139 $x25)))
 (let (($x14 (and $x115 $x135)))
 (let (($x41 (and $x14 $x8)))
 (let (($x101 (and $x41 $x100)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x102 (and $x93 $x101)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x118 (and $x92 $x102)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x69 (and $x12 $x118)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x83 (and $x44 $x69)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x43 (and $x58 $x83)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x39 (and $x7 $x43)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x114 (and $x21 $x39)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x98 (and $x37 $x114)))
 (let (($x95 (=> $x98 $x111)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x79 (= $x99 true)))
 (let (($x111 (= $x79 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x87 (concat ?x65 (concat ?x45 ?x38)))))
 (let (($x73 (= input.dst.llvm-%n ?x68)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x42)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x72 $x47)))
 (let (($x133 (and $x81 $x132)))
 (let (($x54 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and (and (and $x86 $x54) $x133) $x73)))
 (let (($x28 (= $x51 true)))
 (let (($x60 (= $x28 true)))
 (let (($x88 (= $x60 true)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (and $x113 $x88)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x100 (and $x48 $x96)))
 (let (($x8 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x17 (_ bv1 32))))
 (=> $x10 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x135 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x127 (_ bv1 32))))
 (let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x17 (_ bv1 32))))
 (= $x10 $x131))))))
 ))
 (let (($x25 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x15 (= false false)))
 (let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x17 (_ bv0 32))))
 (=> $x20 $x15)))))
 ))
 (let (($x139 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x127 (_ bv0 32))))
 (let ((?x17 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x17 (_ bv0 32))))
 (= $x20 $x136))))))
 ))
 (let (($x115 (and $x139 $x25)))
 (let (($x14 (and $x115 $x135)))
 (let (($x41 (and $x14 $x8)))
 (let (($x101 (and $x41 $x100)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x102 (and $x93 $x101)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x118 (and $x92 $x102)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x69 (and $x12 $x118)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x83 (and $x44 $x69)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x43 (and $x58 $x83)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x39 (and $x7 $x43)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x114 (and $x21 $x39)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x98 (and $x37 $x114)))
 (let (($x95 (=> $x98 $x111)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x203 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (= $x203 false)))
 (let (($x205 (= $x204 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x43)))
 (let (($x188 (= ?x39 input.dst.llvm-%n)))
 (let (($x189 (= $x188 true)))
 (let (($x190 (= $x189 true)))
 (let (($x183 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x184 (= $x183 true)))
 (let (($x185 (= $x184 true)))
 (let (($x178 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x179 (= $x178 true)))
 (let (($x180 (= $x179 true)))
 (let (($x181 (= $x180 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let (($x168 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x164 (= $x163 true)))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x158 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x150)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x145 $x148)))
 (let (($x152 (and $x149 $x151)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x78 $x152)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x125 true)))
 (let (($x138 (= $x137 true)))
 (let (($x134 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x26 (= $x134 true)))
 (let (($x5 (= $x26 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x109 (= $x76 true)))
 (let (($x110 (= $x109 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x71 (= $x46 true)))
 (let (($x128 (= $x71 true)))
 (let (($x126 (= $x128 true)))
 (let (($x122 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x121 (= $x122 true)))
 (let (($x119 (= $x121 true)))
 (let (($x120 (= $x119 true)))
 (let (($x94 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x116 (= $x94 true)))
 (let (($x124 (= $x116 true)))
 (let (($x103 (= $x124 true)))
 (let (($x104 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x106 (= $x104 true)))
 (let (($x107 (= $x106 true)))
 (let (($x66 (= $x107 true)))
 (let (($x111 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x95 (= $x111 true)))
 (let (($x97 (= $x95 true)))
 (let (($x62 (= $x97 true)))
 (let (($x114 (= ?x39 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (= $x114 true)))
 (let (($x99 (= $x98 true)))
 (let (($x63 (and $x99 $x62)))
 (let (($x29 (and $x63 $x66)))
 (let (($x123 (and $x29 $x103)))
 (let (($x52 (and $x123 $x120)))
 (let (($x129 (and $x52 $x126)))
 (let (($x22 (and $x129 $x143)))
 (let (($x11 (and $x22 $x110)))
 (let (($x117 (and $x11 $x5)))
 (let (($x108 (and $x117 $x138)))
 (let (($x157 (and $x108 $x156)))
 (let (($x161 (and $x157 $x160)))
 (let (($x167 (and $x161 $x166)))
 (let (($x172 (and $x167 $x171)))
 (let (($x177 (and $x172 $x176)))
 (let (($x182 (and $x177 $x181)))
 (let (($x186 (and $x182 $x185)))
 (let (($x191 (and $x186 $x190)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x192 (and $x69 $x191)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x193 (and $x101 $x192)))
 (let (($x88 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x86 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x6 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x6 (_ bv1 32))))
 (let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x86 (_ bv1 32))))
 (= $x50 $x61))))))
 ))
 (let (($x18 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x86 (_ bv0 32))))
 (=> $x82 $x55)))))
 ))
 (let (($x74 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x6 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x6 (_ bv0 32))))
 (let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x86 (_ bv0 32))))
 (= $x82 $x31))))))
 ))
 (let (($x47 (and $x74 $x18)))
 (let (($x56 (and $x47 $x65)))
 (let (($x96 (and $x56 $x88)))
 (let (($x194 (and $x96 $x193)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x195 (and $x93 $x194)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x196 (and $x92 $x195)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x197 (and $x12 $x196)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x198 (and $x44 $x197)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x199 (and $x19 $x198)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x200 (and $x37 $x199)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x201 (and $x9 $x200)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x202 (and $x23 $x201)))
 (let (($x206 (=> $x202 $x205)))
 (not $x206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x203 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (= $x203 false)))
 (let (($x205 (= $x204 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x43)))
 (let (($x188 (= ?x39 input.dst.llvm-%n)))
 (let (($x189 (= $x188 true)))
 (let (($x190 (= $x189 true)))
 (let (($x183 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x184 (= $x183 true)))
 (let (($x185 (= $x184 true)))
 (let (($x178 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x179 (= $x178 true)))
 (let (($x180 (= $x179 true)))
 (let (($x181 (= $x180 true)))
 (let (($x173 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x174 (= $x173 true)))
 (let (($x175 (= $x174 true)))
 (let (($x176 (= $x175 true)))
 (let (($x168 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x171 (= $x170 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x164 (= $x163 true)))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x158 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x150)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x145 $x148)))
 (let (($x152 (and $x149 $x151)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x78 $x152)))
 (let (($x154 (= $x153 true)))
 (let (($x155 (= $x154 true)))
 (let (($x156 (= $x155 true)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x137 (= $x125 true)))
 (let (($x138 (= $x137 true)))
 (let (($x134 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x26 (= $x134 true)))
 (let (($x5 (= $x26 true)))
 (let (($x75 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x76 (= $x75 true)))
 (let (($x109 (= $x76 true)))
 (let (($x110 (= $x109 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x71 (= $x46 true)))
 (let (($x128 (= $x71 true)))
 (let (($x126 (= $x128 true)))
 (let (($x122 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x121 (= $x122 true)))
 (let (($x119 (= $x121 true)))
 (let (($x120 (= $x119 true)))
 (let (($x94 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x116 (= $x94 true)))
 (let (($x124 (= $x116 true)))
 (let (($x103 (= $x124 true)))
 (let (($x104 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x106 (= $x104 true)))
 (let (($x107 (= $x106 true)))
 (let (($x66 (= $x107 true)))
 (let (($x111 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x95 (= $x111 true)))
 (let (($x97 (= $x95 true)))
 (let (($x62 (= $x97 true)))
 (let (($x114 (= ?x39 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x98 (= $x114 true)))
 (let (($x99 (= $x98 true)))
 (let (($x63 (and $x99 $x62)))
 (let (($x29 (and $x63 $x66)))
 (let (($x123 (and $x29 $x103)))
 (let (($x52 (and $x123 $x120)))
 (let (($x129 (and $x52 $x126)))
 (let (($x22 (and $x129 $x143)))
 (let (($x11 (and $x22 $x110)))
 (let (($x117 (and $x11 $x5)))
 (let (($x108 (and $x117 $x138)))
 (let (($x157 (and $x108 $x156)))
 (let (($x161 (and $x157 $x160)))
 (let (($x167 (and $x161 $x166)))
 (let (($x172 (and $x167 $x171)))
 (let (($x177 (and $x172 $x176)))
 (let (($x182 (and $x177 $x181)))
 (let (($x186 (and $x182 $x185)))
 (let (($x191 (and $x186 $x190)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x192 (and $x69 $x191)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x193 (and $x101 $x192)))
 (let (($x88 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x86 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x6 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x6 (_ bv1 32))))
 (let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x86 (_ bv1 32))))
 (= $x50 $x61))))))
 ))
 (let (($x18 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x86 (_ bv0 32))))
 (=> $x82 $x55)))))
 ))
 (let (($x74 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x6 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x6 (_ bv0 32))))
 (let ((?x86 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x86 (_ bv0 32))))
 (= $x82 $x31))))))
 ))
 (let (($x47 (and $x74 $x18)))
 (let (($x56 (and $x47 $x65)))
 (let (($x96 (and $x56 $x88)))
 (let (($x194 (and $x96 $x193)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x195 (and $x93 $x194)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x196 (and $x92 $x195)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x197 (and $x12 $x196)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x198 (and $x44 $x197)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x199 (and $x19 $x198)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x200 (and $x37 $x199)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x201 (and $x9 $x200)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x202 (and $x23 $x201)))
 (let (($x206 (=> $x202 $x205)))
 (not $x206)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000014)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000017)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x262 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (or (bvuge ?x262 (_ bv1 32)) (= ?x262 (_ bv0 32)))))
 (let (($x274 (and $x250 (bvuge ?x270 (_ bv1 32)))))
 (let (($x254 (and (= ?x270 (_ bv0 32)) $x250)))
 (let (($x278 (or $x254 $x274)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x280 (and (not $x20) $x278)))
 (let (($x40 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (not $x40)))
 (let (($x281 (or $x17 $x280)))
 (let (($x283 (= $x281 true)))
 (let (($x284 (= $x283 true)))
 (let ((?x190 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x190)))
 (let (($x193 (= ?x191 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x194 (= $x193 true)))
 (let (($x195 (= $x194 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x179)))
 (let (($x186 (= ?x180 input.dst.llvm-%n)))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x181 (= ?x180 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let ((?x173 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x173)))
 (let (($x175 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x167 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x168 (= $x167 true)))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x162 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x163 (= $x162 true)))
 (let (($x164 (= $x163 true)))
 (let (($x165 (= $x164 true)))
 (let (($x156 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x150 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x145 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x125)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x134 $x117)))
 (let (($x138 (and $x27 $x137)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x110 $x138)))
 (let (($x105 (= $x108 true)))
 (let (($x77 (= $x105 true)))
 (let (($x78 (= $x77 true)))
 (let (($x149 (and $x78 $x148)))
 (let (($x154 (and $x149 $x153)))
 (let (($x160 (and $x154 $x159)))
 (let (($x166 (and $x160 $x165)))
 (let (($x171 (and $x166 $x170)))
 (let (($x178 (and $x171 $x177)))
 (let (($x184 (and $x178 $x183)))
 (let (($x189 (and $x184 $x188)))
 (let (($x196 (and $x189 $x195)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x197 (and $x75 $x196)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x198 (and $x142 $x197)))
 (let (($x129 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x39 (_ bv1 32))))
 (=> $x124 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x123 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x60 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x60 (_ bv1 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x39 (_ bv1 32))))
 (= $x124 $x29))))))
 ))
 (let (($x97 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x39 (_ bv0 32))))
 (=> $x114 $x79)))))
 ))
 (let (($x99 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x60 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x60 (_ bv0 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x39 (_ bv0 32))))
 (= $x114 $x100))))))
 ))
 (let (($x62 (and $x99 $x97)))
 (let (($x90 (and $x62 $x123)))
 (let (($x140 (and $x90 $x129)))
 (let (($x199 (and $x140 $x198)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x200 (and $x9 $x199)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x201 (and $x92 $x200)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x202 (and $x91 $x201)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x203 (and $x53 $x202)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x204 (and $x23 $x203)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x205 (and $x12 $x204)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x206 (and $x93 $x205)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x207 (and $x44 $x206)))
 (let (($x285 (=> $x207 $x284)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x262 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (or (bvuge ?x262 (_ bv1 32)) (= ?x262 (_ bv0 32)))))
 (let (($x274 (and $x250 (bvuge ?x270 (_ bv1 32)))))
 (let (($x254 (and (= ?x270 (_ bv0 32)) $x250)))
 (let (($x278 (or $x254 $x274)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x280 (and (not $x20) $x278)))
 (let (($x40 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (not $x40)))
 (let (($x281 (or $x17 $x280)))
 (let (($x283 (= $x281 true)))
 (let (($x284 (= $x283 true)))
 (let ((?x190 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x190)))
 (let (($x193 (= ?x191 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x194 (= $x193 true)))
 (let (($x195 (= $x194 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x179)))
 (let (($x186 (= ?x180 input.dst.llvm-%n)))
 (let (($x187 (= $x186 true)))
 (let (($x188 (= $x187 true)))
 (let (($x181 (= ?x180 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x182 (= $x181 true)))
 (let (($x183 (= $x182 true)))
 (let ((?x173 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x173)))
 (let (($x175 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x176 (= $x175 true)))
 (let (($x177 (= $x176 true)))
 (let (($x167 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x168 (= $x167 true)))
 (let (($x169 (= $x168 true)))
 (let (($x170 (= $x169 true)))
 (let (($x162 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x163 (= $x162 true)))
 (let (($x164 (= $x163 true)))
 (let (($x165 (= $x164 true)))
 (let (($x156 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x150 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x151 (= $x150 true)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x145 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x148 (= $x147 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x125)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x134 $x117)))
 (let (($x138 (and $x27 $x137)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x110 $x138)))
 (let (($x105 (= $x108 true)))
 (let (($x77 (= $x105 true)))
 (let (($x78 (= $x77 true)))
 (let (($x149 (and $x78 $x148)))
 (let (($x154 (and $x149 $x153)))
 (let (($x160 (and $x154 $x159)))
 (let (($x166 (and $x160 $x165)))
 (let (($x171 (and $x166 $x170)))
 (let (($x178 (and $x171 $x177)))
 (let (($x184 (and $x178 $x183)))
 (let (($x189 (and $x184 $x188)))
 (let (($x196 (and $x189 $x195)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x197 (and $x75 $x196)))
 (let (($x142 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x198 (and $x142 $x197)))
 (let (($x129 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x39 (_ bv1 32))))
 (=> $x124 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x123 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x60 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x60 (_ bv1 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x39 (_ bv1 32))))
 (= $x124 $x29))))))
 ))
 (let (($x97 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x79 (= false false)))
 (let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x39 (_ bv0 32))))
 (=> $x114 $x79)))))
 ))
 (let (($x99 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x60 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x60 (_ bv0 32))))
 (let ((?x39 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x39 (_ bv0 32))))
 (= $x114 $x100))))))
 ))
 (let (($x62 (and $x99 $x97)))
 (let (($x90 (and $x62 $x123)))
 (let (($x140 (and $x90 $x129)))
 (let (($x199 (and $x140 $x198)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x200 (and $x9 $x199)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x201 (and $x92 $x200)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x202 (and $x91 $x201)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x203 (and $x53 $x202)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x204 (and $x23 $x203)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x205 (and $x12 $x204)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x206 (and $x93 $x205)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x207 (and $x44 $x206)))
 (let (($x285 (=> $x207 $x284)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 146 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x80 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x273 (ite $x80 ?x175 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x265 (bvmul (_ bv4294967295 32) ?x273)))
 (let ((?x275 (bvneg ?x265)))
 (let (($x255 (= ?x275 ?x276)))
 (let (($x287 (= $x255 true)))
 (let ((?x232 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x232)))
 (let (($x243 (= ?x236 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x243 true)))
 (let (($x221 (= $x244 true)))
 (let ((?x228 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x228)))
 (let (($x229 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x229 true)))
 (let (($x223 (= $x230 true)))
 (let (($x115 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x233 (= $x115 true)))
 (let (($x241 (= $x233 true)))
 (let (($x237 (= $x241 true)))
 (let (($x8 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x214 (= $x8 true)))
 (let (($x215 (= $x214 true)))
 (let (($x216 (= $x215 true)))
 (let (($x52 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x46 (= $x52 true)))
 (let (($x15 (= $x46 true)))
 (let (($x81 (= $x15 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x122 (= $x116 true)))
 (let (($x121 (= $x122 true)))
 (let (($x119 (= $x121 true)))
 (let (($x104 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x104 true)))
 (let (($x107 (= $x106 true)))
 (let (($x66 (= $x107 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x102 true)))
 (let (($x69 (= $x118 true)))
 (let (($x111 (= $x69 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x85)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x19 $x54)))
 (let (($x47 (and $x74 $x18)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x219 $x47)))
 (let (($x61 (= $x50 true)))
 (let (($x88 (= $x61 true)))
 (let (($x28 (= $x88 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x64)))
 (let (($x68 (= ?x213 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (= $x68 true)))
 (let (($x73 (= $x10 true)))
 (let (($x133 (= ?x213 input.dst.llvm-%n)))
 (let (($x72 (= $x133 true)))
 (let (($x36 (= $x72 true)))
 (let (($x208 (and $x36 $x73)))
 (let (($x96 (and $x208 $x28)))
 (let (($x63 (and $x96 $x111)))
 (let (($x94 (and $x63 $x66)))
 (let (($x120 (and $x94 $x119)))
 (let (($x42 (and $x120 $x81)))
 (let (($x211 (and $x42 $x216)))
 (let (($x210 (and $x211 $x237)))
 (let (($x231 (and $x210 $x223)))
 (let (($x226 (and $x231 $x221)))
 (let ((?x37 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (or (bvuge ?x37 (_ bv1 32)) (= ?x37 (_ bv0 32)))))
 (let (($x139 (and $x264 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x80) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x168 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and (not $x168) $x139)))
 (let (($x227 (and $x87 $x226)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x225 (and $x166 $x227)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x238 (and $x163 $x225)))
 (let (($x160 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x110 (_ bv1 32))))
 (=> $x147 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x149 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x126 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x126 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x110 (_ bv1 32))))
 (= $x147 $x144))))))
 ))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x5 (= false false)))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x110 (_ bv0 32))))
 (=> $x11 $x5)))))
 ))
 (let (($x26 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x126 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x126 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x110 (_ bv0 32))))
 (= $x11 $x141))))))
 ))
 (let (($x137 (and $x26 $x125)))
 (let (($x150 (and $x137 $x149)))
 (let (($x161 (and $x150 $x160)))
 (let (($x239 (and $x161 $x238)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x240 (and $x9 $x239)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x235 (and $x92 $x240)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x222 (and $x91 $x235)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x245 (and $x53 $x222)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x247 (and $x23 $x245)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x248 (and $x12 $x247)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x246 (and $x93 $x248)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x251 (and $x7 $x246)))
 (let (($x288 (=> $x251 $x287)))
 (not $x288)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x80 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x273 (ite $x80 ?x175 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x265 (bvmul (_ bv4294967295 32) ?x273)))
 (let ((?x275 (bvneg ?x265)))
 (let (($x255 (= ?x275 ?x276)))
 (let (($x287 (= $x255 true)))
 (let ((?x232 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x232)))
 (let (($x243 (= ?x236 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x243 true)))
 (let (($x221 (= $x244 true)))
 (let ((?x228 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x228)))
 (let (($x229 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x229 true)))
 (let (($x223 (= $x230 true)))
 (let (($x115 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x233 (= $x115 true)))
 (let (($x241 (= $x233 true)))
 (let (($x237 (= $x241 true)))
 (let (($x8 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x214 (= $x8 true)))
 (let (($x215 (= $x214 true)))
 (let (($x216 (= $x215 true)))
 (let (($x52 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x46 (= $x52 true)))
 (let (($x15 (= $x46 true)))
 (let (($x81 (= $x15 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x122 (= $x116 true)))
 (let (($x121 (= $x122 true)))
 (let (($x119 (= $x121 true)))
 (let (($x104 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x106 (= $x104 true)))
 (let (($x107 (= $x106 true)))
 (let (($x66 (= $x107 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x102 true)))
 (let (($x69 (= $x118 true)))
 (let (($x111 (= $x69 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x85)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x19 $x54)))
 (let (($x47 (and $x74 $x18)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x219 $x47)))
 (let (($x61 (= $x50 true)))
 (let (($x88 (= $x61 true)))
 (let (($x28 (= $x88 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x64)))
 (let (($x68 (= ?x213 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x10 (= $x68 true)))
 (let (($x73 (= $x10 true)))
 (let (($x133 (= ?x213 input.dst.llvm-%n)))
 (let (($x72 (= $x133 true)))
 (let (($x36 (= $x72 true)))
 (let (($x208 (and $x36 $x73)))
 (let (($x96 (and $x208 $x28)))
 (let (($x63 (and $x96 $x111)))
 (let (($x94 (and $x63 $x66)))
 (let (($x120 (and $x94 $x119)))
 (let (($x42 (and $x120 $x81)))
 (let (($x211 (and $x42 $x216)))
 (let (($x210 (and $x211 $x237)))
 (let (($x231 (and $x210 $x223)))
 (let (($x226 (and $x231 $x221)))
 (let ((?x37 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x264 (or (bvuge ?x37 (_ bv1 32)) (= ?x37 (_ bv0 32)))))
 (let (($x139 (and $x264 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x80) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x168 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x87 (and (not $x168) $x139)))
 (let (($x227 (and $x87 $x226)))
 (let (($x166 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x225 (and $x166 $x227)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x238 (and $x163 $x225)))
 (let (($x160 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x110 (_ bv1 32))))
 (=> $x147 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x149 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x126 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x126 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x110 (_ bv1 32))))
 (= $x147 $x144))))))
 ))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x5 (= false false)))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x110 (_ bv0 32))))
 (=> $x11 $x5)))))
 ))
 (let (($x26 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x126 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x126 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x110 (_ bv0 32))))
 (= $x11 $x141))))))
 ))
 (let (($x137 (and $x26 $x125)))
 (let (($x150 (and $x137 $x149)))
 (let (($x161 (and $x150 $x160)))
 (let (($x239 (and $x161 $x238)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x240 (and $x9 $x239)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x235 (and $x92 $x240)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x222 (and $x91 $x235)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x245 (and $x53 $x222)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x247 (and $x23 $x245)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x248 (and $x12 $x247)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x246 (and $x93 $x248)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x251 (and $x7 $x246)))
 (let (($x288 (=> $x251 $x287)))
 (not $x288)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 152 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x278 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= (_ bv0 32) ?x278)))
 (let (($x56 (= $x65 true)))
 (let ((?x180 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x180)))
 (let (($x194 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x194 true)))
 (let (($x267 (= $x185 true)))
 (let (($x206 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x20 (= $x206 true)))
 (let (($x270 (= $x20 true)))
 (let (($x271 (= $x270 true)))
 (let (($x192 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x203 (= $x192 true)))
 (let (($x204 (= $x203 true)))
 (let (($x183 (= $x204 true)))
 (let (($x207 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x207 true)))
 (let (($x279 (= $x269 true)))
 (let (($x181 (= $x279 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x78)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x117 $x105)))
 (let (($x146 (and $x77 $x145)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x22 $x146)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x29 (= $x124 true)))
 (let (($x129 (= $x29 true)))
 (let (($x128 (= $x129 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x99 (= $x98 true)))
 (let (($x95 (= $x99 true)))
 (let (($x97 (= $x95 true)))
 (let (($x49 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x49 true)))
 (let (($x83 (= $x67 true)))
 (let (($x79 (= $x83 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x13)))
 (let (($x135 (= ?x274 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x112 (= $x135 true)))
 (let (($x30 (= $x112 true)))
 (let (($x6 (= ?x274 input.dst.llvm-%n)))
 (let (($x127 (= $x6 true)))
 (let (($x14 (= $x127 true)))
 (let ((?x189 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x189)))
 (let (($x202 (= ?x200 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x202 true)))
 (let (($x34 (= $x35 true)))
 (let (($x281 (and $x34 $x14)))
 (let (($x48 (and $x281 $x30)))
 (let (($x100 (and $x48 $x79)))
 (let (($x62 (and $x100 $x97)))
 (let (($x140 (and $x62 $x128)))
 (let (($x155 (and $x140 $x154)))
 (let (($x196 (and $x155 $x181)))
 (let (($x205 (and $x196 $x183)))
 (let (($x259 (and $x205 $x271)))
 (let (($x268 (and $x259 $x267)))
 (let ((?x184 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (or (bvuge ?x184 (_ bv1 32)) (= ?x184 (_ bv0 32)))))
 (let (($x197 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x171 (and $x197 $x123)))
 (let (($x18 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x174 (and (not $x18) $x171)))
 (let (($x266 (and $x174 $x268)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (and $x74 $x266)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x182 (and $x55 $x17)))
 (let (($x219 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x113 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x159 (_ bv1 32))))
 (let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x113 (_ bv1 32))))
 (= $x132 $x217))))))
 ))
 (let (($x82 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x286 (= false false)))
 (let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x113 (_ bv0 32))))
 (=> $x284 $x286)))))
 ))
 (let (($x283 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x159 (_ bv0 32))))
 (let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x113 (_ bv0 32))))
 (= $x284 $x162))))))
 ))
 (let (($x264 (and $x283 $x82)))
 (let (($x25 (and $x264 $x213)))
 (let (($x220 (and $x25 $x219)))
 (let (($x260 (and $x220 $x182)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x261 (and $x9 $x260)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x262 (and $x92 $x261)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x258 (and $x91 $x262)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x250 (and $x53 $x258)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x254 (and $x23 $x250)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x282 (and $x12 $x254)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x263 (and $x93 $x282)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x40 (and $x7 $x263)))
 (let (($x57 (=> $x40 $x56)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x278 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= (_ bv0 32) ?x278)))
 (let (($x56 (= $x65 true)))
 (let ((?x180 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x180)))
 (let (($x194 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x194 true)))
 (let (($x267 (= $x185 true)))
 (let (($x206 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x20 (= $x206 true)))
 (let (($x270 (= $x20 true)))
 (let (($x271 (= $x270 true)))
 (let (($x192 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x203 (= $x192 true)))
 (let (($x204 (= $x203 true)))
 (let (($x183 (= $x204 true)))
 (let (($x207 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x207 true)))
 (let (($x279 (= $x269 true)))
 (let (($x181 (= $x279 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x78)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x117 $x105)))
 (let (($x146 (and $x77 $x145)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x22 $x146)))
 (let (($x152 (= $x151 true)))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x29 (= $x124 true)))
 (let (($x129 (= $x29 true)))
 (let (($x128 (= $x129 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x99 (= $x98 true)))
 (let (($x95 (= $x99 true)))
 (let (($x97 (= $x95 true)))
 (let (($x49 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x49 true)))
 (let (($x83 (= $x67 true)))
 (let (($x79 (= $x83 true)))
 (let ((?x13 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x13)))
 (let (($x135 (= ?x274 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x112 (= $x135 true)))
 (let (($x30 (= $x112 true)))
 (let (($x6 (= ?x274 input.dst.llvm-%n)))
 (let (($x127 (= $x6 true)))
 (let (($x14 (= $x127 true)))
 (let ((?x189 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x189)))
 (let (($x202 (= ?x200 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x202 true)))
 (let (($x34 (= $x35 true)))
 (let (($x281 (and $x34 $x14)))
 (let (($x48 (and $x281 $x30)))
 (let (($x100 (and $x48 $x79)))
 (let (($x62 (and $x100 $x97)))
 (let (($x140 (and $x62 $x128)))
 (let (($x155 (and $x140 $x154)))
 (let (($x196 (and $x155 $x181)))
 (let (($x205 (and $x196 $x183)))
 (let (($x259 (and $x205 $x271)))
 (let (($x268 (and $x259 $x267)))
 (let ((?x184 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (or (bvuge ?x184 (_ bv1 32)) (= ?x184 (_ bv0 32)))))
 (let (($x197 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x171 (and $x197 $x123)))
 (let (($x18 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x174 (and (not $x18) $x171)))
 (let (($x266 (and $x174 $x268)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (and $x74 $x266)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x182 (and $x55 $x17)))
 (let (($x219 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x113 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x213 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x159 (_ bv1 32))))
 (let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x113 (_ bv1 32))))
 (= $x132 $x217))))))
 ))
 (let (($x82 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x286 (= false false)))
 (let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x113 (_ bv0 32))))
 (=> $x284 $x286)))))
 ))
 (let (($x283 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x159 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x159 (_ bv0 32))))
 (let ((?x113 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x113 (_ bv0 32))))
 (= $x284 $x162))))))
 ))
 (let (($x264 (and $x283 $x82)))
 (let (($x25 (and $x264 $x213)))
 (let (($x220 (and $x25 $x219)))
 (let (($x260 (and $x220 $x182)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x261 (and $x9 $x260)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x262 (and $x92 $x261)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x258 (and $x91 $x262)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x250 (and $x53 $x258)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x254 (and $x23 $x250)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x282 (and $x12 $x254)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x263 (and $x93 $x282)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x40 (and $x7 $x263)))
 (let (($x57 (=> $x40 $x56)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 148 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x272 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x111 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x234 (ite $x111 ?x62 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x131 (bvmul (_ bv4294967295 32) ?x234)))
 (let ((?x249 (bvneg ?x131)))
 (let (($x256 (= ?x249 ?x272)))
 (let (($x257 (= $x256 true)))
 (let ((?x246 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x246)))
 (let (($x288 (= ?x277 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x288 true)))
 (let (($x226 (= $x289 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x222)))
 (let (($x245 (= ?x238 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x245 true)))
 (let (($x225 (= $x247 true)))
 (let (($x106 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x251 (= $x106 true)))
 (let (($x255 (= $x251 true)))
 (let (($x273 (= $x255 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x231 (= $x94 true)))
 (let (($x232 (= $x231 true)))
 (let (($x236 (= $x232 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x73 (= $x10 true)))
 (let (($x63 (= $x73 true)))
 (let (($x46 (= $x63 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x87 true)))
 (let (($x72 (= $x133 true)))
 (let (($x36 (= $x72 true)))
 (let (($x38 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x80 (= $x38 true)))
 (let (($x59 (= $x80 true)))
 (let (($x209 (= $x59 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x37 (= $x166 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x27)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x76 $x134)))
 (let (($x137 (and $x26 $x125)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x244 $x137)))
 (let (($x144 (= $x147 true)))
 (let (($x160 (= $x144 true)))
 (let (($x158 (= $x160 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x242)))
 (let (($x241 (= ?x223 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x107 (= $x241 true)))
 (let (($x237 (= $x107 true)))
 (let (($x42 (= ?x223 input.dst.llvm-%n)))
 (let (($x52 (= $x42 true)))
 (let (($x233 (= $x52 true)))
 (let (($x210 (and $x233 $x237)))
 (let (($x161 (and $x210 $x158)))
 (let (($x45 (and $x161 $x37)))
 (let (($x139 (and $x45 $x209)))
 (let (($x68 (and $x139 $x36)))
 (let (($x15 (and $x68 $x46)))
 (let (($x229 (and $x15 $x236)))
 (let (($x224 (and $x229 $x273)))
 (let (($x248 (and $x224 $x225)))
 (let (($x240 (and $x248 $x226)))
 (let ((?x102 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x111) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x170 (and $x121 (bvuge ?x102 (_ bv1 32)))))
 (let (($x278 (and (= ?x102 (_ bv0 32)) $x121)))
 (let (($x8 (or $x278 $x170)))
 (let (($x83 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x211 (and (not $x83) $x8)))
 (let (($x235 (and $x211 $x240)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x239 (and $x49 $x235)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x265 (and $x112 $x239)))
 (let (($x14 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x173 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x218 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x218 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x173 (_ bv1 32))))
 (= $x50 $x123))))))
 ))
 (let (($x177 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x195 (= false false)))
 (let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x173 (_ bv0 32))))
 (=> $x191 $x195)))))
 ))
 (let (($x190 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x218 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x218 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x173 (_ bv0 32))))
 (= $x191 $x19))))))
 ))
 (let (($x179 (and $x190 $x177)))
 (let (($x200 (and $x179 $x189)))
 (let (($x281 (and $x200 $x14)))
 (let (($x275 (and $x281 $x265)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x276 (and $x9 $x275)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x169 (and $x92 $x276)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x227 (and $x91 $x169)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x43 (and $x53 $x227)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x114 (and $x23 $x43)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x60 (and $x12 $x114)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x39 (and $x93 $x60)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x90 (and $x44 $x39)))
 (let (($x252 (=> $x90 $x257)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x272 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x111 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x234 (ite $x111 ?x62 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x131 (bvmul (_ bv4294967295 32) ?x234)))
 (let ((?x249 (bvneg ?x131)))
 (let (($x256 (= ?x249 ?x272)))
 (let (($x257 (= $x256 true)))
 (let ((?x246 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x246)))
 (let (($x288 (= ?x277 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x288 true)))
 (let (($x226 (= $x289 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x222)))
 (let (($x245 (= ?x238 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x245 true)))
 (let (($x225 (= $x247 true)))
 (let (($x106 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x251 (= $x106 true)))
 (let (($x255 (= $x251 true)))
 (let (($x273 (= $x255 true)))
 (let (($x94 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x231 (= $x94 true)))
 (let (($x232 (= $x231 true)))
 (let (($x236 (= $x232 true)))
 (let (($x10 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x73 (= $x10 true)))
 (let (($x63 (= $x73 true)))
 (let (($x46 (= $x63 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x87 true)))
 (let (($x72 (= $x133 true)))
 (let (($x36 (= $x72 true)))
 (let (($x38 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x80 (= $x38 true)))
 (let (($x59 (= $x80 true)))
 (let (($x209 (= $x59 true)))
 (let (($x164 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x164 true)))
 (let (($x166 (= $x165 true)))
 (let (($x37 (= $x166 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x27)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x76 $x134)))
 (let (($x137 (and $x26 $x125)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x244 $x137)))
 (let (($x144 (= $x147 true)))
 (let (($x160 (= $x144 true)))
 (let (($x158 (= $x160 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x242)))
 (let (($x241 (= ?x223 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x107 (= $x241 true)))
 (let (($x237 (= $x107 true)))
 (let (($x42 (= ?x223 input.dst.llvm-%n)))
 (let (($x52 (= $x42 true)))
 (let (($x233 (= $x52 true)))
 (let (($x210 (and $x233 $x237)))
 (let (($x161 (and $x210 $x158)))
 (let (($x45 (and $x161 $x37)))
 (let (($x139 (and $x45 $x209)))
 (let (($x68 (and $x139 $x36)))
 (let (($x15 (and $x68 $x46)))
 (let (($x229 (and $x15 $x236)))
 (let (($x224 (and $x229 $x273)))
 (let (($x248 (and $x224 $x225)))
 (let (($x240 (and $x248 $x226)))
 (let ((?x102 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x111) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x170 (and $x121 (bvuge ?x102 (_ bv1 32)))))
 (let (($x278 (and (= ?x102 (_ bv0 32)) $x121)))
 (let (($x8 (or $x278 $x170)))
 (let (($x83 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x211 (and (not $x83) $x8)))
 (let (($x235 (and $x211 $x240)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x239 (and $x49 $x235)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x265 (and $x112 $x239)))
 (let (($x14 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x173 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x189 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x218 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x218 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x173 (_ bv1 32))))
 (= $x50 $x123))))))
 ))
 (let (($x177 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x195 (= false false)))
 (let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x173 (_ bv0 32))))
 (=> $x191 $x195)))))
 ))
 (let (($x190 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x218 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x218 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x173 (_ bv0 32))))
 (= $x191 $x19))))))
 ))
 (let (($x179 (and $x190 $x177)))
 (let (($x200 (and $x179 $x189)))
 (let (($x281 (and $x200 $x14)))
 (let (($x275 (and $x281 $x265)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x276 (and $x9 $x275)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x169 (and $x92 $x276)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x227 (and $x91 $x169)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x43 (and $x53 $x227)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x114 (and $x23 $x43)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x60 (and $x12 $x114)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x39 (and $x93 $x60)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x90 (and $x44 $x39)))
 (let (($x252 (=> $x90 $x257)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= (_ bv0 32) ?x157)))
 (let (($x119 (= $x88 true)))
 (let ((?x182 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x182)))
 (let (($x17 (= ?x250 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x17 true)))
 (let (($x263 (= $x282 true)))
 (let ((?x143 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x143)))
 (let (($x11 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x11 true)))
 (let (($x205 (= $x57 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x271 (= $x117 true)))
 (let (($x259 (= $x271 true)))
 (let (($x180 (= $x259 true)))
 (let (($x13 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x274 (= $x13 true)))
 (let (($x140 (= $x274 true)))
 (let (($x151 (= $x140 true)))
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x174 true)))
 (let (($x202 (= $x201 true)))
 (let (($x35 (= $x202 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x54)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x219 $x55)))
 (let (($x198 (and $x31 $x74)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x132 $x198)))
 (let (($x187 (= $x176 true)))
 (let (($x184 (= $x187 true)))
 (let (($x186 (= $x184 true)))
 (let (($x286 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x162 (= $x286 true)))
 (let (($x285 (= $x162 true)))
 (let (($x283 (= $x285 true)))
 (let (($x20 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x194 (= $x20 true)))
 (let (($x185 (= $x194 true)))
 (let (($x267 (= $x185 true)))
 (let (($x196 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x192 (= $x196 true)))
 (let (($x22 (= $x192 true)))
 (let (($x203 (= $x22 true)))
 (let ((?x155 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x155)))
 (let (($x270 (= ?x269 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x142 (= $x270 true)))
 (let (($x154 (= $x142 true)))
 (let (($x181 (= ?x269 input.dst.llvm-%n)))
 (let (($x183 (= $x181 true)))
 (let (($x193 (= $x183 true)))
 (let (($x146 (and $x193 $x154)))
 (let (($x204 (and $x146 $x203)))
 (let (($x167 (and $x204 $x267)))
 (let (($x86 (and $x167 $x283)))
 (let (($x188 (and $x86 $x186)))
 (let (($x34 (and $x188 $x35)))
 (let (($x152 (and $x34 $x151)))
 (let (($x206 (and $x152 $x180)))
 (let (($x258 (and $x206 $x205)))
 (let (($x56 (and $x258 $x263)))
 (let ((?x208 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x75 (and $x29 (bvuge ?x208 (_ bv1 32)))))
 (let (($x90 (and (= ?x208 (_ bv0 32)) $x29)))
 (let (($x78 (or $x90 $x75)))
 (let (($x27 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x207 (and (not $x27) $x78)))
 (let (($x126 (and $x207 $x56)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x148 (and $x134 $x126)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x149 (and $x76 $x148)))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x216 (_ bv1 32))))
 (=> $x211 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x242 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x127 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x216 (_ bv1 32))))
 (= $x211 $x228))))))
 ))
 (let (($x101 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x216 (_ bv0 32))))
 (=> $x28 $x69)))))
 ))
 (let (($x61 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x127 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x216 (_ bv0 32))))
 (= $x28 $x135))))))
 ))
 (let (($x122 (and $x61 $x101)))
 (let (($x223 (and $x122 $x242)))
 (let (($x244 (and $x223 $x243)))
 (let (($x268 (and $x244 $x149)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x261 (and $x9 $x268)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x262 (and $x92 $x261)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x260 (and $x91 $x262)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x130 (and $x53 $x260)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x109 (and $x23 $x130)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x110 (and $x12 $x109)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x65 (and $x93 $x110)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x266 (and $x44 $x65)))
 (let (($x47 (=> $x266 $x119)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= (_ bv0 32) ?x157)))
 (let (($x119 (= $x88 true)))
 (let ((?x182 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x182)))
 (let (($x17 (= ?x250 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x17 true)))
 (let (($x263 (= $x282 true)))
 (let ((?x143 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x143)))
 (let (($x11 (= ?x40 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x11 true)))
 (let (($x205 (= $x57 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x271 (= $x117 true)))
 (let (($x259 (= $x271 true)))
 (let (($x180 (= $x259 true)))
 (let (($x13 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x274 (= $x13 true)))
 (let (($x140 (= $x274 true)))
 (let (($x151 (= $x140 true)))
 (let (($x174 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x174 true)))
 (let (($x202 (= $x201 true)))
 (let (($x35 (= $x202 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x54)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x219 $x55)))
 (let (($x198 (and $x31 $x74)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x132 $x198)))
 (let (($x187 (= $x176 true)))
 (let (($x184 (= $x187 true)))
 (let (($x186 (= $x184 true)))
 (let (($x286 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x162 (= $x286 true)))
 (let (($x285 (= $x162 true)))
 (let (($x283 (= $x285 true)))
 (let (($x20 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x194 (= $x20 true)))
 (let (($x185 (= $x194 true)))
 (let (($x267 (= $x185 true)))
 (let (($x196 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x192 (= $x196 true)))
 (let (($x22 (= $x192 true)))
 (let (($x203 (= $x22 true)))
 (let ((?x155 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x155)))
 (let (($x270 (= ?x269 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x142 (= $x270 true)))
 (let (($x154 (= $x142 true)))
 (let (($x181 (= ?x269 input.dst.llvm-%n)))
 (let (($x183 (= $x181 true)))
 (let (($x193 (= $x183 true)))
 (let (($x146 (and $x193 $x154)))
 (let (($x204 (and $x146 $x203)))
 (let (($x167 (and $x204 $x267)))
 (let (($x86 (and $x167 $x283)))
 (let (($x188 (and $x86 $x186)))
 (let (($x34 (and $x188 $x35)))
 (let (($x152 (and $x34 $x151)))
 (let (($x206 (and $x152 $x180)))
 (let (($x258 (and $x206 $x205)))
 (let (($x56 (and $x258 $x263)))
 (let ((?x208 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x75 (and $x29 (bvuge ?x208 (_ bv1 32)))))
 (let (($x90 (and (= ?x208 (_ bv0 32)) $x29)))
 (let (($x78 (or $x90 $x75)))
 (let (($x27 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x207 (and (not $x27) $x78)))
 (let (($x126 (and $x207 $x56)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x148 (and $x134 $x126)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x149 (and $x76 $x148)))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x216 (_ bv1 32))))
 (=> $x211 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x242 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x127 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x216 (_ bv1 32))))
 (= $x211 $x228))))))
 ))
 (let (($x101 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x69 (= false false)))
 (let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x216 (_ bv0 32))))
 (=> $x28 $x69)))))
 ))
 (let (($x61 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x127 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x127 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x216 (_ bv0 32))))
 (= $x28 $x135))))))
 ))
 (let (($x122 (and $x61 $x101)))
 (let (($x223 (and $x122 $x242)))
 (let (($x244 (and $x223 $x243)))
 (let (($x268 (and $x244 $x149)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x261 (and $x9 $x268)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x262 (and $x92 $x261)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x260 (and $x91 $x262)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x130 (and $x53 $x260)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x109 (and $x23 $x130)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x110 (and $x12 $x109)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x65 (and $x93 $x110)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x266 (and $x44 $x65)))
 (let (($x47 (=> $x266 $x119)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 149 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x82 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x63 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x136 (ite $x63 ?x82 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x290 (bvuge ?x136 (_ bv1 32))))
 (let (($x120 (= $x290 true)))
 (let (($x150 (= $x120 true)))
 (let ((?x235 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x235)))
 (let (($x79 (= ?x114 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x79 true)))
 (let (($x257 (= $x256 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x253)))
 (let (($x169 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x169 true)))
 (let (($x227 (= $x239 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x238 (= $x246 true)))
 (let (($x38 (= $x238 true)))
 (let (($x39 (= $x38 true)))
 (let (($x10 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x73 (= $x10 true)))
 (let (($x209 (= $x73 true)))
 (let (($x225 (= $x209 true)))
 (let (($x52 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x233 (= $x52 true)))
 (let (($x241 (= $x233 true)))
 (let (($x107 (= $x241 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x66)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x30 $x102)))
 (let (($x121 (and $x111 $x116)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x278 (and $x281 $x121)))
 (let (($x170 (= $x278 true)))
 (let (($x8 (= $x170 true)))
 (let (($x104 (= $x8 true)))
 (let (($x197 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x197 true)))
 (let (($x179 (= $x177 true)))
 (let (($x50 (= $x179 true)))
 (let (($x85 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x195 (= $x85 true)))
 (let (($x19 (= $x195 true)))
 (let (($x199 (= $x19 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x100)))
 (let (($x245 (= ?x106 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x287 (= $x245 true)))
 (let (($x288 (= $x287 true)))
 (let (($x251 (= ?x106 input.dst.llvm-%n)))
 (let (($x80 (= $x251 true)))
 (let (($x255 (= $x80 true)))
 (let (($x224 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x224 true)))
 (let (($x247 (= $x277 true)))
 (let (($x45 (= $x247 true)))
 (let (($x273 (and $x45 $x255)))
 (let (($x289 (and $x273 $x288)))
 (let (($x190 (and $x289 $x199)))
 (let (($x123 (and $x190 $x50)))
 (let (($x42 (and $x123 $x104)))
 (let (($x37 (and $x42 $x107)))
 (let (($x248 (and $x37 $x225)))
 (let (($x272 (and $x248 $x39)))
 (let (($x43 (and $x272 $x227)))
 (let (($x252 (and $x43 $x257)))
 (let ((?x47 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (or (bvuge ?x47 (_ bv1 32)) (= ?x47 (_ bv0 32)))))
 (let (($x160 (and $x268 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x63) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x267 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x36 (and (not $x267) $x160)))
 (let (($x226 (and $x36 $x252)))
 (let (($x194 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x275 (and $x194 $x226)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x276 (and $x203 $x275)))
 (let (($x196 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x145 (_ bv1 32))))
 (=> $x207 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x230 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x230 (_ bv1 32))))
 (let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x145 (_ bv1 32))))
 (= $x207 $x156))))))
 ))
 (let (($x95 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x25 (= false false)))
 (let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x145 (_ bv0 32))))
 (=> $x64 $x25)))))
 ))
 (let (($x159 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x230 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x230 (_ bv0 32))))
 (let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x145 (_ bv0 32))))
 (= $x64 $x221))))))
 ))
 (let (($x97 (and $x159 $x95)))
 (let (($x269 (and $x97 $x155)))
 (let (($x192 (and $x269 $x196)))
 (let (($x265 (and $x192 $x276)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x234 (and $x9 $x265)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x131 (and $x92 $x234)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x249 (and $x91 $x131)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x62 (and $x53 $x249)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x240 (and $x23 $x62)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x168 (and $x12 $x240)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x284 (and $x93 $x168)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x128 (and $x44 $x284)))
 (let (($x172 (=> $x128 $x150)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x82 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x63 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x136 (ite $x63 ?x82 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x290 (bvuge ?x136 (_ bv1 32))))
 (let (($x120 (= $x290 true)))
 (let (($x150 (= $x120 true)))
 (let ((?x235 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x235)))
 (let (($x79 (= ?x114 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x256 (= $x79 true)))
 (let (($x257 (= $x256 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x253)))
 (let (($x169 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x169 true)))
 (let (($x227 (= $x239 true)))
 (let (($x246 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x238 (= $x246 true)))
 (let (($x38 (= $x238 true)))
 (let (($x39 (= $x38 true)))
 (let (($x10 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x73 (= $x10 true)))
 (let (($x209 (= $x73 true)))
 (let (($x225 (= $x209 true)))
 (let (($x52 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x233 (= $x52 true)))
 (let (($x241 (= $x233 true)))
 (let (($x107 (= $x241 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x66)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x30 $x102)))
 (let (($x121 (and $x111 $x116)))
 (let (($x281 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x278 (and $x281 $x121)))
 (let (($x170 (= $x278 true)))
 (let (($x8 (= $x170 true)))
 (let (($x104 (= $x8 true)))
 (let (($x197 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x177 (= $x197 true)))
 (let (($x179 (= $x177 true)))
 (let (($x50 (= $x179 true)))
 (let (($x85 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x195 (= $x85 true)))
 (let (($x19 (= $x195 true)))
 (let (($x199 (= $x19 true)))
 (let ((?x100 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x100)))
 (let (($x245 (= ?x106 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x287 (= $x245 true)))
 (let (($x288 (= $x287 true)))
 (let (($x251 (= ?x106 input.dst.llvm-%n)))
 (let (($x80 (= $x251 true)))
 (let (($x255 (= $x80 true)))
 (let (($x224 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x224 true)))
 (let (($x247 (= $x277 true)))
 (let (($x45 (= $x247 true)))
 (let (($x273 (and $x45 $x255)))
 (let (($x289 (and $x273 $x288)))
 (let (($x190 (and $x289 $x199)))
 (let (($x123 (and $x190 $x50)))
 (let (($x42 (and $x123 $x104)))
 (let (($x37 (and $x42 $x107)))
 (let (($x248 (and $x37 $x225)))
 (let (($x272 (and $x248 $x39)))
 (let (($x43 (and $x272 $x227)))
 (let (($x252 (and $x43 $x257)))
 (let ((?x47 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (or (bvuge ?x47 (_ bv1 32)) (= ?x47 (_ bv0 32)))))
 (let (($x160 (and $x268 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x63) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x267 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x36 (and (not $x267) $x160)))
 (let (($x226 (and $x36 $x252)))
 (let (($x194 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x275 (and $x194 $x226)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x276 (and $x203 $x275)))
 (let (($x196 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x145 (_ bv1 32))))
 (=> $x207 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x155 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x230 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x230 (_ bv1 32))))
 (let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x145 (_ bv1 32))))
 (= $x207 $x156))))))
 ))
 (let (($x95 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x25 (= false false)))
 (let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x145 (_ bv0 32))))
 (=> $x64 $x25)))))
 ))
 (let (($x159 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x230 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x230 (_ bv0 32))))
 (let ((?x145 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x145 (_ bv0 32))))
 (= $x64 $x221))))))
 ))
 (let (($x97 (and $x159 $x95)))
 (let (($x269 (and $x97 $x155)))
 (let (($x192 (and $x269 $x196)))
 (let (($x265 (and $x192 $x276)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x234 (and $x9 $x265)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x131 (and $x92 $x234)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x249 (and $x91 $x131)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x62 (and $x53 $x249)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x240 (and $x23 $x62)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x168 (and $x12 $x240)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x284 (and $x93 $x168)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x128 (and $x44 $x284)))
 (let (($x172 (=> $x128 $x150)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 150 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (= false true)))
 (let (($x191 (= $x178 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x212)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x254)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x180 $x17)))
 (let (($x201 (and $x282 $x174)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x31 $x201)))
 (let (($x205 (= $x74 true)))
 (let (($x258 (= $x205 true)))
 (let (($x182 (= $x258 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x206)))
 (let (($x57 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x220 (= $x57 true)))
 (let (($x35 (= $x220 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x183 (= $x181 true)))
 (let (($x193 (= $x183 true)))
 (let (($x270 (= $x193 true)))
 (let (($x29 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x90 (= $x29 true)))
 (let (($x75 (= $x90 true)))
 (let (($x78 (= $x75 true)))
 (let (($x134 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x208 (= $x134 true)))
 (let (($x98 (= $x208 true)))
 (let (($x129 (= $x98 true)))
 (let (($x210 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x244 (= $x210 true)))
 (let (($x76 (= $x244 true)))
 (let (($x5 (= $x76 true)))
 (let (($x101 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x122 (= $x101 true)))
 (let (($x211 (= $x122 true)))
 (let (($x228 (= $x211 true)))
 (let ((?x165 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x165)))
 (let (($x135 (= ?x59 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (= $x135 true)))
 (let (($x61 (= $x96 true)))
 (let (($x139 (= ?x59 input.dst.llvm-%n)))
 (let (($x133 (= $x139 true)))
 (let (($x67 (= $x133 true)))
 (let ((?x189 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x189)))
 (let (($x51 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x51 true)))
 (let (($x125 (= $x65 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x152 true)))
 (let (($x87 (= $x147 true)))
 (let (($x163 (= $x87 true)))
 (let (($x144 (and $x163 $x125)))
 (let (($x69 (and $x144 $x67)))
 (let (($x118 (and $x69 $x61)))
 (let (($x243 (and $x118 $x228)))
 (let (($x141 (and $x243 $x5)))
 (let (($x124 (and $x141 $x129)))
 (let (($x279 (and $x124 $x78)))
 (let (($x142 (and $x279 $x270)))
 (let (($x171 (and $x142 $x35)))
 (let (($x40 (and $x171 $x182)))
 (let ((?x187 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (or (bvuge ?x187 (_ bv1 32)) (= ?x187 (_ bv0 32)))))
 (let (($x151 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x86 (and $x151 $x237)))
 (let (($x190 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x264 (and (not $x190) $x86)))
 (let (($x55 (and $x264 $x40)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x263 (and $x19 $x55)))
 (let (($x289 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x126 (and $x289 $x263)))
 (let (($x245 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x72 (_ bv1 32))))
 (=> $x68 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x224 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x137 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x137 (_ bv1 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x72 (_ bv1 32))))
 (= $x68 $x229))))))
 ))
 (let (($x18 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x72 (_ bv0 32))))
 (=> $x157 $x119)))))
 ))
 (let (($x266 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x137 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x137 (_ bv0 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x72 (_ bv0 32))))
 (= $x157 $x22))))))
 ))
 (let (($x268 (and $x266 $x18)))
 (let (($x277 (and $x268 $x224)))
 (let (($x287 (and $x277 $x245)))
 (let (($x148 (and $x287 $x126)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x56 (and $x9 $x148)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x261 (and $x92 $x56)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x262 (and $x91 $x261)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x260 (and $x53 $x262)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x149 (and $x23 $x260)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x143 (and $x12 $x149)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x109 (and $x93 $x143)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x218 (and $x44 $x109)))
 (let (($x164 (=> $x218 $x191)))
 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (= false true)))
 (let (($x191 (= $x178 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x212)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x254)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x180 $x17)))
 (let (($x201 (and $x282 $x174)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x31 $x201)))
 (let (($x205 (= $x74 true)))
 (let (($x258 (= $x205 true)))
 (let (($x182 (= $x258 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x206)))
 (let (($x57 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x220 (= $x57 true)))
 (let (($x35 (= $x220 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x183 (= $x181 true)))
 (let (($x193 (= $x183 true)))
 (let (($x270 (= $x193 true)))
 (let (($x29 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x90 (= $x29 true)))
 (let (($x75 (= $x90 true)))
 (let (($x78 (= $x75 true)))
 (let (($x134 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x208 (= $x134 true)))
 (let (($x98 (= $x208 true)))
 (let (($x129 (= $x98 true)))
 (let (($x210 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x244 (= $x210 true)))
 (let (($x76 (= $x244 true)))
 (let (($x5 (= $x76 true)))
 (let (($x101 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x122 (= $x101 true)))
 (let (($x211 (= $x122 true)))
 (let (($x228 (= $x211 true)))
 (let ((?x165 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x165)))
 (let (($x135 (= ?x59 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x96 (= $x135 true)))
 (let (($x61 (= $x96 true)))
 (let (($x139 (= ?x59 input.dst.llvm-%n)))
 (let (($x133 (= $x139 true)))
 (let (($x67 (= $x133 true)))
 (let ((?x189 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x189)))
 (let (($x51 (= ?x173 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x51 true)))
 (let (($x125 (= $x65 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x152 true)))
 (let (($x87 (= $x147 true)))
 (let (($x163 (= $x87 true)))
 (let (($x144 (and $x163 $x125)))
 (let (($x69 (and $x144 $x67)))
 (let (($x118 (and $x69 $x61)))
 (let (($x243 (and $x118 $x228)))
 (let (($x141 (and $x243 $x5)))
 (let (($x124 (and $x141 $x129)))
 (let (($x279 (and $x124 $x78)))
 (let (($x142 (and $x279 $x270)))
 (let (($x171 (and $x142 $x35)))
 (let (($x40 (and $x171 $x182)))
 (let ((?x187 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (or (bvuge ?x187 (_ bv1 32)) (= ?x187 (_ bv0 32)))))
 (let (($x151 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x86 (and $x151 $x237)))
 (let (($x190 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x264 (and (not $x190) $x86)))
 (let (($x55 (and $x264 $x40)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x263 (and $x19 $x55)))
 (let (($x289 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x126 (and $x289 $x263)))
 (let (($x245 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x72 (_ bv1 32))))
 (=> $x68 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x224 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x137 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x137 (_ bv1 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x72 (_ bv1 32))))
 (= $x68 $x229))))))
 ))
 (let (($x18 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x72 (_ bv0 32))))
 (=> $x157 $x119)))))
 ))
 (let (($x266 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x137 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x137 (_ bv0 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x72 (_ bv0 32))))
 (= $x157 $x22))))))
 ))
 (let (($x268 (and $x266 $x18)))
 (let (($x277 (and $x268 $x224)))
 (let (($x287 (and $x277 $x245)))
 (let (($x148 (and $x287 $x126)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x56 (and $x9 $x148)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x261 (and $x92 $x56)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x262 (and $x91 $x261)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x260 (and $x53 $x262)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x149 (and $x23 $x260)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x143 (and $x12 $x149)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x109 (and $x93 $x143)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x218 (and $x44 $x109)))
 (let (($x164 (=> $x218 $x191)))
 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x228 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x10 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x108 (ite $x10 ?x228 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x158 (bvsge ?x108 (_ bv1 32))))
 (let (($x81 (= $x158 true)))
 (let (($x138 (= $x81 true)))
 (let ((?x284 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x284)))
 (let (($x83 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x83 true)))
 (let (($x252 (= $x216 true)))
 (let ((?x249 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x249)))
 (let (($x62 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x62 true)))
 (let (($x275 (= $x240 true)))
 (let (($x111 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x128 (= $x111 true)))
 (let (($x172 (= $x128 true)))
 (let (($x136 (= $x172 true)))
 (let (($x121 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x43 (= $x121 true)))
 (let (($x235 (= $x43 true)))
 (let (($x114 (= $x235 true)))
 (let (($x106 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x251 (= $x106 true)))
 (let (($x49 (= $x251 true)))
 (let (($x233 (= $x49 true)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x232)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x194 $x15)))
 (let (($x160 (and $x63 $x236)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x204 $x160)))
 (let (($x247 (= $x36 true)))
 (let (($x45 (= $x247 true)))
 (let (($x46 (= $x45 true)))
 (let (($x97 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x207 (= $x97 true)))
 (let (($x156 (= $x207 true)))
 (let (($x196 (= $x156 true)))
 (let (($x221 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x221 true)))
 (let (($x159 (= $x213 true)))
 (let (($x99 (= $x159 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x38)))
 (let (($x256 (= ?x66 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x257 (= $x256 true)))
 (let (($x26 (= $x257 true)))
 (let (($x39 (= ?x66 input.dst.llvm-%n)))
 (let (($x272 (= $x39 true)))
 (let (($x239 (= $x272 true)))
 (let (($x227 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x227 true)))
 (let (($x37 (= $x102 true)))
 (let (($x52 (= $x37 true)))
 (let (($x79 (and $x52 $x239)))
 (let (($x25 (and $x79 $x26)))
 (let (($x95 (and $x25 $x99)))
 (let (($x146 (and $x95 $x196)))
 (let (($x100 (and $x146 $x46)))
 (let (($x241 (and $x100 $x233)))
 (let (($x169 (and $x241 $x114)))
 (let (($x222 (and $x169 $x136)))
 (let (($x168 (and $x222 $x275)))
 (let (($x234 (and $x168 $x252)))
 (let ((?x27 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (or (bvuge ?x27 (_ bv1 32)) (= ?x27 (_ bv0 32)))))
 (let (($x30 (and $x56 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x10) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x135 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (and (not $x135) $x30)))
 (let (($x131 (and $x209 $x234)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x265 (and $x67 $x131)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x290 (and $x59 $x265)))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x217 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x152 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x273 (_ bv1 32))))
 (let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x217 (_ bv1 32))))
 (= $x132 $x237))))))
 ))
 (let (($x176 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x34 (= false false)))
 (let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x217 (_ bv0 32))))
 (=> $x202 $x34)))))
 ))
 (let (($x274 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x273 (_ bv0 32))))
 (let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x217 (_ bv0 32))))
 (= $x202 $x288))))))
 ))
 (let (($x54 (and $x274 $x176)))
 (let (($x147 (and $x54 $x152)))
 (let (($x144 (and $x147 $x125)))
 (let (($x120 (and $x144 $x290)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x150 (and $x9 $x120)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x167 (and $x92 $x150)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x226 (and $x91 $x167)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x28 (and $x53 $x226)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x115 (and $x23 $x28)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x242 (and $x12 $x115)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x127 (and $x93 $x242)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x285 (and $x44 $x127)))
 (let (($x214 (=> $x285 $x138)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x228 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x10 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x108 (ite $x10 ?x228 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x158 (bvsge ?x108 (_ bv1 32))))
 (let (($x81 (= $x158 true)))
 (let (($x138 (= $x81 true)))
 (let ((?x284 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x284)))
 (let (($x83 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x83 true)))
 (let (($x252 (= $x216 true)))
 (let ((?x249 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x249)))
 (let (($x62 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x62 true)))
 (let (($x275 (= $x240 true)))
 (let (($x111 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x128 (= $x111 true)))
 (let (($x172 (= $x128 true)))
 (let (($x136 (= $x172 true)))
 (let (($x121 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x43 (= $x121 true)))
 (let (($x235 (= $x43 true)))
 (let (($x114 (= $x235 true)))
 (let (($x106 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x251 (= $x106 true)))
 (let (($x49 (= $x251 true)))
 (let (($x233 (= $x49 true)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x232)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x194 $x15)))
 (let (($x160 (and $x63 $x236)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x204 $x160)))
 (let (($x247 (= $x36 true)))
 (let (($x45 (= $x247 true)))
 (let (($x46 (= $x45 true)))
 (let (($x97 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x207 (= $x97 true)))
 (let (($x156 (= $x207 true)))
 (let (($x196 (= $x156 true)))
 (let (($x221 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x213 (= $x221 true)))
 (let (($x159 (= $x213 true)))
 (let (($x99 (= $x159 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x38)))
 (let (($x256 (= ?x66 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x257 (= $x256 true)))
 (let (($x26 (= $x257 true)))
 (let (($x39 (= ?x66 input.dst.llvm-%n)))
 (let (($x272 (= $x39 true)))
 (let (($x239 (= $x272 true)))
 (let (($x227 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x227 true)))
 (let (($x37 (= $x102 true)))
 (let (($x52 (= $x37 true)))
 (let (($x79 (and $x52 $x239)))
 (let (($x25 (and $x79 $x26)))
 (let (($x95 (and $x25 $x99)))
 (let (($x146 (and $x95 $x196)))
 (let (($x100 (and $x146 $x46)))
 (let (($x241 (and $x100 $x233)))
 (let (($x169 (and $x241 $x114)))
 (let (($x222 (and $x169 $x136)))
 (let (($x168 (and $x222 $x275)))
 (let (($x234 (and $x168 $x252)))
 (let ((?x27 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (or (bvuge ?x27 (_ bv1 32)) (= ?x27 (_ bv0 32)))))
 (let (($x30 (and $x56 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x10) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x135 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (and (not $x135) $x30)))
 (let (($x131 (and $x209 $x234)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x265 (and $x67 $x131)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x290 (and $x59 $x265)))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x217 (_ bv1 32))))
 (=> $x132 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x152 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x273 (_ bv1 32))))
 (let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x217 (_ bv1 32))))
 (= $x132 $x237))))))
 ))
 (let (($x176 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x34 (= false false)))
 (let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x217 (_ bv0 32))))
 (=> $x202 $x34)))))
 ))
 (let (($x274 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x273 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x273 (_ bv0 32))))
 (let ((?x217 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x217 (_ bv0 32))))
 (= $x202 $x288))))))
 ))
 (let (($x54 (and $x274 $x176)))
 (let (($x147 (and $x54 $x152)))
 (let (($x144 (and $x147 $x125)))
 (let (($x120 (and $x144 $x290)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x150 (and $x9 $x120)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x167 (and $x92 $x150)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x226 (and $x91 $x167)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x28 (and $x53 $x226)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x115 (and $x23 $x28)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x242 (and $x12 $x115)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x127 (and $x93 $x242)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x285 (and $x44 $x127)))
 (let (($x214 (=> $x285 $x138)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x244 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x6 (ite $x244 ?x203 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x148 (bvsge ?x6 (_ bv0 32))))
 (let (($x155 (= $x148 true)))
 (let (($x269 (= $x155 true)))
 (let ((?x271 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x271)))
 (let (($x259 (= ?x208 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x259 true)))
 (let (($x205 (= $x17 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x74)))
 (let (($x141 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x141 true)))
 (let (($x181 (= $x142 true)))
 (let (($x177 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x130 (= $x177 true)))
 (let (($x189 (= $x130 true)))
 (let (($x173 (= $x189 true)))
 (let (($x186 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x86 (= $x186 true)))
 (let (($x264 (= $x86 true)))
 (let (($x87 (= $x264 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x85)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x229 $x287)))
 (let (($x19 (and $x289 $x195)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x268 $x19)))
 (let (($x219 (= $x140 true)))
 (let (($x198 (= $x219 true)))
 (let (($x187 (= $x198 true)))
 (let (($x185 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x119 (= $x185 true)))
 (let (($x22 (= $x119 true)))
 (let (($x88 (= $x22 true)))
 (let ((?x230 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x230)))
 (let (($x112 (= ?x197 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (= $x112 true)))
 (let (($x104 (= $x8 true)))
 (let (($x50 (= ?x197 input.dst.llvm-%n)))
 (let (($x218 (= $x50 true)))
 (let (($x179 (= $x218 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x14 true)))
 (let (($x48 (= $x278 true)))
 (let (($x149 (= $x48 true)))
 (let (($x123 (and $x149 $x179)))
 (let (($x42 (and $x123 $x104)))
 (let (($x266 (and $x42 $x88)))
 (let (($x184 (and $x266 $x187)))
 (let (($x163 (and $x184 $x87)))
 (let (($x180 (and $x163 $x173)))
 (let (($x117 (and $x180 $x181)))
 (let (($x258 (and $x117 $x205)))
 (let ((?x122 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x244) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x75 (and $x98 (bvuge ?x122 (_ bv1 32)))))
 (let (($x228 (and (= ?x122 (_ bv0 32)) $x98)))
 (let (($x270 (or $x228 $x75)))
 (let (($x95 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x206 (and (not $x95) $x270)))
 (let (($x182 (and $x206 $x258)))
 (let (($x159 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x5 (and $x159 $x182)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x183 (and $x25 $x5)))
 (let (($x256 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x286 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x227 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x65 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x65 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x286 (_ bv1 32))))
 (= $x107 $x60))))))
 ))
 (let (($x64 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x166 (= false false)))
 (let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x286 (_ bv0 32))))
 (=> $x191 $x166)))))
 ))
 (let (($x178 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x65 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x65 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x286 (_ bv0 32))))
 (= $x191 $x165))))))
 ))
 (let (($x56 (and $x178 $x64)))
 (let (($x102 (and $x56 $x227)))
 (let (($x257 (and $x102 $x256)))
 (let (($x193 (and $x257 $x183)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x129 (and $x9 $x193)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x212 (and $x92 $x129)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x174 (and $x91 $x212)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x201 (and $x53 $x174)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x254 (and $x23 $x201)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x134 (and $x12 $x254)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x40 (and $x93 $x134)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x263 (and $x44 $x40)))
 (let (($x170 (=> $x263 $x269)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x244 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x6 (ite $x244 ?x203 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let (($x148 (bvsge ?x6 (_ bv0 32))))
 (let (($x155 (= $x148 true)))
 (let (($x269 (= $x155 true)))
 (let ((?x271 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x271)))
 (let (($x259 (= ?x208 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x259 true)))
 (let (($x205 (= $x17 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x74)))
 (let (($x141 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x141 true)))
 (let (($x181 (= $x142 true)))
 (let (($x177 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x130 (= $x177 true)))
 (let (($x189 (= $x130 true)))
 (let (($x173 (= $x189 true)))
 (let (($x186 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x86 (= $x186 true)))
 (let (($x264 (= $x86 true)))
 (let (($x87 (= $x264 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x85)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x229 $x287)))
 (let (($x19 (and $x289 $x195)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x268 $x19)))
 (let (($x219 (= $x140 true)))
 (let (($x198 (= $x219 true)))
 (let (($x187 (= $x198 true)))
 (let (($x185 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x119 (= $x185 true)))
 (let (($x22 (= $x119 true)))
 (let (($x88 (= $x22 true)))
 (let ((?x230 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x230)))
 (let (($x112 (= ?x197 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (= $x112 true)))
 (let (($x104 (= $x8 true)))
 (let (($x50 (= ?x197 input.dst.llvm-%n)))
 (let (($x218 (= $x50 true)))
 (let (($x179 (= $x218 true)))
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x14 true)))
 (let (($x48 (= $x278 true)))
 (let (($x149 (= $x48 true)))
 (let (($x123 (and $x149 $x179)))
 (let (($x42 (and $x123 $x104)))
 (let (($x266 (and $x42 $x88)))
 (let (($x184 (and $x266 $x187)))
 (let (($x163 (and $x184 $x87)))
 (let (($x180 (and $x163 $x173)))
 (let (($x117 (and $x180 $x181)))
 (let (($x258 (and $x117 $x205)))
 (let ((?x122 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x244) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x75 (and $x98 (bvuge ?x122 (_ bv1 32)))))
 (let (($x228 (and (= ?x122 (_ bv0 32)) $x98)))
 (let (($x270 (or $x228 $x75)))
 (let (($x95 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x206 (and (not $x95) $x270)))
 (let (($x182 (and $x206 $x258)))
 (let (($x159 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x5 (and $x159 $x182)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x183 (and $x25 $x5)))
 (let (($x256 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x286 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x227 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x65 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x65 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x286 (_ bv1 32))))
 (= $x107 $x60))))))
 ))
 (let (($x64 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x166 (= false false)))
 (let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x286 (_ bv0 32))))
 (=> $x191 $x166)))))
 ))
 (let (($x178 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x65 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x65 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x286 (_ bv0 32))))
 (= $x191 $x165))))))
 ))
 (let (($x56 (and $x178 $x64)))
 (let (($x102 (and $x56 $x227)))
 (let (($x257 (and $x102 $x256)))
 (let (($x193 (and $x257 $x183)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x129 (and $x9 $x193)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x212 (and $x92 $x129)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x174 (and $x91 $x212)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x201 (and $x53 $x174)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x254 (and $x23 $x201)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x134 (and $x12 $x254)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x40 (and $x93 $x134)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x263 (and $x44 $x40)))
 (let (($x170 (=> $x263 $x269)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000088)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000088)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80800000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (bvuge ?x157 (_ bv1 32))))
 (let (($x11 (= $x261 true)))
 (let (($x55 (= $x11 true)))
 (let ((?x72 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x72)))
 (let (($x150 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x150 true)))
 (let (($x120 (= $x167 true)))
 (let (($x242 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x242 true)))
 (let (($x77 (= $x127 true)))
 (let (($x113 (= $x77 true)))
 (let (($x226 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x226 true)))
 (let (($x28 (= $x290 true)))
 (let (($x115 (= $x28 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x168)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x39 $x49)))
 (let (($x103 (and $x160 $x284)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x38 $x103)))
 (let (($x63 (= $x62 true)))
 (let (($x285 (= $x63 true)))
 (let (($x214 (= $x285 true)))
 (let (($x246 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x253 (= $x246 true)))
 (let (($x30 (= $x253 true)))
 (let (($x209 (= $x30 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x125)))
 (let (($x27 (= ?x51 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x225 (= $x27 true)))
 (let (($x248 (= $x225 true)))
 (let (($x59 (= ?x51 input.dst.llvm-%n)))
 (let (($x139 (= $x59 true)))
 (let (($x133 (= $x139 true)))
 (let ((?x274 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x274)))
 (let (($x54 (= ?x151 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x132 (= $x54 true)))
 (let (($x237 (= $x132 true)))
 (let (($x67 (and $x237 $x133)))
 (let (($x10 (and $x67 $x248)))
 (let (($x37 (and $x10 $x209)))
 (let (($x108 (and $x37 $x214)))
 (let (($x265 (and $x108 $x115)))
 (let (($x267 (and $x265 $x113)))
 (let (($x158 (and $x267 $x120)))
 (let ((?x128 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x169 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (or (bvuge ?x169 (_ bv1 32)) (= ?x169 (_ bv0 32)))))
 (let (($x222 (and $x247 (bvuge ?x128 (_ bv1 32)))))
 (let (($x46 (and (= ?x128 (_ bv0 32)) $x247)))
 (let (($x252 (or $x46 $x222)))
 (let (($x88 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x34 (and (not $x88) $x252)))
 (let (($x81 (and $x34 $x158)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x119 $x81)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x96 (and $x104 $x138)))
 (let (($x123 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x250 (_ bv1 32))))
 (=> $x206 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x171 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x79 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x79 (_ bv1 32))))
 (let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x250 (_ bv1 32))))
 (= $x206 $x35))))))
 ))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x250 (_ bv0 32))))
 (=> $x80 $x118)))))
 ))
 (let (($x277 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x79 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x79 (_ bv0 32))))
 (let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x250 (_ bv0 32))))
 (= $x80 $x26))))))
 ))
 (let (($x210 (and $x277 $x243)))
 (let (($x14 (and $x210 $x171)))
 (let (($x112 (and $x14 $x123)))
 (let (($x131 (and $x112 $x96)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x137 (and $x9 $x131)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x224 (and $x92 $x137)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x124 (and $x91 $x224)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x231 (and $x53 $x124)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x78 (and $x23 $x231)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x279 (and $x12 $x78)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x57 (and $x93 $x279)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x90 (and $x44 $x57)))
 (let (($x262 (=> $x90 $x55)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (bvuge ?x157 (_ bv1 32))))
 (let (($x11 (= $x261 true)))
 (let (($x55 (= $x11 true)))
 (let ((?x72 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x72)))
 (let (($x150 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x150 true)))
 (let (($x120 (= $x167 true)))
 (let (($x242 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x242 true)))
 (let (($x77 (= $x127 true)))
 (let (($x113 (= $x77 true)))
 (let (($x226 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x226 true)))
 (let (($x28 (= $x290 true)))
 (let (($x115 (= $x28 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x168)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x39 $x49)))
 (let (($x103 (and $x160 $x284)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x38 $x103)))
 (let (($x63 (= $x62 true)))
 (let (($x285 (= $x63 true)))
 (let (($x214 (= $x285 true)))
 (let (($x246 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x253 (= $x246 true)))
 (let (($x30 (= $x253 true)))
 (let (($x209 (= $x30 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x125)))
 (let (($x27 (= ?x51 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x225 (= $x27 true)))
 (let (($x248 (= $x225 true)))
 (let (($x59 (= ?x51 input.dst.llvm-%n)))
 (let (($x139 (= $x59 true)))
 (let (($x133 (= $x139 true)))
 (let ((?x274 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x274)))
 (let (($x54 (= ?x151 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x132 (= $x54 true)))
 (let (($x237 (= $x132 true)))
 (let (($x67 (and $x237 $x133)))
 (let (($x10 (and $x67 $x248)))
 (let (($x37 (and $x10 $x209)))
 (let (($x108 (and $x37 $x214)))
 (let (($x265 (and $x108 $x115)))
 (let (($x267 (and $x265 $x113)))
 (let (($x158 (and $x267 $x120)))
 (let ((?x128 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x169 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (or (bvuge ?x169 (_ bv1 32)) (= ?x169 (_ bv0 32)))))
 (let (($x222 (and $x247 (bvuge ?x128 (_ bv1 32)))))
 (let (($x46 (and (= ?x128 (_ bv0 32)) $x247)))
 (let (($x252 (or $x46 $x222)))
 (let (($x88 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x34 (and (not $x88) $x252)))
 (let (($x81 (and $x34 $x158)))
 (let (($x119 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x119 $x81)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x96 (and $x104 $x138)))
 (let (($x123 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x250 (_ bv1 32))))
 (=> $x206 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x171 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x79 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x79 (_ bv1 32))))
 (let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x250 (_ bv1 32))))
 (= $x206 $x35))))))
 ))
 (let (($x243 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x250 (_ bv0 32))))
 (=> $x80 $x118)))))
 ))
 (let (($x277 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x79 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x79 (_ bv0 32))))
 (let ((?x250 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x250 (_ bv0 32))))
 (= $x80 $x26))))))
 ))
 (let (($x210 (and $x277 $x243)))
 (let (($x14 (and $x210 $x171)))
 (let (($x112 (and $x14 $x123)))
 (let (($x131 (and $x112 $x96)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x137 (and $x9 $x131)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x224 (and $x92 $x137)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x124 (and $x91 $x224)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x231 (and $x53 $x124)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x78 (and $x23 $x231)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x279 (and $x12 $x78)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x57 (and $x93 $x279)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x90 (and $x44 $x57)))
 (let (($x262 (=> $x90 $x55)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x117 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x204 (ite $x117 ?x238 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x188 (bvmul (_ bv4294967295 32) ?x204)))
 (let ((?x217 (bvneg ?x188)))
 (let (($x20 (= ?x217 ?x134)))
 (let (($x194 (= $x20 true)))
 (let ((?x5 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x5)))
 (let (($x205 (= ?x183 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x205 true)))
 (let (($x116 (= $x140 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x230)))
 (let (($x195 (= ?x197 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x195 true)))
 (let (($x130 (= $x177 true)))
 (let (($x270 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x270 true)))
 (let (($x48 (= $x278 true)))
 (let (($x149 (= $x48 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x213)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x256 $x25)))
 (let (($x122 (and $x221 $x159)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x107 $x122)))
 (let (($x76 (= $x244 true)))
 (let (($x29 (= $x76 true)))
 (let (($x98 (= $x29 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x163)))
 (let (($x165 (= ?x212 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x164 (= $x165 true)))
 (let (($x178 (= $x164 true)))
 (let (($x201 (= ?x212 input.dst.llvm-%n)))
 (let (($x69 (= $x201 true)))
 (let (($x166 (= $x69 true)))
 (let (($x145 (and $x166 $x178)))
 (let (($x228 (and $x145 $x98)))
 (let (($x154 (and $x228 $x149)))
 (let (($x187 (and $x154 $x130)))
 (let (($x200 (and $x187 $x116)))
 (let ((?x18 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (or (bvuge ?x18 (_ bv1 32)) (= ?x18 (_ bv0 32)))))
 (let (($x264 (and $x262 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x117) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x10 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x19 (and (not $x10) $x264)))
 (let (($x273 (and $x19 $x200)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (and $x225 $x273)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x6 (and $x133 $x17)))
 (let (($x144 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x199 (_ bv1 32))))
 (=> $x222 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x34 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x179 (_ bv1 32))))
 (let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x199 (_ bv1 32))))
 (= $x222 $x247))))))
 ))
 (let (($x43 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x106 (= false false)))
 (let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x199 (_ bv0 32))))
 (=> $x15 $x106)))))
 ))
 (let (($x275 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x179 (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x199 (_ bv0 32))))
 (= $x15 $x8))))))
 ))
 (let (($x121 (and $x275 $x43)))
 (let (($x215 (and $x121 $x34)))
 (let (($x59 (and $x215 $x144)))
 (let (($x263 (and $x59 $x6)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x148 (and $x9 $x263)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x155 (and $x92 $x148)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x40 (and $x91 $x155)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x269 (and $x53 $x40)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x170 (and $x23 $x269)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x202 (and $x12 $x170)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x196 (and $x93 $x202)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x156 (and $x44 $x196)))
 (let (($x236 (=> $x156 $x194)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x117 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x204 (ite $x117 ?x238 (ite (= (_ bv0 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x188 (bvmul (_ bv4294967295 32) ?x204)))
 (let ((?x217 (bvneg ?x188)))
 (let (($x20 (= ?x217 ?x134)))
 (let (($x194 (= $x20 true)))
 (let ((?x5 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x5)))
 (let (($x205 (= ?x183 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x205 true)))
 (let (($x116 (= $x140 true)))
 (let ((?x230 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x230)))
 (let (($x195 (= ?x197 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x195 true)))
 (let (($x130 (= $x177 true)))
 (let (($x270 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x270 true)))
 (let (($x48 (= $x278 true)))
 (let (($x149 (= $x48 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x213)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x256 $x25)))
 (let (($x122 (and $x221 $x159)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x107 $x122)))
 (let (($x76 (= $x244 true)))
 (let (($x29 (= $x76 true)))
 (let (($x98 (= $x29 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x163)))
 (let (($x165 (= ?x212 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x164 (= $x165 true)))
 (let (($x178 (= $x164 true)))
 (let (($x201 (= ?x212 input.dst.llvm-%n)))
 (let (($x69 (= $x201 true)))
 (let (($x166 (= $x69 true)))
 (let (($x145 (and $x166 $x178)))
 (let (($x228 (and $x145 $x98)))
 (let (($x154 (and $x228 $x149)))
 (let (($x187 (and $x154 $x130)))
 (let (($x200 (and $x187 $x116)))
 (let ((?x18 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (or (bvuge ?x18 (_ bv1 32)) (= ?x18 (_ bv0 32)))))
 (let (($x264 (and $x262 (bvuge (ite (or (or false (= (_ bv0 32) (_ bv0 32))) $x117) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x10 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x19 (and (not $x10) $x264)))
 (let (($x273 (and $x19 $x200)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (and $x225 $x273)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x6 (and $x133 $x17)))
 (let (($x144 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x199 (_ bv1 32))))
 (=> $x222 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x34 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x179 (_ bv1 32))))
 (let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x199 (_ bv1 32))))
 (= $x222 $x247))))))
 ))
 (let (($x43 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x106 (= false false)))
 (let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x199 (_ bv0 32))))
 (=> $x15 $x106)))))
 ))
 (let (($x275 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x179 (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x199 (_ bv0 32))))
 (= $x15 $x8))))))
 ))
 (let (($x121 (and $x275 $x43)))
 (let (($x215 (and $x121 $x34)))
 (let (($x59 (and $x215 $x144)))
 (let (($x263 (and $x59 $x6)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x148 (and $x9 $x263)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x155 (and $x92 $x148)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x40 (and $x91 $x155)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x269 (and $x53 $x40)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x170 (and $x23 $x269)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x202 (and $x12 $x170)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x196 (and $x93 $x202)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x156 (and $x44 $x196)))
 (let (($x236 (=> $x156 $x194)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 127 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= (_ bv0 32) ?x65)))
 (let (($x85 (= $x287 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x290 (bvneg ?x251)))
 (let (($x28 (= ?x290 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x28 true)))
 (let (($x137 (= $x103 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x120 true)))
 (let (($x78 (= $x96 true)))
 (let (($x279 (= $x78 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x231)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x151 $x132)))
 (let (($x49 (and $x158 $x131)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x288 $x49)))
 (let (($x226 (= $x265 true)))
 (let (($x234 (= $x226 true)))
 (let (($x150 (= $x234 true)))
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x112)))
 (let (($x114 (= ?x104 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x169 (= $x114 true)))
 (let (($x111 (= $x169 true)))
 (let (($x185 (= ?x104 input.dst.llvm-%n)))
 (let (($x119 (= $x185 true)))
 (let (($x128 (= $x119 true)))
 (let ((?x99 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x99)))
 (let (($x35 (= ?x210 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x35 true)))
 (let (($x218 (= $x123 true)))
 (let (($x233 (and $x218 $x128)))
 (let (($x249 (and $x233 $x111)))
 (let (($x168 (and $x249 $x150)))
 (let (($x57 (and $x168 $x279)))
 (let (($x224 (and $x57 $x137)))
 (let ((?x181 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (or (bvuge ?x181 (_ bv1 32)) (= ?x181 (_ bv0 32)))))
 (let (($x243 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x245 (and $x243 $x86)))
 (let (($x159 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x207 (and (not $x159) $x245)))
 (let (($x124 (and $x207 $x224)))
 (let (($x221 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x221 $x124)))
 (let (($x239 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x160 (and $x239 $x138)))
 (let (($x107 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x182 (_ bv1 32))))
 (=> $x173 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x212 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x51 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x51 (_ bv1 32))))
 (let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x182 (_ bv1 32))))
 (= $x173 $x258))))))
 ))
 (let (($x229 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x182 (_ bv0 32))))
 (=> $x272 $x268)))))
 ))
 (let (($x102 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x51 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x51 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x182 (_ bv0 32))))
 (= $x272 $x139))))))
 ))
 (let (($x262 (and $x102 $x229)))
 (let (($x174 (and $x262 $x212)))
 (let (($x60 (and $x174 $x107)))
 (let (($x90 (and $x60 $x160)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x261 (and $x9 $x90)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x11 (and $x92 $x261)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x157 (and $x91 $x11)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x260 (and $x53 $x157)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x23 $x260)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x286 (and $x12 $x135)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x55 (and $x93 $x286)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x81 (and $x44 $x55)))
 (let (($x255 (=> $x81 $x85)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= (_ bv0 32) ?x65)))
 (let (($x85 (= $x287 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x290 (bvneg ?x251)))
 (let (($x28 (= ?x290 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x28 true)))
 (let (($x137 (= $x103 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x120 true)))
 (let (($x78 (= $x96 true)))
 (let (($x279 (= $x78 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x231)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x151 $x132)))
 (let (($x49 (and $x158 $x131)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x288 $x49)))
 (let (($x226 (= $x265 true)))
 (let (($x234 (= $x226 true)))
 (let (($x150 (= $x234 true)))
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x112)))
 (let (($x114 (= ?x104 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x169 (= $x114 true)))
 (let (($x111 (= $x169 true)))
 (let (($x185 (= ?x104 input.dst.llvm-%n)))
 (let (($x119 (= $x185 true)))
 (let (($x128 (= $x119 true)))
 (let ((?x99 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x99)))
 (let (($x35 (= ?x210 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x35 true)))
 (let (($x218 (= $x123 true)))
 (let (($x233 (and $x218 $x128)))
 (let (($x249 (and $x233 $x111)))
 (let (($x168 (and $x249 $x150)))
 (let (($x57 (and $x168 $x279)))
 (let (($x224 (and $x57 $x137)))
 (let ((?x181 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (or (bvuge ?x181 (_ bv1 32)) (= ?x181 (_ bv0 32)))))
 (let (($x243 (= (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x245 (and $x243 $x86)))
 (let (($x159 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x207 (and (not $x159) $x245)))
 (let (($x124 (and $x207 $x224)))
 (let (($x221 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x221 $x124)))
 (let (($x239 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x160 (and $x239 $x138)))
 (let (($x107 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x182 (_ bv1 32))))
 (=> $x173 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x212 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x51 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x51 (_ bv1 32))))
 (let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x182 (_ bv1 32))))
 (= $x173 $x258))))))
 ))
 (let (($x229 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x182 (_ bv0 32))))
 (=> $x272 $x268)))))
 ))
 (let (($x102 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x51 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x139 (= ?x51 (_ bv0 32))))
 (let ((?x182 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x182 (_ bv0 32))))
 (= $x272 $x139))))))
 ))
 (let (($x262 (and $x102 $x229)))
 (let (($x174 (and $x262 $x212)))
 (let (($x60 (and $x174 $x107)))
 (let (($x90 (and $x60 $x160)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x261 (and $x9 $x90)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x11 (and $x92 $x261)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x157 (and $x91 $x11)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x260 (and $x53 $x157)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x23 $x260)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x286 (and $x12 $x135)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x55 (and $x93 $x286)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x81 (and $x44 $x55)))
 (let (($x255 (=> $x81 $x85)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 123 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x196 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x153 (ite $x196 ?x231 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x141 (bvmul (_ bv4294967295 32) ?x153)))
 (let ((?x97 (bvneg ?x141)))
 (let (($x203 (= ?x97 ?x152)))
 (let (($x147 (= $x203 true)))
 (let ((?x39 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x39)))
 (let (($x77 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x77 true)))
 (let (($x250 (= $x115 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x220 (bvneg ?x209)))
 (let (($x30 (= ?x220 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x30 true)))
 (let (($x79 (= $x37 true)))
 (let (($x197 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x197 true)))
 (let (($x108 (= $x38 true)))
 (let (($x284 (= $x108 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x178)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x201 $x165)))
 (let (($x116 (and $x164 $x154)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x264 $x116)))
 (let (($x130 (= $x200 true)))
 (let (($x217 (= $x130 true)))
 (let (($x134 (= $x217 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x125)))
 (let (($x18 (= ?x59 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x271 (= $x18 true)))
 (let (($x219 (= $x271 true)))
 (let (($x67 (= ?x59 input.dst.llvm-%n)))
 (let (($x27 (= $x67 true)))
 (let (($x225 (= $x27 true)))
 (let (($x117 (and $x225 $x219)))
 (let (($x20 (and $x117 $x134)))
 (let (($x246 (and $x20 $x284)))
 (let (($x52 (and $x246 $x79)))
 (let (($x14 (and $x52 $x250)))
 (let ((?x202 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x196) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x8 (and $x95 (bvuge ?x202 (_ bv1 32)))))
 (let (($x187 (and (= ?x202 (_ bv0 32)) $x95)))
 (let (($x43 (or $x187 $x8)))
 (let (($x288 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x222 (and (not $x288) $x43)))
 (let (($x50 (and $x222 $x14)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x171 (and $x46 $x50)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x62 (and $x169 $x171)))
 (let (($x128 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x289 (_ bv1 32))))
 (=> $x244 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x99 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x56 (_ bv1 32))))
 (let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x289 (_ bv1 32))))
 (= $x244 $x86))))))
 ))
 (let (($x184 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x277 (= false false)))
 (let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x289 (_ bv0 32))))
 (=> $x26 $x277)))))
 ))
 (let (($x118 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x56 (_ bv0 32))))
 (let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x289 (_ bv0 32))))
 (= $x26 $x256))))))
 ))
 (let (($x186 (and $x118 $x184)))
 (let (($x210 (and $x186 $x99)))
 (let (($x233 (and $x210 $x128)))
 (let (($x285 (and $x233 $x62)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x214 (and $x9 $x285)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x94 (and $x92 $x214)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x80 (and $x91 $x94)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x127 (and $x53 $x80)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x113 (and $x23 $x127)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x267 (and $x12 $x113)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x242 (and $x93 $x267)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x142 (and $x44 $x242)))
 (let (($x146 (=> $x142 $x147)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x196 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x153 (ite $x196 ?x231 (ite (= (_ bv1 32) (_ bv0 32)) (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry) (_ bv0 32)))))
 (let ((?x141 (bvmul (_ bv4294967295 32) ?x153)))
 (let ((?x97 (bvneg ?x141)))
 (let (($x203 (= ?x97 ?x152)))
 (let (($x147 (= $x203 true)))
 (let ((?x39 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x39)))
 (let (($x77 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x77 true)))
 (let (($x250 (= $x115 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x220 (bvneg ?x209)))
 (let (($x30 (= ?x220 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x30 true)))
 (let (($x79 (= $x37 true)))
 (let (($x197 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x197 true)))
 (let (($x108 (= $x38 true)))
 (let (($x284 (= $x108 true)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x178)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x201 $x165)))
 (let (($x116 (and $x164 $x154)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x264 $x116)))
 (let (($x130 (= $x200 true)))
 (let (($x217 (= $x130 true)))
 (let (($x134 (= $x217 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x125)))
 (let (($x18 (= ?x59 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x271 (= $x18 true)))
 (let (($x219 (= $x271 true)))
 (let (($x67 (= ?x59 input.dst.llvm-%n)))
 (let (($x27 (= $x67 true)))
 (let (($x225 (= $x27 true)))
 (let (($x117 (and $x225 $x219)))
 (let (($x20 (and $x117 $x134)))
 (let (($x246 (and $x20 $x284)))
 (let (($x52 (and $x246 $x79)))
 (let (($x14 (and $x52 $x250)))
 (let ((?x202 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge (ite (or (or false (= (_ bv1 32) (_ bv0 32))) $x196) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x8 (and $x95 (bvuge ?x202 (_ bv1 32)))))
 (let (($x187 (and (= ?x202 (_ bv0 32)) $x95)))
 (let (($x43 (or $x187 $x8)))
 (let (($x288 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x222 (and (not $x288) $x43)))
 (let (($x50 (and $x222 $x14)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x171 (and $x46 $x50)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x62 (and $x169 $x171)))
 (let (($x128 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x289 (_ bv1 32))))
 (=> $x244 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x99 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x56 (_ bv1 32))))
 (let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x289 (_ bv1 32))))
 (= $x244 $x86))))))
 ))
 (let (($x184 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x277 (= false false)))
 (let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x289 (_ bv0 32))))
 (=> $x26 $x277)))))
 ))
 (let (($x118 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x56 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x56 (_ bv0 32))))
 (let ((?x289 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x289 (_ bv0 32))))
 (= $x26 $x256))))))
 ))
 (let (($x186 (and $x118 $x184)))
 (let (($x210 (and $x186 $x99)))
 (let (($x233 (and $x210 $x128)))
 (let (($x285 (and $x233 $x62)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x214 (and $x9 $x285)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x94 (and $x92 $x214)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x80 (and $x91 $x94)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x127 (and $x53 $x80)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x113 (and $x23 $x127)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x267 (and $x12 $x113)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x242 (and $x93 $x267)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x142 (and $x44 $x242)))
 (let (($x146 (=> $x142 $x147)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 129 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 32) ?x238)))
 (let (($x22 (= $x188 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x76)))
 (let (($x29 (= ?x278 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x29 true)))
 (let (($x253 (= $x75 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x168)))
 (let (($x263 (= ?x177 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x263 true)))
 (let (($x287 (= $x193 true)))
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x96 true)))
 (let (($x199 (= $x88 true)))
 (let (($x15 (= $x199 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x206)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x181 $x245)))
 (let (($x123 (and $x207 $x35)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x227 $x123)))
 (let (($x112 (= $x218 true)))
 (let (($x104 (= $x112 true)))
 (let (($x234 (= $x104 true)))
 (let ((?x229 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x229)))
 (let (($x60 (= ?x262 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x239 (= $x60 true)))
 (let (($x257 (= $x239 true)))
 (let (($x258 (= ?x262 input.dst.llvm-%n)))
 (let (($x107 (= $x258 true)))
 (let (($x64 (= $x107 true)))
 (let (($x25 (and $x64 $x257)))
 (let (($x137 (and $x25 $x234)))
 (let (($x85 (and $x137 $x15)))
 (let (($x270 (and $x85 $x287)))
 (let (($x183 (and $x270 $x253)))
 (let ((?x74 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x252 (and $x55 (bvuge ?x74 (_ bv1 32)))))
 (let (($x131 (and (= ?x74 (_ bv0 32)) $x55)))
 (let (($x268 (or $x131 $x252)))
 (let (($x178 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x266 (and (not $x178) $x268)))
 (let (($x6 (and $x266 $x183)))
 (let (($x165 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x155 (and $x165 $x6)))
 (let (($x201 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x40 (and $x201 $x155)))
 (let (($x31 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x121 (_ bv1 32))))
 (=> $x222 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x119 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x119 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x121 (_ bv1 32))))
 (= $x222 $x144))))))
 ))
 (let (($x156 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x170 (= false false)))
 (let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x121 (_ bv0 32))))
 (=> $x17 $x170)))))
 ))
 (let (($x230 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x119 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x119 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x121 (_ bv0 32))))
 (= $x17 $x114))))))
 ))
 (let (($x204 (and $x230 $x156)))
 (let (($x59 (and $x204 $x125)))
 (let (($x264 (and $x59 $x31)))
 (let (($x237 (and $x264 $x40)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x228 (and $x9 $x237)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x48 (and $x92 $x228)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x98 (and $x91 $x48)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x205 (and $x53 $x98)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x148 (and $x23 $x205)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x273 (and $x16 $x148)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x5 (and $x7 $x273)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x122 (and $x21 $x5)))
 (let (($x194 (=> $x122 $x22)))
 (not $x194)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 32) ?x238)))
 (let (($x22 (= $x188 true)))
 (let ((?x76 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x76)))
 (let (($x29 (= ?x278 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x29 true)))
 (let (($x253 (= $x75 true)))
 (let ((?x168 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x168)))
 (let (($x263 (= ?x177 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x263 true)))
 (let (($x287 (= $x193 true)))
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x96 true)))
 (let (($x199 (= $x88 true)))
 (let (($x15 (= $x199 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x206)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x181 $x245)))
 (let (($x123 (and $x207 $x35)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x227 $x123)))
 (let (($x112 (= $x218 true)))
 (let (($x104 (= $x112 true)))
 (let (($x234 (= $x104 true)))
 (let ((?x229 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x262 (bvneg ?x229)))
 (let (($x60 (= ?x262 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x239 (= $x60 true)))
 (let (($x257 (= $x239 true)))
 (let (($x258 (= ?x262 input.dst.llvm-%n)))
 (let (($x107 (= $x258 true)))
 (let (($x64 (= $x107 true)))
 (let (($x25 (and $x64 $x257)))
 (let (($x137 (and $x25 $x234)))
 (let (($x85 (and $x137 $x15)))
 (let (($x270 (and $x85 $x287)))
 (let (($x183 (and $x270 $x253)))
 (let ((?x74 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 (let (($x252 (and $x55 (bvuge ?x74 (_ bv1 32)))))
 (let (($x131 (and (= ?x74 (_ bv0 32)) $x55)))
 (let (($x268 (or $x131 $x252)))
 (let (($x178 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x266 (and (not $x178) $x268)))
 (let (($x6 (and $x266 $x183)))
 (let (($x165 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x155 (and $x165 $x6)))
 (let (($x201 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x40 (and $x201 $x155)))
 (let (($x31 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x121 (_ bv1 32))))
 (=> $x222 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x125 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x119 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x119 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x121 (_ bv1 32))))
 (= $x222 $x144))))))
 ))
 (let (($x156 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x170 (= false false)))
 (let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x121 (_ bv0 32))))
 (=> $x17 $x170)))))
 ))
 (let (($x230 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x119 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x119 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x121 (_ bv0 32))))
 (= $x17 $x114))))))
 ))
 (let (($x204 (and $x230 $x156)))
 (let (($x59 (and $x204 $x125)))
 (let (($x264 (and $x59 $x31)))
 (let (($x237 (and $x264 $x40)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x228 (and $x9 $x237)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x48 (and $x92 $x228)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x98 (and $x91 $x48)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x205 (and $x53 $x98)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x148 (and $x23 $x205)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x273 (and $x16 $x148)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x5 (and $x7 $x273)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x122 (and $x21 $x5)))
 (let (($x194 (=> $x122 $x22)))
 (not $x194)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 124 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x10 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (or (bvuge ?x10 (_ bv1 32)) (= ?x10 (_ bv0 32)))))
 (let (($x160 (and $x231 (bvuge ?x182 (_ bv1 32)))))
 (let (($x176 (and (= ?x182 (_ bv0 32)) $x231)))
 (let (($x255 (or $x176 $x160)))
 (let (($x217 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x275 (and (not $x217) $x255)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (not $x130)))
 (let (($x172 (or $x200 $x275)))
 (let (($x269 (= $x172 true)))
 (let (($x72 (= $x269 true)))
 (let ((?x148 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x148)))
 (let (($x122 (= ?x273 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x238 (= $x122 true)))
 (let (($x188 (= $x238 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x29)))
 (let (($x237 (= ?x75 input.dst.llvm-%n)))
 (let (($x228 (= $x237 true)))
 (let (($x48 (= $x228 true)))
 (let (($x253 (= ?x75 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x183 (= $x253 true)))
 (let (($x6 (= $x183 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x193)))
 (let (($x116 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x116 true)))
 (let (($x278 (= $x76 true)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x224)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x218 $x234)))
 (let (($x88 (and $x137 $x96)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x35 $x88)))
 (let (($x15 (= $x199 true)))
 (let (($x85 (= $x15 true)))
 (let (($x168 (= $x85 true)))
 (let (($x149 (and $x168 $x278)))
 (let (($x155 (and $x149 $x6)))
 (let (($x98 (and $x155 $x48)))
 (let (($x22 (and $x98 $x188)))
 (let (($x245 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x194 (and $x245 $x22)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x241 (and $x181 $x194)))
 (let (($x211 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x139 (_ bv1 32))))
 (=> $x266 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x208 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x208 (_ bv1 32))))
 (let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x139 (_ bv1 32))))
 (= $x266 $x68))))))
 ))
 (let (($x103 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x179 (= false false)))
 (let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x139 (_ bv0 32))))
 (=> $x260 $x179)))))
 ))
 (let (($x157 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x208 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x208 (_ bv0 32))))
 (let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x139 (_ bv0 32))))
 (= $x260 $x19))))))
 ))
 (let (($x135 (and $x157 $x103)))
 (let (($x262 (and $x135 $x229)))
 (let (($x227 (and $x262 $x211)))
 (let (($x159 (and $x227 $x241)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x289 (and $x9 $x159)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x26 (and $x92 $x289)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x56 (and $x91 $x26)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x198 (and $x53 $x56)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x99 (and $x23 $x198)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x210 (and $x16 $x99)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x42 (and $x7 $x210)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x154 (and $x21 $x42)))
 (let (($x87 (=> $x154 $x72)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (ite (or (or false (= (_ bv0 32) (_ bv0 32))) (= (_ bv0 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x10 (ite (or (or false (= (_ bv1 32) (_ bv0 32))) (= (_ bv1 32) (_ bv1 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (or (bvuge ?x10 (_ bv1 32)) (= ?x10 (_ bv0 32)))))
 (let (($x160 (and $x231 (bvuge ?x182 (_ bv1 32)))))
 (let (($x176 (and (= ?x182 (_ bv0 32)) $x231)))
 (let (($x255 (or $x176 $x160)))
 (let (($x217 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x275 (and (not $x217) $x255)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (not $x130)))
 (let (($x172 (or $x200 $x275)))
 (let (($x269 (= $x172 true)))
 (let (($x72 (= $x269 true)))
 (let ((?x148 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x148)))
 (let (($x122 (= ?x273 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x238 (= $x122 true)))
 (let (($x188 (= $x238 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x29)))
 (let (($x237 (= ?x75 input.dst.llvm-%n)))
 (let (($x228 (= $x237 true)))
 (let (($x48 (= $x228 true)))
 (let (($x253 (= ?x75 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x183 (= $x253 true)))
 (let (($x6 (= $x183 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x193)))
 (let (($x116 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (= $x116 true)))
 (let (($x278 (= $x76 true)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x224)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x218 $x234)))
 (let (($x88 (and $x137 $x96)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x35 $x88)))
 (let (($x15 (= $x199 true)))
 (let (($x85 (= $x15 true)))
 (let (($x168 (= $x85 true)))
 (let (($x149 (and $x168 $x278)))
 (let (($x155 (and $x149 $x6)))
 (let (($x98 (and $x155 $x48)))
 (let (($x22 (and $x98 $x188)))
 (let (($x245 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x194 (and $x245 $x22)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x241 (and $x181 $x194)))
 (let (($x211 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x139 (_ bv1 32))))
 (=> $x266 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x229 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x208 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x68 (bvuge ?x208 (_ bv1 32))))
 (let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x139 (_ bv1 32))))
 (= $x266 $x68))))))
 ))
 (let (($x103 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x179 (= false false)))
 (let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x139 (_ bv0 32))))
 (=> $x260 $x179)))))
 ))
 (let (($x157 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x208 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x208 (_ bv0 32))))
 (let ((?x139 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x139 (_ bv0 32))))
 (= $x260 $x19))))))
 ))
 (let (($x135 (and $x157 $x103)))
 (let (($x262 (and $x135 $x229)))
 (let (($x227 (and $x262 $x211)))
 (let (($x159 (and $x227 $x241)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x289 (and $x9 $x159)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x26 (and $x92 $x289)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x56 (and $x91 $x26)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x198 (and $x53 $x56)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x99 (and $x23 $x198)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x210 (and $x16 $x99)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x42 (and $x7 $x210)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x154 (and $x21 $x42)))
 (let (($x87 (=> $x154 $x72)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (not $x108)))
 (let (($x151 (= $x20 false)))
 (let (($x30 (= $x151 true)))
 (let ((?x289 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x289)))
 (let (($x269 (= ?x26 input.dst.llvm-%n)))
 (let (($x72 (= $x269 true)))
 (let (($x87 (= $x72 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x174)))
 (let (($x106 (= ?x231 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x106 true)))
 (let (($x255 (= $x160 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x49)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x217 $x57)))
 (let (($x90 (and $x120 $x182)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x130 $x90)))
 (let (($x28 (= $x290 true)))
 (let (($x226 (= $x28 true)))
 (let (($x261 (= $x226 true)))
 (let (($x56 (= ?x26 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x198 (= $x56 true)))
 (let (($x99 (= $x198 true)))
 (let ((?x238 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x238)))
 (let (($x194 (= ?x188 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x241 (= $x194 true)))
 (let (($x159 (= $x241 true)))
 (let (($x210 (and $x159 $x99)))
 (let (($x10 (and $x210 $x261)))
 (let (($x275 (and $x10 $x255)))
 (let (($x191 (and $x275 $x87)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x288 (and $x273 $x191)))
 (let (($x98 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x121 (and $x98 $x288)))
 (let (($x237 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x35 (_ bv1 32))))
 (=> $x287 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x221 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x221 (_ bv1 32))))
 (let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x35 (_ bv1 32))))
 (= $x287 $x177))))))
 ))
 (let (($x224 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x35 (_ bv0 32))))
 (=> $x123 $x104)))))
 ))
 (let (($x112 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x221 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x221 (_ bv0 32))))
 (let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x35 (_ bv0 32))))
 (= $x123 $x282))))))
 ))
 (let (($x96 (and $x112 $x224)))
 (let (($x76 (and $x96 $x116)))
 (let (($x228 (and $x76 $x237)))
 (let (($x17 (and $x228 $x121)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x119 (and $x9 $x17)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x247 (and $x92 $x119)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x125 (and $x91 $x247)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x59 (and $x53 $x125)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x219 (and $x23 $x59)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x134 (and $x16 $x219)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x197 (and $x7 $x134)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x192 (and $x21 $x197)))
 (let (($x79 (=> $x192 $x30)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (not $x108)))
 (let (($x151 (= $x20 false)))
 (let (($x30 (= $x151 true)))
 (let ((?x289 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x26 (bvneg ?x289)))
 (let (($x269 (= ?x26 input.dst.llvm-%n)))
 (let (($x72 (= $x269 true)))
 (let (($x87 (= $x72 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x174)))
 (let (($x106 (= ?x231 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x106 true)))
 (let (($x255 (= $x160 true)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x49)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x217 $x57)))
 (let (($x90 (and $x120 $x182)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x130 $x90)))
 (let (($x28 (= $x290 true)))
 (let (($x226 (= $x28 true)))
 (let (($x261 (= $x226 true)))
 (let (($x56 (= ?x26 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x198 (= $x56 true)))
 (let (($x99 (= $x198 true)))
 (let ((?x238 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x238)))
 (let (($x194 (= ?x188 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x241 (= $x194 true)))
 (let (($x159 (= $x241 true)))
 (let (($x210 (and $x159 $x99)))
 (let (($x10 (and $x210 $x261)))
 (let (($x275 (and $x10 $x255)))
 (let (($x191 (and $x275 $x87)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x288 (and $x273 $x191)))
 (let (($x98 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x121 (and $x98 $x288)))
 (let (($x237 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x35 (_ bv1 32))))
 (=> $x287 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x116 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x221 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x221 (_ bv1 32))))
 (let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x35 (_ bv1 32))))
 (= $x287 $x177))))))
 ))
 (let (($x224 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x104 (= false false)))
 (let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x35 (_ bv0 32))))
 (=> $x123 $x104)))))
 ))
 (let (($x112 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x221 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x221 (_ bv0 32))))
 (let ((?x35 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x35 (_ bv0 32))))
 (= $x123 $x282))))))
 ))
 (let (($x96 (and $x112 $x224)))
 (let (($x76 (and $x96 $x116)))
 (let (($x228 (and $x76 $x237)))
 (let (($x17 (and $x228 $x121)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x119 (and $x9 $x17)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x247 (and $x92 $x119)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x125 (and $x91 $x247)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x59 (and $x53 $x125)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x219 (and $x23 $x59)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x134 (and $x16 $x219)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x197 (and $x7 $x134)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x192 (and $x21 $x197)))
 (let (($x79 (=> $x192 $x30)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800010)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800010)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000c8100)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000c8103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000c8100)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x29 (or $x278 $x149)))
 (let (($x75 (= $x29 true)))
 (let (($x253 (= $x75 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x65)))
 (let (($x211 (= ?x157 input.dst.llvm-%n)))
 (let (($x25 (= $x211 true)))
 (let (($x227 (= $x25 true)))
 (let (($x150 (= ?x157 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (= $x150 true)))
 (let (($x135 (= $x103 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x102)))
 (let (($x257 (= ?x229 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x257 true)))
 (let (($x179 (= $x164 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x20)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x219 $x192)))
 (let (($x30 (and $x108 $x151)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x125 $x30)))
 (let (($x39 (= $x79 true)))
 (let (($x178 (= $x39 true)))
 (let (($x139 (= $x178 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x72)))
 (let (($x288 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x288 true)))
 (let (($x17 (= $x121 true)))
 (let (($x260 (and $x17 $x139)))
 (let (($x19 (and $x260 $x179)))
 (let (($x266 (and $x19 $x135)))
 (let (($x181 (and $x266 $x227)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x259 (and $x275 $x181)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x129 (and $x106 $x259)))
 (let (($x174 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x238 (_ bv1 32))))
 (=> $x124 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x40 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x40 (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x238 (_ bv1 32))))
 (= $x124 $x130))))))
 ))
 (let (($x26 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x241 (= false false)))
 (let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x238 (_ bv0 32))))
 (=> $x188 $x241)))))
 ))
 (let (($x194 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x40 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x40 (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x238 (_ bv0 32))))
 (= $x188 $x48))))))
 ))
 (let (($x56 (and $x194 $x26)))
 (let (($x120 (and $x56 $x57)))
 (let (($x231 (and $x120 $x174)))
 (let (($x245 (and $x231 $x129)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x234 (and $x9 $x245)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x88 (and $x92 $x234)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x199 (and $x91 $x88)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x15 (and $x53 $x199)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x85 (and $x23 $x15)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x168 (and $x16 $x85)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x263 (and $x7 $x168)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x193 (and $x84 $x263)))
 (let (($x183 (=> $x193 $x253)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x29 (or $x278 $x149)))
 (let (($x75 (= $x29 true)))
 (let (($x253 (= $x75 true)))
 (let ((?x65 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x65)))
 (let (($x211 (= ?x157 input.dst.llvm-%n)))
 (let (($x25 (= $x211 true)))
 (let (($x227 (= $x25 true)))
 (let (($x150 (= ?x157 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x103 (= $x150 true)))
 (let (($x135 (= $x103 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x102)))
 (let (($x257 (= ?x229 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x257 true)))
 (let (($x179 (= $x164 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x20)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x219 $x192)))
 (let (($x30 (and $x108 $x151)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x125 $x30)))
 (let (($x39 (= $x79 true)))
 (let (($x178 (= $x39 true)))
 (let (($x139 (= $x178 true)))
 (let ((?x72 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x72)))
 (let (($x288 (= ?x87 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x288 true)))
 (let (($x17 (= $x121 true)))
 (let (($x260 (and $x17 $x139)))
 (let (($x19 (and $x260 $x179)))
 (let (($x266 (and $x19 $x135)))
 (let (($x181 (and $x266 $x227)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x259 (and $x275 $x181)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x129 (and $x106 $x259)))
 (let (($x174 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x238 (_ bv1 32))))
 (=> $x124 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x57 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x40 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x40 (_ bv1 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x238 (_ bv1 32))))
 (= $x124 $x130))))))
 ))
 (let (($x26 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x241 (= false false)))
 (let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x238 (_ bv0 32))))
 (=> $x188 $x241)))))
 ))
 (let (($x194 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x40 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x40 (_ bv0 32))))
 (let ((?x238 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x238 (_ bv0 32))))
 (= $x188 $x48))))))
 ))
 (let (($x56 (and $x194 $x26)))
 (let (($x120 (and $x56 $x57)))
 (let (($x231 (and $x120 $x174)))
 (let (($x245 (and $x231 $x129)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x234 (and $x9 $x245)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x88 (and $x92 $x234)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x199 (and $x91 $x88)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x15 (and $x53 $x199)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x85 (and $x23 $x15)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x168 (and $x16 $x85)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x263 (and $x7 $x168)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x193 (and $x84 $x263)))
 (let (($x183 (=> $x193 $x253)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x14 true)))
 (let (($x94 (= $x171 true)))
 (let ((?x98 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x98)))
 (let (($x273 (= ?x205 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x273 true)))
 (let (($x198 (= $x159 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x112)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x6 $x282)))
 (let (($x224 (and $x218 $x137)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x116 $x224)))
 (let (($x287 (= $x96 true)))
 (let (($x177 (= $x287 true)))
 (let (($x237 (= $x177 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x253)))
 (let (($x38 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x38 true)))
 (let (($x35 (= $x206 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x199)))
 (let (($x278 (= ?x15 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x149 (= $x278 true)))
 (let (($x29 (= $x149 true)))
 (let (($x85 (= ?x15 input.dst.llvm-%n)))
 (let (($x168 (= $x85 true)))
 (let (($x263 (= $x168 true)))
 (let (($x181 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (not $x181)))
 (let (($x129 (= $x259 true)))
 (let (($x245 (= $x129 true)))
 (let (($x234 (= $x245 true)))
 (let (($x193 (and $x234 $x263)))
 (let (($x75 (and $x193 $x29)))
 (let (($x123 (and $x75 $x35)))
 (let (($x155 (and $x123 $x237)))
 (let (($x99 (and $x155 $x198)))
 (let (($x211 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x210 (and $x211 $x99)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x42 (and $x266 $x210)))
 (let (($x150 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x154 (and $x150 $x42)))
 (let (($x19 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x72 (_ bv1 32))))
 (=> $x30 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x39 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x212 (_ bv1 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x72 (_ bv1 32))))
 (= $x30 $x108))))))
 ))
 (let (($x247 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (= ?x72 (_ bv0 32))))
 (=> $x87 $x121)))))
 ))
 (let (($x288 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x212 (_ bv0 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (= ?x72 (_ bv0 32))))
 (= $x87 $x176))))))
 ))
 (let (($x125 (and $x288 $x247)))
 (let (($x178 (and $x125 $x39)))
 (let (($x65 (and $x178 $x19)))
 (let (($x200 (and $x65 $x154)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x217 (and $x9 $x200)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x49 (and $x92 $x217)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x182 (and $x91 $x49)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x90 (and $x53 $x182)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x290 (and $x23 $x90)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x28 (and $x16 $x290)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x226 (and $x7 $x28)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x214 (and $x70 $x226)))
 (let (($x80 (=> $x214 $x94)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x14 true)))
 (let (($x94 (= $x171 true)))
 (let ((?x98 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x98)))
 (let (($x273 (= ?x205 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x273 true)))
 (let (($x198 (= $x159 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x112)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x6 $x282)))
 (let (($x224 (and $x218 $x137)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x116 $x224)))
 (let (($x287 (= $x96 true)))
 (let (($x177 (= $x287 true)))
 (let (($x237 (= $x177 true)))
 (let ((?x253 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x253)))
 (let (($x38 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x38 true)))
 (let (($x35 (= $x206 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x199)))
 (let (($x278 (= ?x15 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x149 (= $x278 true)))
 (let (($x29 (= $x149 true)))
 (let (($x85 (= ?x15 input.dst.llvm-%n)))
 (let (($x168 (= $x85 true)))
 (let (($x263 (= $x168 true)))
 (let (($x181 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (not $x181)))
 (let (($x129 (= $x259 true)))
 (let (($x245 (= $x129 true)))
 (let (($x234 (= $x245 true)))
 (let (($x193 (and $x234 $x263)))
 (let (($x75 (and $x193 $x29)))
 (let (($x123 (and $x75 $x35)))
 (let (($x155 (and $x123 $x237)))
 (let (($x99 (and $x155 $x198)))
 (let (($x211 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x210 (and $x211 $x99)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x42 (and $x266 $x210)))
 (let (($x150 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x154 (and $x150 $x42)))
 (let (($x19 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x72 (_ bv1 32))))
 (=> $x30 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x39 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x212 (_ bv1 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x72 (_ bv1 32))))
 (= $x30 $x108))))))
 ))
 (let (($x247 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x121 (= false false)))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (= ?x72 (_ bv0 32))))
 (=> $x87 $x121)))))
 ))
 (let (($x288 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x212 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x212 (_ bv0 32))))
 (let ((?x72 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (= ?x72 (_ bv0 32))))
 (= $x87 $x176))))))
 ))
 (let (($x125 (and $x288 $x247)))
 (let (($x178 (and $x125 $x39)))
 (let (($x65 (and $x178 $x19)))
 (let (($x200 (and $x65 $x154)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x217 (and $x9 $x200)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x49 (and $x92 $x217)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x182 (and $x91 $x49)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x90 (and $x53 $x182)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x290 (and $x23 $x90)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x28 (and $x16 $x290)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x226 (and $x7 $x28)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x214 (and $x70 $x226)))
 (let (($x80 (=> $x214 $x94)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 119 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (not $x59)))
 (let (($x134 (or $x59 $x219)))
 (let (($x197 (= $x134 true)))
 (let (($x192 (= $x197 true)))
 (let ((?x273 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x273)))
 (let (($x22 (= ?x159 input.dst.llvm-%n)))
 (let (($x194 (= $x22 true)))
 (let (($x289 (= $x194 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x40)))
 (let (($x120 (= ?x78 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x120 true)))
 (let (($x5 (= $x261 true)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x214)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x290)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x182 $x28)))
 (let (($x171 (and $x226 $x14)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x217 $x171)))
 (let (($x80 (= $x94 true)))
 (let (($x142 (= $x80 true)))
 (let (($x122 (= $x142 true)))
 (let (($x198 (= ?x159 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x99 (= $x198 true)))
 (let (($x210 (= $x99 true)))
 (let ((?x237 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x237)))
 (let (($x98 (= ?x155 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x98 true)))
 (let (($x148 (= $x205 true)))
 (let (($x42 (and $x148 $x210)))
 (let (($x238 (and $x42 $x122)))
 (let (($x241 (and $x238 $x5)))
 (let (($x26 (and $x241 $x289)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x56 (and $x96 $x26)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x124 (and $x112 $x56)))
 (let (($x104 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x25 (_ bv1 32))))
 (=> $x75 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x183 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x179 (_ bv1 32))))
 (let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x25 (_ bv1 32))))
 (= $x75 $x278))))))
 ))
 (let (($x88 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x25 (_ bv0 32))))
 (=> $x227 $x129)))))
 ))
 (let (($x259 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x179 (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x25 (_ bv0 32))))
 (= $x227 $x157))))))
 ))
 (let (($x199 (and $x259 $x88)))
 (let (($x38 (and $x199 $x183)))
 (let (($x282 (and $x38 $x104)))
 (let (($x130 (and $x282 $x124)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x174 (and $x9 $x130)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x10 (and $x92 $x174)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x231 (and $x91 $x10)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x106 (and $x53 $x231)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x160 (and $x23 $x106)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x255 (and $x16 $x160)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x275 (and $x7 $x255)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x17 (and $x70 $x275)))
 (let (($x20 (=> $x17 $x192)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (not $x59)))
 (let (($x134 (or $x59 $x219)))
 (let (($x197 (= $x134 true)))
 (let (($x192 (= $x197 true)))
 (let ((?x273 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x273)))
 (let (($x22 (= ?x159 input.dst.llvm-%n)))
 (let (($x194 (= $x22 true)))
 (let (($x289 (= $x194 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x40)))
 (let (($x120 (= ?x78 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x120 true)))
 (let (($x5 (= $x261 true)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x214)))
 (let ((?x290 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x290)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x182 $x28)))
 (let (($x171 (and $x226 $x14)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x217 $x171)))
 (let (($x80 (= $x94 true)))
 (let (($x142 (= $x80 true)))
 (let (($x122 (= $x142 true)))
 (let (($x198 (= ?x159 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x99 (= $x198 true)))
 (let (($x210 (= $x99 true)))
 (let ((?x237 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x237)))
 (let (($x98 (= ?x155 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x98 true)))
 (let (($x148 (= $x205 true)))
 (let (($x42 (and $x148 $x210)))
 (let (($x238 (and $x42 $x122)))
 (let (($x241 (and $x238 $x5)))
 (let (($x26 (and $x241 $x289)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x56 (and $x96 $x26)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x124 (and $x112 $x56)))
 (let (($x104 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x25 (_ bv1 32))))
 (=> $x75 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x183 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x179 (_ bv1 32))))
 (let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x25 (_ bv1 32))))
 (= $x75 $x278))))))
 ))
 (let (($x88 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x129 (= false false)))
 (let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x25 (_ bv0 32))))
 (=> $x227 $x129)))))
 ))
 (let (($x259 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x179 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x179 (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x25 (_ bv0 32))))
 (= $x227 $x157))))))
 ))
 (let (($x199 (and $x259 $x88)))
 (let (($x38 (and $x199 $x183)))
 (let (($x282 (and $x38 $x104)))
 (let (($x130 (and $x282 $x124)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x174 (and $x9 $x130)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x10 (and $x92 $x174)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x231 (and $x91 $x10)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x106 (and $x53 $x231)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x160 (and $x23 $x106)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x255 (and $x16 $x160)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x275 (and $x7 $x255)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x17 (and $x70 $x275)))
 (let (($x20 (=> $x17 $x192)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 113 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x106)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x124 $x10)))
 (let (($x255 (and $x231 $x160)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x194 $x255)))
 (let (($x168 (= $x85 true)))
 (let (($x263 (= $x168 true)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x212 (concat ?x269 (concat ?x197 ?x219)))))
 (let (($x288 (= ?x79 input.dst.llvm-%n)))
 (let (($x119 (= $x288 true)))
 (let (($x247 (= $x119 true)))
 (let (($x39 (= input.dst.llvm-%n ?x79)))
 (let (($x172 (and (and (and $x194 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x255) $x39)))
 (let (($x121 (= $x172 true)))
 (let (($x176 (= $x121 true)))
 (let (($x191 (= $x176 true)))
 (let (($x125 (and $x191 $x247)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x30 (and $x241 $x125)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x108 (and $x120 $x30)))
 (let (($x40 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x237 (_ bv1 32))))
 (=> $x90 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x28 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x207 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x237 (_ bv1 32))))
 (= $x90 $x217))))))
 ))
 (let (($x159 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x205 (= false false)))
 (let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x237 (_ bv0 32))))
 (=> $x155 $x205)))))
 ))
 (let (($x98 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x207 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x237 (_ bv0 32))))
 (= $x155 $x218))))))
 ))
 (let (($x198 (and $x98 $x159)))
 (let (($x226 (and $x198 $x28)))
 (let (($x78 (and $x226 $x40)))
 (let (($x19 (and $x78 $x108)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x164 (and $x9 $x19)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x65 (and $x92 $x164)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x150 (and $x91 $x65)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x103 (and $x53 $x150)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x23 $x103)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x266 (and $x16 $x135)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x245 (and $x7 $x266)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x15 (and $x70 $x245)))
 (let (($x193 (=> $x15 $x263)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x160 (= (_ bv0 32) ?x106)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x124 $x10)))
 (let (($x255 (and $x231 $x160)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x194 $x255)))
 (let (($x168 (= $x85 true)))
 (let (($x263 (= $x168 true)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x212 (concat ?x269 (concat ?x197 ?x219)))))
 (let (($x288 (= ?x79 input.dst.llvm-%n)))
 (let (($x119 (= $x288 true)))
 (let (($x247 (= $x119 true)))
 (let (($x39 (= input.dst.llvm-%n ?x79)))
 (let (($x172 (and (and (and $x194 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x255) $x39)))
 (let (($x121 (= $x172 true)))
 (let (($x176 (= $x121 true)))
 (let (($x191 (= $x176 true)))
 (let (($x125 (and $x191 $x247)))
 (let (($x241 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x30 (and $x241 $x125)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x108 (and $x120 $x30)))
 (let (($x40 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x237 (_ bv1 32))))
 (=> $x90 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x28 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x207 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x237 (_ bv1 32))))
 (= $x90 $x217))))))
 ))
 (let (($x159 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x205 (= false false)))
 (let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x237 (_ bv0 32))))
 (=> $x155 $x205)))))
 ))
 (let (($x98 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x207 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x218 (= ?x207 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x237 (_ bv0 32))))
 (= $x155 $x218))))))
 ))
 (let (($x198 (and $x98 $x159)))
 (let (($x226 (and $x198 $x28)))
 (let (($x78 (and $x226 $x40)))
 (let (($x19 (and $x78 $x108)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x164 (and $x9 $x19)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x65 (and $x92 $x164)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x150 (and $x91 $x65)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x103 (and $x53 $x150)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x23 $x103)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x266 (and $x16 $x135)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x245 (and $x7 $x266)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x15 (and $x70 $x245)))
 (let (($x193 (=> $x15 $x263)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x171)))
 (let (($x80 (= ?x94 input.dst.llvm-%n)))
 (let (($x142 (= $x80 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x157 (concat ?x76 (concat ?x179 ?x25)))))
 (let (($x6 (= ?x181 input.dst.llvm-%n)))
 (let (($x282 (= $x6 true)))
 (let (($x112 (= $x282 true)))
 (let (($x259 (= input.dst.llvm-%n ?x181)))
 (let ((?x263 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x263)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x266 $x85)))
 (let (($x149 (and $x168 $x193)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and (and (and $x65 $x103) $x149) $x259)))
 (let (($x75 (= $x199 true)))
 (let (($x278 (= $x75 true)))
 (let (($x104 (= $x278 true)))
 (let (($x137 (and $x104 $x112)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x224 (and $x108 $x137)))
 (let (($x247 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x96 (and $x247 $x224)))
 (let (($x191 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x194 (_ bv1 32))))
 (=> $x20 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x269 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x188 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x188 (_ bv1 32))))
 (let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x194 (_ bv1 32))))
 (= $x20 $x275))))))
 ))
 (let (($x174 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x194 (_ bv0 32))))
 (=> $x289 $x56)))))
 ))
 (let (($x178 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x188 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x188 (_ bv0 32))))
 (let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x194 (_ bv0 32))))
 (= $x289 $x57))))))
 ))
 (let (($x10 (and $x178 $x174)))
 (let (($x134 (and $x10 $x269)))
 (let (($x288 (and $x134 $x191)))
 (let (($x148 (and $x288 $x96)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x99 (and $x9 $x148)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x210 (and $x92 $x99)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x42 (and $x91 $x210)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x154 (and $x53 $x42)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x200 (and $x23 $x154)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x49 (and $x16 $x200)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x182 (and $x7 $x49)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x214 (and $x70 $x182)))
 (let (($x29 (=> $x214 $x142)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x171)))
 (let (($x80 (= ?x94 input.dst.llvm-%n)))
 (let (($x142 (= $x80 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x157 (concat ?x76 (concat ?x179 ?x25)))))
 (let (($x6 (= ?x181 input.dst.llvm-%n)))
 (let (($x282 (= $x6 true)))
 (let (($x112 (= $x282 true)))
 (let (($x259 (= input.dst.llvm-%n ?x181)))
 (let ((?x263 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x263)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x266 $x85)))
 (let (($x149 (and $x168 $x193)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and (and (and $x65 $x103) $x149) $x259)))
 (let (($x75 (= $x199 true)))
 (let (($x278 (= $x75 true)))
 (let (($x104 (= $x278 true)))
 (let (($x137 (and $x104 $x112)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x224 (and $x108 $x137)))
 (let (($x247 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x96 (and $x247 $x224)))
 (let (($x191 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x194 (_ bv1 32))))
 (=> $x20 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x269 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x188 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x188 (_ bv1 32))))
 (let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x194 (_ bv1 32))))
 (= $x20 $x275))))))
 ))
 (let (($x174 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x56 (= false false)))
 (let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x194 (_ bv0 32))))
 (=> $x289 $x56)))))
 ))
 (let (($x178 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x188 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x188 (_ bv0 32))))
 (let ((?x194 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x194 (_ bv0 32))))
 (= $x289 $x57))))))
 ))
 (let (($x10 (and $x178 $x174)))
 (let (($x134 (and $x10 $x269)))
 (let (($x288 (and $x134 $x191)))
 (let (($x148 (and $x288 $x96)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x99 (and $x9 $x148)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x210 (and $x92 $x99)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x42 (and $x91 $x210)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x154 (and $x53 $x42)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x200 (and $x23 $x154)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x49 (and $x16 $x200)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x182 (and $x7 $x49)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x214 (and $x70 $x182)))
 (let (($x29 (=> $x214 $x142)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x197)))
 (let (($x192 (= ?x219 input.spec-%var-n-1)))
 (let (($x72 (= $x192 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x29 (concat ?x171 (concat ?x49 ?x154)))))
 (let (($x273 (= input.dst.llvm-%n ?x206)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x218)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x226 $x287)))
 (let (($x98 (and $x205 $x228)))
 (let (($x290 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and (and (and $x207 $x290) $x98) $x273)))
 (let (($x217 (= $x90 true)))
 (let (($x40 (= $x217 true)))
 (let (($x238 (= $x40 true)))
 (let (($x211 (= ?x206 input.dst.llvm-%n)))
 (let (($x177 (= $x211 true)))
 (let (($x237 (= $x177 true)))
 (let (($x78 (and $x237 $x238)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x120 (and $x96 $x78)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x261 (and $x112 $x120)))
 (let (($x104 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x65 (_ bv1 32))))
 (=> $x183 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x76 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x176 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x176 (_ bv1 32))))
 (let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x65 (_ bv1 32))))
 (= $x183 $x17))))))
 ))
 (let (($x15 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x135 (= false false)))
 (let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x65 (_ bv0 32))))
 (=> $x150 $x135)))))
 ))
 (let (($x234 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x176 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x176 (_ bv0 32))))
 (let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x65 (_ bv0 32))))
 (= $x150 $x119))))))
 ))
 (let (($x85 (and $x234 $x15)))
 (let (($x227 (and $x85 $x76)))
 (let (($x6 (and $x227 $x104)))
 (let (($x5 (and $x6 $x261)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x241 (and $x9 $x5)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x124 (and $x92 $x241)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x231 (and $x91 $x124)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x106 (and $x53 $x231)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x160 (and $x23 $x106)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x255 (and $x16 $x160)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x257 (and $x7 $x255)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x87 (and $x70 $x257)))
 (let (($x79 (=> $x87 $x72)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x197)))
 (let (($x192 (= ?x219 input.spec-%var-n-1)))
 (let (($x72 (= $x192 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x29 (concat ?x171 (concat ?x49 ?x154)))))
 (let (($x273 (= input.dst.llvm-%n ?x206)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x218)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x226 $x287)))
 (let (($x98 (and $x205 $x228)))
 (let (($x290 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x207 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and (and (and $x207 $x290) $x98) $x273)))
 (let (($x217 (= $x90 true)))
 (let (($x40 (= $x217 true)))
 (let (($x238 (= $x40 true)))
 (let (($x211 (= ?x206 input.dst.llvm-%n)))
 (let (($x177 (= $x211 true)))
 (let (($x237 (= $x177 true)))
 (let (($x78 (and $x237 $x238)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x120 (and $x96 $x78)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x261 (and $x112 $x120)))
 (let (($x104 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x65 (_ bv1 32))))
 (=> $x183 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda41Var) (_ bv0 32))))))
 ))
 (let (($x76 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x176 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x176 (_ bv1 32))))
 (let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x65 (_ bv1 32))))
 (= $x183 $x17))))))
 ))
 (let (($x15 (forall ((Lambda41Var (_ BitVec 32)) )(let (($x135 (= false false)))
 (let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x65 (_ bv0 32))))
 (=> $x150 $x135)))))
 ))
 (let (($x234 (forall ((Lambda41Var (_ BitVec 32)) )(let ((?x176 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x176 (_ bv0 32))))
 (let ((?x65 (ite (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda41Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x65 (_ bv0 32))))
 (= $x150 $x119))))))
 ))
 (let (($x85 (and $x234 $x15)))
 (let (($x227 (and $x85 $x76)))
 (let (($x6 (and $x227 $x104)))
 (let (($x5 (and $x6 $x261)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x241 (and $x9 $x5)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x124 (and $x92 $x241)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x231 (and $x91 $x124)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x106 (and $x53 $x231)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x160 (and $x23 $x106)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x255 (and $x16 $x160)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x257 (and $x7 $x255)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x87 (and $x70 $x257)))
 (let (($x79 (=> $x87 $x72)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2707967/query
