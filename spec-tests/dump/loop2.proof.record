==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x114 (= $x113 true)))
 (let (($x99 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x85 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x89 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x85 false)))
 ))
 (let (($x100 (and $x89 $x99)))
 (let (($x101 (= $x100 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x50)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x29)))
 (let (($x52 (and $x22 $x51)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x38 $x52)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x54 (and $x27 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x102 (and $x80 $x101)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x5 $x102)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x13 $x103)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x105 (and $x41 $x104)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x106 (and $x44 $x105)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x107 (and $x49 $x106)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x108 (and $x45 $x107)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x109 (and $x47 $x108)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x110 (and $x34 $x109)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x111 (and $x21 $x110)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x112 (and $x7 $x111)))
 (let (($x115 (=> $x112 $x114)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x114 (= $x113 true)))
 (let (($x99 (forall ((input.ind-%var173X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var173X)))
 (=> $x85 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var173X) (_ bv0 32)))))
 ))
 (let (($x89 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var172X)))
 (= $x85 false)))
 ))
 (let (($x100 (and $x89 $x99)))
 (let (($x101 (= $x100 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x72 (concat ?x68 ?x66)))))
 (let (($x77 (= ?x76 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x59 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x50)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x42 $x29)))
 (let (($x52 (and $x22 $x51)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x38 $x52)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x54 (and $x27 $x53)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x63 (and $x57 $x62)))
 (let (($x80 (and $x63 $x79)))
 (let (($x102 (and $x80 $x101)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x5 $x102)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x13 $x103)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x105 (and $x41 $x104)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x106 (and $x44 $x105)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x107 (and $x49 $x106)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x108 (and $x45 $x107)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x109 (and $x47 $x108)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x110 (and $x34 $x109)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x111 (and $x21 $x110)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x112 (and $x7 $x111)))
 (let (($x115 (=> $x112 $x114)))
 (not $x115))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00028010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00028013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00028010)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfcbd2113)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfcbd2110)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x11)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x94 (and $x43 $x39)))
 (let (($x92 (= $x94 true)))
 (let (($x81 (= $x92 true)))
 (let (($x106 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x84 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x84 false)))
 ))
 (let (($x107 (and $x93 $x106)))
 (let (($x108 (= $x107 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x74 (concat ?x61 ?x59)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let (($x69 (and (and (and $x43 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x39) $x67)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x77 (= $x76 true)))
 (let (($x109 (and $x77 $x108)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x25 $x109)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x111 (and $x41 $x110)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x112 (and $x45 $x111)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x113 (and $x29 $x112)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x40 $x113)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x115 (and $x18 $x114)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x116 (and $x17 $x115)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x36 (and $x23 $x116)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x65 (and $x24 $x36)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x86 (and $x20 $x65)))
 (let (($x83 (=> $x86 $x81)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x11)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x51)))))))
 (let (($x94 (and $x43 $x39)))
 (let (($x92 (= $x94 true)))
 (let (($x81 (= $x92 true)))
 (let (($x106 (forall ((input.ind-%var187X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var187X)))
 (=> $x84 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var187X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var186X (_ BitVec 32)) )(let (($x84 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var186X)))
 (= $x84 false)))
 ))
 (let (($x107 (and $x93 $x106)))
 (let (($x108 (= $x107 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x74 (concat ?x61 ?x59)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let (($x69 (and (and (and $x43 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x39) $x67)))
 (let (($x73 (= $x69 true)))
 (let (($x76 (= $x73 true)))
 (let (($x77 (= $x76 true)))
 (let (($x109 (and $x77 $x108)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x25 $x109)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x111 (and $x41 $x110)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x112 (and $x45 $x111)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x113 (and $x29 $x112)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x40 $x113)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x115 (and $x18 $x114)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x116 (and $x17 $x115)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x36 (and $x23 $x116)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x65 (and $x24 $x36)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x86 (and $x20 $x65)))
 (let (($x83 (=> $x86 $x81)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x102 (= $x88 true)))
 (let (($x65 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x104 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x104 false)))
 ))
 (let (($x86 (and $x108 $x65)))
 (let (($x94 (= $x86 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x75 (concat ?x61 (concat ?x63 ?x70)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x11)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x22)))))))
 (let (($x76 (and (and (and $x68 $x13) $x39) $x67)))
 (let (($x77 (= $x76 true)))
 (let (($x80 (= $x77 true)))
 (let (($x84 (= $x80 true)))
 (let (($x92 (and $x84 $x94)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x50 $x92)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x83 (and $x57 $x81)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x87 (and $x54 $x83)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x46 (and $x19 $x87)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x58 (and $x9 $x46)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x85 (and $x37 $x58)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x101 (and $x5 $x85)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x99 (and $x15 $x101)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x78 (and $x31 $x99)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x79 (and $x7 $x78)))
 (let (($x98 (=> $x79 $x102)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x102 (= $x88 true)))
 (let (($x65 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x104 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x104 false)))
 ))
 (let (($x86 (and $x108 $x65)))
 (let (($x94 (= $x86 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x75 (concat ?x61 (concat ?x63 ?x70)))))
 (let (($x67 (= input.dst.llvm-%n ?x72)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x11)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x55 $x52)))
 (let (($x44 (and $x26 $x30)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x33 $x44)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x22)))))))
 (let (($x76 (and (and (and $x68 $x13) $x39) $x67)))
 (let (($x77 (= $x76 true)))
 (let (($x80 (= $x77 true)))
 (let (($x84 (= $x80 true)))
 (let (($x92 (and $x84 $x94)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x50 $x92)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x83 (and $x57 $x81)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x87 (and $x54 $x83)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x46 (and $x19 $x87)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x58 (and $x9 $x46)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x85 (and $x37 $x58)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x101 (and $x5 $x85)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x99 (and $x15 $x101)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x78 (and $x31 $x99)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x79 (and $x7 $x78)))
 (let (($x98 (=> $x79 $x102)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x110)))
 (let (($x97 (= ?x115 input.dst.llvm-%n)))
 (let (($x90 (= $x97 true)))
 (let (($x79 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x36 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x36 false)))
 ))
 (let (($x88 (and $x92 $x79)))
 (let (($x102 (= $x88 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x70 (concat ?x60 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x32 $x26)))
 (let (($x39 (and $x11 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x43)))))))
 (let (($x84 (and (and (and $x14 $x49) $x73) $x76)))
 (let (($x100 (= $x84 true)))
 (let (($x104 (= $x100 true)))
 (let (($x107 (= $x104 true)))
 (let (($x98 (and $x107 $x102)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x50 $x98)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x25 (and $x45 $x103)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x38 (and $x29 $x25)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x28 (and $x40 $x38)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x105 (and $x18 $x28)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x113 (and $x17 $x105)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x111 (and $x21 $x113)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x89 (and $x24 $x111)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x93 (and $x7 $x89)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x106 (and $x12 $x93)))
 (let (($x95 (=> $x106 $x90)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x110)))
 (let (($x97 (= ?x115 input.dst.llvm-%n)))
 (let (($x90 (= $x97 true)))
 (let (($x79 (forall ((input.ind-%var207X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var207X)))
 (=> $x36 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var207X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var206X)))
 (= $x36 false)))
 ))
 (let (($x88 (and $x92 $x79)))
 (let (($x102 (= $x88 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x72 (concat ?x70 (concat ?x60 ?x75)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x32 $x26)))
 (let (($x39 (and $x11 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x43)))))))
 (let (($x84 (and (and (and $x14 $x49) $x73) $x76)))
 (let (($x100 (= $x84 true)))
 (let (($x104 (= $x100 true)))
 (let (($x107 (= $x104 true)))
 (let (($x98 (and $x107 $x102)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x50 $x98)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x25 (and $x45 $x103)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x38 (and $x29 $x25)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x28 (and $x40 $x38)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x105 (and $x18 $x28)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x113 (and $x17 $x105)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x111 (and $x21 $x113)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x89 (and $x24 $x111)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x93 (and $x7 $x89)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x106 (and $x12 $x93)))
 (let (($x95 (=> $x106 $x90)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x112)))
 (let (($x85 (= ?x86 input.spec-%var-n-1)))
 (let (($x83 (= $x85 true)))
 (let (($x93 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x99 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x99 false)))
 ))
 (let (($x106 (and $x102 $x93)))
 (let (($x114 (= $x106 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x60 (concat ?x71 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x32 $x26)))
 (let (($x39 (and $x11 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x68)))))))
 (let (($x104 (and (and (and $x77 $x69) $x73) $x76)))
 (let (($x107 (= $x104 true)))
 (let (($x116 (= $x107 true)))
 (let (($x36 (= $x116 true)))
 (let (($x110 (and $x36 $x114)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x48 $x110)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x97 (and $x54 $x115)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x90 (and $x19 $x97)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x95 (and $x9 $x90)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x91 (and $x37 $x95)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x42 (and $x5 $x91)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x62 (and $x23 $x42)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x65 (and $x35 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x58 (and $x31 $x65)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x87 (and $x20 $x58)))
 (let (($x101 (=> $x87 $x83)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x112)))
 (let (($x85 (= ?x86 input.spec-%var-n-1)))
 (let (($x83 (= $x85 true)))
 (let (($x93 (forall ((input.ind-%var213X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var213X)))
 (=> $x99 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var213X) (_ bv0 32)))))
 ))
 (let (($x102 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var212X)))
 (= $x99 false)))
 ))
 (let (($x106 (and $x102 $x93)))
 (let (($x114 (= $x106 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x64 (concat ?x60 (concat ?x71 ?x59)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x32 $x26)))
 (let (($x39 (and $x11 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x69 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x68)))))))
 (let (($x104 (and (and (and $x77 $x69) $x73) $x76)))
 (let (($x107 (= $x104 true)))
 (let (($x116 (= $x107 true)))
 (let (($x36 (= $x116 true)))
 (let (($x110 (and $x36 $x114)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x48 $x110)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x97 (and $x54 $x115)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x90 (and $x19 $x97)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x95 (and $x9 $x90)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x91 (and $x37 $x95)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x42 (and $x5 $x91)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x62 (and $x23 $x42)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x65 (and $x35 $x62)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x58 (and $x31 $x65)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x87 (and $x20 $x58)))
 (let (($x101 (=> $x87 $x83)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x94 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x92 (= $x94 true)))
 (let (($x79 (= $x92 true)))
 (let (($x58 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var219X)))
 (=> $x111 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var218X)))
 (= $x111 false)))
 ))
 (let (($x87 (and $x114 $x58)))
 (let (($x108 (= $x87 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x71 (concat ?x70 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x32 $x26)))
 (let (($x39 (and $x11 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x13)))))))
 (let (($x116 (and (and (and $x84 $x49) $x73) $x76)))
 (let (($x36 (= $x116 true)))
 (let (($x46 (= $x36 true)))
 (let (($x99 (= $x46 true)))
 (let (($x112 (and $x99 $x108)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x57 $x112)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x85 (and $x29 $x86)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x83 (and $x40 $x85)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x101 (and $x18 $x83)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x109 (and $x17 $x101)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x51 (and $x21 $x109)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x66 (and $x15 $x51)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x78 (and $x7 $x66)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x28 (and $x6 $x78)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x25 (and $x50 $x28)))
 (let (($x105 (=> $x25 $x79)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x94 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x92 (= $x94 true)))
 (let (($x79 (= $x92 true)))
 (let (($x58 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var219X)))
 (=> $x111 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var218X)))
 (= $x111 false)))
 ))
 (let (($x87 (and $x114 $x58)))
 (let (($x108 (= $x87 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x75 (concat ?x71 (concat ?x70 ?x61)))))
 (let (($x76 (= input.dst.llvm-%n ?x67)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x30)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x32 $x26)))
 (let (($x39 (and $x11 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x55 $x39)))
 (let (($x49 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x13)))))))
 (let (($x116 (and (and (and $x84 $x49) $x73) $x76)))
 (let (($x36 (= $x116 true)))
 (let (($x46 (= $x36 true)))
 (let (($x99 (= $x46 true)))
 (let (($x112 (and $x99 $x108)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x57 $x112)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x85 (and $x29 $x86)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x83 (and $x40 $x85)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x101 (and $x18 $x83)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x109 (and $x17 $x101)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x51 (and $x21 $x109)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x66 (and $x15 $x51)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x78 (and $x7 $x66)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x28 (and $x6 $x78)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x25 (and $x50 $x28)))
 (let (($x105 (=> $x25 $x79)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x177 false)))
 (let (($x179 (= $x178 true)))
 (let (($x163 (forall ((input.ind-%var233X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var233X)))
 (=> $x149 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var233X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var232X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var232X)))
 (= $x149 false)))
 ))
 (let (($x164 (and $x153 $x163)))
 (let (($x165 (= $x164 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x142 (= ?x43 input.dst.llvm-%n)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x122 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let (($x120 (= $x119 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x102)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x80 $x97)))
 (let (($x91 (and $x88 $x93)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x83 $x91)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x25)))))))
 (let (($x42 (and $x34 $x115)))
 (let (($x98 (= $x42 true)))
 (let (($x113 (= $x98 true)))
 (let (($x81 (= $x113 true)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x111 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let (($x36 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x46 (= $x36 true)))
 (let (($x99 (= $x46 true)))
 (let (($x74 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x59 (= $x74 true)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x71 (= $x72 true)))
 (let (($x64 (= $x71 true)))
 (let (($x70 (= $x64 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x100 (= $x107 true)))
 (let (($x63 (= $x100 true)))
 (let (($x75 (= $x63 true)))
 (let (($x11 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x30 (= $x11 true)))
 (let (($x44 (= $x30 true)))
 (let (($x39 (= $x44 true)))
 (let (($x33 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x55 (= $x33 true)))
 (let (($x32 (= $x55 true)))
 (let (($x47 (= $x32 true)))
 (let (($x8 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x8 true)))
 (let (($x10 (= $x84 true)))
 (let (($x49 (= $x10 true)))
 (let (($x22 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x13 (= $x22 true)))
 (let (($x14 (= $x13 true)))
 (let (($x56 (= $x14 true)))
 (let (($x69 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x69 true)))
 (let (($x68 (= $x53 true)))
 (let (($x77 (and $x68 $x56)))
 (let (($x104 (and $x77 $x49)))
 (let (($x52 (and $x104 $x47)))
 (let (($x73 (and $x52 $x39)))
 (let (($x60 (and $x73 $x75)))
 (let (($x61 (and $x60 $x70)))
 (let (($x116 (and $x61 $x76)))
 (let (($x38 (and $x116 $x99)))
 (let (($x90 (and $x38 $x114)))
 (let (($x108 (and $x90 $x87)))
 (let (($x96 (and $x108 $x81)))
 (let (($x121 (and $x96 $x120)))
 (let (($x126 (and $x121 $x125)))
 (let (($x131 (and $x126 $x130)))
 (let (($x136 (and $x131 $x135)))
 (let (($x140 (and $x136 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x166 (and $x145 $x165)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x45 $x166)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x168 (and $x19 $x167)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x169 (and $x9 $x168)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x37 $x169)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x171 (and $x5 $x170)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x23 $x171)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x173 (and $x6 $x172)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x174 (and $x24 $x173)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x175 (and $x41 $x174)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x176 (and $x35 $x175)))
 (let (($x180 (=> $x176 $x179)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x177 false)))
 (let (($x179 (= $x178 true)))
 (let (($x163 (forall ((input.ind-%var233X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var233X)))
 (=> $x149 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var233X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var232X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var232X)))
 (= $x149 false)))
 ))
 (let (($x164 (and $x153 $x163)))
 (let (($x165 (= $x164 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x142 (= ?x43 input.dst.llvm-%n)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x127 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x129 (= $x128 true)))
 (let (($x130 (= $x129 true)))
 (let (($x122 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x123 (= $x122 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x118 (= $x117 true)))
 (let (($x119 (= $x118 true)))
 (let (($x120 (= $x119 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x102)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x80 $x97)))
 (let (($x91 (and $x88 $x93)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x83 $x91)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x25)))))))
 (let (($x42 (and $x34 $x115)))
 (let (($x98 (= $x42 true)))
 (let (($x113 (= $x98 true)))
 (let (($x81 (= $x113 true)))
 (let (($x65 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x111 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let (($x36 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x46 (= $x36 true)))
 (let (($x99 (= $x46 true)))
 (let (($x74 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x59 (= $x74 true)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x71 (= $x72 true)))
 (let (($x64 (= $x71 true)))
 (let (($x70 (= $x64 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x100 (= $x107 true)))
 (let (($x63 (= $x100 true)))
 (let (($x75 (= $x63 true)))
 (let (($x11 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x30 (= $x11 true)))
 (let (($x44 (= $x30 true)))
 (let (($x39 (= $x44 true)))
 (let (($x33 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x55 (= $x33 true)))
 (let (($x32 (= $x55 true)))
 (let (($x47 (= $x32 true)))
 (let (($x8 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x8 true)))
 (let (($x10 (= $x84 true)))
 (let (($x49 (= $x10 true)))
 (let (($x22 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x13 (= $x22 true)))
 (let (($x14 (= $x13 true)))
 (let (($x56 (= $x14 true)))
 (let (($x69 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x53 (= $x69 true)))
 (let (($x68 (= $x53 true)))
 (let (($x77 (and $x68 $x56)))
 (let (($x104 (and $x77 $x49)))
 (let (($x52 (and $x104 $x47)))
 (let (($x73 (and $x52 $x39)))
 (let (($x60 (and $x73 $x75)))
 (let (($x61 (and $x60 $x70)))
 (let (($x116 (and $x61 $x76)))
 (let (($x38 (and $x116 $x99)))
 (let (($x90 (and $x38 $x114)))
 (let (($x108 (and $x90 $x87)))
 (let (($x96 (and $x108 $x81)))
 (let (($x121 (and $x96 $x120)))
 (let (($x126 (and $x121 $x125)))
 (let (($x131 (and $x126 $x130)))
 (let (($x136 (and $x131 $x135)))
 (let (($x140 (and $x136 $x139)))
 (let (($x145 (and $x140 $x144)))
 (let (($x166 (and $x145 $x165)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (and $x45 $x166)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x168 (and $x19 $x167)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x169 (and $x9 $x168)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x170 (and $x37 $x169)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x171 (and $x5 $x170)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x172 (and $x23 $x171)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x173 (and $x6 $x172)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x174 (and $x24 $x173)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x175 (and $x41 $x174)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x176 (and $x35 $x175)))
 (let (($x180 (=> $x176 $x179)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (not $x148)))
 (let (($x144 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (not $x144)))
 (let (($x152 (or $x145 $x149)))
 (let (($x153 (= $x152 true)))
 (let (($x157 (= $x153 true)))
 (let (($x130 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var659X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var658X)))
 (= $x82 false)))
 ))
 (let (($x131 (and $x120 $x130)))
 (let (($x132 (= $x131 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x92)))
 (let (($x89 (= ?x79 input.dst.llvm-%n)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x105 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x78 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x28 (= $x78 true)))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x90 (= $x114 true)))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x46 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x99 (= $x46 true)))
 (let (($x38 (= $x99 true)))
 (let (($x111 (= $x38 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x71)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x100 $x60)))
 (let (($x70 (and $x72 $x64)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x49 $x70)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x26)))))))
 (let (($x74 (and $x107 $x61)))
 (let (($x59 (= $x74 true)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x22 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x13 (= $x22 true)))
 (let (($x14 (= $x13 true)))
 (let (($x56 (= $x14 true)))
 (let ((?x27 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x53 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x53 true)))
 (let (($x16 (= $x68 true)))
 (let (($x77 (and $x16 $x56)))
 (let (($x116 (and $x77 $x76)))
 (let (($x106 (and $x116 $x111)))
 (let (($x58 (and $x106 $x65)))
 (let (($x51 (and $x58 $x103)))
 (let (($x94 (and $x51 $x25)))
 (let (($x83 (and $x94 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x133 (and $x98 $x132)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x54 $x133)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x135 (and $x31 $x134)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x12 $x135)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x137 (and $x17 $x136)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x138 (and $x6 $x137)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x139 (and $x20 $x138)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x140 (and $x15 $x139)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x141 (and $x35 $x140)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x21 $x141)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x50 $x142)))
 (let (($x161 (=> $x143 $x157)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (not $x148)))
 (let (($x144 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (not $x144)))
 (let (($x152 (or $x145 $x149)))
 (let (($x153 (= $x152 true)))
 (let (($x157 (= $x153 true)))
 (let (($x130 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var659X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var658X)))
 (= $x82 false)))
 ))
 (let (($x131 (and $x120 $x130)))
 (let (($x132 (= $x131 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let ((?x92 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x92)))
 (let (($x89 (= ?x79 input.dst.llvm-%n)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x105 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x78 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x28 (= $x78 true)))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x90 (= $x114 true)))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x46 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x99 (= $x46 true)))
 (let (($x38 (= $x99 true)))
 (let (($x111 (= $x38 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x71)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x100 $x60)))
 (let (($x70 (and $x72 $x64)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x49 $x70)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x26)))))))
 (let (($x74 (and $x107 $x61)))
 (let (($x59 (= $x74 true)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x22 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x13 (= $x22 true)))
 (let (($x14 (= $x13 true)))
 (let (($x56 (= $x14 true)))
 (let ((?x27 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x53 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x53 true)))
 (let (($x16 (= $x68 true)))
 (let (($x77 (and $x16 $x56)))
 (let (($x116 (and $x77 $x76)))
 (let (($x106 (and $x116 $x111)))
 (let (($x58 (and $x106 $x65)))
 (let (($x51 (and $x58 $x103)))
 (let (($x94 (and $x51 $x25)))
 (let (($x83 (and $x94 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x133 (and $x98 $x132)))
 (let (($x54 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x54 $x133)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x135 (and $x31 $x134)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x12 $x135)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x137 (and $x17 $x136)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x138 (and $x6 $x137)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x139 (and $x20 $x138)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x140 (and $x15 $x139)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x141 (and $x35 $x140)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x21 $x141)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x50 $x142)))
 (let (($x161 (=> $x143 $x157)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 128 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x164 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x166 (ite $x164 ?x165 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x154 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x167 (ite $x154 ?x163 ?x166)))
 (let ((?x168 (bvmul (_ bv4294967295 32) ?x167)))
 (let ((?x169 (bvneg ?x168)))
 (let (($x171 (= ?x169 ?x170)))
 (let (($x172 (= $x171 true)))
 (let (($x149 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var700X)))
 (=> $x133 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var700X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var699X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var699X)))
 (= $x133 false)))
 ))
 (let (($x152 (and $x137 $x149)))
 (let (($x153 (= $x152 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x90 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x99 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x64)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x63 $x72)))
 (let (($x61 (and $x71 $x70)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x73 $x61)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x30)))))))
 (let (($x59 (and $x100 $x74)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x116 (= $x76 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x22 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x22 true)))
 (let (($x14 (= $x13 true)))
 (let (($x53 (= ?x43 input.dst.llvm-%n)))
 (let (($x68 (= $x53 true)))
 (let (($x16 (= $x68 true)))
 (let (($x56 (and $x16 $x14)))
 (let (($x36 (and $x56 $x116)))
 (let (($x114 (and $x36 $x106)))
 (let (($x87 (and $x114 $x58)))
 (let (($x51 (and $x87 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x157 (and $x129 $x153)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and (not $x45) $x157)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and $x29 $x162)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x41 $x84)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x125 (and $x37 $x117)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x123 (and $x7 $x125)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x113 (and $x18 $x123)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x81 (and $x9 $x113)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x118 (and $x5 $x81)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x126 (and $x112 $x118)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x122 (and $x40 $x126)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x127 (and $x8 $x122)))
 (let (($x173 (=> $x127 $x172)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x164 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x166 (ite $x164 ?x165 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x154 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x167 (ite $x154 ?x163 ?x166)))
 (let ((?x168 (bvmul (_ bv4294967295 32) ?x167)))
 (let ((?x169 (bvneg ?x168)))
 (let (($x171 (= ?x169 ?x170)))
 (let (($x172 (= $x171 true)))
 (let (($x149 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var700X)))
 (=> $x133 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var700X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var699X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var699X)))
 (= $x133 false)))
 ))
 (let (($x152 (and $x137 $x149)))
 (let (($x153 (= $x152 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x90 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x99 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x64)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x63 $x72)))
 (let (($x61 (and $x71 $x70)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x73 $x61)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x30)))))))
 (let (($x59 (and $x100 $x74)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x116 (= $x76 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x22 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x22 true)))
 (let (($x14 (= $x13 true)))
 (let (($x53 (= ?x43 input.dst.llvm-%n)))
 (let (($x68 (= $x53 true)))
 (let (($x16 (= $x68 true)))
 (let (($x56 (and $x16 $x14)))
 (let (($x36 (and $x56 $x116)))
 (let (($x114 (and $x36 $x106)))
 (let (($x87 (and $x114 $x58)))
 (let (($x51 (and $x87 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x157 (and $x129 $x153)))
 (let (($x45 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x162 (and (not $x45) $x157)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and $x29 $x162)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x41 $x84)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x125 (and $x37 $x117)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x123 (and $x7 $x125)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x113 (and $x18 $x123)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x81 (and $x9 $x113)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x118 (and $x5 $x81)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x126 (and $x112 $x118)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x122 (and $x40 $x126)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x127 (and $x8 $x122)))
 (let (($x173 (=> $x127 $x172)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x104 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite $x104 ?x134 (_ bv0 32))))
 (let ((?x174 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x173 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x140 (ite $x173 ?x174 ?x142)))
 (let ((?x130 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x131 (bvneg ?x130)))
 (let (($x143 (= ?x131 ?x135)))
 (let (($x139 (= $x143 true)))
 (let (($x81 (forall ((input.ind-%var781X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var781X)))
 (= $x137 false)))
 ))
 (let (($x84 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var782X)))
 (=> $x137 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var782X) (_ bv0 32)))))
 ))
 (let (($x118 (and $x84 $x81)))
 (let (($x126 (= $x118 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x90 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x99 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x64)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x63 $x72)))
 (let (($x61 (and $x71 $x70)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x47 $x61)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x44)))))))
 (let (($x59 (and $x73 $x74)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x116 (= $x76 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x161)))
 (let (($x68 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x43 (= ?x57 input.dst.llvm-%n)))
 (let (($x69 (= $x43 true)))
 (let (($x53 (= $x69 true)))
 (let (($x13 (and $x53 $x22)))
 (let (($x36 (and $x13 $x116)))
 (let (($x114 (and $x36 $x106)))
 (let (($x87 (and $x114 $x58)))
 (let (($x51 (and $x87 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x122 (and $x129 $x126)))
 (let (($x54 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and (not $x54) $x122)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x19 $x154)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x164 (and $x12 $x163)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x165 (and $x17 $x164)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x166 (and $x6 $x165)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x167 (and $x20 $x166)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x168 (and $x15 $x167)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x169 (and $x23 $x168)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x170 (and $x40 $x169)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x171 (and $x77 $x170)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x172 (and $x8 $x171)))
 (let (($x144 (=> $x172 $x139)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x104 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite $x104 ?x134 (_ bv0 32))))
 (let ((?x174 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x173 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x140 (ite $x173 ?x174 ?x142)))
 (let ((?x130 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x131 (bvneg ?x130)))
 (let (($x143 (= ?x131 ?x135)))
 (let (($x139 (= $x143 true)))
 (let (($x81 (forall ((input.ind-%var781X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var781X)))
 (= $x137 false)))
 ))
 (let (($x84 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var782X)))
 (=> $x137 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var782X) (_ bv0 32)))))
 ))
 (let (($x118 (and $x84 $x81)))
 (let (($x126 (= $x118 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x90 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x99 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x64)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x63 $x72)))
 (let (($x61 (and $x71 $x70)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x47 $x61)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x44)))))))
 (let (($x59 (and $x73 $x74)))
 (let (($x67 (= $x59 true)))
 (let (($x76 (= $x67 true)))
 (let (($x116 (= $x76 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x161)))
 (let (($x68 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x43 (= ?x57 input.dst.llvm-%n)))
 (let (($x69 (= $x43 true)))
 (let (($x53 (= $x69 true)))
 (let (($x13 (and $x53 $x22)))
 (let (($x36 (and $x13 $x116)))
 (let (($x114 (and $x36 $x106)))
 (let (($x87 (and $x114 $x58)))
 (let (($x51 (and $x87 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x122 (and $x129 $x126)))
 (let (($x54 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and (not $x54) $x122)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x19 $x154)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x164 (and $x12 $x163)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x165 (and $x17 $x164)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x166 (and $x6 $x165)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x167 (and $x20 $x166)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x168 (and $x15 $x167)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x169 (and $x23 $x168)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x170 (and $x40 $x169)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x171 (and $x77 $x170)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x172 (and $x8 $x171)))
 (let (($x144 (=> $x172 $x139)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 139 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x56 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x149 (ite $x56 ?x141 (_ bv0 32))))
 (let ((?x121 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x144 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x132 (ite $x144 ?x121 ?x149)))
 (let (($x145 (bvuge ?x132 (_ bv1 32))))
 (let (($x125 (= $x145 true)))
 (let (($x123 (= $x125 true)))
 (let (($x168 (forall ((input.ind-%var829X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var829X)))
 (=> $x157 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var829X) (_ bv0 32)))))
 ))
 (let (($x81 (forall ((input.ind-%var828X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var828X)))
 (= $x157 false)))
 ))
 (let (($x169 (and $x81 $x168)))
 (let (($x170 (= $x169 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x62)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x38 $x114)))
 (let (($x58 (and $x90 $x65)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x60 $x58)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x59)))))))
 (let (($x108 (and $x99 $x87)))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x107 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x107 true)))
 (let (($x100 (= $x10 true)))
 (let (($x73 (= $x100 true)))
 (let (($x32 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x32 true)))
 (let (($x11 (= $x30 true)))
 (let (($x44 (= $x11 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x69)))
 (let (($x49 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (= $x49 true)))
 (let (($x33 (= $x52 true)))
 (let (($x68 (= ?x53 input.dst.llvm-%n)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (= $x45 true)))
 (let (($x57 (= $x161 true)))
 (let (($x27 (= $x57 true)))
 (let (($x13 (and $x27 $x22)))
 (let (($x26 (and $x13 $x33)))
 (let (($x39 (and $x26 $x44)))
 (let (($x55 (and $x39 $x73)))
 (let (($x51 (and $x55 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x171 (and $x129 $x170)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and (not $x29) $x171)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x31 $x173)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x37 $x174)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x134 (and $x7 $x104)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x18 $x134)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x140 (and $x9 $x142)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x130 (and $x5 $x140)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x131 (and $x35 $x130)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x135 (and $x77 $x131)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x143 (and $x24 $x135)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x139 (and $x48 $x143)))
 (let (($x152 (=> $x139 $x123)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x56 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x149 (ite $x56 ?x141 (_ bv0 32))))
 (let ((?x121 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x144 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x132 (ite $x144 ?x121 ?x149)))
 (let (($x145 (bvuge ?x132 (_ bv1 32))))
 (let (($x125 (= $x145 true)))
 (let (($x123 (= $x125 true)))
 (let (($x168 (forall ((input.ind-%var829X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var829X)))
 (=> $x157 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var829X) (_ bv0 32)))))
 ))
 (let (($x81 (forall ((input.ind-%var828X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var828X)))
 (= $x157 false)))
 ))
 (let (($x169 (and $x81 $x168)))
 (let (($x170 (= $x169 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x62)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x38 $x114)))
 (let (($x58 (and $x90 $x65)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x60 $x58)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x59)))))))
 (let (($x108 (and $x99 $x87)))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x107 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x10 (= $x107 true)))
 (let (($x100 (= $x10 true)))
 (let (($x73 (= $x100 true)))
 (let (($x32 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x30 (= $x32 true)))
 (let (($x11 (= $x30 true)))
 (let (($x44 (= $x11 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x69)))
 (let (($x49 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (= $x49 true)))
 (let (($x33 (= $x52 true)))
 (let (($x68 (= ?x53 input.dst.llvm-%n)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (= $x45 true)))
 (let (($x57 (= $x161 true)))
 (let (($x27 (= $x57 true)))
 (let (($x13 (and $x27 $x22)))
 (let (($x26 (and $x13 $x33)))
 (let (($x39 (and $x26 $x44)))
 (let (($x55 (and $x39 $x73)))
 (let (($x51 (and $x55 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x171 (and $x129 $x170)))
 (let (($x29 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and (not $x29) $x171)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x31 $x173)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x37 $x174)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x134 (and $x7 $x104)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x142 (and $x18 $x134)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x140 (and $x9 $x142)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x130 (and $x5 $x140)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x131 (and $x35 $x130)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x135 (and $x77 $x131)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x143 (and $x24 $x135)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x139 (and $x48 $x143)))
 (let (($x152 (=> $x139 $x123)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x136 (ite $x163 ?x122 (_ bv0 32))))
 (let ((?x162 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x63 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x137 (ite $x63 ?x162 ?x136)))
 (let (($x84 (bvsge ?x137 (_ bv1 32))))
 (let (($x164 (= $x84 true)))
 (let (($x126 (= $x164 true)))
 (let (($x130 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var876X)))
 (=> $x81 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var876X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var875X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var875X)))
 (= $x81 false)))
 ))
 (let (($x131 (and $x168 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x62)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x38 $x114)))
 (let (($x58 (and $x90 $x65)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x71 $x58)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x67)))))))
 (let (($x108 (and $x60 $x87)))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x39 (= $x44 true)))
 (let (($x107 (= $x39 true)))
 (let (($x10 (= $x107 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x26 (= $x33 true)))
 (let (($x32 (= $x26 true)))
 (let (($x30 (= $x32 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x22 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x22 true)))
 (let (($x49 (= $x13 true)))
 (let (($x69 (= ?x43 input.dst.llvm-%n)))
 (let (($x53 (= $x69 true)))
 (let (($x68 (= $x53 true)))
 (let (($x54 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x54 true)))
 (let (($x45 (= $x127 true)))
 (let (($x161 (= $x45 true)))
 (let (($x16 (and $x161 $x68)))
 (let (($x52 (and $x16 $x49)))
 (let (($x11 (and $x52 $x30)))
 (let (($x100 (and $x11 $x10)))
 (let (($x51 (and $x100 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x143 (and $x129 $x135)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and (not $x19) $x143)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x41 $x144)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x56 (and $x17 $x121)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x141 (and $x6 $x56)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x149 (and $x20 $x141)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x132 (and $x15 $x149)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x145 (and $x23 $x132)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x125 (and $x112 $x145)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x21 $x125)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x152 (and $x50 $x123)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x133 (and $x47 $x152)))
 (let (($x165 (=> $x133 $x126)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x136 (ite $x163 ?x122 (_ bv0 32))))
 (let ((?x162 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x63 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x137 (ite $x63 ?x162 ?x136)))
 (let (($x84 (bvsge ?x137 (_ bv1 32))))
 (let (($x164 (= $x84 true)))
 (let (($x126 (= $x164 true)))
 (let (($x130 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var876X)))
 (=> $x81 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var876X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var875X (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var875X)))
 (= $x81 false)))
 ))
 (let (($x131 (and $x168 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x96 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x96)))
 (let (($x120 (= ?x82 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x120 true)))
 (let (($x128 (= $x124 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x102)))
 (let (($x91 (= ?x93 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x91 true)))
 (let (($x42 (= $x115 true)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x89 (= $x80 true)))
 (let (($x95 (= $x89 true)))
 (let (($x97 (= $x95 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x105 (= $x79 true)))
 (let (($x34 (= $x105 true)))
 (let (($x85 (= $x34 true)))
 (let (($x28 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x62)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x38 $x114)))
 (let (($x58 (and $x90 $x65)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x71 $x58)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x67)))))))
 (let (($x108 (and $x60 $x87)))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x39 (= $x44 true)))
 (let (($x107 (= $x39 true)))
 (let (($x10 (= $x107 true)))
 (let (($x33 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x26 (= $x33 true)))
 (let (($x32 (= $x26 true)))
 (let (($x30 (= $x32 true)))
 (let ((?x27 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x27)))
 (let (($x22 (= ?x43 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (= $x22 true)))
 (let (($x49 (= $x13 true)))
 (let (($x69 (= ?x43 input.dst.llvm-%n)))
 (let (($x53 (= $x69 true)))
 (let (($x68 (= $x53 true)))
 (let (($x54 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x54 true)))
 (let (($x45 (= $x127 true)))
 (let (($x161 (= $x45 true)))
 (let (($x16 (and $x161 $x68)))
 (let (($x52 (and $x16 $x49)))
 (let (($x11 (and $x52 $x30)))
 (let (($x100 (and $x11 $x10)))
 (let (($x51 (and $x100 $x103)))
 (let (($x92 (and $x51 $x94)))
 (let (($x83 (and $x92 $x85)))
 (let (($x88 (and $x83 $x97)))
 (let (($x98 (and $x88 $x42)))
 (let (($x129 (and $x98 $x128)))
 (let (($x143 (and $x129 $x135)))
 (let (($x19 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and (not $x19) $x143)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x41 $x144)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x56 (and $x17 $x121)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x141 (and $x6 $x56)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x149 (and $x20 $x141)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x132 (and $x15 $x149)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x145 (and $x23 $x132)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x125 (and $x112 $x145)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x21 $x125)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x152 (and $x50 $x123)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x133 (and $x47 $x152)))
 (let (($x165 (=> $x133 $x126)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05480003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite $x122 ?x136 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x162 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x84 (ite $x162 ?x163 ?x137)))
 (let (($x164 (bvsge ?x84 (_ bv0 32))))
 (let (($x126 (= $x164 true)))
 (let (($x165 (= $x126 true)))
 (let (($x130 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1071X)))
 (=> $x96 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1071X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1070X)))
 (= $x96 false)))
 ))
 (let (($x131 (and $x124 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x89 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x89)))
 (let (($x88 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x102 (= $x88 true)))
 (let (($x93 (= $x102 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x79)))
 (let (($x34 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x34 true)))
 (let (($x83 (= $x85 true)))
 (let (($x28 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x51 (= $x103 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x38)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x36 $x72)))
 (let (($x106 (and $x71 $x111)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x39 $x106)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x61)))))))
 (let (($x90 (and $x116 $x114)))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x49 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x52 (= $x49 true)))
 (let (($x33 (= $x52 true)))
 (let (($x26 (= $x33 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x161)))
 (let (($x68 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x27 (= ?x57 input.dst.llvm-%n)))
 (let (($x43 (= $x27 true)))
 (let (($x69 (= $x43 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (= $x29 true)))
 (let (($x54 (= $x172 true)))
 (let (($x127 (= $x54 true)))
 (let (($x53 (and $x127 $x69)))
 (let (($x13 (and $x53 $x22)))
 (let (($x32 (and $x13 $x26)))
 (let (($x87 (and $x32 $x58)))
 (let (($x78 (and $x87 $x51)))
 (let (($x92 (and $x78 $x94)))
 (let (($x80 (and $x92 $x83)))
 (let (($x91 (and $x80 $x93)))
 (let (($x143 (and $x91 $x135)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and (not $x31) $x143)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x12 $x121)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x141 (and $x7 $x56)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x149 (and $x18 $x141)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x132 (and $x9 $x149)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x145 (and $x5 $x132)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x125 (and $x35 $x145)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x123 (and $x40 $x125)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x152 (and $x24 $x123)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x133 (and $x14 $x152)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x63 (and $x73 $x133)))
 (let (($x117 (=> $x63 $x165)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x122 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite $x122 ?x136 (_ bv0 32))))
 (let ((?x163 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x162 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x84 (ite $x162 ?x163 ?x137)))
 (let (($x164 (bvsge ?x84 (_ bv0 32))))
 (let (($x126 (= $x164 true)))
 (let (($x165 (= $x126 true)))
 (let (($x130 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1071X)))
 (=> $x96 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1071X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1070X)))
 (= $x96 false)))
 ))
 (let (($x131 (and $x124 $x130)))
 (let (($x135 (= $x131 true)))
 (let ((?x89 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x89)))
 (let (($x88 (= ?x95 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x102 (= $x88 true)))
 (let (($x93 (= $x102 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x79)))
 (let (($x34 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x85 (= $x34 true)))
 (let (($x83 (= $x85 true)))
 (let (($x28 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x66 (= $x28 true)))
 (let (($x25 (= $x66 true)))
 (let (($x94 (= $x25 true)))
 (let (($x101 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x101 true)))
 (let (($x103 (= $x109 true)))
 (let (($x51 (= $x103 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x38)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x36 $x72)))
 (let (($x106 (and $x71 $x111)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x39 $x106)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x61)))))))
 (let (($x90 (and $x116 $x114)))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x49 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x52 (= $x49 true)))
 (let (($x33 (= $x52 true)))
 (let (($x26 (= $x33 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x161)))
 (let (($x68 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x27 (= ?x57 input.dst.llvm-%n)))
 (let (($x43 (= $x27 true)))
 (let (($x69 (= $x43 true)))
 (let (($x29 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (= $x29 true)))
 (let (($x54 (= $x172 true)))
 (let (($x127 (= $x54 true)))
 (let (($x53 (and $x127 $x69)))
 (let (($x13 (and $x53 $x22)))
 (let (($x32 (and $x13 $x26)))
 (let (($x87 (and $x32 $x58)))
 (let (($x78 (and $x87 $x51)))
 (let (($x92 (and $x78 $x94)))
 (let (($x80 (and $x92 $x83)))
 (let (($x91 (and $x80 $x93)))
 (let (($x143 (and $x91 $x135)))
 (let (($x31 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and (not $x31) $x143)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x12 $x121)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x141 (and $x7 $x56)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x149 (and $x18 $x141)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x132 (and $x9 $x149)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x145 (and $x5 $x132)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x125 (and $x35 $x145)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x123 (and $x40 $x125)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x152 (and $x24 $x123)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x133 (and $x14 $x152)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x63 (and $x73 $x133)))
 (let (($x117 (=> $x63 $x165)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (bvuge ?x164 (_ bv1 32))))
 (let (($x165 (= $x126 true)))
 (let (($x117 (= $x165 true)))
 (let (($x56 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1276X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1276X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1275X)))
 (= $x93 false)))
 ))
 (let (($x141 (and $x120 $x56)))
 (let (($x149 (= $x141 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x34)))
 (let (($x83 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x83 true)))
 (let (($x89 (= $x80 true)))
 (let (($x25 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x94 (= $x25 true)))
 (let (($x92 (= $x94 true)))
 (let (($x79 (= $x92 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x51 (= $x103 true)))
 (let (($x78 (= $x51 true)))
 (let (($x28 (= $x78 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x106)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x60 $x38)))
 (let (($x90 (and $x111 $x114)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x100 $x90)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x74)))))))
 (let (($x65 (and $x99 $x62)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x49 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x52 (= $x49 true)))
 (let (($x33 (= $x52 true)))
 (let (($x26 (= $x33 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x45)))
 (let (($x68 (= ?x161 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x27 (= ?x161 input.dst.llvm-%n)))
 (let (($x43 (= $x27 true)))
 (let (($x69 (= $x43 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x19)))
 (let (($x172 (= ?x139 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x172 true)))
 (let (($x127 (= $x54 true)))
 (let (($x53 (and $x127 $x69)))
 (let (($x13 (and $x53 $x22)))
 (let (($x32 (and $x13 $x26)))
 (let (($x101 (and $x32 $x108)))
 (let (($x66 (and $x101 $x28)))
 (let (($x105 (and $x66 $x79)))
 (let (($x95 (and $x105 $x89)))
 (let (($x132 (and $x95 $x149)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and (not $x41) $x132)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x37 $x125)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x152 (and $x6 $x123)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x133 (and $x20 $x152)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x63 (and $x15 $x133)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x162 (and $x23 $x63)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x112 $x162)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x122 (and $x77 $x163)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x136 (and $x50 $x122)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x48 $x136)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x84 (and $x30 $x137)))
 (let (($x55 (=> $x84 $x117)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (bvuge ?x164 (_ bv1 32))))
 (let (($x165 (= $x126 true)))
 (let (($x117 (= $x165 true)))
 (let (($x56 (forall ((input.ind-%var1276X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1276X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1276X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1275X)))
 (= $x93 false)))
 ))
 (let (($x141 (and $x120 $x56)))
 (let (($x149 (= $x141 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x34)))
 (let (($x83 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x80 (= $x83 true)))
 (let (($x89 (= $x80 true)))
 (let (($x25 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x94 (= $x25 true)))
 (let (($x92 (= $x94 true)))
 (let (($x79 (= $x92 true)))
 (let (($x103 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x51 (= $x103 true)))
 (let (($x78 (= $x51 true)))
 (let (($x28 (= $x78 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x106)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x60 $x38)))
 (let (($x90 (and $x111 $x114)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x100 $x90)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x74)))))))
 (let (($x65 (and $x99 $x62)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x49 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x52 (= $x49 true)))
 (let (($x33 (= $x52 true)))
 (let (($x26 (= $x33 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x161 (bvneg ?x45)))
 (let (($x68 (= ?x161 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (= $x68 true)))
 (let (($x22 (= $x16 true)))
 (let (($x27 (= ?x161 input.dst.llvm-%n)))
 (let (($x43 (= $x27 true)))
 (let (($x69 (= $x43 true)))
 (let ((?x19 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x19)))
 (let (($x172 (= ?x139 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x172 true)))
 (let (($x127 (= $x54 true)))
 (let (($x53 (and $x127 $x69)))
 (let (($x13 (and $x53 $x22)))
 (let (($x32 (and $x13 $x26)))
 (let (($x101 (and $x32 $x108)))
 (let (($x66 (and $x101 $x28)))
 (let (($x105 (and $x66 $x79)))
 (let (($x95 (and $x105 $x89)))
 (let (($x132 (and $x95 $x149)))
 (let (($x41 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and (not $x41) $x132)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x37 $x125)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x152 (and $x6 $x123)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x133 (and $x20 $x152)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x63 (and $x15 $x133)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x162 (and $x23 $x63)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x112 $x162)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x122 (and $x77 $x163)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x136 (and $x50 $x122)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x48 $x136)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x84 (and $x30 $x137)))
 (let (($x55 (=> $x84 $x117)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x117 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x117 ?x55 (_ bv0 32))))
 (let ((?x165 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x126 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x10 (ite $x126 ?x165 ?x11)))
 (let ((?x91 (bvmul (_ bv4294967295 32) ?x10)))
 (let ((?x130 (bvneg ?x91)))
 (let (($x97 (= ?x130 ?x142)))
 (let (($x88 (= $x97 true)))
 (let (($x56 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1436X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1436X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1435X)))
 (= $x105 false)))
 ))
 (let (($x141 (and $x80 $x56)))
 (let (($x149 (= $x141 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x109)))
 (let (($x78 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x78 true)))
 (let (($x66 (= $x28 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x90)))
 (let (($x65 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x71 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x74)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x59)))
 (let (($x116 (and $x61 $x67)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x43 $x116)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x49)))))))
 (let (($x39 (and $x75 $x44)))
 (let (($x99 (= $x39 true)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x145)))
 (let (($x172 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x172 true)))
 (let (($x127 (= $x54 true)))
 (let (($x19 (= ?x31 input.dst.llvm-%n)))
 (let (($x139 (= $x19 true)))
 (let (($x29 (= $x139 true)))
 (let (($x45 (and $x29 $x127)))
 (let (($x60 (and $x45 $x100)))
 (let (($x114 (and $x60 $x106)))
 (let (($x108 (and $x114 $x87)))
 (let (($x25 (and $x108 $x66)))
 (let (($x132 (and $x25 $x149)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and (not $x12) $x132)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x17 $x123)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x133 (and $x18 $x152)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x63 (and $x9 $x133)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x162 (and $x5 $x63)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x35 $x162)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x122 (and $x40 $x163)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x21 $x122)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x137 (and $x14 $x136)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x84 (and $x47 $x137)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x164 (and $x73 $x84)))
 (let (($x98 (=> $x164 $x88)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x117 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x11 (ite $x117 ?x55 (_ bv0 32))))
 (let ((?x165 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x126 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x10 (ite $x126 ?x165 ?x11)))
 (let ((?x91 (bvmul (_ bv4294967295 32) ?x10)))
 (let ((?x130 (bvneg ?x91)))
 (let (($x97 (= ?x130 ?x142)))
 (let (($x88 (= $x97 true)))
 (let (($x56 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1436X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1436X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1435X)))
 (= $x105 false)))
 ))
 (let (($x141 (and $x80 $x56)))
 (let (($x149 (= $x141 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x109)))
 (let (($x78 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x78 true)))
 (let (($x66 (= $x28 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x90)))
 (let (($x65 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x71 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x74)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x59)))
 (let (($x116 (and $x61 $x67)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x43 $x116)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x49)))))))
 (let (($x39 (and $x75 $x44)))
 (let (($x99 (= $x39 true)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x145)))
 (let (($x172 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x172 true)))
 (let (($x127 (= $x54 true)))
 (let (($x19 (= ?x31 input.dst.llvm-%n)))
 (let (($x139 (= $x19 true)))
 (let (($x29 (= $x139 true)))
 (let (($x45 (and $x29 $x127)))
 (let (($x60 (and $x45 $x100)))
 (let (($x114 (and $x60 $x106)))
 (let (($x108 (and $x114 $x87)))
 (let (($x25 (and $x108 $x66)))
 (let (($x132 (and $x25 $x149)))
 (let (($x12 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and (not $x12) $x132)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x17 $x123)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x133 (and $x18 $x152)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x63 (and $x9 $x133)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x162 (and $x5 $x63)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x163 (and $x35 $x162)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x122 (and $x40 $x163)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x21 $x122)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x137 (and $x14 $x136)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x84 (and $x47 $x137)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x164 (and $x73 $x84)))
 (let (($x98 (=> $x164 $x88)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x85 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x57 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x96 (ite $x57 ?x34 (_ bv0 32))))
 (let ((?x131 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x98 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x102 (ite $x98 ?x131 ?x96)))
 (let ((?x94 (bvmul (_ bv4294967295 32) ?x102)))
 (let ((?x92 (bvneg ?x94)))
 (let (($x120 (= ?x92 ?x85)))
 (let (($x95 (= $x120 true)))
 (let (($x122 (forall ((input.ind-%var1482X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1482X)))
 (= $x80 false)))
 ))
 (let (($x152 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1483X)))
 (=> $x80 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1483X) (_ bv0 32)))))
 ))
 (let (($x136 (and $x152 $x122)))
 (let (($x137 (= $x136 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x109)))
 (let (($x78 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x78 true)))
 (let (($x66 (= $x28 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x90)))
 (let (($x65 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x71 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x74)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x59)))
 (let (($x116 (and $x61 $x67)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x53 $x116)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x52)))))))
 (let (($x39 (and $x43 $x44)))
 (let (($x99 (= $x39 true)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x125)))
 (let (($x139 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x139 true)))
 (let (($x172 (= $x29 true)))
 (let (($x31 (= ?x41 input.dst.llvm-%n)))
 (let (($x144 (= $x31 true)))
 (let (($x19 (= $x144 true)))
 (let (($x54 (and $x19 $x172)))
 (let (($x60 (and $x54 $x100)))
 (let (($x114 (and $x60 $x106)))
 (let (($x108 (and $x114 $x87)))
 (let (($x25 (and $x108 $x66)))
 (let (($x84 (and $x25 $x137)))
 (let (($x37 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x37) $x84)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and $x7 $x126)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x20 $x165)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x55 (and $x15 $x117)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x11 (and $x23 $x55)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x112 $x11)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x91 (and $x77 $x10)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x130 (and $x24 $x91)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x142 (and $x48 $x130)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x97 (and $x107 $x142)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x88 (and $x30 $x97)))
 (let (($x140 (=> $x88 $x95)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x85 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x34 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x57 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x96 (ite $x57 ?x34 (_ bv0 32))))
 (let ((?x131 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x98 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x102 (ite $x98 ?x131 ?x96)))
 (let ((?x94 (bvmul (_ bv4294967295 32) ?x102)))
 (let ((?x92 (bvneg ?x94)))
 (let (($x120 (= ?x92 ?x85)))
 (let (($x95 (= $x120 true)))
 (let (($x122 (forall ((input.ind-%var1482X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1482X)))
 (= $x80 false)))
 ))
 (let (($x152 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1483X)))
 (=> $x80 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1483X) (_ bv0 32)))))
 ))
 (let (($x136 (and $x152 $x122)))
 (let (($x137 (= $x136 true)))
 (let ((?x109 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x109)))
 (let (($x78 (= ?x103 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x78 true)))
 (let (($x66 (= $x28 true)))
 (let ((?x90 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x90)))
 (let (($x65 (= ?x62 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x71 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x71 true)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x74)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x36 $x59)))
 (let (($x116 (and $x61 $x67)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x53 $x116)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x52)))))))
 (let (($x39 (and $x43 $x44)))
 (let (($x99 (= $x39 true)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let ((?x125 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x125)))
 (let (($x139 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x139 true)))
 (let (($x172 (= $x29 true)))
 (let (($x31 (= ?x41 input.dst.llvm-%n)))
 (let (($x144 (= $x31 true)))
 (let (($x19 (= $x144 true)))
 (let (($x54 (and $x19 $x172)))
 (let (($x60 (and $x54 $x100)))
 (let (($x114 (and $x60 $x106)))
 (let (($x108 (and $x114 $x87)))
 (let (($x25 (and $x108 $x66)))
 (let (($x84 (and $x25 $x137)))
 (let (($x37 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x37) $x84)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and $x7 $x126)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x20 $x165)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x55 (and $x15 $x117)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x11 (and $x23 $x55)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x112 $x11)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x91 (and $x77 $x10)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x130 (and $x24 $x91)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x142 (and $x48 $x130)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x97 (and $x107 $x142)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x88 (and $x30 $x97)))
 (let (($x140 (=> $x88 $x95)))
 (not $x140))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (not $x102)))
 (let (($x34 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (not $x34)))
 (let (($x92 (or $x96 $x94)))
 (let (($x85 (= $x92 true)))
 (let (($x120 (= $x85 true)))
 (let (($x126 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1530X)))
 (=> $x28 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1530X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1529X)))
 (= $x28 false)))
 ))
 (let (($x165 (and $x80 $x126)))
 (let (($x117 (= $x165 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x62)))
 (let (($x87 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x87 true)))
 (let (($x101 (= $x108 true)))
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x39)))
 (let (($x38 (= ?x99 input.dst.llvm-%n)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let (($x76 (= ?x99 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x36)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x32 $x69)))
 (let (($x70 (and $x53 $x46)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x139 $x70)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x22)))))))
 (let (($x61 (and $x26 $x59)))
 (let (($x74 (= $x61 true)))
 (let (($x67 (= $x74 true)))
 (let (($x116 (= $x67 true)))
 (let ((?x37 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x37)))
 (let (($x125 (= ?x164 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x125 true)))
 (let (($x145 (= $x41 true)))
 (let (($x44 (and $x145 $x116)))
 (let (($x72 (and $x44 $x60)))
 (let (($x114 (and $x72 $x106)))
 (let (($x109 (and $x114 $x101)))
 (let (($x55 (and $x109 $x117)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and $x6 $x55)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x10 (and $x9 $x11)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x91 (and $x5 $x10)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x130 (and $x35 $x91)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x142 (and $x40 $x130)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x97 (and $x21 $x142)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x88 (and $x50 $x97)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x98 (and $x47 $x88)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x131 (and $x161 $x98)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x57 (and $x73 $x131)))
 (let (($x95 (=> $x57 $x120)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (not $x102)))
 (let (($x34 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (not $x34)))
 (let (($x92 (or $x96 $x94)))
 (let (($x85 (= $x92 true)))
 (let (($x120 (= $x85 true)))
 (let (($x126 (forall ((input.ind-%var1530X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1530X)))
 (=> $x28 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1530X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x28 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1529X)))
 (= $x28 false)))
 ))
 (let (($x165 (and $x80 $x126)))
 (let (($x117 (= $x165 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x62)))
 (let (($x87 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x87 true)))
 (let (($x101 (= $x108 true)))
 (let ((?x39 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x39)))
 (let (($x38 (= ?x99 input.dst.llvm-%n)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let (($x76 (= ?x99 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x36)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x32 $x69)))
 (let (($x70 (and $x53 $x46)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x139 $x70)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x22)))))))
 (let (($x61 (and $x26 $x59)))
 (let (($x74 (= $x61 true)))
 (let (($x67 (= $x74 true)))
 (let (($x116 (= $x67 true)))
 (let ((?x37 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x37)))
 (let (($x125 (= ?x164 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x125 true)))
 (let (($x145 (= $x41 true)))
 (let (($x44 (and $x145 $x116)))
 (let (($x72 (and $x44 $x60)))
 (let (($x114 (and $x72 $x106)))
 (let (($x109 (and $x114 $x101)))
 (let (($x55 (and $x109 $x117)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (and $x6 $x55)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x10 (and $x9 $x11)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x91 (and $x5 $x10)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x130 (and $x35 $x91)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x142 (and $x40 $x130)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x97 (and $x21 $x142)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x88 (and $x50 $x97)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x98 (and $x47 $x88)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x131 (and $x161 $x98)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x57 (and $x73 $x131)))
 (let (($x95 (=> $x57 $x120)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x45 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x56 (ite $x45 ?x93 (_ bv0 32))))
 (let ((?x124 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x133 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x79 (ite $x133 ?x124 ?x56)))
 (let ((?x143 (bvmul (_ bv4294967295 32) ?x79)))
 (let ((?x63 (bvneg ?x143)))
 (let (($x141 (= ?x63 ?x162)))
 (let (($x105 (= $x141 true)))
 (let (($x94 (forall ((input.ind-%var1536X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1536X)))
 (=> $x55 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1536X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1535X)))
 (= $x55 false)))
 ))
 (let (($x92 (and $x130 $x94)))
 (let (($x85 (= $x92 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x78)))
 (let (($x80 (= ?x28 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x80 true)))
 (let (($x137 (= $x152 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x62)))
 (let (($x58 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x67)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x46 $x61)))
 (let (($x44 (and $x74 $x116)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x22 $x44)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x139)))))))
 (let (($x99 (and $x36 $x39)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x37)))
 (let (($x29 (= ?x164 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (= $x29 true)))
 (let (($x33 (= $x172 true)))
 (let (($x125 (= ?x164 input.dst.llvm-%n)))
 (let (($x41 (= $x125 true)))
 (let (($x145 (= $x41 true)))
 (let (($x54 (and $x145 $x33)))
 (let (($x72 (and $x54 $x60)))
 (let (($x90 (and $x72 $x114)))
 (let (($x101 (and $x90 $x108)))
 (let (($x84 (and $x101 $x137)))
 (let (($x120 (and $x84 $x85)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and (not $x7) $x120)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x18 $x140)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x66 (and $x15 $x144)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x163 (and $x23 $x66)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x123 (and $x112 $x163)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x103 (and $x77 $x123)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x51 (and $x24 $x103)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x25 (and $x14 $x51)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x107 $x25)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x132 (and $x127 $x122)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x136 (and $x30 $x132)))
 (let (($x149 (=> $x136 $x105)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x45 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x56 (ite $x45 ?x93 (_ bv0 32))))
 (let ((?x124 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x133 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x79 (ite $x133 ?x124 ?x56)))
 (let ((?x143 (bvmul (_ bv4294967295 32) ?x79)))
 (let ((?x63 (bvneg ?x143)))
 (let (($x141 (= ?x63 ?x162)))
 (let (($x105 (= $x141 true)))
 (let (($x94 (forall ((input.ind-%var1536X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1536X)))
 (=> $x55 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1536X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1535X)))
 (= $x55 false)))
 ))
 (let (($x92 (and $x130 $x94)))
 (let (($x85 (= $x92 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x78)))
 (let (($x80 (= ?x28 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x80 true)))
 (let (($x137 (= $x152 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x62)))
 (let (($x58 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x67)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x46 $x61)))
 (let (($x44 (and $x74 $x116)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x22 $x44)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x139)))))))
 (let (($x99 (and $x36 $x39)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x37)))
 (let (($x29 (= ?x164 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (= $x29 true)))
 (let (($x33 (= $x172 true)))
 (let (($x125 (= ?x164 input.dst.llvm-%n)))
 (let (($x41 (= $x125 true)))
 (let (($x145 (= $x41 true)))
 (let (($x54 (and $x145 $x33)))
 (let (($x72 (and $x54 $x60)))
 (let (($x90 (and $x72 $x114)))
 (let (($x101 (and $x90 $x108)))
 (let (($x84 (and $x101 $x137)))
 (let (($x120 (and $x84 $x85)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and (not $x7) $x120)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x18 $x140)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x66 (and $x15 $x144)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x163 (and $x23 $x66)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x123 (and $x112 $x163)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x103 (and $x77 $x123)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x51 (and $x24 $x103)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x25 (and $x14 $x51)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x122 (and $x107 $x25)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x132 (and $x127 $x122)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x136 (and $x30 $x132)))
 (let (($x149 (=> $x136 $x105)))
 (not $x149))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x11 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x27 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x131 (ite $x27 ?x11 (_ bv0 32))))
 (let ((?x89 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x149 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x88 (ite $x149 ?x89 ?x131)))
 (let ((?x126 (bvmul (_ bv4294967295 32) ?x88)))
 (let ((?x165 (bvneg ?x126)))
 (let (($x57 (= ?x165 ?x10)))
 (let (($x97 (= $x57 true)))
 (let (($x51 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1582X)))
 (= $x130 false)))
 ))
 (let (($x144 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1583X)))
 (=> $x130 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1583X) (_ bv0 32)))))
 ))
 (let (($x25 (and $x144 $x51)))
 (let (($x122 (= $x25 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x78)))
 (let (($x80 (= ?x28 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x80 true)))
 (let (($x137 (= $x152 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x62)))
 (let (($x58 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x67)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x46 $x61)))
 (let (($x44 (and $x74 $x116)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x49 $x44)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x32)))))))
 (let (($x99 (and $x22 $x39)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let ((?x95 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x95)))
 (let (($x41 (= ?x17 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (= $x41 true)))
 (let (($x29 (= $x145 true)))
 (let (($x164 (= ?x17 input.dst.llvm-%n)))
 (let (($x12 (= $x164 true)))
 (let (($x125 (= $x12 true)))
 (let (($x172 (and $x125 $x29)))
 (let (($x72 (and $x172 $x60)))
 (let (($x90 (and $x72 $x114)))
 (let (($x101 (and $x90 $x108)))
 (let (($x84 (and $x101 $x137)))
 (let (($x132 (and $x84 $x122)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and (not $x6) $x132)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x20 $x133)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x45 (and $x5 $x124)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x93 (and $x35 $x45)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x56 (and $x40 $x93)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x79 (and $x21 $x56)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x143 (and $x50 $x79)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x63 (and $x48 $x143)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x162 (and $x161 $x63)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x141 (and $x31 $x162)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x105 (and $x73 $x141)))
 (let (($x34 (=> $x105 $x97)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x11 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x27 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x131 (ite $x27 ?x11 (_ bv0 32))))
 (let ((?x89 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x149 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x88 (ite $x149 ?x89 ?x131)))
 (let ((?x126 (bvmul (_ bv4294967295 32) ?x88)))
 (let ((?x165 (bvneg ?x126)))
 (let (($x57 (= ?x165 ?x10)))
 (let (($x97 (= $x57 true)))
 (let (($x51 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1582X)))
 (= $x130 false)))
 ))
 (let (($x144 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1583X)))
 (=> $x130 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1583X) (_ bv0 32)))))
 ))
 (let (($x25 (and $x144 $x51)))
 (let (($x122 (= $x25 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x78)))
 (let (($x80 (= ?x28 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x80 true)))
 (let (($x137 (= $x152 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x62)))
 (let (($x58 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x38 true)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x67)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x46 $x61)))
 (let (($x44 (and $x74 $x116)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x49 $x44)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x139 $x32)))))))
 (let (($x99 (and $x22 $x39)))
 (let (($x76 (= $x99 true)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let ((?x95 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x95)))
 (let (($x41 (= ?x17 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (= $x41 true)))
 (let (($x29 (= $x145 true)))
 (let (($x164 (= ?x17 input.dst.llvm-%n)))
 (let (($x12 (= $x164 true)))
 (let (($x125 (= $x12 true)))
 (let (($x172 (and $x125 $x29)))
 (let (($x72 (and $x172 $x60)))
 (let (($x90 (and $x72 $x114)))
 (let (($x101 (and $x90 $x108)))
 (let (($x84 (and $x101 $x137)))
 (let (($x132 (and $x84 $x122)))
 (let (($x6 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and (not $x6) $x132)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x20 $x133)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x45 (and $x5 $x124)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x93 (and $x35 $x45)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x56 (and $x40 $x93)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x79 (and $x21 $x56)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x143 (and $x50 $x79)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x63 (and $x48 $x143)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x162 (and $x161 $x63)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x141 (and $x31 $x162)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x105 (and $x73 $x141)))
 (let (($x34 (=> $x105 $x97)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x11)))
 (let (($x88 (= $x131 false)))
 (let (($x126 (= $x88 true)))
 (let (($x133 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1629X)))
 (= $x152 false)))
 ))
 (let (($x103 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1630X)))
 (=> $x152 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1630X) (_ bv0 32)))))
 ))
 (let (($x124 (and $x103 $x133)))
 (let (($x45 (= $x124 true)))
 (let ((?x65 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x65)))
 (let (($x108 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x164)))
 (let (($x111 (= ?x12 input.dst.llvm-%n)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x116)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x70 $x74)))
 (let (($x39 (and $x67 $x44)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x64 $x39)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x43)))))))
 (let (($x76 (and $x46 $x99)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let (($x72 (= $x60 true)))
 (let (($x125 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x125 true)))
 (let (($x145 (= $x41 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x6)))
 (let (($x95 (= ?x136 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x95 true)))
 (let (($x37 (= $x17 true)))
 (let (($x29 (and $x37 $x145)))
 (let (($x71 (and $x29 $x72)))
 (let (($x90 (and $x71 $x114)))
 (let (($x78 (and $x90 $x109)))
 (let (($x93 (and $x78 $x45)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x9 $x93)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x79 (and $x23 $x56)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x143 (and $x112 $x79)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x63 (and $x77 $x143)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x162 (and $x24 $x63)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x14 $x162)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x105 (and $x47 $x141)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x149 (and $x127 $x105)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x89 (and $x68 $x149)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x27 (and $x30 $x89)))
 (let (($x165 (=> $x27 $x126)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x11)))
 (let (($x88 (= $x131 false)))
 (let (($x126 (= $x88 true)))
 (let (($x133 (forall ((input.ind-%var1629X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1629X)))
 (= $x152 false)))
 ))
 (let (($x103 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1630X)))
 (=> $x152 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1630X) (_ bv0 32)))))
 ))
 (let (($x124 (and $x103 $x133)))
 (let (($x45 (= $x124 true)))
 (let ((?x65 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x65)))
 (let (($x108 (= ?x58 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x108 true)))
 (let (($x109 (= $x101 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x164)))
 (let (($x111 (= ?x12 input.dst.llvm-%n)))
 (let (($x106 (= $x111 true)))
 (let (($x114 (= $x106 true)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x116)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x70 $x74)))
 (let (($x39 (and $x67 $x44)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x64 $x39)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x43)))))))
 (let (($x76 (and $x46 $x99)))
 (let (($x100 (= $x76 true)))
 (let (($x60 (= $x100 true)))
 (let (($x72 (= $x60 true)))
 (let (($x125 (= ?x12 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x125 true)))
 (let (($x145 (= $x41 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x6)))
 (let (($x95 (= ?x136 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x95 true)))
 (let (($x37 (= $x17 true)))
 (let (($x29 (and $x37 $x145)))
 (let (($x71 (and $x29 $x72)))
 (let (($x90 (and $x71 $x114)))
 (let (($x78 (and $x90 $x109)))
 (let (($x93 (and $x78 $x45)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x9 $x93)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x79 (and $x23 $x56)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x143 (and $x112 $x79)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x63 (and $x77 $x143)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x162 (and $x24 $x63)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x14 $x162)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x105 (and $x47 $x141)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x149 (and $x127 $x105)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x89 (and $x68 $x149)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x27 (and $x30 $x89)))
 (let (($x165 (=> $x27 $x126)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03ffa003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03ffa000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (or $x25 $x122)))
 (let (($x83 (= $x102 true)))
 (let (($x120 (= $x83 true)))
 (let (($x149 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1644X)))
 (=> $x144 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1644X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1643X)))
 (= $x144 false)))
 ))
 (let (($x89 (and $x124 $x149)))
 (let (($x27 (= $x89 true)))
 (let ((?x58 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x58)))
 (let (($x101 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x101 true)))
 (let (($x78 (= $x109 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x76)))
 (let (($x106 (= ?x100 input.dst.llvm-%n)))
 (let (($x114 (= $x106 true)))
 (let (($x90 (= $x114 true)))
 (let (($x60 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (= $x60 true)))
 (let (($x71 (= $x72 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x70)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x22 $x13)))
 (let (($x61 (and $x64 $x59)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x125 $x61)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x139)))))))
 (let (($x67 (and $x36 $x74)))
 (let (($x116 (= $x67 true)))
 (let (($x44 (= $x116 true)))
 (let (($x39 (= $x44 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x18)))
 (let (($x7 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x7 true)))
 (let (($x17 (= $x95 true)))
 (let (($x99 (and $x17 $x39)))
 (let (($x38 (and $x99 $x71)))
 (let (($x62 (and $x38 $x90)))
 (let (($x80 (and $x62 $x78)))
 (let (($x11 (and $x80 $x27)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (and $x15 $x11)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x88 (and $x35 $x131)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x126 (and $x40 $x88)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x165 (and $x21 $x126)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x50 $x165)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x53 (and $x48 $x10)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x137 (and $x107 $x53)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x130 (and $x31 $x137)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x28 (and $x33 $x130)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x84 (and $x172 $x28)))
 (let (($x66 (=> $x84 $x120)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (or $x25 $x122)))
 (let (($x83 (= $x102 true)))
 (let (($x120 (= $x83 true)))
 (let (($x149 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1644X)))
 (=> $x144 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1644X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1643X)))
 (= $x144 false)))
 ))
 (let (($x89 (and $x124 $x149)))
 (let (($x27 (= $x89 true)))
 (let ((?x58 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x58)))
 (let (($x101 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x101 true)))
 (let (($x78 (= $x109 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x76)))
 (let (($x106 (= ?x100 input.dst.llvm-%n)))
 (let (($x114 (= $x106 true)))
 (let (($x90 (= $x114 true)))
 (let (($x60 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (= $x60 true)))
 (let (($x71 (= $x72 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x70)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x22 $x13)))
 (let (($x61 (and $x64 $x59)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x125 $x61)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x139)))))))
 (let (($x67 (and $x36 $x74)))
 (let (($x116 (= $x67 true)))
 (let (($x44 (= $x116 true)))
 (let (($x39 (= $x44 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x18)))
 (let (($x7 (= ?x6 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x7 true)))
 (let (($x17 (= $x95 true)))
 (let (($x99 (and $x17 $x39)))
 (let (($x38 (and $x99 $x71)))
 (let (($x62 (and $x38 $x90)))
 (let (($x80 (and $x62 $x78)))
 (let (($x11 (and $x80 $x27)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (and $x15 $x11)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x88 (and $x35 $x131)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x126 (and $x40 $x88)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x165 (and $x21 $x126)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x50 $x165)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x53 (and $x48 $x10)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x137 (and $x107 $x53)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x130 (and $x31 $x137)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x28 (and $x33 $x130)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x84 (and $x172 $x28)))
 (let (($x66 (=> $x84 $x120)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x34 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x34 true)))
 (let (($x54 (= $x121 true)))
 (let (($x66 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1650X)))
 (=> $x88 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1650X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1649X)))
 (= $x88 false)))
 ))
 (let (($x57 (and $x53 $x66)))
 (let (($x37 (= $x57 true)))
 (let ((?x133 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x133)))
 (let (($x141 (= ?x124 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x141 true)))
 (let (($x149 (= $x105 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x65)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x111 $x90)))
 (let (($x87 (and $x62 $x58)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x59 $x87)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x99)))))))
 (let (($x101 (and $x38 $x108)))
 (let (($x109 (= $x101 true)))
 (let (($x78 (= $x109 true)))
 (let (($x80 (= $x78 true)))
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x32)))
 (let (($x125 (= ?x75 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x125 true)))
 (let (($x16 (= $x22 true)))
 (let (($x19 (= ?x75 input.dst.llvm-%n)))
 (let (($x43 (= $x19 true)))
 (let (($x36 (= $x43 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x69)))
 (let (($x52 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x52 true)))
 (let (($x26 (= $x49 true)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (not $x136)))
 (let (($x95 (= $x7 true)))
 (let (($x17 (= $x95 true)))
 (let (($x41 (= $x17 true)))
 (let (($x139 (and $x41 $x26)))
 (let (($x12 (and $x139 $x36)))
 (let (($x46 (and $x12 $x16)))
 (let (($x140 (and $x46 $x80)))
 (let (($x89 (and $x140 $x149)))
 (let (($x164 (and $x89 $x37)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x20 $x164)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x5 $x103)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x56 (and $x112 $x143)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x152 (and $x77 $x56)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x91 (and $x24 $x152)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x132 (and $x14 $x91)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x63 (and $x47 $x132)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x93 (and $x161 $x63)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x162 (and $x68 $x93)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x51 (and $x30 $x162)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x97 (and $x8 $x51)))
 (let (($x98 (=> $x97 $x54)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x34 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x34 true)))
 (let (($x54 (= $x121 true)))
 (let (($x66 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1650X)))
 (=> $x88 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1650X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1649X)))
 (= $x88 false)))
 ))
 (let (($x57 (and $x53 $x66)))
 (let (($x37 (= $x57 true)))
 (let ((?x133 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x133)))
 (let (($x141 (= ?x124 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x141 true)))
 (let (($x149 (= $x105 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x65)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x111 $x90)))
 (let (($x87 (and $x62 $x58)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x59 $x87)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x99)))))))
 (let (($x101 (and $x38 $x108)))
 (let (($x109 (= $x101 true)))
 (let (($x78 (= $x109 true)))
 (let (($x80 (= $x78 true)))
 (let ((?x32 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x32)))
 (let (($x125 (= ?x75 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x125 true)))
 (let (($x16 (= $x22 true)))
 (let (($x19 (= ?x75 input.dst.llvm-%n)))
 (let (($x43 (= $x19 true)))
 (let (($x36 (= $x43 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x69)))
 (let (($x52 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x52 true)))
 (let (($x26 (= $x49 true)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (not $x136)))
 (let (($x95 (= $x7 true)))
 (let (($x17 (= $x95 true)))
 (let (($x41 (= $x17 true)))
 (let (($x139 (and $x41 $x26)))
 (let (($x12 (and $x139 $x36)))
 (let (($x46 (and $x12 $x16)))
 (let (($x140 (and $x46 $x80)))
 (let (($x89 (and $x140 $x149)))
 (let (($x164 (and $x89 $x37)))
 (let (($x20 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (and $x20 $x164)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x5 $x103)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x56 (and $x112 $x143)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x152 (and $x77 $x56)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x91 (and $x24 $x152)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x132 (and $x14 $x91)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x63 (and $x47 $x132)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x93 (and $x161 $x63)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x162 (and $x68 $x93)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x51 (and $x30 $x162)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x97 (and $x8 $x51)))
 (let (($x98 (=> $x97 $x54)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 107 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (not $x98)))
 (let (($x64 (or $x98 $x94)))
 (let (($x126 (= $x64 true)))
 (let (($x25 (= $x126 true)))
 (let (($x103 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1656X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1656X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1655X)))
 (= $x105 false)))
 ))
 (let (($x143 (and $x88 $x103)))
 (let (($x56 (= $x143 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x101)))
 (let (($x80 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x80 true)))
 (let (($x144 (= $x140 true)))
 (let ((?x17 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x17)))
 (let (($x62 (= ?x41 input.dst.llvm-%n)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x100)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x44 $x99)))
 (let (($x72 (and $x76 $x60)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x32 $x72)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x22)))))))
 (let (($x70 (and $x67 $x38)))
 (let (($x59 (= $x70 true)))
 (let (($x111 (= $x59 true)))
 (let (($x106 (= $x111 true)))
 (let (($x145 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x145 true)))
 (let (($x29 (= $x69 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x20)))
 (let (($x136 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x136 true)))
 (let (($x95 (= $x7 true)))
 (let (($x52 (and $x95 $x29)))
 (let (($x114 (and $x52 $x106)))
 (let (($x87 (and $x114 $x58)))
 (let (($x133 (and $x87 $x144)))
 (let (($x152 (and $x133 $x56)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x23 $x152)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x132 (and $x40 $x91)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x63 (and $x21 $x132)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x93 (and $x50 $x63)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x162 (and $x48 $x93)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x51 (and $x107 $x162)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x97 (and $x127 $x51)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x34 (and $x33 $x97)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x9 $x34)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x54 (and $x73 $x121)))
 (let (($x28 (=> $x54 $x25)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x98 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (not $x98)))
 (let (($x64 (or $x98 $x94)))
 (let (($x126 (= $x64 true)))
 (let (($x25 (= $x126 true)))
 (let (($x103 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1656X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1656X) (_ bv0 32)))))
 ))
 (let (($x88 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1655X)))
 (= $x105 false)))
 ))
 (let (($x143 (and $x88 $x103)))
 (let (($x56 (= $x143 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x101)))
 (let (($x80 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x80 true)))
 (let (($x144 (= $x140 true)))
 (let ((?x17 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x17)))
 (let (($x62 (= ?x41 input.dst.llvm-%n)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x100)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x44 $x99)))
 (let (($x72 (and $x76 $x60)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x32 $x72)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x22)))))))
 (let (($x70 (and $x67 $x38)))
 (let (($x59 (= $x70 true)))
 (let (($x111 (= $x59 true)))
 (let (($x106 (= $x111 true)))
 (let (($x145 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x145 true)))
 (let (($x29 (= $x69 true)))
 (let ((?x20 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x20)))
 (let (($x136 (= ?x18 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x136 true)))
 (let (($x95 (= $x7 true)))
 (let (($x52 (and $x95 $x29)))
 (let (($x114 (and $x52 $x106)))
 (let (($x87 (and $x114 $x58)))
 (let (($x133 (and $x87 $x144)))
 (let (($x152 (and $x133 $x56)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x23 $x152)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x132 (and $x40 $x91)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x63 (and $x21 $x132)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x93 (and $x50 $x63)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x162 (and $x48 $x93)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x51 (and $x107 $x162)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x97 (and $x127 $x51)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x34 (and $x33 $x97)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x9 $x34)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x54 (and $x73 $x121)))
 (let (($x28 (=> $x54 $x25)))
 (not $x28)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 101 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x46)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x12 $x22)))
 (let (($x74 (and $x16 $x61)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x43 $x74)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x41)))))))
 (let (($x28 (and $x19 $x67)))
 (let (($x27 (= $x28 true)))
 (let (($x26 (= $x27 true)))
 (let (($x132 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1662X)))
 (=> $x144 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1662X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1661X)))
 (= $x144 false)))
 ))
 (let (($x63 (and $x131 $x132)))
 (let (($x93 (= $x63 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x70 (concat ?x60 (concat ?x116 ?x44)))))
 (let (($x87 (= ?x59 input.dst.llvm-%n)))
 (let (($x108 (= $x87 true)))
 (let (($x101 (= $x108 true)))
 (let (($x111 (= input.dst.llvm-%n ?x59)))
 (let (($x90 (and (and (and $x19 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x67) $x111)))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x109 (and $x58 $x101)))
 (let (($x162 (and $x109 $x93)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x35 $x162)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x97 (and $x77 $x51)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x34 (and $x24 $x97)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x121 (and $x14 $x34)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x54 (and $x47 $x121)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x98 (and $x161 $x54)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x94 (and $x31 $x98)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x64 (and $x30 $x94)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x126 (and $x13 $x64)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x25 (and $x8 $x126)))
 (let (($x149 (=> $x25 $x26)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x46)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x12 $x22)))
 (let (($x74 (and $x16 $x61)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x43 $x74)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x41)))))))
 (let (($x28 (and $x19 $x67)))
 (let (($x27 (= $x28 true)))
 (let (($x26 (= $x27 true)))
 (let (($x132 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1662X)))
 (=> $x144 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1662X) (_ bv0 32)))))
 ))
 (let (($x131 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1661X)))
 (= $x144 false)))
 ))
 (let (($x63 (and $x131 $x132)))
 (let (($x93 (= $x63 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x70 (concat ?x60 (concat ?x116 ?x44)))))
 (let (($x87 (= ?x59 input.dst.llvm-%n)))
 (let (($x108 (= $x87 true)))
 (let (($x101 (= $x108 true)))
 (let (($x111 (= input.dst.llvm-%n ?x59)))
 (let (($x90 (and (and (and $x19 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x67) $x111)))
 (let (($x62 (= $x90 true)))
 (let (($x65 (= $x62 true)))
 (let (($x58 (= $x65 true)))
 (let (($x109 (and $x58 $x101)))
 (let (($x162 (and $x109 $x93)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x35 $x162)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x97 (and $x77 $x51)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x34 (and $x24 $x97)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x121 (and $x14 $x34)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x54 (and $x47 $x121)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x98 (and $x161 $x54)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x94 (and $x31 $x98)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x64 (and $x30 $x94)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x126 (and $x13 $x64)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x25 (and $x8 $x126)))
 (let (($x149 (=> $x25 $x26)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x143)))
 (let (($x56 (= ?x83 input.dst.llvm-%n)))
 (let (($x10 (= $x56 true)))
 (let (($x126 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1668X)))
 (=> $x152 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1668X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1667X)))
 (= $x152 false)))
 ))
 (let (($x25 (and $x93 $x126)))
 (let (($x28 (= $x25 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x72 (concat ?x116 (concat ?x76 ?x38)))))
 (let (($x101 (= ?x59 input.dst.llvm-%n)))
 (let (($x109 (= $x101 true)))
 (let (($x140 (= $x109 true)))
 (let (($x111 (= input.dst.llvm-%n ?x59)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x46)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x12 $x22)))
 (let (($x74 (and $x16 $x61)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x43 $x74)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x69)))))))
 (let (($x65 (and (and (and $x106 $x75) $x67) $x111)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x144 (and $x108 $x140)))
 (let (($x27 (and $x144 $x28)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x112 $x27)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x149 (and $x21 $x26)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x50 $x149)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x5 (and $x48 $x120)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x32 (and $x107 $x5)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x133 (and $x127 $x32)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x103 (and $x68 $x133)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x37 (and $x9 $x103)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x78 (and $x49 $x37)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x80 (and $x73 $x78)))
 (let (($x84 (=> $x80 $x10)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x143)))
 (let (($x56 (= ?x83 input.dst.llvm-%n)))
 (let (($x10 (= $x56 true)))
 (let (($x126 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1668X)))
 (=> $x152 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1668X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1667X)))
 (= $x152 false)))
 ))
 (let (($x25 (and $x93 $x126)))
 (let (($x28 (= $x25 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x72 (concat ?x116 (concat ?x76 ?x38)))))
 (let (($x101 (= ?x59 input.dst.llvm-%n)))
 (let (($x109 (= $x101 true)))
 (let (($x140 (= $x109 true)))
 (let (($x111 (= input.dst.llvm-%n ?x59)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x46)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x12 $x22)))
 (let (($x74 (and $x16 $x61)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x43 $x74)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x69)))))))
 (let (($x65 (and (and (and $x106 $x75) $x67) $x111)))
 (let (($x58 (= $x65 true)))
 (let (($x87 (= $x58 true)))
 (let (($x108 (= $x87 true)))
 (let (($x144 (and $x108 $x140)))
 (let (($x27 (and $x144 $x28)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x112 $x27)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x149 (and $x21 $x26)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x120 (and $x50 $x149)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x5 (and $x48 $x120)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x32 (and $x107 $x5)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x133 (and $x127 $x32)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x103 (and $x68 $x133)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x37 (and $x9 $x103)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x78 (and $x49 $x37)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x80 (and $x73 $x78)))
 (let (($x84 (=> $x80 $x10)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x131)))
 (let (($x54 (= ?x132 input.spec-%var-n-1)))
 (let (($x51 (= $x54 true)))
 (let (($x78 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1674X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1674X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1673X)))
 (= $x94 false)))
 ))
 (let (($x80 (and $x28 $x78)))
 (let (($x141 (= $x80 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x6 (concat ?x52 (concat ?x145 ?x17)))))
 (let (($x87 (= input.dst.llvm-%n ?x75)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x59)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x76 $x100)))
 (let (($x65 (and $x44 $x111)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x22 $x65)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x114)))))))
 (let (($x109 (and (and (and $x70 $x36) $x58) $x87)))
 (let (($x140 (= $x109 true)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let (($x71 (= ?x75 input.dst.llvm-%n)))
 (let (($x43 (= $x71 true)))
 (let (($x12 (= $x43 true)))
 (let (($x152 (and $x12 $x164)))
 (let (($x143 (and $x152 $x141)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and $x40 $x143)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x56 (and $x24 $x83)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x10 (and $x14 $x56)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x84 (and $x47 $x10)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x124 (and $x161 $x84)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x18 (and $x31 $x124)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x139 (and $x33 $x18)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x91 (and $x13 $x139)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x23 $x91)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x97 (and $x8 $x121)))
 (let (($x98 (=> $x97 $x51)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x131)))
 (let (($x54 (= ?x132 input.spec-%var-n-1)))
 (let (($x51 (= $x54 true)))
 (let (($x78 (forall ((input.ind-%var1674X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1674X)))
 (=> $x94 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1674X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x94 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1673X)))
 (= $x94 false)))
 ))
 (let (($x80 (and $x28 $x78)))
 (let (($x141 (= $x80 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x6 (concat ?x52 (concat ?x145 ?x17)))))
 (let (($x87 (= input.dst.llvm-%n ?x75)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x59)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x76 $x100)))
 (let (($x65 (and $x44 $x111)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x22 $x65)))
 (let (($x36 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x114)))))))
 (let (($x109 (and (and (and $x70 $x36) $x58) $x87)))
 (let (($x140 (= $x109 true)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let (($x71 (= ?x75 input.dst.llvm-%n)))
 (let (($x43 (= $x71 true)))
 (let (($x12 (= $x43 true)))
 (let (($x152 (and $x12 $x164)))
 (let (($x143 (and $x152 $x141)))
 (let (($x40 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and $x40 $x143)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x56 (and $x24 $x83)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x10 (and $x14 $x56)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x84 (and $x47 $x10)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x124 (and $x161 $x84)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x18 (and $x31 $x124)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x139 (and $x33 $x18)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x91 (and $x13 $x139)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x23 $x91)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x97 (and $x8 $x121)))
 (let (($x98 (=> $x97 $x51)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x130 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x45 (ite $x130 ?x102 (_ bv0 32))))
 (let ((?x122 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x165 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x117 (ite $x165 ?x122 ?x45)))
 (let ((?x96 (bvmul (_ bv4294967295 32) ?x117)))
 (let ((?x163 (bvneg ?x96)))
 (let (($x92 (= ?x163 ?x123)))
 (let (($x55 (= $x92 true)))
 (let (($x5 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1680X)))
 (=> $x139 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1680X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var1679X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1679X)))
 (= $x139 false)))
 ))
 (let (($x149 (and $x105 $x5)))
 (let (($x63 (= $x149 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x78)))
 (let (($x143 (= ?x80 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x143 true)))
 (let (($x56 (= $x83 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x34)))
 (let (($x25 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x25 true)))
 (let (($x120 (= $x28 true)))
 (let (($x109 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x109 true)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x76)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x39 $x108)))
 (let (($x100 (and $x22 $x38)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x71 $x100)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x67)))))))
 (let (($x59 (and $x60 $x44)))
 (let (($x111 (= $x59 true)))
 (let (($x65 (= $x111 true)))
 (let (($x58 (= $x65 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x15)))
 (let (($x41 (= ?x106 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (= $x41 true)))
 (let (($x17 (= $x145 true)))
 (let (($x69 (= ?x106 input.dst.llvm-%n)))
 (let (($x29 (= $x69 true)))
 (let (($x52 (= $x29 true)))
 (let (($x7 (and $x52 $x17)))
 (let (($x101 (and $x7 $x58)))
 (let (($x152 (and $x101 $x164)))
 (let (($x103 (and $x152 $x120)))
 (let (($x10 (and $x103 $x56)))
 (let (($x93 (and $x10 $x63)))
 (let (($x112 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and (not $x112) $x93)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x77 $x32)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x133 (and $x50 $x26)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x162 (and $x48 $x133)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x79 (and $x107 $x162)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x89 (and $x127 $x79)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x66 (and $x68 $x89)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x53 (and $x30 $x66)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x57 (and $x49 $x53)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x35 $x57)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x11 (and $x73 $x137)))
 (let (($x85 (=> $x11 $x55)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x130 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x45 (ite $x130 ?x102 (_ bv0 32))))
 (let ((?x122 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x165 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x117 (ite $x165 ?x122 ?x45)))
 (let ((?x96 (bvmul (_ bv4294967295 32) ?x117)))
 (let ((?x163 (bvneg ?x96)))
 (let (($x92 (= ?x163 ?x123)))
 (let (($x55 (= $x92 true)))
 (let (($x5 (forall ((input.ind-%var1680X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1680X)))
 (=> $x139 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1680X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var1679X (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1679X)))
 (= $x139 false)))
 ))
 (let (($x149 (and $x105 $x5)))
 (let (($x63 (= $x149 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x78)))
 (let (($x143 (= ?x80 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x143 true)))
 (let (($x56 (= $x83 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x34)))
 (let (($x25 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x25 true)))
 (let (($x120 (= $x28 true)))
 (let (($x109 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x109 true)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x76)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x39 $x108)))
 (let (($x100 (and $x22 $x38)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x71 $x100)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x67)))))))
 (let (($x59 (and $x60 $x44)))
 (let (($x111 (= $x59 true)))
 (let (($x65 (= $x111 true)))
 (let (($x58 (= $x65 true)))
 (let ((?x15 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x15)))
 (let (($x41 (= ?x106 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x145 (= $x41 true)))
 (let (($x17 (= $x145 true)))
 (let (($x69 (= ?x106 input.dst.llvm-%n)))
 (let (($x29 (= $x69 true)))
 (let (($x52 (= $x29 true)))
 (let (($x7 (and $x52 $x17)))
 (let (($x101 (and $x7 $x58)))
 (let (($x152 (and $x101 $x164)))
 (let (($x103 (and $x152 $x120)))
 (let (($x10 (and $x103 $x56)))
 (let (($x93 (and $x10 $x63)))
 (let (($x112 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and (not $x112) $x93)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x77 $x32)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x133 (and $x50 $x26)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x162 (and $x48 $x133)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x79 (and $x107 $x162)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x89 (and $x127 $x79)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x66 (and $x68 $x89)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x53 (and $x30 $x66)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x57 (and $x49 $x53)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x137 (and $x35 $x57)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x11 (and $x73 $x137)))
 (let (($x85 (=> $x11 $x55)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x75 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite $x75 ?x91 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x85 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x54 (ite $x85 ?x142 ?x98)))
 (let ((?x84 (bvmul (_ bv4294967295 32) ?x54)))
 (let ((?x124 (bvneg ?x84)))
 (let (($x88 (= ?x124 ?x121)))
 (let (($x132 (= $x88 true)))
 (let (($x66 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1726X)))
 (= $x105 false)))
 ))
 (let (($x26 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1727X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1727X) (_ bv0 32)))))
 ))
 (let (($x53 (and $x26 $x66)))
 (let (($x57 (= $x53 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x78)))
 (let (($x143 (= ?x80 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x143 true)))
 (let (($x56 (= $x83 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x34)))
 (let (($x25 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x25 true)))
 (let (($x120 (= $x28 true)))
 (let (($x109 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x109 true)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x76)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x39 $x108)))
 (let (($x100 (and $x22 $x38)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x12 $x100)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x62)))))))
 (let (($x59 (and $x71 $x44)))
 (let (($x111 (= $x59 true)))
 (let (($x65 (= $x111 true)))
 (let (($x58 (= $x65 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x126)))
 (let (($x29 (= ?x20 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (= $x29 true)))
 (let (($x41 (= $x52 true)))
 (let (($x106 (= ?x20 input.dst.llvm-%n)))
 (let (($x6 (= $x106 true)))
 (let (($x69 (= $x6 true)))
 (let (($x145 (and $x69 $x41)))
 (let (($x101 (and $x145 $x58)))
 (let (($x152 (and $x101 $x164)))
 (let (($x103 (and $x152 $x120)))
 (let (($x10 (and $x103 $x56)))
 (let (($x137 (and $x10 $x57)))
 (let (($x40 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x40) $x137)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and $x21 $x165)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x130 (and $x14 $x122)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x102 (and $x47 $x130)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x45 (and $x161 $x102)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x117 (and $x31 $x45)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x96 (and $x33 $x117)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x9 $x96)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x23 $x163)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x92 (and $x136 $x123)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x55 (and $x8 $x92)))
 (let (($x125 (=> $x55 $x132)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x75 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite $x75 ?x91 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x85 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x54 (ite $x85 ?x142 ?x98)))
 (let ((?x84 (bvmul (_ bv4294967295 32) ?x54)))
 (let ((?x124 (bvneg ?x84)))
 (let (($x88 (= ?x124 ?x121)))
 (let (($x132 (= $x88 true)))
 (let (($x66 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1726X)))
 (= $x105 false)))
 ))
 (let (($x26 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1727X)))
 (=> $x105 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1727X) (_ bv0 32)))))
 ))
 (let (($x53 (and $x26 $x66)))
 (let (($x57 (= $x53 true)))
 (let ((?x78 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x78)))
 (let (($x143 (= ?x80 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x143 true)))
 (let (($x56 (= $x83 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x34)))
 (let (($x25 (= ?x94 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x25 true)))
 (let (($x120 (= $x28 true)))
 (let (($x109 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x109 true)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x76)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x39 $x108)))
 (let (($x100 (and $x22 $x38)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x12 $x100)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x62)))))))
 (let (($x59 (and $x71 $x44)))
 (let (($x111 (= $x59 true)))
 (let (($x65 (= $x111 true)))
 (let (($x58 (= $x65 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x126)))
 (let (($x29 (= ?x20 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (= $x29 true)))
 (let (($x41 (= $x52 true)))
 (let (($x106 (= ?x20 input.dst.llvm-%n)))
 (let (($x6 (= $x106 true)))
 (let (($x69 (= $x6 true)))
 (let (($x145 (and $x69 $x41)))
 (let (($x101 (and $x145 $x58)))
 (let (($x152 (and $x101 $x164)))
 (let (($x103 (and $x152 $x120)))
 (let (($x10 (and $x103 $x56)))
 (let (($x137 (and $x10 $x57)))
 (let (($x40 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x40) $x137)))
 (let (($x21 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (and $x21 $x165)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x130 (and $x14 $x122)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x102 (and $x47 $x130)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x45 (and $x161 $x102)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x117 (and $x31 $x45)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x96 (and $x33 $x117)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x163 (and $x9 $x96)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x23 $x163)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x92 (and $x136 $x123)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x55 (and $x8 $x92)))
 (let (($x125 (=> $x55 $x132)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x54)))
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (not $x91)))
 (let (($x124 (or $x98 $x84)))
 (let (($x121 (= $x124 true)))
 (let (($x88 (= $x121 true)))
 (let (($x165 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1774X)))
 (=> $x83 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1774X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1773X)))
 (= $x83 false)))
 ))
 (let (($x122 (and $x105 $x165)))
 (let (($x130 (= $x122 true)))
 (let ((?x94 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x94)))
 (let (($x120 (= ?x25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x120 true)))
 (let (($x37 (= $x103 true)))
 (let ((?x59 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x59)))
 (let (($x140 (= ?x111 input.dst.llvm-%n)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let (($x65 (= ?x111 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x101 (= $x58 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x39)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x99 $x43)))
 (let (($x36 (and $x12 $x70)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x29 $x36)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x116)))))))
 (let (($x22 (and $x114 $x108)))
 (let (($x76 (= $x22 true)))
 (let (($x38 (= $x76 true)))
 (let (($x100 (= $x38 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x40)))
 (let (($x126 (= ?x11 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x126 true)))
 (let (($x15 (= $x20 true)))
 (let (($x44 (and $x15 $x100)))
 (let (($x87 (and $x44 $x101)))
 (let (($x152 (and $x87 $x164)))
 (let (($x78 (and $x152 $x37)))
 (let (($x102 (and $x78 $x130)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x45 (and $x24 $x102)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x48 $x45)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x96 (and $x107 $x117)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x163 (and $x127 $x96)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x123 (and $x68 $x163)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x92 (and $x30 $x123)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x55 (and $x13 $x92)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x85 (and $x35 $x55)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x19 $x85)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x75 (and $x73 $x142)))
 (let (($x132 (=> $x75 $x88)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (not $x54)))
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (not $x91)))
 (let (($x124 (or $x98 $x84)))
 (let (($x121 (= $x124 true)))
 (let (($x88 (= $x121 true)))
 (let (($x165 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1774X)))
 (=> $x83 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1774X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1773X)))
 (= $x83 false)))
 ))
 (let (($x122 (and $x105 $x165)))
 (let (($x130 (= $x122 true)))
 (let ((?x94 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x94)))
 (let (($x120 (= ?x25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x120 true)))
 (let (($x37 (= $x103 true)))
 (let ((?x59 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x59)))
 (let (($x140 (= ?x111 input.dst.llvm-%n)))
 (let (($x144 (= $x140 true)))
 (let (($x164 (= $x144 true)))
 (let (($x65 (= ?x111 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (= $x65 true)))
 (let (($x101 (= $x58 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x39)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x99 $x43)))
 (let (($x36 (and $x12 $x70)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x29 $x36)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x116)))))))
 (let (($x22 (and $x114 $x108)))
 (let (($x76 (= $x22 true)))
 (let (($x38 (= $x76 true)))
 (let (($x100 (= $x38 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x11 (bvneg ?x40)))
 (let (($x126 (= ?x11 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x20 (= $x126 true)))
 (let (($x15 (= $x20 true)))
 (let (($x44 (and $x15 $x100)))
 (let (($x87 (and $x44 $x101)))
 (let (($x152 (and $x87 $x164)))
 (let (($x78 (and $x152 $x37)))
 (let (($x102 (and $x78 $x130)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x45 (and $x24 $x102)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x48 $x45)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x96 (and $x107 $x117)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x163 (and $x127 $x96)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x123 (and $x68 $x163)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x92 (and $x30 $x123)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x55 (and $x13 $x92)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x85 (and $x35 $x55)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x142 (and $x19 $x85)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x75 (and $x73 $x142)))
 (let (($x132 (=> $x75 $x88)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (or $x89 $x32)))
 (let (($x141 (= $x80 true)))
 (let (($x10 (= $x141 true)))
 (let (($x85 (forall ((input.ind-%var1780X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1780X)))
 (=> $x26 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1780X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1779X)))
 (= $x26 false)))
 ))
 (let (($x142 (and $x122 $x85)))
 (let (($x75 (= $x142 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x25)))
 (let (($x103 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x103 true)))
 (let (($x78 (= $x37 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x111)))
 (let (($x144 (= ?x65 input.dst.llvm-%n)))
 (let (($x164 (= $x144 true)))
 (let (($x152 (= $x164 true)))
 (let (($x58 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x58 true)))
 (let (($x87 (= $x101 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x70)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x60 $x12)))
 (let (($x108 (and $x39 $x36)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x74 $x108)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x67)))))))
 (let (($x76 (and $x99 $x22)))
 (let (($x38 (= $x76 true)))
 (let (($x100 (= $x38 true)))
 (let (($x44 (= $x100 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x77)))
 (let (($x112 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x112 true)))
 (let (($x20 (= $x126 true)))
 (let (($x59 (and $x20 $x44)))
 (let (($x109 (and $x59 $x87)))
 (let (($x34 (and $x109 $x152)))
 (let (($x143 (and $x34 $x78)))
 (let (($x91 (and $x143 $x75)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x50 $x91)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x54 (and $x47 $x98)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x84 (and $x161 $x54)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x124 (and $x31 $x84)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x121 (and $x33 $x124)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x88 (and $x9 $x121)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x132 (and $x49 $x88)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x136 $x132)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x6 (and $x17 $x125)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x56 (and $x8 $x6)))
 (let (($x66 (=> $x56 $x10)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x89 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (or $x89 $x32)))
 (let (($x141 (= $x80 true)))
 (let (($x10 (= $x141 true)))
 (let (($x85 (forall ((input.ind-%var1780X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1780X)))
 (=> $x26 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1780X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1779X)))
 (= $x26 false)))
 ))
 (let (($x142 (and $x122 $x85)))
 (let (($x75 (= $x142 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x25)))
 (let (($x103 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x103 true)))
 (let (($x78 (= $x37 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x111)))
 (let (($x144 (= ?x65 input.dst.llvm-%n)))
 (let (($x164 (= $x144 true)))
 (let (($x152 (= $x164 true)))
 (let (($x58 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x58 true)))
 (let (($x87 (= $x101 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x70)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x60 $x12)))
 (let (($x108 (and $x39 $x36)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x74 $x108)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x67)))))))
 (let (($x76 (and $x99 $x22)))
 (let (($x38 (= $x76 true)))
 (let (($x100 (= $x38 true)))
 (let (($x44 (= $x100 true)))
 (let ((?x77 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x77)))
 (let (($x112 (= ?x40 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x112 true)))
 (let (($x20 (= $x126 true)))
 (let (($x59 (and $x20 $x44)))
 (let (($x109 (and $x59 $x87)))
 (let (($x34 (and $x109 $x152)))
 (let (($x143 (and $x34 $x78)))
 (let (($x91 (and $x143 $x75)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x50 $x91)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x54 (and $x47 $x98)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x84 (and $x161 $x54)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x124 (and $x31 $x84)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x121 (and $x33 $x124)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x88 (and $x9 $x121)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x132 (and $x49 $x88)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x136 $x132)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x6 (and $x17 $x125)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x56 (and $x8 $x6)))
 (let (($x66 (=> $x56 $x10)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x133 true)))
 (let (($x7 (= $x27 true)))
 (let (($x10 (forall ((input.ind-%var1786X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1786X)))
 (=> $x98 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1786X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1785X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1785X)))
 (= $x98 false)))
 ))
 (let (($x66 (and $x121 $x10)))
 (let (($x93 (= $x66 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x26)))
 (let (($x117 (= ?x165 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x117 true)))
 (let (($x55 (= $x92 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x34)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x109 $x164)))
 (let (($x25 (and $x152 $x94)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x70 $x25)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x44)))))))
 (let (($x120 (and $x87 $x28)))
 (let (($x103 (= $x120 true)))
 (let (($x37 (= $x103 true)))
 (let (($x78 (= $x37 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x67)))
 (let (($x41 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x41 true)))
 (let (($x60 (= $x74 true)))
 (let (($x62 (= ?x61 input.dst.llvm-%n)))
 (let (($x114 (= $x62 true)))
 (let (($x69 (= $x114 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x16)))
 (let (($x90 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x90 true)))
 (let (($x46 (= $x116 true)))
 (let (($x40 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x11 (not $x40)))
 (let (($x112 (= $x11 true)))
 (let (($x126 (= $x112 true)))
 (let (($x20 (= $x126 true)))
 (let (($x72 (and $x20 $x46)))
 (let (($x99 (and $x72 $x69)))
 (let (($x71 (and $x99 $x60)))
 (let (($x143 (and $x71 $x78)))
 (let (($x85 (and $x143 $x55)))
 (let (($x52 (and $x85 $x93)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and $x24 $x52)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x14 $x57)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x45 (and $x107 $x96)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x83 (and $x127 $x45)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x68 $x83)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x137 (and $x30 $x97)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x13 $x137)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x102 (and $x23 $x163)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x19 $x102)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x64 (and $x106 $x123)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x53 (and $x73 $x64)))
 (let (($x51 (=> $x53 $x7)))
 (not $x51)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x133 true)))
 (let (($x7 (= $x27 true)))
 (let (($x10 (forall ((input.ind-%var1786X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1786X)))
 (=> $x98 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1786X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1785X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1785X)))
 (= $x98 false)))
 ))
 (let (($x66 (and $x121 $x10)))
 (let (($x93 (= $x66 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x26)))
 (let (($x117 (= ?x165 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x117 true)))
 (let (($x55 (= $x92 true)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x34)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x109 $x164)))
 (let (($x25 (and $x152 $x94)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x70 $x25)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x44)))))))
 (let (($x120 (and $x87 $x28)))
 (let (($x103 (= $x120 true)))
 (let (($x37 (= $x103 true)))
 (let (($x78 (= $x37 true)))
 (let ((?x67 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x67)))
 (let (($x41 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x41 true)))
 (let (($x60 (= $x74 true)))
 (let (($x62 (= ?x61 input.dst.llvm-%n)))
 (let (($x114 (= $x62 true)))
 (let (($x69 (= $x114 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x16)))
 (let (($x90 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x90 true)))
 (let (($x46 (= $x116 true)))
 (let (($x40 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x11 (not $x40)))
 (let (($x112 (= $x11 true)))
 (let (($x126 (= $x112 true)))
 (let (($x20 (= $x126 true)))
 (let (($x72 (and $x20 $x46)))
 (let (($x99 (and $x72 $x69)))
 (let (($x71 (and $x99 $x60)))
 (let (($x143 (and $x71 $x78)))
 (let (($x85 (and $x143 $x55)))
 (let (($x52 (and $x85 $x93)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and $x24 $x52)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x14 $x57)))
 (let (($x107 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x45 (and $x107 $x96)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x83 (and $x127 $x45)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x68 $x83)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x137 (and $x30 $x97)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x163 (and $x13 $x137)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x102 (and $x23 $x163)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x19 $x102)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x64 (and $x106 $x123)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x53 (and $x73 $x64)))
 (let (($x51 (=> $x53 $x7)))
 (not $x51)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 107 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675973/query
