==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= false true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x88 (concat ?x84 ?x82)))))
 (let (($x93 (= ?x92 input.dst.llvm-%n)))
 (let (($x94 (= $x93 true)))
 (let (($x77 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x70)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x65 $x68)))
 (let (($x72 (and $x69 $x71)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x51 $x72)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x58)))))))
 (let (($x74 (and $x64 $x73)))
 (let (($x75 (= $x74 true)))
 (let (($x79 (and $x75 $x78)))
 (let (($x95 (and $x79 $x94)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x41 $x95)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x97 (and $x37 $x96)))
 (let (($x10 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x31 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x31 false)))
 ))
 (let (($x11 (and $x40 $x10)))
 (let (($x98 (and $x11 $x97)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x99 (and $x24 $x98)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x100 (and $x30 $x99)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x101 (and $x47 $x100)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x15 $x101)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x103 (and $x35 $x102)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x104 (and $x18 $x103)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x105 (and $x20 $x104)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x106 (and $x12 $x105)))
 (let (($x108 (=> $x106 $x107)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (= false true)))
 (let ((?x82 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x88 (concat ?x84 ?x82)))))
 (let (($x93 (= ?x92 input.dst.llvm-%n)))
 (let (($x94 (= $x93 true)))
 (let (($x77 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (= $x77 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x70)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x65 $x68)))
 (let (($x72 (and $x69 $x71)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x51 $x72)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x58)))))))
 (let (($x74 (and $x64 $x73)))
 (let (($x75 (= $x74 true)))
 (let (($x79 (and $x75 $x78)))
 (let (($x95 (and $x79 $x94)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x41 $x95)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x97 (and $x37 $x96)))
 (let (($x10 (forall ((input.ind-%var193X (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var193X)))
 (=> $x31 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var193X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x31 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var192X)))
 (= $x31 false)))
 ))
 (let (($x11 (and $x40 $x10)))
 (let (($x98 (and $x11 $x97)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x99 (and $x24 $x98)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x100 (and $x30 $x99)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x101 (and $x47 $x100)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x102 (and $x15 $x101)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x103 (and $x35 $x102)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x104 (and $x18 $x103)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x105 (and $x20 $x104)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x106 (and $x12 $x105)))
 (let (($x108 (=> $x106 $x107)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb405964)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb405967)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb405964)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x78 $x90)))
 (let (($x88 (and $x91 $x87)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x77 $x88)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x8 (and $x75 $x83)))
 (let (($x22 (= $x8 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x96 (concat ?x92 ?x85)))))
 (let (($x101 (= input.dst.llvm-%n ?x100)))
 (let (($x104 (and (and (and $x75 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x83) $x101)))
 (let (($x105 (= $x104 true)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x9 $x105)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x107 (and $x50 $x106)))
 (let (($x58 (forall ((input.ind-%var211X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var211X)))
 (=> $x27 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var211X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var210X)))
 (= $x27 false)))
 ))
 (let (($x64 (and $x45 $x58)))
 (let (($x108 (and $x64 $x107)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x109 (and $x13 $x108)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x49 (and $x11 $x109)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x81 (and $x57 $x49)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x44 (and $x15 $x81)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x16 (and $x6 $x44)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x38 (and $x23 $x16)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x26 (and $x7 $x38)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x43 (and $x21 $x26)))
 (let (($x33 (=> $x43 $x22)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x86)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x78 $x90)))
 (let (($x88 (and $x91 $x87)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x77 $x88)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x69)))))))
 (let (($x8 (and $x75 $x83)))
 (let (($x22 (= $x8 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x96 (concat ?x92 ?x85)))))
 (let (($x101 (= input.dst.llvm-%n ?x100)))
 (let (($x104 (and (and (and $x75 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x83) $x101)))
 (let (($x105 (= $x104 true)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x9 $x105)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x107 (and $x50 $x106)))
 (let (($x58 (forall ((input.ind-%var211X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var211X)))
 (=> $x27 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var211X) (_ bv0 32)))))
 ))
 (let (($x45 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var210X)))
 (= $x27 false)))
 ))
 (let (($x64 (and $x45 $x58)))
 (let (($x108 (and $x64 $x107)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x109 (and $x13 $x108)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x49 (and $x11 $x109)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x81 (and $x57 $x49)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x44 (and $x15 $x81)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x16 (and $x6 $x44)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x38 (and $x23 $x16)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x26 (and $x7 $x38)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x43 (and $x21 $x26)))
 (let (($x33 (=> $x43 $x22)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x35 (= $x39 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x44 (concat ?x109 (concat ?x105 ?x101)))))
 (let (($x38 (= input.dst.llvm-%n ?x16)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x89)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x98 $x95)))
 (let (($x85 (and $x96 $x92)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x84 $x85)))
 (let (($x47 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x80)))))))
 (let (($x8 (and (and (and $x83 $x47) $x93) $x38)))
 (let (($x22 (= $x8 true)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x71 $x22)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x19 (and $x40 $x33)))
 (let (($x42 (forall ((input.ind-%var221X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var221X)))
 (=> $x45 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var221X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var220X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var220X)))
 (= $x45 false)))
 ))
 (let (($x67 (and $x58 $x42)))
 (let (($x41 (and $x67 $x19)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x54 (and $x13 $x41)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x82 (and $x11 $x54)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x30 (and $x57 $x82)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x62 (and $x15 $x30)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x5 (and $x6 $x62)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x36 (and $x23 $x5)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x51 (and $x7 $x36)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x29 (and $x21 $x51)))
 (let (($x56 (=> $x29 $x35)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x35 (= $x39 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x44 (concat ?x109 (concat ?x105 ?x101)))))
 (let (($x38 (= input.dst.llvm-%n ?x16)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x89)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x98 $x95)))
 (let (($x85 (and $x96 $x92)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x84 $x85)))
 (let (($x47 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x80)))))))
 (let (($x8 (and (and (and $x83 $x47) $x93) $x38)))
 (let (($x22 (= $x8 true)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x71 $x22)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x19 (and $x40 $x33)))
 (let (($x42 (forall ((input.ind-%var221X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var221X)))
 (=> $x45 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var221X) (_ bv0 32)))))
 ))
 (let (($x58 (forall ((input.ind-%var220X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var220X)))
 (= $x45 false)))
 ))
 (let (($x67 (and $x58 $x42)))
 (let (($x41 (and $x67 $x19)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x54 (and $x13 $x41)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x82 (and $x11 $x54)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x30 (and $x57 $x82)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x62 (and $x15 $x30)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x5 (and $x6 $x62)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x36 (and $x23 $x5)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x51 (and $x7 $x36)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x29 (and $x21 $x51)))
 (let (($x56 (=> $x29 $x35)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x61)))
 (let (($x66 (= ?x63 input.dst.llvm-%n)))
 (let (($x32 (= $x66 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x62 (concat ?x54 (concat ?x22 ?x38)))))
 (let (($x36 (= input.dst.llvm-%n ?x5)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x81 $x108)))
 (let (($x101 (and $x109 $x105)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x97 $x101)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x94)))))))
 (let (($x39 (and (and (and $x93 $x75) $x106) $x36)))
 (let (($x35 (= $x39 true)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x91 $x35)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x14 (and $x77 $x56)))
 (let (($x76 (forall ((input.ind-%var239X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var239X)))
 (=> $x59 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var239X) (_ bv0 32)))))
 ))
 (let (($x74 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var238X)))
 (= $x59 false)))
 ))
 (let (($x78 (and $x74 $x76)))
 (let (($x72 (and $x78 $x14)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x18 $x72)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x100 (and $x10 $x73)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x60 (and $x46 $x100)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x53 (and $x37 $x60)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x50 (and $x28 $x53)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x65 (and $x48 $x50)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x27 (and $x21 $x65)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x52 (and $x69 $x27)))
 (let (($x110 (=> $x52 $x32)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x61)))
 (let (($x66 (= ?x63 input.dst.llvm-%n)))
 (let (($x32 (= $x66 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x62 (concat ?x54 (concat ?x22 ?x38)))))
 (let (($x36 (= input.dst.llvm-%n ?x5)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x81 $x108)))
 (let (($x101 (and $x109 $x105)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x97 $x101)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x94)))))))
 (let (($x39 (and (and (and $x93 $x75) $x106) $x36)))
 (let (($x35 (= $x39 true)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x91 $x35)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x14 (and $x77 $x56)))
 (let (($x76 (forall ((input.ind-%var239X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var239X)))
 (=> $x59 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var239X) (_ bv0 32)))))
 ))
 (let (($x74 (forall ((input.ind-%var238X (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var238X)))
 (= $x59 false)))
 ))
 (let (($x78 (and $x74 $x76)))
 (let (($x72 (and $x78 $x14)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x18 $x72)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x100 (and $x10 $x73)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x60 (and $x46 $x100)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x53 (and $x37 $x60)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x50 (and $x28 $x53)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x65 (and $x48 $x50)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x27 (and $x21 $x65)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x52 (and $x69 $x27)))
 (let (($x110 (=> $x52 $x32)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x24)))
 (let (($x71 (= ?x17 input.spec-%var-n-1)))
 (let (($x67 (= $x71 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x53 (concat ?x73 (concat ?x35 ?x36)))))
 (let (($x65 (= input.dst.llvm-%n ?x50)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x8)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x30 $x41)))
 (let (($x38 (and $x54 $x22)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x49 $x38)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x107)))))))
 (let (($x9 (and (and (and $x106 $x83) $x33) $x65)))
 (let (($x61 (= $x9 true)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and $x96 $x61)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x66 (and $x84 $x63)))
 (let (($x103 (forall ((input.ind-%var249X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var249X)))
 (=> $x74 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var249X) (_ bv0 32)))))
 ))
 (let (($x76 (forall ((input.ind-%var248X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var248X)))
 (= $x74 false)))
 ))
 (let (($x98 (and $x76 $x103)))
 (let (($x32 (and $x98 $x66)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x110 (and $x18 $x32)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x111 (and $x10 $x110)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x86 (and $x46 $x111)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x87 (and $x37 $x86)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x16 (and $x28 $x87)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x58 (and $x48 $x16)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x70 (and $x21 $x58)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x68 (and $x69 $x70)))
 (let (($x55 (=> $x68 $x67)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x17 (bvneg ?x24)))
 (let (($x71 (= ?x17 input.spec-%var-n-1)))
 (let (($x67 (= $x71 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x53 (concat ?x73 (concat ?x35 ?x36)))))
 (let (($x65 (= input.dst.llvm-%n ?x50)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x8)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x30 $x41)))
 (let (($x38 (and $x54 $x22)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x49 $x38)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x107)))))))
 (let (($x9 (and (and (and $x106 $x83) $x33) $x65)))
 (let (($x61 (= $x9 true)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and $x96 $x61)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x66 (and $x84 $x63)))
 (let (($x103 (forall ((input.ind-%var249X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var249X)))
 (=> $x74 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var249X) (_ bv0 32)))))
 ))
 (let (($x76 (forall ((input.ind-%var248X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var248X)))
 (= $x74 false)))
 ))
 (let (($x98 (and $x76 $x103)))
 (let (($x32 (and $x98 $x66)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x110 (and $x18 $x32)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x111 (and $x10 $x110)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x86 (and $x46 $x111)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x87 (and $x37 $x86)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x16 (and $x28 $x87)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x58 (and $x48 $x16)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x70 (and $x21 $x58)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x68 (and $x69 $x70)))
 (let (($x55 (=> $x68 $x67)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x59 (= $x45 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x86 (concat ?x32 (concat ?x9 ?x50)))))
 (let (($x16 (= input.dst.llvm-%n ?x87)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x73)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x82 $x14)))
 (let (($x35 (and $x72 $x39)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x52 $x35)))
 (let (($x106 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x62)))))))
 (let (($x68 (and (and (and $x38 $x106) $x36) $x16)))
 (let (($x13 (= $x68 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (and $x108 $x13)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x17 (and $x44 $x24)))
 (let (($x101 (forall ((input.ind-%var259X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var259X)))
 (=> $x88 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var259X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var258X)))
 (= $x88 false)))
 ))
 (let (($x43 (and $x85 $x101)))
 (let (($x71 (and $x43 $x17)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x67 (and $x11 $x71)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x55 (and $x57 $x67)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x64 (and $x15 $x55)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x92 (and $x6 $x64)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x5 (and $x20 $x92)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x40 (and $x12 $x5)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x90 (and $x25 $x40)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x77 (and $x34 $x90)))
 (let (($x102 (=> $x77 $x59)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x59 (= $x45 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x86 (concat ?x32 (concat ?x9 ?x50)))))
 (let (($x16 (= input.dst.llvm-%n ?x87)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x73)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x82 $x14)))
 (let (($x35 (and $x72 $x39)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x52 $x35)))
 (let (($x106 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x62)))))))
 (let (($x68 (and (and (and $x38 $x106) $x36) $x16)))
 (let (($x13 (= $x68 true)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (and $x108 $x13)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x17 (and $x44 $x24)))
 (let (($x101 (forall ((input.ind-%var259X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var259X)))
 (=> $x88 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var259X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var258X (_ BitVec 32)) )(let (($x88 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var258X)))
 (= $x88 false)))
 ))
 (let (($x43 (and $x85 $x101)))
 (let (($x71 (and $x43 $x17)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x67 (and $x11 $x71)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x55 (and $x57 $x67)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x64 (and $x15 $x55)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x92 (and $x6 $x64)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x5 (and $x20 $x92)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x40 (and $x12 $x5)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x90 (and $x25 $x40)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x77 (and $x34 $x90)))
 (let (($x102 (=> $x77 $x59)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x146 false)))
 (let (($x148 (= $x147 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x66)))
 (let (($x132 (= ?x32 input.dst.llvm-%n)))
 (let (($x133 (= $x132 true)))
 (let (($x128 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x128 true)))
 (let (($x125 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x126 (= $x125 true)))
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x123 (= $x122 true)))
 (let (($x119 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x120 (= $x119 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x117 (= $x116 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x78)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x31 $x98)))
 (let (($x47 (and $x96 $x79)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x5 $x47)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x91)))))))
 (let (($x112 (and $x18 $x42)))
 (let (($x113 (= $x112 true)))
 (let (($x17 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x71 (= $x17 true)))
 (let (($x68 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x13 (= $x68 true)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x110 true)))
 (let (($x65 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (= $x65 true)))
 (let (($x56 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x111 (= $x56 true)))
 (let (($x35 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x36 (= $x35 true)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x73 (= $x72 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x53 (= $x60 true)))
 (let (($x58 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x58 true)))
 (let (($x38 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x105 (= $x38 true)))
 (let (($x54 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x8 (= $x54 true)))
 (let (($x106 (and $x8 $x105)))
 (let (($x52 (and $x106 $x33)))
 (let (($x14 (and $x52 $x53)))
 (let (($x39 (and $x14 $x73)))
 (let (($x70 (and $x39 $x36)))
 (let (($x86 (and $x70 $x111)))
 (let (($x50 (and $x86 $x9)))
 (let (($x16 (and $x50 $x87)))
 (let (($x24 (and $x16 $x13)))
 (let (($x67 (and $x24 $x71)))
 (let (($x114 (and $x67 $x113)))
 (let (($x118 (and $x114 $x117)))
 (let (($x121 (and $x118 $x120)))
 (let (($x124 (and $x121 $x123)))
 (let (($x127 (and $x124 $x126)))
 (let (($x130 (and $x127 $x129)))
 (let (($x134 (and $x130 $x133)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x19 $x134)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x136 (and $x30 $x135)))
 (let (($x22 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var277X)))
 (=> $x26 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var276X)))
 (= $x26 false)))
 ))
 (let (($x27 (and $x51 $x22)))
 (let (($x137 (and $x27 $x136)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x138 (and $x10 $x137)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x139 (and $x46 $x138)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x140 (and $x37 $x139)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x28 $x140)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x142 (and $x23 $x141)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x143 (and $x69 $x142)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x144 (and $x48 $x143)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x145 (and $x7 $x144)))
 (let (($x149 (=> $x145 $x148)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x146 false)))
 (let (($x148 (= $x147 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x66)))
 (let (($x132 (= ?x32 input.dst.llvm-%n)))
 (let (($x133 (= $x132 true)))
 (let (($x128 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x128 true)))
 (let (($x125 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x126 (= $x125 true)))
 (let (($x122 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x123 (= $x122 true)))
 (let (($x119 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x120 (= $x119 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x117 (= $x116 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x78)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x31 $x98)))
 (let (($x47 (and $x96 $x79)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x5 $x47)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x91)))))))
 (let (($x112 (and $x18 $x42)))
 (let (($x113 (= $x112 true)))
 (let (($x17 (= (_ bv0 32) input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x71 (= $x17 true)))
 (let (($x68 (= (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x13 (= $x68 true)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x110 true)))
 (let (($x65 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (= $x65 true)))
 (let (($x56 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x111 (= $x56 true)))
 (let (($x35 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x36 (= $x35 true)))
 (let (($x72 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x73 (= $x72 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x53 (= $x60 true)))
 (let (($x58 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x58 true)))
 (let (($x38 (bvsle input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x105 (= $x38 true)))
 (let (($x54 (bvule input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x8 (= $x54 true)))
 (let (($x106 (and $x8 $x105)))
 (let (($x52 (and $x106 $x33)))
 (let (($x14 (and $x52 $x53)))
 (let (($x39 (and $x14 $x73)))
 (let (($x70 (and $x39 $x36)))
 (let (($x86 (and $x70 $x111)))
 (let (($x50 (and $x86 $x9)))
 (let (($x16 (and $x50 $x87)))
 (let (($x24 (and $x16 $x13)))
 (let (($x67 (and $x24 $x71)))
 (let (($x114 (and $x67 $x113)))
 (let (($x118 (and $x114 $x117)))
 (let (($x121 (and $x118 $x120)))
 (let (($x124 (and $x121 $x123)))
 (let (($x127 (and $x124 $x126)))
 (let (($x130 (and $x127 $x129)))
 (let (($x134 (and $x130 $x133)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x19 $x134)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x136 (and $x30 $x135)))
 (let (($x22 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var277X)))
 (=> $x26 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var276X)))
 (= $x26 false)))
 ))
 (let (($x27 (and $x51 $x22)))
 (let (($x137 (and $x27 $x136)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x138 (and $x10 $x137)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x139 (and $x46 $x138)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x140 (and $x37 $x139)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x141 (and $x28 $x140)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x142 (and $x23 $x141)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x143 (and $x69 $x142)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x144 (and $x48 $x143)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x145 (and $x7 $x144)))
 (let (($x149 (=> $x145 $x148)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (not $x139)))
 (let (($x137 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (not $x137)))
 (let (($x141 (or $x138 $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x121)))
 (let (($x123 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x123 true)))
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x112)))
 (let (($x118 (= ?x113 input.dst.llvm-%n)))
 (let (($x119 (= $x118 true)))
 (let (($x114 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (= $x114 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x47 (= $x79 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x96 (= $x98 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x31 (= $x5 true)))
 (let (($x94 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x94 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x77)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x71 $x90)))
 (let (($x102 (and $x99 $x59)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x63 $x102)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x110)))))))
 (let (($x91 (and $x17 $x45)))
 (let (($x104 (= $x91 true)))
 (let (($x35 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x36 (= $x35 true)))
 (let ((?x53 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x53)))
 (let (($x73 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x73 true)))
 (let (($x70 (and $x39 $x36)))
 (let (($x100 (and $x70 $x104)))
 (let (($x92 (and $x100 $x18)))
 (let (($x80 (and $x92 $x31)))
 (let (($x78 (and $x80 $x96)))
 (let (($x42 (and $x78 $x47)))
 (let (($x116 (and $x42 $x115)))
 (let (($x120 (and $x116 $x119)))
 (let (($x125 (and $x120 $x124)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and $x52 $x125)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x127 (and $x106 $x126)))
 (let (($x8 (forall ((input.ind-%var847X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var847X)))
 (=> $x75 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var847X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var846X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var846X)))
 (= $x75 false)))
 ))
 (let (($x38 (and $x83 $x8)))
 (let (($x128 (and $x38 $x127)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x129 (and $x21 $x128)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x130 (and $x15 $x129)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x131 (and $x23 $x130)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x132 (and $x89 $x131)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x133 (and $x55 $x132)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x134 (and $x37 $x133)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x135 (and $x25 $x134)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x136 (and $x69 $x135)))
 (let (($x143 (=> $x136 $x142)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (not $x139)))
 (let (($x137 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (not $x137)))
 (let (($x141 (or $x138 $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x121)))
 (let (($x123 (= ?x122 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x123 true)))
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x112)))
 (let (($x118 (= ?x113 input.dst.llvm-%n)))
 (let (($x119 (= $x118 true)))
 (let (($x114 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (= $x114 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x47 (= $x79 true)))
 (let (($x98 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x96 (= $x98 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x31 (= $x5 true)))
 (let (($x94 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x18 (= $x94 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x77)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x71 $x90)))
 (let (($x102 (and $x99 $x59)))
 (let (($x63 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x63 $x102)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x110)))))))
 (let (($x91 (and $x17 $x45)))
 (let (($x104 (= $x91 true)))
 (let (($x35 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x36 (= $x35 true)))
 (let ((?x53 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x53)))
 (let (($x73 (= ?x14 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x73 true)))
 (let (($x70 (and $x39 $x36)))
 (let (($x100 (and $x70 $x104)))
 (let (($x92 (and $x100 $x18)))
 (let (($x80 (and $x92 $x31)))
 (let (($x78 (and $x80 $x96)))
 (let (($x42 (and $x78 $x47)))
 (let (($x116 (and $x42 $x115)))
 (let (($x120 (and $x116 $x119)))
 (let (($x125 (and $x120 $x124)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and $x52 $x125)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x127 (and $x106 $x126)))
 (let (($x8 (forall ((input.ind-%var847X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var847X)))
 (=> $x75 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var847X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var846X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var846X)))
 (= $x75 false)))
 ))
 (let (($x38 (and $x83 $x8)))
 (let (($x128 (and $x38 $x127)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x129 (and $x21 $x128)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x130 (and $x15 $x129)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x131 (and $x23 $x130)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x132 (and $x89 $x131)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x133 (and $x55 $x132)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x134 (and $x37 $x133)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x135 (and $x25 $x134)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x136 (and $x69 $x135)))
 (let (($x143 (=> $x136 $x142)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 110 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x146 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x145 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x147 (ite $x145 ?x146 (_ bv0 32))))
 (let ((?x101 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x19 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x148 (ite $x19 ?x101 ?x147)))
 (let ((?x149 (bvmul (_ bv4294967295 32) ?x148)))
 (let ((?x150 (bvneg ?x149)))
 (let (($x85 (= ?x150 ?x64)))
 (let (($x97 (= $x85 true)))
 (let ((?x135 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x135)))
 (let (($x138 (= ?x136 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x138 true)))
 (let ((?x130 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x130)))
 (let (($x132 (= ?x131 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x132 true)))
 (let (($x127 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x124 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x125 (= $x124 true)))
 (let (($x121 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x121 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x118 (= $x117 true)))
 (let (($x114 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x114 true)))
 (let (($x42 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x42 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x31)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x76 $x92)))
 (let (($x95 (and $x5 $x80)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x86 $x95)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x77)))))))
 (let (($x96 (and $x100 $x98)))
 (let (($x78 (= $x96 true)))
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x24)))
 (let (($x110 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (= $x110 true)))
 (let (($x61 (= ?x65 input.dst.llvm-%n)))
 (let (($x9 (= $x61 true)))
 (let (($x16 (and $x9 $x87)))
 (let (($x79 (and $x16 $x78)))
 (let (($x113 (and $x79 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x119 (and $x116 $x118)))
 (let (($x123 (and $x119 $x122)))
 (let (($x126 (and $x123 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x140 (and $x134 $x139)))
 (let (($x66 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and (not $x66) $x140)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x36 $x142)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x144 (and $x73 $x143)))
 (let (($x53 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var892X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var892X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var891X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var891X)))
 (= $x93 false)))
 ))
 (let (($x14 (and $x54 $x53)))
 (let (($x111 (and $x14 $x144)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x51 (and $x46 $x111)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x29 (and $x109 $x51)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x49 (and $x57 $x29)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x48 (and $x10 $x49)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x12 (and $x88 $x48)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x44 (and $x28 $x12)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x62 (and $x34 $x44)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x27 (and $x69 $x62)))
 (let (($x81 (=> $x27 $x97)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x146 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x145 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x147 (ite $x145 ?x146 (_ bv0 32))))
 (let ((?x101 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x19 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x148 (ite $x19 ?x101 ?x147)))
 (let ((?x149 (bvmul (_ bv4294967295 32) ?x148)))
 (let ((?x150 (bvneg ?x149)))
 (let (($x85 (= ?x150 ?x64)))
 (let (($x97 (= $x85 true)))
 (let ((?x135 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x135)))
 (let (($x138 (= ?x136 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x138 true)))
 (let ((?x130 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x130)))
 (let (($x132 (= ?x131 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x132 true)))
 (let (($x127 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x124 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x125 (= $x124 true)))
 (let (($x121 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x121 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x118 (= $x117 true)))
 (let (($x114 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x114 true)))
 (let (($x42 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x42 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x31)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x76 $x92)))
 (let (($x95 (and $x5 $x80)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x86 $x95)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x77)))))))
 (let (($x96 (and $x100 $x98)))
 (let (($x78 (= $x96 true)))
 (let ((?x24 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x24)))
 (let (($x110 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (= $x110 true)))
 (let (($x61 (= ?x65 input.dst.llvm-%n)))
 (let (($x9 (= $x61 true)))
 (let (($x16 (and $x9 $x87)))
 (let (($x79 (and $x16 $x78)))
 (let (($x113 (and $x79 $x112)))
 (let (($x116 (and $x113 $x115)))
 (let (($x119 (and $x116 $x118)))
 (let (($x123 (and $x119 $x122)))
 (let (($x126 (and $x123 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x140 (and $x134 $x139)))
 (let (($x66 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (and (not $x66) $x140)))
 (let (($x36 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x36 $x142)))
 (let (($x73 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x144 (and $x73 $x143)))
 (let (($x53 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var892X)))
 (=> $x93 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var892X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var891X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var891X)))
 (= $x93 false)))
 ))
 (let (($x14 (and $x54 $x53)))
 (let (($x111 (and $x14 $x144)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x51 (and $x46 $x111)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x29 (and $x109 $x51)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x49 (and $x57 $x29)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x48 (and $x10 $x49)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x12 (and $x88 $x48)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x44 (and $x28 $x12)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x62 (and $x34 $x44)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x27 (and $x69 $x62)))
 (let (($x81 (=> $x27 $x97)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 120 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x13 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x58 (ite $x13 ?x83 (_ bv0 32))))
 (let ((?x11 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x81 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x105 (ite $x81 ?x11 ?x58)))
 (let ((?x21 (bvmul (_ bv4294967295 32) ?x105)))
 (let ((?x26 (bvneg ?x21)))
 (let (($x33 (= ?x26 ?x30)))
 (let (($x38 (= $x33 true)))
 (let ((?x51 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x51)))
 (let (($x48 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x48 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x140)))
 (let (($x143 (= ?x142 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x138 (= $x137 true)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x135 (= $x134 true)))
 (let (($x131 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x131 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x124 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x125 (= $x124 true)))
 (let (($x121 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (= $x121 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x113)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x78 $x42)))
 (let (($x115 (and $x112 $x114)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x91 $x115)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x92)))))))
 (let (($x117 (and $x96 $x116)))
 (let (($x118 (= $x117 true)))
 (let ((?x63 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x63)))
 (let (($x99 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x99 true)))
 (let (($x67 (= ?x71 input.dst.llvm-%n)))
 (let (($x90 (= $x67 true)))
 (let (($x77 (and $x90 $x40)))
 (let (($x119 (and $x77 $x118)))
 (let (($x123 (and $x119 $x122)))
 (let (($x126 (and $x123 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x133 (and $x129 $x132)))
 (let (($x136 (and $x133 $x135)))
 (let (($x139 (and $x136 $x138)))
 (let (($x111 (and $x139 $x144)))
 (let (($x44 (and $x111 $x12)))
 (let (($x87 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and (not $x87) $x44)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x9 $x27)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x101 (and $x65 $x19)))
 (let (($x141 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var982X)))
 (=> $x41 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var982X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var981X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var981X)))
 (= $x41 false)))
 ))
 (let (($x32 (and $x60 $x141)))
 (let (($x145 (and $x32 $x101)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x146 (and $x15 $x145)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x147 (and $x23 $x146)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x148 (and $x89 $x147)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x149 (and $x55 $x148)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x150 (and $x20 $x149)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x64 (and $x34 $x150)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x85 (and $x68 $x64)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x97 (and $x56 $x85)))
 (let (($x52 (=> $x97 $x38)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x30 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x13 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x58 (ite $x13 ?x83 (_ bv0 32))))
 (let ((?x11 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x81 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x105 (ite $x81 ?x11 ?x58)))
 (let ((?x21 (bvmul (_ bv4294967295 32) ?x105)))
 (let ((?x26 (bvneg ?x21)))
 (let (($x33 (= ?x26 ?x30)))
 (let (($x38 (= $x33 true)))
 (let ((?x51 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x51)))
 (let (($x48 (= ?x29 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x48 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x140)))
 (let (($x143 (= ?x142 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x143 true)))
 (let (($x137 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x138 (= $x137 true)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x135 (= $x134 true)))
 (let (($x131 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x131 true)))
 (let (($x127 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x128 (= $x127 true)))
 (let (($x124 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x125 (= $x124 true)))
 (let (($x121 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x122 (= $x121 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x113)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x78 $x42)))
 (let (($x115 (and $x112 $x114)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x91 $x115)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x92)))))))
 (let (($x117 (and $x96 $x116)))
 (let (($x118 (= $x117 true)))
 (let ((?x63 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x63)))
 (let (($x99 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x99 true)))
 (let (($x67 (= ?x71 input.dst.llvm-%n)))
 (let (($x90 (= $x67 true)))
 (let (($x77 (and $x90 $x40)))
 (let (($x119 (and $x77 $x118)))
 (let (($x123 (and $x119 $x122)))
 (let (($x126 (and $x123 $x125)))
 (let (($x129 (and $x126 $x128)))
 (let (($x133 (and $x129 $x132)))
 (let (($x136 (and $x133 $x135)))
 (let (($x139 (and $x136 $x138)))
 (let (($x111 (and $x139 $x144)))
 (let (($x44 (and $x111 $x12)))
 (let (($x87 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and (not $x87) $x44)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x9 $x27)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x101 (and $x65 $x19)))
 (let (($x141 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var982X)))
 (=> $x41 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var982X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var981X (_ BitVec 32)) )(let (($x41 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var981X)))
 (= $x41 false)))
 ))
 (let (($x32 (and $x60 $x141)))
 (let (($x145 (and $x32 $x101)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x146 (and $x15 $x145)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x147 (and $x23 $x146)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x148 (and $x89 $x147)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x149 (and $x55 $x148)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x150 (and $x20 $x149)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x64 (and $x34 $x150)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x85 (and $x68 $x64)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x97 (and $x56 $x85)))
 (let (($x52 (=> $x97 $x38)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 120 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x102 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x39 (ite $x102 ?x54 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x72 (ite $x52 ?x22 ?x39)))
 (let (($x46 (bvuge ?x72 (_ bv1 32))))
 (let (($x75 (= $x46 true)))
 (let ((?x146 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x146)))
 (let (($x149 (= ?x147 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x149 true)))
 (let ((?x44 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x44)))
 (let (($x19 (= ?x27 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x19 true)))
 (let (($x49 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x48 (= $x49 true)))
 (let (($x111 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x51 (= $x111 true)))
 (let (($x142 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x142 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x133)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x128 $x131)))
 (let (($x135 (and $x132 $x134)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x114 $x135)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x121)))))))
 (let (($x137 (and $x127 $x136)))
 (let (($x138 (= $x137 true)))
 (let ((?x94 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x94)))
 (let (($x78 (= ?x18 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x78 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x45 (= $x96 true)))
 (let (($x31 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x80 (= $x31 true)))
 (let (($x76 (= ?x18 input.dst.llvm-%n)))
 (let (($x92 (= $x76 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (= $x17 true)))
 (let (($x5 (and $x98 $x92)))
 (let (($x95 (and $x5 $x80)))
 (let (($x91 (and $x95 $x45)))
 (let (($x47 (and $x91 $x79)))
 (let (($x139 (and $x47 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x29 (and $x144 $x51)))
 (let (($x12 (and $x29 $x48)))
 (let (($x145 (and $x12 $x101)))
 (let (($x64 (and $x145 $x150)))
 (let (($x40 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x40) $x64)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x90 $x97)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x11 (and $x71 $x81)))
 (let (($x62 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1037X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1037X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1036X)))
 (= $x82 false)))
 ))
 (let (($x16 (and $x66 $x62)))
 (let (($x13 (and $x16 $x11)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x83 (and $x109 $x13)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x58 (and $x57 $x83)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x105 (and $x10 $x58)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x21 (and $x88 $x105)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x26 (and $x37 $x21)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x30 (and $x7 $x26)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x33 (and $x69 $x30)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x38 (and $x56 $x33)))
 (let (($x106 (=> $x38 $x75)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x102 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x39 (ite $x102 ?x54 (_ bv0 32))))
 (let ((?x22 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x52 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x72 (ite $x52 ?x22 ?x39)))
 (let (($x46 (bvuge ?x72 (_ bv1 32))))
 (let (($x75 (= $x46 true)))
 (let ((?x146 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x146)))
 (let (($x149 (= ?x147 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x149 true)))
 (let ((?x44 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x44)))
 (let (($x19 (= ?x27 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x19 true)))
 (let (($x49 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x48 (= $x49 true)))
 (let (($x111 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x51 (= $x111 true)))
 (let (($x142 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x142 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x133)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x128 $x131)))
 (let (($x135 (and $x132 $x134)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x114 $x135)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x121)))))))
 (let (($x137 (and $x127 $x136)))
 (let (($x138 (= $x137 true)))
 (let ((?x94 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x94)))
 (let (($x78 (= ?x18 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x78 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x45 (= $x96 true)))
 (let (($x31 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x80 (= $x31 true)))
 (let (($x76 (= ?x18 input.dst.llvm-%n)))
 (let (($x92 (= $x76 true)))
 (let (($x17 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (= $x17 true)))
 (let (($x5 (and $x98 $x92)))
 (let (($x95 (and $x5 $x80)))
 (let (($x91 (and $x95 $x45)))
 (let (($x47 (and $x91 $x79)))
 (let (($x139 (and $x47 $x138)))
 (let (($x144 (and $x139 $x143)))
 (let (($x29 (and $x144 $x51)))
 (let (($x12 (and $x29 $x48)))
 (let (($x145 (and $x12 $x101)))
 (let (($x64 (and $x145 $x150)))
 (let (($x40 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x40) $x64)))
 (let (($x90 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x90 $x97)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x11 (and $x71 $x81)))
 (let (($x62 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1037X)))
 (=> $x82 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1037X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1036X)))
 (= $x82 false)))
 ))
 (let (($x16 (and $x66 $x62)))
 (let (($x13 (and $x16 $x11)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x83 (and $x109 $x13)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x58 (and $x57 $x83)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x105 (and $x10 $x58)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x21 (and $x88 $x105)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x26 (and $x37 $x21)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x30 (and $x7 $x26)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x33 (and $x69 $x30)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x38 (and $x56 $x33)))
 (let (($x106 (=> $x38 $x75)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 117 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x24 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x93 (ite $x24 ?x15 (_ bv0 32))))
 (let ((?x50 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x60 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x73 (ite $x60 ?x50 ?x93)))
 (let (($x61 (bvsge ?x73 (_ bv1 32))))
 (let (($x32 (= $x61 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x83)))
 (let (($x21 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x21 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x64)))
 (let (($x81 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x81 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x145 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x27 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x27 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x144)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x138 $x142)))
 (let (($x51 (and $x143 $x111)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x125 $x51)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x130 $x131)))))))
 (let (($x49 (and $x137 $x29)))
 (let (($x48 (= $x49 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x96)))
 (let (($x120 (= ?x45 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (= $x120 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x117 (= $x126 true)))
 (let (($x47 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x47 true)))
 (let (($x91 (= ?x45 input.dst.llvm-%n)))
 (let (($x78 (= $x91 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x31 true)))
 (let (($x79 (and $x80 $x78)))
 (let (($x116 (and $x79 $x115)))
 (let (($x119 (and $x116 $x117)))
 (let (($x121 (and $x119 $x118)))
 (let (($x12 (and $x121 $x48)))
 (let (($x101 (and $x12 $x19)))
 (let (($x147 (and $x101 $x146)))
 (let (($x150 (and $x147 $x149)))
 (let (($x13 (and $x150 $x11)))
 (let (($x30 (and $x13 $x26)))
 (let (($x76 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (and (not $x76) $x30)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x94 $x38)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x22 (and $x17 $x52)))
 (let (($x85 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1092X)))
 (=> $x70 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1092X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1091X)))
 (= $x70 false)))
 ))
 (let (($x77 (and $x87 $x85)))
 (let (($x102 (and $x77 $x22)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x54 (and $x23 $x102)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x39 (and $x89 $x54)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x72 (and $x55 $x39)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x46 (and $x20 $x72)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x75 (and $x28 $x46)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x106 (and $x59 $x75)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x35 (and $x6 $x106)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x112 (and $x68 $x35)))
 (let (($x9 (=> $x112 $x32)))
 (not $x9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x24 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x93 (ite $x24 ?x15 (_ bv0 32))))
 (let ((?x50 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x60 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x73 (ite $x60 ?x50 ?x93)))
 (let (($x61 (bvsge ?x73 (_ bv1 32))))
 (let (($x32 (= $x61 true)))
 (let ((?x83 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x83)))
 (let (($x21 (= ?x58 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x26 (= $x21 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x64)))
 (let (($x81 (= ?x97 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x81 true)))
 (let (($x148 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x145 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x27 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x27 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x144)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x138 $x142)))
 (let (($x51 (and $x143 $x111)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x125 $x51)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x130 $x131)))))))
 (let (($x49 (and $x137 $x29)))
 (let (($x48 (= $x49 true)))
 (let ((?x96 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x96)))
 (let (($x120 (= ?x45 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (= $x120 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x117 (= $x126 true)))
 (let (($x47 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x115 (= $x47 true)))
 (let (($x91 (= ?x45 input.dst.llvm-%n)))
 (let (($x78 (= $x91 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x31 true)))
 (let (($x79 (and $x80 $x78)))
 (let (($x116 (and $x79 $x115)))
 (let (($x119 (and $x116 $x117)))
 (let (($x121 (and $x119 $x118)))
 (let (($x12 (and $x121 $x48)))
 (let (($x101 (and $x12 $x19)))
 (let (($x147 (and $x101 $x146)))
 (let (($x150 (and $x147 $x149)))
 (let (($x13 (and $x150 $x11)))
 (let (($x30 (and $x13 $x26)))
 (let (($x76 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (and (not $x76) $x30)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x94 $x38)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x22 (and $x17 $x52)))
 (let (($x85 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1092X)))
 (=> $x70 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1092X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1091X)))
 (= $x70 false)))
 ))
 (let (($x77 (and $x87 $x85)))
 (let (($x102 (and $x77 $x22)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x54 (and $x23 $x102)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x39 (and $x89 $x54)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x72 (and $x55 $x39)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x46 (and $x20 $x72)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x75 (and $x28 $x46)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x106 (and $x59 $x75)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x35 (and $x6 $x106)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x112 (and $x68 $x35)))
 (let (($x9 (=> $x112 $x32)))
 (not $x9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05480003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05480000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0139fde3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0139fde0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x32 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x53 (ite $x32 ?x9 (_ bv0 32))))
 (let ((?x61 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x73 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x123 (ite $x73 ?x61 ?x53)))
 (let (($x66 (bvsge ?x123 (_ bv0 32))))
 (let (($x104 (= $x66 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x26)))
 (let (($x52 (= ?x30 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x52 true)))
 (let ((?x13 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x13)))
 (let (($x58 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x58 true)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x81 (= $x97 true)))
 (let (($x149 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x150 (= $x149 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x44)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x51 $x48)))
 (let (($x19 (and $x12 $x27)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x132 $x19)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x138)))))))
 (let (($x145 (and $x111 $x101)))
 (let (($x146 (= $x145 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x126)))
 (let (($x136 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (= $x136 true)))
 (let (($x121 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x121 true)))
 (let (($x119 (= ?x117 input.dst.llvm-%n)))
 (let (($x120 (= $x119 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x47 true)))
 (let (($x118 (and $x115 $x120)))
 (let (($x113 (and $x118 $x127)))
 (let (($x129 (and $x113 $x114)))
 (let (($x147 (and $x129 $x146)))
 (let (($x64 (and $x147 $x150)))
 (let (($x11 (and $x64 $x81)))
 (let (($x21 (and $x11 $x105)))
 (let (($x102 (and $x21 $x22)))
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x91) $x102)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x96 $x39)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x46 (and $x31 $x72)))
 (let (($x33 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1375X)))
 (=> $x110 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1375X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1374X)))
 (= $x110 false)))
 ))
 (let (($x92 (and $x40 $x33)))
 (let (($x75 (and $x92 $x46)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x106 (and $x57 $x75)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x35 (and $x10 $x106)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x112 (and $x88 $x35)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x60 (and $x37 $x112)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x50 (and $x34 $x60)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x24 (and $x69 $x50)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x15 (and $x56 $x24)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x93 (and $x42 $x15)))
 (let (($x63 (=> $x93 $x104)))
 (not $x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x32 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x53 (ite $x32 ?x9 (_ bv0 32))))
 (let ((?x61 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x73 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x123 (ite $x73 ?x61 ?x53)))
 (let (($x66 (bvsge ?x123 (_ bv0 32))))
 (let (($x104 (= $x66 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x26)))
 (let (($x52 (= ?x30 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x52 true)))
 (let ((?x13 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x13)))
 (let (($x58 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x58 true)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x81 (= $x97 true)))
 (let (($x149 (bvsge input.spec-%var-r-0.L3%6%bbentry (_ bv0 32))))
 (let (($x150 (= $x149 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x44)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x51 $x48)))
 (let (($x19 (and $x12 $x27)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x132 $x19)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x138)))))))
 (let (($x145 (and $x111 $x101)))
 (let (($x146 (= $x145 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x126)))
 (let (($x136 (= ?x117 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x114 (= $x136 true)))
 (let (($x121 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x127 (= $x121 true)))
 (let (($x119 (= ?x117 input.dst.llvm-%n)))
 (let (($x120 (= $x119 true)))
 (let (($x47 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x47 true)))
 (let (($x118 (and $x115 $x120)))
 (let (($x113 (and $x118 $x127)))
 (let (($x129 (and $x113 $x114)))
 (let (($x147 (and $x129 $x146)))
 (let (($x64 (and $x147 $x150)))
 (let (($x11 (and $x64 $x81)))
 (let (($x21 (and $x11 $x105)))
 (let (($x102 (and $x21 $x22)))
 (let (($x91 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x91) $x102)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x96 $x39)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x46 (and $x31 $x72)))
 (let (($x33 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1375X)))
 (=> $x110 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1375X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1374X)))
 (= $x110 false)))
 ))
 (let (($x92 (and $x40 $x33)))
 (let (($x75 (and $x92 $x46)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x106 (and $x57 $x75)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x35 (and $x10 $x106)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x112 (and $x88 $x35)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x60 (and $x37 $x112)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x50 (and $x34 $x60)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x24 (and $x69 $x50)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x15 (and $x56 $x24)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x93 (and $x42 $x15)))
 (let (($x63 (=> $x93 $x104)))
 (not $x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00051e30)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00051e33)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00051e30)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (bvuge ?x63 (_ bv1 32))))
 (let (($x128 (= $x109 true)))
 (let ((?x46 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x46)))
 (let (($x106 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x106 true)))
 (let (($x102 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x39 (= $x102 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (= $x38 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x11)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x149 $x97)))
 (let (($x83 (and $x81 $x13)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x132 $x83)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x27)))))))
 (let (($x105 (and $x148 $x58)))
 (let (($x21 (= $x105 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x129)))
 (let (($x139 (= ?x133 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x139 true)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x137 (= $x125 true)))
 (let (($x144 (= ?x133 input.dst.llvm-%n)))
 (let (($x135 (= $x144 true)))
 (let ((?x121 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x121)))
 (let (($x136 (= ?x127 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x136 true)))
 (let (($x124 (and $x114 $x135)))
 (let (($x138 (and $x124 $x137)))
 (let (($x142 (and $x138 $x140)))
 (let (($x26 (and $x142 $x21)))
 (let (($x22 (and $x26 $x52)))
 (let (($x72 (and $x22 $x39)))
 (let (($x112 (and $x72 $x35)))
 (let (($x119 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and (not $x119) $x112)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (and $x126 $x50)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x15 (and $x47 $x24)))
 (let (($x54 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1668X)))
 (=> $x99 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1668X) (_ bv0 32)))))
 ))
 (let (($x76 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1667X)))
 (= $x99 false)))
 ))
 (let (($x78 (and $x76 $x54)))
 (let (($x93 (and $x78 $x15)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x89 $x93)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x61 (and $x55 $x73)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x32 (and $x20 $x61)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x9 (and $x28 $x32)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x53 (and $x7 $x9)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x6 $x53)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x66 (and $x68 $x123)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x104 (and $x122 $x66)))
 (let (($x87 (=> $x104 $x128)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (bvuge ?x63 (_ bv1 32))))
 (let (($x128 (= $x109 true)))
 (let ((?x46 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x46)))
 (let (($x106 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x35 (= $x106 true)))
 (let (($x102 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x39 (= $x102 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (= $x38 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x11)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x149 $x97)))
 (let (($x83 (and $x81 $x13)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x132 $x83)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x27)))))))
 (let (($x105 (and $x148 $x58)))
 (let (($x21 (= $x105 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x129)))
 (let (($x139 (= ?x133 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (= $x139 true)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry (_ bv1 32))))
 (let (($x137 (= $x125 true)))
 (let (($x144 (= ?x133 input.dst.llvm-%n)))
 (let (($x135 (= $x144 true)))
 (let ((?x121 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x121)))
 (let (($x136 (= ?x127 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x136 true)))
 (let (($x124 (and $x114 $x135)))
 (let (($x138 (and $x124 $x137)))
 (let (($x142 (and $x138 $x140)))
 (let (($x26 (and $x142 $x21)))
 (let (($x22 (and $x26 $x52)))
 (let (($x72 (and $x22 $x39)))
 (let (($x112 (and $x72 $x35)))
 (let (($x119 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and (not $x119) $x112)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (and $x126 $x50)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x15 (and $x47 $x24)))
 (let (($x54 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1668X)))
 (=> $x99 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1668X) (_ bv0 32)))))
 ))
 (let (($x76 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let (($x99 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1667X)))
 (= $x99 false)))
 ))
 (let (($x78 (and $x76 $x54)))
 (let (($x93 (and $x78 $x15)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x73 (and $x89 $x93)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x61 (and $x55 $x73)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x32 (and $x20 $x61)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x9 (and $x28 $x32)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x53 (and $x7 $x9)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x123 (and $x6 $x53)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x66 (and $x68 $x123)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x104 (and $x122 $x66)))
 (let (($x87 (=> $x104 $x128)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000014)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000017)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x80 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x57 (ite $x80 ?x5 (_ bv0 32))))
 (let ((?x40 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x111 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x70 (ite $x111 ?x40 ?x57)))
 (let ((?x17 (bvmul (_ bv4294967295 32) ?x70)))
 (let ((?x95 (bvneg ?x17)))
 (let (($x96 (= ?x95 ?x92)))
 (let (($x85 (= $x96 true)))
 (let ((?x112 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x112)))
 (let (($x15 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x15 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x39)))
 (let (($x46 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x46 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x52 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x13)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x150 $x81)))
 (let (($x58 (and $x11 $x83)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x147 $x58)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x101)))))))
 (let (($x21 (and $x149 $x105)))
 (let (($x26 (= $x21 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x144)))
 (let (($x138 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (= $x138 true)))
 (let (($x125 (= ?x135 input.dst.llvm-%n)))
 (let (($x137 (= $x125 true)))
 (let (($x140 (and $x137 $x139)))
 (let (($x30 (and $x140 $x26)))
 (let (($x102 (and $x30 $x22)))
 (let (($x106 (and $x102 $x75)))
 (let (($x73 (and $x106 $x93)))
 (let (($x133 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and (not $x133) $x73)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x114 $x32)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x53 (and $x127 $x9)))
 (let (($x120 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1916X)))
 (=> $x76 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1916X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1915X)))
 (= $x76 false)))
 ))
 (let (($x118 (and $x54 $x120)))
 (let (($x123 (and $x118 $x53)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x66 (and $x89 $x123)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x104 (and $x55 $x66)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x63 (and $x20 $x104)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x109 (and $x28 $x63)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x128 (and $x7 $x109)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x87 (and $x6 $x128)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x98 (and $x68 $x87)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x122 $x98)))
 (let (($x100 (=> $x143 $x85)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x80 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x57 (ite $x80 ?x5 (_ bv0 32))))
 (let ((?x40 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x111 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x70 (ite $x111 ?x40 ?x57)))
 (let ((?x17 (bvmul (_ bv4294967295 32) ?x70)))
 (let ((?x95 (bvneg ?x17)))
 (let (($x96 (= ?x95 ?x92)))
 (let (($x85 (= $x96 true)))
 (let ((?x112 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x112)))
 (let (($x15 (= ?x50 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x15 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x39)))
 (let (($x46 (= ?x72 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x46 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x52 true)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x13)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x150 $x81)))
 (let (($x58 (and $x11 $x83)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x147 $x58)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x101)))))))
 (let (($x21 (and $x149 $x105)))
 (let (($x26 (= $x21 true)))
 (let ((?x144 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x144)))
 (let (($x138 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (= $x138 true)))
 (let (($x125 (= ?x135 input.dst.llvm-%n)))
 (let (($x137 (= $x125 true)))
 (let (($x140 (and $x137 $x139)))
 (let (($x30 (and $x140 $x26)))
 (let (($x102 (and $x30 $x22)))
 (let (($x106 (and $x102 $x75)))
 (let (($x73 (and $x106 $x93)))
 (let (($x133 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and (not $x133) $x73)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x114 $x32)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x53 (and $x127 $x9)))
 (let (($x120 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1916X)))
 (=> $x76 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1916X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1915X)))
 (= $x76 false)))
 ))
 (let (($x118 (and $x54 $x120)))
 (let (($x123 (and $x118 $x53)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x66 (and $x89 $x123)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x104 (and $x55 $x66)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x63 (and $x20 $x104)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x109 (and $x28 $x63)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x128 (and $x7 $x109)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x87 (and $x6 $x128)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x98 (and $x68 $x87)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x122 $x98)))
 (let (($x100 (=> $x143 $x85)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x31 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x116 (ite $x51 ?x31 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x23 ?x142 ?x116)))
 (let ((?x110 (bvmul (_ bv4294967295 32) ?x47)))
 (let ((?x99 (bvneg ?x110)))
 (let (($x126 (= ?x99 ?x45)))
 (let (($x79 (= $x126 true)))
 (let ((?x104 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x104)))
 (let (($x128 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x128 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x73)))
 (let (($x9 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x9 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (= $x24 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x39)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x30 $x22)))
 (let (($x46 (and $x102 $x72)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x149 $x46)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x11)))))))
 (let (($x106 (and $x26 $x75)))
 (let (($x35 (= $x106 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x12)))
 (let (($x48 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x48 true)))
 (let (($x27 (= ?x132 input.dst.llvm-%n)))
 (let (($x19 (= $x27 true)))
 (let (($x145 (and $x19 $x101)))
 (let (($x112 (and $x145 $x35)))
 (let (($x93 (and $x112 $x15)))
 (let (($x123 (and $x93 $x53)))
 (let (($x98 (and $x123 $x87)))
 (let (($x140 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and (not $x140) $x98)))
 (let (($x138 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x138 $x111)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x80 (and $x124 $x40)))
 (let (($x134 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1971X)))
 (=> $x54 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1970X)))
 (= $x54 false)))
 ))
 (let (($x144 (and $x120 $x134)))
 (let (($x5 (and $x144 $x80)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x57 (and $x89 $x5)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x70 (and $x55 $x57)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x17 (and $x20 $x70)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x95 (and $x28 $x17)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x92 (and $x7 $x95)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x96 (and $x6 $x92)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x85 (and $x68 $x96)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x100 (and $x122 $x85)))
 (let (($x117 (=> $x100 $x79)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x31 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x116 (ite $x51 ?x31 (_ bv0 32))))
 (let ((?x142 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x23 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x47 (ite $x23 ?x142 ?x116)))
 (let ((?x110 (bvmul (_ bv4294967295 32) ?x47)))
 (let ((?x99 (bvneg ?x110)))
 (let (($x126 (= ?x99 ?x45)))
 (let (($x79 (= $x126 true)))
 (let ((?x104 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x104)))
 (let (($x128 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x128 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x73)))
 (let (($x9 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x9 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (= $x24 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x39)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x30 $x22)))
 (let (($x46 (and $x102 $x72)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x149 $x46)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x11)))))))
 (let (($x106 (and $x26 $x75)))
 (let (($x35 (= $x106 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x12)))
 (let (($x48 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x48 true)))
 (let (($x27 (= ?x132 input.dst.llvm-%n)))
 (let (($x19 (= $x27 true)))
 (let (($x145 (and $x19 $x101)))
 (let (($x112 (and $x145 $x35)))
 (let (($x93 (and $x112 $x15)))
 (let (($x123 (and $x93 $x53)))
 (let (($x98 (and $x123 $x87)))
 (let (($x140 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and (not $x140) $x98)))
 (let (($x138 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x138 $x111)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x80 (and $x124 $x40)))
 (let (($x134 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1971X)))
 (=> $x54 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var1970X)))
 (= $x54 false)))
 ))
 (let (($x144 (and $x120 $x134)))
 (let (($x5 (and $x144 $x80)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x57 (and $x89 $x5)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x70 (and $x55 $x57)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x17 (and $x20 $x70)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x95 (and $x28 $x17)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x92 (and $x7 $x95)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x96 (and $x6 $x92)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x85 (and $x68 $x96)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x100 (and $x122 $x85)))
 (let (($x117 (=> $x100 $x79)))
 (not $x117)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 105 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (not $x45)))
 (let (($x110 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (not $x110)))
 (let (($x79 (or $x99 $x126)))
 (let (($x117 (= $x79 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x40)))
 (let (($x57 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x57 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x53)))
 (let (($x128 (= ?x123 input.dst.llvm-%n)))
 (let (($x87 (= $x128 true)))
 (let (($x66 (= ?x123 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x104 (= $x66 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x50)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x46 $x35)))
 (let (($x15 (and $x112 $x24)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x13 $x15)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x30)))))))
 (let (($x73 (and $x72 $x93)))
 (let (($x32 (= $x73 true)))
 (let ((?x29 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x29)))
 (let (($x150 (= ?x147 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x150 true)))
 (let (($x9 (and $x97 $x32)))
 (let (($x63 (and $x9 $x104)))
 (let (($x98 (and $x63 $x87)))
 (let (($x17 (and $x98 $x70)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x48 $x17)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x92 (and $x44 $x95)))
 (let (($x49 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2026X)))
 (=> $x120 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2026X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var2025X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2025X)))
 (= $x120 false)))
 ))
 (let (($x12 (and $x134 $x49)))
 (let (($x96 (and $x12 $x92)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x85 (and $x89 $x96)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x100 (and $x55 $x85)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x23 (and $x20 $x100)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x142 (and $x28 $x23)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x51 (and $x7 $x142)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x31 (and $x6 $x51)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x116 (and $x68 $x31)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x47 (and $x122 $x116)))
 (let (($x33 (=> $x47 $x117)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (not $x45)))
 (let (($x110 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (not $x110)))
 (let (($x79 (or $x99 $x126)))
 (let (($x117 (= $x79 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x40)))
 (let (($x57 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x57 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x53)))
 (let (($x128 (= ?x123 input.dst.llvm-%n)))
 (let (($x87 (= $x128 true)))
 (let (($x66 (= ?x123 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x104 (= $x66 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x50)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x46 $x35)))
 (let (($x15 (and $x112 $x24)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x13 $x15)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x149 $x30)))))))
 (let (($x73 (and $x72 $x93)))
 (let (($x32 (= $x73 true)))
 (let ((?x29 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x29)))
 (let (($x150 (= ?x147 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x150 true)))
 (let (($x9 (and $x97 $x32)))
 (let (($x63 (and $x9 $x104)))
 (let (($x98 (and $x63 $x87)))
 (let (($x17 (and $x98 $x70)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x95 (and $x48 $x17)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x92 (and $x44 $x95)))
 (let (($x49 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2026X)))
 (=> $x120 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2026X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var2025X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2025X)))
 (= $x120 false)))
 ))
 (let (($x12 (and $x134 $x49)))
 (let (($x96 (and $x12 $x92)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x85 (and $x89 $x96)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x100 (and $x55 $x85)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x23 (and $x20 $x100)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x142 (and $x28 $x23)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x51 (and $x7 $x142)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x31 (and $x6 $x51)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x116 (and $x68 $x31)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x47 (and $x122 $x116)))
 (let (($x33 (=> $x47 $x117)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 95 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x115 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x136 (ite $x148 ?x115 (_ bv0 32))))
 (let ((?x118 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x139 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x127 (ite $x139 ?x118 ?x136)))
 (let ((?x18 (bvmul (_ bv4294967295 32) ?x127)))
 (let ((?x76 (bvneg ?x18)))
 (let (($x114 (= ?x76 ?x119)))
 (let (($x121 (= $x114 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x47)))
 (let (($x45 (= ?x110 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x45 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x100)))
 (let (($x142 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x142 true)))
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x92 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x111)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x63 $x87)))
 (let (($x80 (and $x98 $x40)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x106 $x80)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x73)))))))
 (let (($x57 (and $x104 $x5)))
 (let (($x70 (= $x57 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x26)))
 (let (($x102 (= ?x30 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (= $x102 true)))
 (let (($x52 (= ?x30 input.dst.llvm-%n)))
 (let (($x22 (= $x52 true)))
 (let (($x11 (and $x22 $x72)))
 (let (($x17 (and $x11 $x70)))
 (let (($x85 (and $x17 $x96)))
 (let (($x31 (and $x85 $x51)))
 (let (($x79 (and $x31 $x126)))
 (let (($x131 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and (not $x131) $x79)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x39 $x33)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x81 (and $x97 $x146)))
 (let (($x147 (forall ((input.ind-%var2036X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2036X)))
 (=> $x134 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2036X) (_ bv0 32)))))
 ))
 (let (($x49 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2035X)))
 (= $x134 false)))
 ))
 (let (($x21 (and $x49 $x147)))
 (let (($x64 (and $x21 $x81)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x89 $x64)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x137 (and $x55 $x113)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x124 (and $x20 $x137)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x91 (and $x28 $x124)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x54 (and $x7 $x91)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x133 (and $x6 $x54)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x138 (and $x68 $x133)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x135 (and $x122 $x138)))
 (let (($x129 (=> $x135 $x121)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x115 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x148 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x136 (ite $x148 ?x115 (_ bv0 32))))
 (let ((?x118 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x139 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x127 (ite $x139 ?x118 ?x136)))
 (let ((?x18 (bvmul (_ bv4294967295 32) ?x127)))
 (let ((?x76 (bvneg ?x18)))
 (let (($x114 (= ?x76 ?x119)))
 (let (($x121 (= $x114 true)))
 (let ((?x47 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x47)))
 (let (($x45 (= ?x110 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x45 true)))
 (let ((?x100 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x100)))
 (let (($x142 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x142 true)))
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (= $x92 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x111)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x63 $x87)))
 (let (($x80 (and $x98 $x40)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x106 $x80)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x73)))))))
 (let (($x57 (and $x104 $x5)))
 (let (($x70 (= $x57 true)))
 (let ((?x26 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x26)))
 (let (($x102 (= ?x30 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (= $x102 true)))
 (let (($x52 (= ?x30 input.dst.llvm-%n)))
 (let (($x22 (= $x52 true)))
 (let (($x11 (and $x22 $x72)))
 (let (($x17 (and $x11 $x70)))
 (let (($x85 (and $x17 $x96)))
 (let (($x31 (and $x85 $x51)))
 (let (($x79 (and $x31 $x126)))
 (let (($x131 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and (not $x131) $x79)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x39 $x33)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x81 (and $x97 $x146)))
 (let (($x147 (forall ((input.ind-%var2036X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2036X)))
 (=> $x134 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2036X) (_ bv0 32)))))
 ))
 (let (($x49 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2035X)))
 (= $x134 false)))
 ))
 (let (($x21 (and $x49 $x147)))
 (let (($x64 (and $x21 $x81)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x113 (and $x89 $x64)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x137 (and $x55 $x113)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x124 (and $x20 $x137)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x91 (and $x28 $x124)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x54 (and $x7 $x91)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x133 (and $x6 $x54)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x138 (and $x68 $x133)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x135 (and $x122 $x138)))
 (let (($x129 (=> $x135 $x121)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x46 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x19 (ite $x46 ?x125 (_ bv0 32))))
 (let ((?x13 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x78 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x44 (ite $x78 ?x13 ?x19)))
 (let ((?x60 (bvmul (_ bv4294967295 32) ?x44)))
 (let ((?x120 (bvneg ?x60)))
 (let (($x48 (= ?x120 ?x140)))
 (let (($x132 (= $x48 true)))
 (let ((?x137 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x137)))
 (let (($x54 (= ?x124 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x54 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x79)))
 (let (($x146 (= ?x33 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x146 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (= $x99 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x100)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x17 $x96)))
 (let (($x142 (and $x85 $x23)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x104 $x142)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x98)))))))
 (let (($x31 (and $x70 $x51)))
 (let (($x116 (= $x31 true)))
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x112)))
 (let (($x24 (= ?x66 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (= $x24 true)))
 (let (($x15 (= ?x66 input.dst.llvm-%n)))
 (let (($x93 (= $x15 true)))
 (let (($x32 (and $x93 $x73)))
 (let (($x47 (and $x32 $x116)))
 (let (($x126 (and $x47 $x45)))
 (let (($x64 (and $x126 $x81)))
 (let (($x138 (and $x64 $x133)))
 (let (($x11 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (and (not $x11) $x138)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x102 $x139)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x148 (and $x38 $x118)))
 (let (($x149 (forall ((input.ind-%var2091X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2091X)))
 (=> $x49 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2091X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var2090X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2090X)))
 (= $x49 false)))
 ))
 (let (($x26 (and $x147 $x149)))
 (let (($x115 (and $x26 $x148)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x89 $x115)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x127 (and $x55 $x136)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x18 (and $x20 $x127)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x76 (and $x28 $x18)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x119 (and $x7 $x76)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x114 (and $x6 $x119)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x68 $x114)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x129 (and $x122 $x121)))
 (let (($x101 (=> $x129 $x132)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x46 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x19 (ite $x46 ?x125 (_ bv0 32))))
 (let ((?x13 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x78 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x44 (ite $x78 ?x13 ?x19)))
 (let ((?x60 (bvmul (_ bv4294967295 32) ?x44)))
 (let ((?x120 (bvneg ?x60)))
 (let (($x48 (= ?x120 ?x140)))
 (let (($x132 (= $x48 true)))
 (let ((?x137 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x137)))
 (let (($x54 (= ?x124 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x54 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x79)))
 (let (($x146 (= ?x33 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x146 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (= $x99 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x100)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x17 $x96)))
 (let (($x142 (and $x85 $x23)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x104 $x142)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x98)))))))
 (let (($x31 (and $x70 $x51)))
 (let (($x116 (= $x31 true)))
 (let ((?x112 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x112)))
 (let (($x24 (= ?x66 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x73 (= $x24 true)))
 (let (($x15 (= ?x66 input.dst.llvm-%n)))
 (let (($x93 (= $x15 true)))
 (let (($x32 (and $x93 $x73)))
 (let (($x47 (and $x32 $x116)))
 (let (($x126 (and $x47 $x45)))
 (let (($x64 (and $x126 $x81)))
 (let (($x138 (and $x64 $x133)))
 (let (($x11 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (and (not $x11) $x138)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (and $x102 $x139)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x148 (and $x38 $x118)))
 (let (($x149 (forall ((input.ind-%var2091X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2091X)))
 (=> $x49 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2091X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var2090X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2090X)))
 (= $x49 false)))
 ))
 (let (($x26 (and $x147 $x149)))
 (let (($x115 (and $x26 $x148)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x136 (and $x89 $x115)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x127 (and $x55 $x136)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x18 (and $x20 $x127)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x76 (and $x28 $x18)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x119 (and $x7 $x76)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x114 (and $x6 $x119)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x121 (and $x68 $x114)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x129 (and $x122 $x121)))
 (let (($x101 (=> $x129 $x132)))
 (not $x101)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 105 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (not $x60)))
 (let (($x140 (= $x120 false)))
 (let (($x48 (= $x140 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x118)))
 (let (($x136 (= ?x148 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x136 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x87)))
 (let (($x54 (= ?x109 input.dst.llvm-%n)))
 (let (($x133 (= $x54 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x33)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x110 $x126)))
 (let (($x81 (and $x79 $x146)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x123 $x81)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x100)))))))
 (let (($x113 (and $x47 $x64)))
 (let (($x137 (= $x113 true)))
 (let (($x98 (= ?x109 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (= $x98 true)))
 (let ((?x75 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x75)))
 (let (($x63 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x63 true)))
 (let (($x40 (and $x128 $x111)))
 (let (($x124 (and $x40 $x137)))
 (let (($x138 (and $x124 $x133)))
 (let (($x18 (and $x138 $x127)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (and $x24 $x18)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x119 (and $x50 $x76)))
 (let (($x35 (forall ((input.ind-%var2146X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2146X)))
 (=> $x147 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2146X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var2145X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2145X)))
 (= $x147 false)))
 ))
 (let (($x112 (and $x149 $x35)))
 (let (($x114 (and $x112 $x119)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x89 $x114)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x129 (and $x55 $x121)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x78 (and $x20 $x129)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x13 (and $x28 $x78)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x46 (and $x7 $x13)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x6 $x46)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x19 (and $x68 $x125)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x44 (and $x122 $x19)))
 (let (($x132 (=> $x44 $x48)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (not $x60)))
 (let (($x140 (= $x120 false)))
 (let (($x48 (= $x140 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x118)))
 (let (($x136 (= ?x148 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x136 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x87)))
 (let (($x54 (= ?x109 input.dst.llvm-%n)))
 (let (($x133 (= $x54 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x33)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x110 $x126)))
 (let (($x81 (and $x79 $x146)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x123 $x81)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x100)))))))
 (let (($x113 (and $x47 $x64)))
 (let (($x137 (= $x113 true)))
 (let (($x98 (= ?x109 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (= $x98 true)))
 (let ((?x75 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x75)))
 (let (($x63 (= ?x106 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x63 true)))
 (let (($x40 (and $x128 $x111)))
 (let (($x124 (and $x40 $x137)))
 (let (($x138 (and $x124 $x133)))
 (let (($x18 (and $x138 $x127)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (and $x24 $x18)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x119 (and $x50 $x76)))
 (let (($x35 (forall ((input.ind-%var2146X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2146X)))
 (=> $x147 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2146X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var2145X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2145X)))
 (= $x147 false)))
 ))
 (let (($x112 (and $x149 $x35)))
 (let (($x114 (and $x112 $x119)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x121 (and $x89 $x114)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x129 (and $x55 $x121)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x78 (and $x20 $x129)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x13 (and $x28 $x78)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x46 (and $x7 $x13)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x125 (and $x6 $x46)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x19 (and $x68 $x125)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x44 (and $x122 $x19)))
 (let (($x132 (=> $x44 $x48)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00064003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00064000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (or $x49 $x131)))
 (let (($x30 (= $x102 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x78)))
 (let (($x125 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x125 true)))
 (let ((?x148 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x148)))
 (let (($x119 (= ?x115 input.dst.llvm-%n)))
 (let (($x114 (= $x119 true)))
 (let (($x136 (= ?x115 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x136 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x124)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x146 $x113)))
 (let (($x54 (and $x137 $x91)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x100 $x54)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x123)))))))
 (let (($x138 (and $x33 $x133)))
 (let (($x139 (= $x138 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x40)))
 (let (($x116 (= ?x104 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x116 true)))
 (let (($x118 (and $x95 $x139)))
 (let (($x18 (and $x118 $x127)))
 (let (($x121 (and $x18 $x114)))
 (let (($x44 (and $x121 $x19)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x109 $x44)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x120 (and $x63 $x60)))
 (let (($x75 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2164X)))
 (=> $x117 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2164X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var2163X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2163X)))
 (= $x117 false)))
 ))
 (let (($x106 (and $x135 $x75)))
 (let (($x140 (and $x106 $x120)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x48 (and $x10 $x140)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x132 (and $x88 $x48)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x101 (and $x37 $x132)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x5 (and $x34 $x101)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x83 (and $x59 $x5)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x22 (and $x56 $x83)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x38 (and $x42 $x22)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x25 $x38)))
 (let (($x72 (=> $x143 $x30)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x102 (or $x49 $x131)))
 (let (($x30 (= $x102 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x78)))
 (let (($x125 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x125 true)))
 (let ((?x148 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x148)))
 (let (($x119 (= ?x115 input.dst.llvm-%n)))
 (let (($x114 (= $x119 true)))
 (let (($x136 (= ?x115 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (= $x136 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x124)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x146 $x113)))
 (let (($x54 (and $x137 $x91)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x100 $x54)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x123)))))))
 (let (($x138 (and $x33 $x133)))
 (let (($x139 (= $x138 true)))
 (let ((?x40 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x40)))
 (let (($x116 (= ?x104 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x116 true)))
 (let (($x118 (and $x95 $x139)))
 (let (($x18 (and $x118 $x127)))
 (let (($x121 (and $x18 $x114)))
 (let (($x44 (and $x121 $x19)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x109 $x44)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x120 (and $x63 $x60)))
 (let (($x75 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2164X)))
 (=> $x117 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2164X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var2163X (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2163X)))
 (= $x117 false)))
 ))
 (let (($x106 (and $x135 $x75)))
 (let (($x140 (and $x106 $x120)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x48 (and $x10 $x140)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x132 (and $x88 $x48)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x101 (and $x37 $x132)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x5 (and $x34 $x101)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x83 (and $x59 $x5)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x22 (and $x56 $x83)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x38 (and $x42 $x22)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x143 (and $x25 $x38)))
 (let (($x72 (=> $x143 $x30)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 93 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x144 true)))
 (let ((?x49 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x49)))
 (let (($x30 (= ?x131 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x30 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x48)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x19 $x120)))
 (let (($x101 (and $x140 $x132)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x148 $x101)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x114)))))))
 (let (($x83 (and $x125 $x5)))
 (let (($x22 (= $x83 true)))
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x81)))
 (let (($x91 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x91 true)))
 (let (($x113 (= ?x64 input.dst.llvm-%n)))
 (let (($x137 (= $x113 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x126)))
 (let (($x92 (= ?x33 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x92 true)))
 (let (($x123 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (not $x123)))
 (let (($x99 (= $x110 true)))
 (let (($x146 (and $x99 $x100)))
 (let (($x124 (and $x146 $x137)))
 (let (($x133 (and $x124 $x54)))
 (let (($x38 (and $x133 $x22)))
 (let (($x21 (and $x38 $x72)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x47 $x21)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x79 $x96)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x149 (and $x95 $x85)))
 (let (($x104 (forall ((input.ind-%var2174X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2174X)))
 (=> $x11 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2174X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var2173X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2173X)))
 (= $x11 false)))
 ))
 (let (($x17 (and $x32 $x104)))
 (let (($x15 (and $x17 $x149)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x66 (and $x55 $x15)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x89 (and $x20 $x66)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x29 (and $x28 $x89)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x52 (and $x7 $x29)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x93 (and $x69 $x52)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x112 (and $x68 $x93)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x24 (and $x130 $x112)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x26 (and $x122 $x24)))
 (let (($x53 (=> $x26 $x9)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x144 true)))
 (let ((?x49 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x49)))
 (let (($x30 (= ?x131 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x30 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x48)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x19 $x120)))
 (let (($x101 (and $x140 $x132)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x148 $x101)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x114)))))))
 (let (($x83 (and $x125 $x5)))
 (let (($x22 (= $x83 true)))
 (let ((?x81 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x81)))
 (let (($x91 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x91 true)))
 (let (($x113 (= ?x64 input.dst.llvm-%n)))
 (let (($x137 (= $x113 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x126)))
 (let (($x92 (= ?x33 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x92 true)))
 (let (($x123 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (not $x123)))
 (let (($x99 (= $x110 true)))
 (let (($x146 (and $x99 $x100)))
 (let (($x124 (and $x146 $x137)))
 (let (($x133 (and $x124 $x54)))
 (let (($x38 (and $x133 $x22)))
 (let (($x21 (and $x38 $x72)))
 (let (($x47 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x47 $x21)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x79 $x96)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x149 (and $x95 $x85)))
 (let (($x104 (forall ((input.ind-%var2174X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2174X)))
 (=> $x11 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2174X) (_ bv0 32)))))
 ))
 (let (($x32 (forall ((input.ind-%var2173X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2173X)))
 (= $x11 false)))
 ))
 (let (($x17 (and $x32 $x104)))
 (let (($x15 (and $x17 $x149)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x66 (and $x55 $x15)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x89 (and $x20 $x66)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x29 (and $x28 $x89)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x52 (and $x7 $x29)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x93 (and $x69 $x52)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x112 (and $x68 $x93)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x24 (and $x130 $x112)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x26 (and $x122 $x24)))
 (let (($x53 (=> $x26 $x9)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (not $x135)))
 (let (($x57 (or $x135 $x128)))
 (let (($x10 (= $x57 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x96)))
 (let (($x15 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x15 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x137)))
 (let (($x102 (= ?x124 input.dst.llvm-%n)))
 (let (($x30 (= $x102 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x101)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x60 $x48)))
 (let (($x83 (and $x132 $x5)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x127 $x83)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x78)))))))
 (let (($x38 (and $x44 $x22)))
 (let (($x143 (= $x38 true)))
 (let (($x91 (= ?x124 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x91 true)))
 (let ((?x100 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x100)))
 (let (($x64 (= ?x146 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x64 true)))
 (let (($x133 (and $x113 $x54)))
 (let (($x49 (and $x133 $x143)))
 (let (($x72 (and $x49 $x30)))
 (let (($x89 (and $x72 $x66)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x126 $x89)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x52 (and $x110 $x29)))
 (let (($x70 (forall ((input.ind-%var2184X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2184X)))
 (=> $x73 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2184X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var2183X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2183X)))
 (= $x73 false)))
 ))
 (let (($x31 (and $x40 $x70)))
 (let (($x93 (and $x31 $x52)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x112 (and $x88 $x93)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x24 (and $x37 $x112)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x26 (and $x34 $x24)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x144 (and $x59 $x26)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x9 (and $x6 $x144)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x53 (and $x42 $x9)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x27 (and $x80 $x53)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x139 (and $x98 $x27)))
 (let (($x147 (=> $x139 $x10)))
 (not $x147)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x135 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (not $x135)))
 (let (($x57 (or $x135 $x128)))
 (let (($x10 (= $x57 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x96)))
 (let (($x15 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x15 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x137)))
 (let (($x102 (= ?x124 input.dst.llvm-%n)))
 (let (($x30 (= $x102 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x101)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x60 $x48)))
 (let (($x83 (and $x132 $x5)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x127 $x83)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x78)))))))
 (let (($x38 (and $x44 $x22)))
 (let (($x143 (= $x38 true)))
 (let (($x91 (= ?x124 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x91 true)))
 (let ((?x100 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x100)))
 (let (($x64 (= ?x146 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x64 true)))
 (let (($x133 (and $x113 $x54)))
 (let (($x49 (and $x133 $x143)))
 (let (($x72 (and $x49 $x30)))
 (let (($x89 (and $x72 $x66)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x126 $x89)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x52 (and $x110 $x29)))
 (let (($x70 (forall ((input.ind-%var2184X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2184X)))
 (=> $x73 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2184X) (_ bv0 32)))))
 ))
 (let (($x40 (forall ((input.ind-%var2183X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2183X)))
 (= $x73 false)))
 ))
 (let (($x31 (and $x40 $x70)))
 (let (($x93 (and $x31 $x52)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x112 (and $x88 $x93)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x24 (and $x37 $x112)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x26 (and $x34 $x24)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x144 (and $x59 $x26)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x9 (and $x6 $x144)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x53 (and $x42 $x9)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x27 (and $x80 $x53)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x139 (and $x98 $x27)))
 (let (($x147 (=> $x139 $x10)))
 (not $x147)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x83)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x140 $x101)))
 (let (($x38 (and $x5 $x22)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x120 $x38)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x13)))))))
 (let (($x23 (and $x127 $x143)))
 (let (($x116 (= $x23 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x89 (concat ?x149 (concat ?x72 ?x102)))))
 (let (($x144 (= ?x29 input.dst.llvm-%n)))
 (let (($x9 (= $x144 true)))
 (let (($x52 (= input.dst.llvm-%n ?x29)))
 (let (($x24 (and (and (and $x127 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x143) $x52)))
 (let (($x26 (= $x24 true)))
 (let (($x53 (and $x26 $x9)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and $x91 $x53)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x139 (and $x113 $x27)))
 (let (($x146 (forall ((input.ind-%var2194X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2194X)))
 (=> $x40 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2194X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var2193X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2193X)))
 (= $x40 false)))
 ))
 (let (($x81 (and $x70 $x146)))
 (let (($x135 (and $x81 $x139)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x128 (and $x88 $x135)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x57 (and $x37 $x128)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x34 $x57)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x147 (and $x59 $x10)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x50 (and $x6 $x147)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x115 (and $x42 $x50)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x136 (and $x80 $x115)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x32 (and $x98 $x136)))
 (let (($x55 (=> $x32 $x116)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x83)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x140 $x101)))
 (let (($x38 (and $x5 $x22)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x120 $x38)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x13)))))))
 (let (($x23 (and $x127 $x143)))
 (let (($x116 (= $x23 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x89 (concat ?x149 (concat ?x72 ?x102)))))
 (let (($x144 (= ?x29 input.dst.llvm-%n)))
 (let (($x9 (= $x144 true)))
 (let (($x52 (= input.dst.llvm-%n ?x29)))
 (let (($x24 (and (and (and $x127 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x143) $x52)))
 (let (($x26 (= $x24 true)))
 (let (($x53 (and $x26 $x9)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and $x91 $x53)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x139 (and $x113 $x27)))
 (let (($x146 (forall ((input.ind-%var2194X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2194X)))
 (=> $x40 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2194X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var2193X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2193X)))
 (= $x40 false)))
 ))
 (let (($x81 (and $x70 $x146)))
 (let (($x135 (and $x81 $x139)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x128 (and $x88 $x135)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x57 (and $x37 $x128)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x10 (and $x34 $x57)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x147 (and $x59 $x10)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x50 (and $x6 $x147)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x115 (and $x42 $x50)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x136 (and $x80 $x115)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x32 (and $x98 $x136)))
 (let (($x55 (=> $x32 $x116)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x123)))
 (let (($x104 (= ?x33 input.dst.llvm-%n)))
 (let (($x63 (= $x104 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x128 (concat ?x27 (concat ?x26 ?x52)))))
 (let (($x32 (= ?x57 input.dst.llvm-%n)))
 (let (($x23 (= $x32 true)))
 (let (($x10 (= input.dst.llvm-%n ?x57)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x30)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x66 $x85)))
 (let (($x102 (and $x149 $x72)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x49 $x102)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x132)))))))
 (let (($x115 (and (and (and $x143 $x76) $x21) $x10)))
 (let (($x136 (= $x115 true)))
 (let (($x116 (and $x136 $x23)))
 (let (($x118 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x118 $x116)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x129 $x55)))
 (let (($x121 (forall ((input.ind-%var2204X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2204X)))
 (=> $x70 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2204X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var2203X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2203X)))
 (= $x70 false)))
 ))
 (let (($x114 (and $x146 $x121)))
 (let (($x54 (and $x114 $x117)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x133 (and $x88 $x54)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x131 (and $x37 $x133)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x95 (and $x34 $x131)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x45 (and $x59 $x95)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x110 (and $x6 $x45)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x11 (and $x42 $x110)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x73 (and $x80 $x11)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x51 (and $x98 $x73)))
 (let (($x142 (=> $x51 $x63)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x123)))
 (let (($x104 (= ?x33 input.dst.llvm-%n)))
 (let (($x63 (= $x104 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x128 (concat ?x27 (concat ?x26 ?x52)))))
 (let (($x32 (= ?x57 input.dst.llvm-%n)))
 (let (($x23 (= $x32 true)))
 (let (($x10 (= input.dst.llvm-%n ?x57)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x30)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x66 $x85)))
 (let (($x102 (and $x149 $x72)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x49 $x102)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x132)))))))
 (let (($x115 (and (and (and $x143 $x76) $x21) $x10)))
 (let (($x136 (= $x115 true)))
 (let (($x116 (and $x136 $x23)))
 (let (($x118 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x118 $x116)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x117 (and $x129 $x55)))
 (let (($x121 (forall ((input.ind-%var2204X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2204X)))
 (=> $x70 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2204X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var2203X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2203X)))
 (= $x70 false)))
 ))
 (let (($x114 (and $x146 $x121)))
 (let (($x54 (and $x114 $x117)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x133 (and $x88 $x54)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x131 (and $x37 $x133)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x95 (and $x34 $x131)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x45 (and $x59 $x95)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x110 (and $x6 $x45)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x11 (and $x42 $x110)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x73 (and $x80 $x11)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x51 (and $x98 $x73)))
 (let (($x142 (=> $x51 $x63)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x40)))
 (let (($x91 (= ?x92 input.spec-%var-n-1)))
 (let (($x64 (= $x91 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x72 (concat ?x96 (concat ?x112 ?x76)))))
 (let (($x110 (= input.dst.llvm-%n ?x102)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x133)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x116 $x117)))
 (let (($x95 (and $x54 $x131)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x9 $x95)))
 (let (($x128 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x144 $x139)))))))
 (let (($x51 (and (and (and $x23 $x128) $x45) $x110)))
 (let (($x126 (= $x51 true)))
 (let (($x50 (= ?x102 input.dst.llvm-%n)))
 (let (($x15 (= $x50 true)))
 (let (($x123 (and $x15 $x126)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x5 $x123)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x120 $x33)))
 (let (($x60 (forall ((input.ind-%var2214X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2214X)))
 (=> $x146 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2214X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var2213X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2213X)))
 (= $x146 false)))
 ))
 (let (($x140 (and $x121 $x60)))
 (let (($x63 (and $x140 $x104)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x142 (and $x88 $x63)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x17 (and $x37 $x142)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x148 (and $x34 $x17)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x44 (and $x59 $x148)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x29 (and $x6 $x44)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x99 (and $x42 $x29)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x124 (and $x80 $x99)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x113 (and $x98 $x124)))
 (let (($x19 (=> $x113 $x64)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x40)))
 (let (($x91 (= ?x92 input.spec-%var-n-1)))
 (let (($x64 (= $x91 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x72 (concat ?x96 (concat ?x112 ?x76)))))
 (let (($x110 (= input.dst.llvm-%n ?x102)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x133)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x116 $x117)))
 (let (($x95 (and $x54 $x131)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x9 $x95)))
 (let (($x128 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x144 $x139)))))))
 (let (($x51 (and (and (and $x23 $x128) $x45) $x110)))
 (let (($x126 (= $x51 true)))
 (let (($x50 (= ?x102 input.dst.llvm-%n)))
 (let (($x15 (= $x50 true)))
 (let (($x123 (and $x15 $x126)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x5 $x123)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x104 (and $x120 $x33)))
 (let (($x60 (forall ((input.ind-%var2214X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2214X)))
 (=> $x146 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2214X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var2213X (_ BitVec 32)) )(let (($x146 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2213X)))
 (= $x146 false)))
 ))
 (let (($x140 (and $x121 $x60)))
 (let (($x63 (and $x140 $x104)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x142 (and $x88 $x63)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x17 (and $x37 $x142)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x148 (and $x34 $x17)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x44 (and $x59 $x148)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x29 (and $x6 $x44)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x99 (and $x42 $x29)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x124 (and $x80 $x99)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x113 (and $x98 $x124)))
 (let (($x19 (=> $x113 $x64)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x109 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x58 (ite $x109 ?x35 (_ bv0 32))))
 (let ((?x106 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x87 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x97 (ite $x87 ?x106 ?x58)))
 (let ((?x61 (bvmul (_ bv4294967295 32) ?x97)))
 (let ((?x134 (bvneg ?x61)))
 (let (($x39 (= ?x134 ?x145)))
 (let (($x150 (= $x39 true)))
 (let ((?x91 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x91)))
 (let (($x31 (= ?x64 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x31 true)))
 (let ((?x99 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x99)))
 (let (($x113 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x113 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x148 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x51)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x131 $x73)))
 (let (($x123 (and $x110 $x126)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x139 $x123)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x11)))))))
 (let (($x104 (and $x133 $x33)))
 (let (($x63 (= $x104 true)))
 (let ((?x102 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x102)))
 (let (($x27 (= ?x21 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (= $x27 true)))
 (let (($x15 (= ?x21 input.dst.llvm-%n)))
 (let (($x53 (= $x15 true)))
 (let (($x24 (and $x53 $x32)))
 (let (($x142 (and $x24 $x63)))
 (let (($x29 (and $x142 $x44)))
 (let (($x40 (and $x29 $x111)))
 (let (($x135 (and $x40 $x22)))
 (let (($x49 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x137 (and (not $x49) $x135)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x112 $x137)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x129 (and $x89 $x125)))
 (let (($x30 (forall ((input.ind-%var2224X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2224X)))
 (=> $x121 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2224X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2223X)))
 (= $x121 false)))
 ))
 (let (($x72 (and $x60 $x30)))
 (let (($x47 (and $x72 $x129)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x70 (and $x88 $x47)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x18 (and $x37 $x70)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x118 (and $x34 $x18)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x78 (and $x59 $x118)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x119 (and $x6 $x78)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x81 (and $x42 $x119)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x79 (and $x80 $x81)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x75 (and $x98 $x79)))
 (let (($x105 (=> $x75 $x150)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x109 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x58 (ite $x109 ?x35 (_ bv0 32))))
 (let ((?x106 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x87 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x97 (ite $x87 ?x106 ?x58)))
 (let ((?x61 (bvmul (_ bv4294967295 32) ?x97)))
 (let ((?x134 (bvneg ?x61)))
 (let (($x39 (= ?x134 ?x145)))
 (let (($x150 (= $x39 true)))
 (let ((?x91 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x91)))
 (let (($x31 (= ?x64 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x31 true)))
 (let ((?x99 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x99)))
 (let (($x113 (= ?x124 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x113 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x148 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x51)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x131 $x73)))
 (let (($x123 (and $x110 $x126)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x139 $x123)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x11)))))))
 (let (($x104 (and $x133 $x33)))
 (let (($x63 (= $x104 true)))
 (let ((?x102 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x102)))
 (let (($x27 (= ?x21 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (= $x27 true)))
 (let (($x15 (= ?x21 input.dst.llvm-%n)))
 (let (($x53 (= $x15 true)))
 (let (($x24 (and $x53 $x32)))
 (let (($x142 (and $x24 $x63)))
 (let (($x29 (and $x142 $x44)))
 (let (($x40 (and $x29 $x111)))
 (let (($x135 (and $x40 $x22)))
 (let (($x49 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x137 (and (not $x49) $x135)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x112 $x137)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x129 (and $x89 $x125)))
 (let (($x30 (forall ((input.ind-%var2224X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2224X)))
 (=> $x121 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2224X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2223X)))
 (= $x121 false)))
 ))
 (let (($x72 (and $x60 $x30)))
 (let (($x47 (and $x72 $x129)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x70 (and $x88 $x47)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x18 (and $x37 $x70)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x118 (and $x34 $x18)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x78 (and $x59 $x118)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x119 (and $x6 $x78)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x81 (and $x42 $x119)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x79 (and $x80 $x81)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x75 (and $x98 $x79)))
 (let (($x105 (=> $x75 $x150)))
 (not $x105)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 105 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x144 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x101 (ite $x144 ?x13 (_ bv0 32))))
 (let ((?x52 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x12 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x120 (ite $x12 ?x52 ?x101)))
 (let ((?x100 (bvmul (_ bv4294967295 32) ?x120)))
 (let ((?x146 (bvneg ?x100)))
 (let (($x5 (= ?x146 ?x93)))
 (let (($x48 (= $x5 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x18)))
 (let (($x119 (= ?x118 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x119 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x135)))
 (let (($x125 (= ?x137 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x125 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (= $x19 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x99)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x142 $x44)))
 (let (($x113 (and $x29 $x124)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x133 $x113)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x110)))))))
 (let (($x40 (and $x63 $x111)))
 (let (($x92 (= $x40 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x10)))
 (let (($x136 (= ?x54 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (= $x136 true)))
 (let (($x23 (= ?x54 input.dst.llvm-%n)))
 (let (($x128 (= $x23 true)))
 (let (($x9 (and $x128 $x11)))
 (let (($x91 (and $x9 $x92)))
 (let (($x22 (and $x91 $x31)))
 (let (($x47 (and $x22 $x129)))
 (let (($x79 (and $x47 $x81)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (and (not $x24) $x79)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x27 $x87)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x109 (and $x50 $x106)))
 (let (($x85 (forall ((input.ind-%var2279X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2279X)))
 (=> $x60 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2279X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var2278X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2278X)))
 (= $x60 false)))
 ))
 (let (($x102 (and $x30 $x85)))
 (let (($x35 (and $x102 $x109)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x58 (and $x88 $x35)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x37 $x58)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x61 (and $x34 $x97)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x134 (and $x59 $x61)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x6 $x134)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x39 (and $x42 $x145)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x150 (and $x80 $x39)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x105 (and $x98 $x150)))
 (let (($x83 (=> $x105 $x48)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x144 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x101 (ite $x144 ?x13 (_ bv0 32))))
 (let ((?x52 (bvadd input.spec-%var-i-0.L3%6%bbentry input.spec-%var-r-0.L3%6%bbentry)))
 (let (($x12 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x120 (ite $x12 ?x52 ?x101)))
 (let ((?x100 (bvmul (_ bv4294967295 32) ?x120)))
 (let ((?x146 (bvneg ?x100)))
 (let (($x5 (= ?x146 ?x93)))
 (let (($x48 (= $x5 true)))
 (let ((?x18 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x118 (bvneg ?x18)))
 (let (($x119 (= ?x118 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x119 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x135)))
 (let (($x125 (= ?x137 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x125 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (= $x19 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x99)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x142 $x44)))
 (let (($x113 (and $x29 $x124)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x133 $x113)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x110)))))))
 (let (($x40 (and $x63 $x111)))
 (let (($x92 (= $x40 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x10)))
 (let (($x136 (= ?x54 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x11 (= $x136 true)))
 (let (($x23 (= ?x54 input.dst.llvm-%n)))
 (let (($x128 (= $x23 true)))
 (let (($x9 (and $x128 $x11)))
 (let (($x91 (and $x9 $x92)))
 (let (($x22 (and $x91 $x31)))
 (let (($x47 (and $x22 $x129)))
 (let (($x79 (and $x47 $x81)))
 (let (($x24 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (and (not $x24) $x79)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x27 $x87)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x109 (and $x50 $x106)))
 (let (($x85 (forall ((input.ind-%var2279X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2279X)))
 (=> $x60 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2279X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var2278X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2278X)))
 (= $x60 false)))
 ))
 (let (($x102 (and $x30 $x85)))
 (let (($x35 (and $x102 $x109)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x58 (and $x88 $x35)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x97 (and $x37 $x58)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x61 (and $x34 $x97)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x134 (and $x59 $x61)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x145 (and $x6 $x134)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x39 (and $x42 $x145)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x150 (and $x80 $x39)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x105 (and $x98 $x150)))
 (let (($x83 (=> $x105 $x48)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 105 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (not $x93)))
 (let (($x100 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (not $x100)))
 (let (($x48 (or $x146 $x5)))
 (let (($x83 (= $x48 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x106)))
 (let (($x58 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x58 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x129)))
 (let (($x119 (= ?x47 input.dst.llvm-%n)))
 (let (($x81 (= $x119 true)))
 (let (($x70 (= ?x47 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x70 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x64)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x113 $x92)))
 (let (($x31 (and $x91 $x19)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x51 $x31)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x142)))))))
 (let (($x135 (and $x124 $x22)))
 (let (($x137 (= $x135 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x26)))
 (let (($x131 (= ?x139 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x131 true)))
 (let (($x125 (and $x45 $x137)))
 (let (($x118 (and $x125 $x18)))
 (let (($x79 (and $x118 $x81)))
 (let (($x61 (and $x79 $x97)))
 (let (($x136 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x136 $x61)))
 (let (($x115 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x145 (and $x115 $x134)))
 (let (($x57 (forall ((input.ind-%var2334X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2334X)))
 (=> $x30 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2334X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var2333X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2333X)))
 (= $x30 false)))
 ))
 (let (($x10 (and $x85 $x57)))
 (let (($x39 (and $x10 $x145)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x150 (and $x88 $x39)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x105 (and $x37 $x150)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x12 (and $x34 $x105)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x52 (and $x59 $x12)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x144 (and $x6 $x52)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x13 (and $x42 $x144)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x101 (and $x80 $x13)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x120 (and $x98 $x101)))
 (let (($x114 (=> $x120 $x83)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (not $x93)))
 (let (($x100 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (not $x100)))
 (let (($x48 (or $x146 $x5)))
 (let (($x83 (= $x48 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x106)))
 (let (($x58 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x58 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x47 (bvneg ?x129)))
 (let (($x119 (= ?x47 input.dst.llvm-%n)))
 (let (($x81 (= $x119 true)))
 (let (($x70 (= ?x47 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x70 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x64)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x113 $x92)))
 (let (($x31 (and $x91 $x19)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x51 $x31)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x142)))))))
 (let (($x135 (and $x124 $x22)))
 (let (($x137 (= $x135 true)))
 (let ((?x26 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x139 (bvneg ?x26)))
 (let (($x131 (= ?x139 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x131 true)))
 (let (($x125 (and $x45 $x137)))
 (let (($x118 (and $x125 $x18)))
 (let (($x79 (and $x118 $x81)))
 (let (($x61 (and $x79 $x97)))
 (let (($x136 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x136 $x61)))
 (let (($x115 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x145 (and $x115 $x134)))
 (let (($x57 (forall ((input.ind-%var2334X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2334X)))
 (=> $x30 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2334X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var2333X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2333X)))
 (= $x30 false)))
 ))
 (let (($x10 (and $x85 $x57)))
 (let (($x39 (and $x10 $x145)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x150 (and $x88 $x39)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x105 (and $x37 $x150)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x12 (and $x34 $x105)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x52 (and $x59 $x12)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x144 (and $x6 $x52)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x13 (and $x42 $x144)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x101 (and $x80 $x13)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x120 (and $x98 $x101)))
 (let (($x114 (=> $x120 $x83)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 95 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (or $x50 $x38)))
 (let (($x49 (= $x60 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x52)))
 (let (($x101 (= ?x144 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x101 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x35)))
 (let (($x39 (= ?x58 input.dst.llvm-%n)))
 (let (($x150 (= $x39 true)))
 (let (($x97 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (= $x97 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x78)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x129 $x18)))
 (let (($x81 (and $x118 $x119)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x110 $x81)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x64)))))))
 (let (($x87 (and $x125 $x79)))
 (let (($x106 (= $x87 true)))
 (let ((?x133 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x133)))
 (let (($x17 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x17 true)))
 (let (($x109 (and $x148 $x106)))
 (let (($x134 (and $x109 $x61)))
 (let (($x105 (and $x134 $x150)))
 (let (($x100 (and $x105 $x120)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x99 $x100)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x93 (and $x45 $x146)))
 (let (($x139 (forall ((input.ind-%var2344X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2344X)))
 (=> $x85 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2344X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var2343X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2343X)))
 (= $x85 false)))
 ))
 (let (($x104 (and $x57 $x139)))
 (let (($x5 (and $x104 $x93)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x48 (and $x88 $x5)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x83 (and $x37 $x48)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x34 $x83)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x116 (and $x59 $x114)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x73 (and $x6 $x116)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x95 (and $x42 $x73)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x96 (and $x80 $x95)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x53 (and $x98 $x96)))
 (let (($x27 (=> $x53 $x49)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (or $x50 $x38)))
 (let (($x49 (= $x60 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x52)))
 (let (($x101 (= ?x144 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x101 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x58 (bvneg ?x35)))
 (let (($x39 (= ?x58 input.dst.llvm-%n)))
 (let (($x150 (= $x39 true)))
 (let (($x97 (= ?x58 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (= $x97 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x78)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x129 $x18)))
 (let (($x81 (and $x118 $x119)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x110 $x81)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x64)))))))
 (let (($x87 (and $x125 $x79)))
 (let (($x106 (= $x87 true)))
 (let ((?x133 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x133)))
 (let (($x17 (= ?x63 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x17 true)))
 (let (($x109 (and $x148 $x106)))
 (let (($x134 (and $x109 $x61)))
 (let (($x105 (and $x134 $x150)))
 (let (($x100 (and $x105 $x120)))
 (let (($x99 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x99 $x100)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x93 (and $x45 $x146)))
 (let (($x139 (forall ((input.ind-%var2344X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2344X)))
 (=> $x85 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2344X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var2343X (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2343X)))
 (= $x85 false)))
 ))
 (let (($x104 (and $x57 $x139)))
 (let (($x5 (and $x104 $x93)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x48 (and $x88 $x5)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x83 (and $x37 $x48)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x114 (and $x34 $x83)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x116 (and $x59 $x114)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x73 (and $x6 $x116)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x95 (and $x42 $x73)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x96 (and $x80 $x95)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x53 (and $x98 $x96)))
 (let (($x27 (=> $x53 $x49)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 93 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x32 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x50)))
 (let (($x49 (= ?x38 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x49 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x48)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x120 $x93)))
 (let (($x114 (and $x5 $x83)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x35 $x114)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x150)))))))
 (let (($x73 (and $x101 $x116)))
 (let (($x95 (= $x73 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x47)))
 (let (($x119 (= ?x70 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x119 true)))
 (let (($x18 (= ?x70 input.dst.llvm-%n)))
 (let (($x118 (= $x18 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x135)))
 (let (($x124 (= ?x125 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x124 true)))
 (let (($x64 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (not $x64)))
 (let (($x31 (= $x19 true)))
 (let (($x129 (and $x31 $x110)))
 (let (($x78 (and $x129 $x118)))
 (let (($x79 (and $x78 $x81)))
 (let (($x96 (and $x79 $x95)))
 (let (($x21 (and $x96 $x27)))
 (let (($x92 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and $x92 $x21)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x137 $x44)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x15 (and $x148 $x29)))
 (let (($x63 (forall ((input.ind-%var2354X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2354X)))
 (=> $x57 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2354X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var2353X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2353X)))
 (= $x57 false)))
 ))
 (let (($x142 (and $x139 $x63)))
 (let (($x128 (and $x142 $x15)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x115 (and $x88 $x128)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x149 (and $x37 $x115)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x30 (and $x34 $x149)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x24 (and $x59 $x30)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x6 $x24)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x54 (and $x42 $x136)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x11 (and $x80 $x54)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x102 (and $x98 $x11)))
 (let (($x55 (=> $x102 $x72)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L3%28%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%20%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L3%20%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L3%26%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L3%34%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= input.spec-%var-r-0.L3%6%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x32 true)))
 (let ((?x50 (bvmul input.spec-%var-r-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x50)))
 (let (($x49 (= ?x38 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x49 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x48)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x120 $x93)))
 (let (($x114 (and $x5 $x83)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x35 $x114)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x150)))))))
 (let (($x73 (and $x101 $x116)))
 (let (($x95 (= $x73 true)))
 (let ((?x47 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x70 (bvneg ?x47)))
 (let (($x119 (= ?x70 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x119 true)))
 (let (($x18 (= ?x70 input.dst.llvm-%n)))
 (let (($x118 (= $x18 true)))
 (let ((?x135 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x135)))
 (let (($x124 (= ?x125 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x124 true)))
 (let (($x64 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (not $x64)))
 (let (($x31 (= $x19 true)))
 (let (($x129 (and $x31 $x110)))
 (let (($x78 (and $x129 $x118)))
 (let (($x79 (and $x78 $x81)))
 (let (($x96 (and $x79 $x95)))
 (let (($x21 (and $x96 $x27)))
 (let (($x92 (bvsgt input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and $x92 $x21)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x137 $x44)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-13.L3%28%d)))
 (let (($x15 (and $x148 $x29)))
 (let (($x63 (forall ((input.ind-%var2354X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2354X)))
 (=> $x57 (= (input.spec-%tmpvar-1.L3%20%d.1.1 input.ind-%var2354X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var2353X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-1.L3%20%d.0.1 input.ind-%var2353X)))
 (= $x57 false)))
 ))
 (let (($x142 (and $x139 $x63)))
 (let (($x128 (and $x142 $x15)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-2.L3%20%d)))
 (let (($x115 (and $x88 $x128)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-3.L3%20%d)))
 (let (($x149 (and $x37 $x115)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-6.L3%20%d)))
 (let (($x30 (and $x34 $x149)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-9.L3%20%d)))
 (let (($x24 (and $x59 $x30)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-21.L3%6%bbentry)))
 (let (($x136 (and $x6 $x24)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-22.L3%6%bbentry)))
 (let (($x54 (and $x42 $x136)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-11.L3%26%bbentry)))
 (let (($x11 (and $x80 $x54)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-15.L3%34%bbentry)))
 (let (($x102 (and $x98 $x11)))
 (let (($x55 (=> $x102 $x72)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 97 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791700/query
