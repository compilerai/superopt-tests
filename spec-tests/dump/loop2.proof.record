==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x6 $x14)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (= true false)))
 (let (($x123 (= $x122 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x99 ?x97)))))
 (let (($x108 (= ?x107 input.dst.llvm-%n)))
 (let (($x109 (= $x108 true)))
 (let (($x91 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x83)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x78 $x81)))
 (let (($x85 (and $x82 $x84)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x64 $x85)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x87 (and $x77 $x86)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let (($x94 (and $x89 $x93)))
 (let (($x110 (and $x94 $x109)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x111 (and $x60 $x110)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x112 (and $x57 $x111)))
 (let (($x54 (forall ((Lambda32 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x14 (_ bv1 32))))
 (=> $x32 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x40 (forall ((Lambda32 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x14 (_ bv1 32))))
 (= $x32 false)))))
 ))
 (let (($x11 (forall ((Lambda32 (_ BitVec 32)) )(let (($x6 (= false false)))
 (let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x14 (_ bv0 32))))
 (=> $x28 $x6))))))
 ))
 (let (($x17 (forall ((Lambda32 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x14 (_ bv0 32))))
 (= $x28 true)))))
 ))
 (let (($x37 (and $x17 $x11)))
 (let (($x43 (and $x37 $x40)))
 (let (($x55 (and $x43 $x54)))
 (let (($x113 (and $x55 $x112)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x114 (and $x15 $x113)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x115 (and $x35 $x114)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x117 (and $x39 $x116)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x118 (and $x26 $x117)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x119 (and $x34 $x118)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x120 (and $x21 $x119)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x121 (and $x13 $x120)))
 (let (($x124 (=> $x121 $x123)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (= true false)))
 (let (($x123 (= $x122 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x99 ?x97)))))
 (let (($x108 (= ?x107 input.dst.llvm-%n)))
 (let (($x109 (= $x108 true)))
 (let (($x91 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (= $x91 true)))
 (let (($x93 (= $x92 true)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x83)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x78 $x81)))
 (let (($x85 (and $x82 $x84)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x64 $x85)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x71)))))))
 (let (($x87 (and $x77 $x86)))
 (let (($x88 (= $x87 true)))
 (let (($x89 (= $x88 true)))
 (let (($x94 (and $x89 $x93)))
 (let (($x110 (and $x94 $x109)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x111 (and $x60 $x110)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x112 (and $x57 $x111)))
 (let (($x54 (forall ((Lambda32 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x14 (_ bv1 32))))
 (=> $x32 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x40 (forall ((Lambda32 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x14 (_ bv1 32))))
 (= $x32 false)))))
 ))
 (let (($x11 (forall ((Lambda32 (_ BitVec 32)) )(let (($x6 (= false false)))
 (let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x14 (_ bv0 32))))
 (=> $x28 $x6))))))
 ))
 (let (($x17 (forall ((Lambda32 (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x14 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x14 (_ bv0 32))))
 (= $x28 true)))))
 ))
 (let (($x37 (and $x17 $x11)))
 (let (($x43 (and $x37 $x40)))
 (let (($x55 (and $x43 $x54)))
 (let (($x113 (and $x55 $x112)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x114 (and $x15 $x113)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x115 (and $x35 $x114)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x116 (and $x48 $x115)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x117 (and $x39 $x116)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x118 (and $x26 $x117)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x119 (and $x34 $x118)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x120 (and $x21 $x119)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x121 (and $x13 $x120)))
 (let (($x124 (=> $x121 $x123)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfb405964)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfb405967)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfb405964)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x94 $x106)))
 (let (($x98 (and $x101 $x103)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x93 $x98)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x85)))))))
 (let (($x38 (and $x91 $x99)))
 (let (($x10 (= $x38 true)))
 (let (($x9 (= $x10 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x115 (concat ?x112 (concat ?x108 ?x104)))))
 (let (($x117 (= input.dst.llvm-%n ?x116)))
 (let (($x120 (and (and (and $x91 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x99) $x117)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x123 (and $x75 $x122)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x124 (and $x72 $x123)))
 (let (($x26 (forall ((Lambda32 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x37 (_ bv1 32))))
 (=> $x43 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x54 (forall ((Lambda32 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x37 (_ bv1 32))))
 (= $x43 false)))))
 ))
 (let (($x76 (forall ((Lambda32 (_ BitVec 32)) )(let (($x6 (= false false)))
 (let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x37 (_ bv0 32))))
 (=> $x25 $x6))))))
 ))
 (let (($x5 (forall ((Lambda32 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x37 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x59 (and $x5 $x76)))
 (let (($x57 (and $x59 $x54)))
 (let (($x44 (and $x57 $x26)))
 (let (($x125 (and $x44 $x124)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x62 (and $x69 $x125)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x96 (and $x28 $x62)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x22 (and $x66 $x96)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x49 (and $x15 $x22)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x47 (and $x17 $x49)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x27 (and $x12 $x47)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x19 (and $x7 $x27)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x42 (and $x23 $x19)))
 (let (($x33 (=> $x42 $x9)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x94 $x106)))
 (let (($x98 (and $x101 $x103)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x93 $x98)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x85)))))))
 (let (($x38 (and $x91 $x99)))
 (let (($x10 (= $x38 true)))
 (let (($x9 (= $x10 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x115 (concat ?x112 (concat ?x108 ?x104)))))
 (let (($x117 (= input.dst.llvm-%n ?x116)))
 (let (($x120 (and (and (and $x91 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x99) $x117)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x123 (and $x75 $x122)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x124 (and $x72 $x123)))
 (let (($x26 (forall ((Lambda32 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x37 (_ bv1 32))))
 (=> $x43 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x54 (forall ((Lambda32 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x37 (_ bv1 32))))
 (= $x43 false)))))
 ))
 (let (($x76 (forall ((Lambda32 (_ BitVec 32)) )(let (($x6 (= false false)))
 (let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x37 (_ bv0 32))))
 (=> $x25 $x6))))))
 ))
 (let (($x5 (forall ((Lambda32 (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x37 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x37 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x59 (and $x5 $x76)))
 (let (($x57 (and $x59 $x54)))
 (let (($x44 (and $x57 $x26)))
 (let (($x125 (and $x44 $x124)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x62 (and $x69 $x125)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x96 (and $x28 $x62)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x22 (and $x66 $x96)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x49 (and $x15 $x22)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x47 (and $x17 $x49)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x27 (and $x12 $x47)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x19 (and $x7 $x27)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x42 (and $x23 $x19)))
 (let (($x33 (=> $x42 $x9)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= (_ bv0 32) input.spec-%var-n-1)))
 (let (($x67 (= $x65 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x27 (concat ?x22 (concat ?x124 ?x122)))))
 (let (($x42 (= input.dst.llvm-%n ?x19)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x109)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x111 $x108)))
 (let (($x116 (and $x104 $x113)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x110 $x116)))
 (let (($x92 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x102)))))))
 (let (($x9 (and (and (and $x114 $x92) $x117) $x42)))
 (let (($x33 (= $x9 true)))
 (let (($x45 (= $x33 true)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and $x91 $x45)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x63 (and $x87 $x77)))
 (let (($x82 (forall ((Lambda32 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x76 (_ bv1 32))))
 (=> $x60 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x73 (forall ((Lambda32 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x76 (_ bv1 32))))
 (= $x60 false)))))
 ))
 (let (($x40 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x76 (_ bv0 32))))
 (=> $x59 $x54))))))
 ))
 (let (($x8 (forall ((Lambda32 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x76 (_ bv0 32))))
 (= $x59 true)))))
 ))
 (let (($x31 (and $x8 $x40)))
 (let (($x74 (and $x31 $x73)))
 (let (($x85 (and $x74 $x82)))
 (let (($x100 (and $x85 $x63)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x36 (and $x69 $x100)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x71 (and $x28 $x36)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x29 (and $x66 $x71)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x39 (and $x15 $x29)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x11 (and $x17 $x39)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x34 (and $x12 $x11)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x18 (and $x7 $x34)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x52 (and $x23 $x18)))
 (let (($x48 (=> $x52 $x67)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (= (_ bv0 32) input.spec-%var-n-1)))
 (let (($x67 (= $x65 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x27 (concat ?x22 (concat ?x124 ?x122)))))
 (let (($x42 (= input.dst.llvm-%n ?x19)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x109)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x111 $x108)))
 (let (($x116 (and $x104 $x113)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x110 $x116)))
 (let (($x92 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x102)))))))
 (let (($x9 (and (and (and $x114 $x92) $x117) $x42)))
 (let (($x33 (= $x9 true)))
 (let (($x45 (= $x33 true)))
 (let (($x91 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and $x91 $x45)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x63 (and $x87 $x77)))
 (let (($x82 (forall ((Lambda32 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x76 (_ bv1 32))))
 (=> $x60 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x73 (forall ((Lambda32 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x76 (_ bv1 32))))
 (= $x60 false)))))
 ))
 (let (($x40 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (= false false)))
 (let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x76 (_ bv0 32))))
 (=> $x59 $x54))))))
 ))
 (let (($x8 (forall ((Lambda32 (_ BitVec 32)) )(let (($x25 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x76 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x76 (_ bv0 32))))
 (= $x59 true)))))
 ))
 (let (($x31 (and $x8 $x40)))
 (let (($x74 (and $x31 $x73)))
 (let (($x85 (and $x74 $x82)))
 (let (($x100 (and $x85 $x63)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x36 (and $x69 $x100)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x71 (and $x28 $x36)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x29 (and $x66 $x71)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x39 (and $x15 $x29)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x11 (and $x17 $x39)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x34 (and $x12 $x11)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x18 (and $x7 $x34)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x52 (and $x23 $x18)))
 (let (($x48 (=> $x52 $x67)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x75)))
 (let (($x81 (= ?x90 input.dst.llvm-%n)))
 (let (($x68 (= $x81 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x34 (concat ?x29 (concat ?x63 ?x45)))))
 (let (($x52 (= input.dst.llvm-%n ?x18)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x125)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x96 $x124)))
 (let (($x19 (and $x122 $x49)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x62 $x19)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x109)))))))
 (let (($x48 (and (and (and $x47 $x115) $x42) $x52)))
 (let (($x58 (= $x48 true)))
 (let (($x64 (= $x58 true)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x114 $x64)))
 (let (($x98 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x121 (and $x98 $x78)))
 (let (($x105 (forall ((Lambda32 (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x53 (_ bv1 32))))
 (=> $x85 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x87 (forall ((Lambda32 (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x53 (_ bv1 32))))
 (= $x85 false)))))
 ))
 (let (($x79 (forall ((Lambda32 (_ BitVec 32)) )(let (($x72 (= false false)))
 (let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x53 (_ bv0 32))))
 (=> $x40 $x72))))))
 ))
 (let (($x60 (forall ((Lambda32 (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x53 (_ bv0 32))))
 (= $x40 true)))))
 ))
 (let (($x83 (and $x60 $x79)))
 (let (($x89 (and $x83 $x87)))
 (let (($x102 (and $x89 $x105)))
 (let (($x35 (and $x102 $x121)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x41 (and $x24 $x35)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x80 (and $x14 $x41)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x56 (and $x30 $x80)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x5 (and $x32 $x56)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x6 (and $x16 $x5)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x55 (and $x61 $x6)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x57 (and $x23 $x55)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x26 (and $x88 $x57)))
 (let (($x50 (=> $x26 $x68)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x75 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x75)))
 (let (($x81 (= ?x90 input.dst.llvm-%n)))
 (let (($x68 (= $x81 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x34 (concat ?x29 (concat ?x63 ?x45)))))
 (let (($x52 (= input.dst.llvm-%n ?x18)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x125)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x96 $x124)))
 (let (($x19 (and $x122 $x49)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x62 $x19)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x109)))))))
 (let (($x48 (and (and (and $x47 $x115) $x42) $x52)))
 (let (($x58 (= $x48 true)))
 (let (($x64 (= $x58 true)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x114 $x64)))
 (let (($x98 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x121 (and $x98 $x78)))
 (let (($x105 (forall ((Lambda32 (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x53 (_ bv1 32))))
 (=> $x85 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x87 (forall ((Lambda32 (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x53 (_ bv1 32))))
 (= $x85 false)))))
 ))
 (let (($x79 (forall ((Lambda32 (_ BitVec 32)) )(let (($x72 (= false false)))
 (let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x53 (_ bv0 32))))
 (=> $x40 $x72))))))
 ))
 (let (($x60 (forall ((Lambda32 (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x53 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x53 (_ bv0 32))))
 (= $x40 true)))))
 ))
 (let (($x83 (and $x60 $x79)))
 (let (($x89 (and $x83 $x87)))
 (let (($x102 (and $x89 $x105)))
 (let (($x35 (and $x102 $x121)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x41 (and $x24 $x35)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x80 (and $x14 $x41)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x56 (and $x30 $x80)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x5 (and $x32 $x56)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x6 (and $x16 $x5)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x55 (and $x61 $x6)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x57 (and $x23 $x55)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x26 (and $x88 $x57)))
 (let (($x50 (=> $x26 $x68)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x73)))
 (let (($x82 (= ?x84 input.spec-%var-n-1)))
 (let (($x91 (= $x82 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x55 (concat ?x56 (concat ?x121 ?x64)))))
 (let (($x26 (= input.dst.llvm-%n ?x57)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x100)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x71 $x63)))
 (let (($x18 (and $x45 $x39)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x36 $x18)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x125)))))))
 (let (($x90 (and (and (and $x11 $x27) $x52) $x26)))
 (let (($x81 (= $x90 true)))
 (let (($x68 (= $x81 true)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and $x47 $x68)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x51 (and $x116 $x50)))
 (let (($x107 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x79 (_ bv1 32))))
 (=> $x103 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x99 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x79 (_ bv1 32))))
 (= $x103 false)))))
 ))
 (let (($x106 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x79 (_ bv0 32))))
 (=> $x83 $x87))))))
 ))
 (let (($x86 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x79 (_ bv0 32))))
 (= $x83 true)))))
 ))
 (let (($x101 (and $x86 $x106)))
 (let (($x119 (and $x101 $x99)))
 (let (($x109 (and $x119 $x107)))
 (let (($x118 (and $x109 $x51)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x92 (and $x24 $x118)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x33 (and $x14 $x92)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x59 (and $x30 $x33)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x69 (and $x32 $x59)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x94 (and $x16 $x69)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x37 (and $x61 $x94)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x43 (and $x23 $x37)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x8 (and $x88 $x43)))
 (let (($x97 (=> $x8 $x91)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x73)))
 (let (($x82 (= ?x84 input.spec-%var-n-1)))
 (let (($x91 (= $x82 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x55 (concat ?x56 (concat ?x121 ?x64)))))
 (let (($x26 (= input.dst.llvm-%n ?x57)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x100)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x71 $x63)))
 (let (($x18 (and $x45 $x39)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x36 $x18)))
 (let (($x27 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x125)))))))
 (let (($x90 (and (and (and $x11 $x27) $x52) $x26)))
 (let (($x81 (= $x90 true)))
 (let (($x68 (= $x81 true)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and $x47 $x68)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x51 (and $x116 $x50)))
 (let (($x107 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x79 (_ bv1 32))))
 (=> $x103 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x99 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x79 (_ bv1 32))))
 (= $x103 false)))))
 ))
 (let (($x106 (forall ((Lambda32 (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x79 (_ bv0 32))))
 (=> $x83 $x87))))))
 ))
 (let (($x86 (forall ((Lambda32 (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x79 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x79 (_ bv0 32))))
 (= $x83 true)))))
 ))
 (let (($x101 (and $x86 $x106)))
 (let (($x119 (and $x101 $x99)))
 (let (($x109 (and $x119 $x107)))
 (let (($x118 (and $x109 $x51)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x92 (and $x24 $x118)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x33 (and $x14 $x92)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x59 (and $x30 $x33)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x69 (and $x32 $x59)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x94 (and $x16 $x69)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x37 (and $x61 $x94)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x43 (and $x23 $x37)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x8 (and $x88 $x43)))
 (let (($x97 (=> $x8 $x91)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x89 (= $x74 true)))
 (let (($x105 (= $x89 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x94 (concat ?x33 (concat ?x50 ?x81)))))
 (let (($x43 (= input.dst.llvm-%n ?x37)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x64)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x41 $x78)))
 (let (($x5 (and $x121 $x35)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x55 $x5)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x45)))))))
 (let (($x73 (and (and (and $x48 $x44) $x57) $x43)))
 (let (($x84 (= $x73 true)))
 (let (($x82 (= $x84 true)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (and $x67 $x82)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x97 (and $x49 $x91)))
 (let (($x122 (forall ((Lambda32 (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x93 (_ bv1 32))))
 (=> $x109 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x116 (forall ((Lambda32 (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x93 (_ bv1 32))))
 (= $x109 false)))))
 ))
 (let (($x110 (forall ((Lambda32 (_ BitVec 32)) )(let (($x98 (= false false)))
 (let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x93 (_ bv0 32))))
 (=> $x106 $x98))))))
 ))
 (let (($x103 (forall ((Lambda32 (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x93 (_ bv0 32))))
 (= $x106 true)))))
 ))
 (let (($x108 (and $x103 $x110)))
 (let (($x117 (and $x108 $x116)))
 (let (($x123 (and $x117 $x122)))
 (let (($x95 (and $x123 $x97)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x115 (and $x28 $x95)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x58 (and $x66 $x115)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x31 (and $x15 $x58)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x25 (and $x17 $x31)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x111 (and $x21 $x25)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x13 $x111)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x60 (and $x70 $x76)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x72 (and $x20 $x60)))
 (let (($x102 (=> $x72 $x105)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (bvsge input.spec-%var-n-1 (_ bv0 32))))
 (let (($x89 (= $x74 true)))
 (let (($x105 (= $x89 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x94 (concat ?x33 (concat ?x50 ?x81)))))
 (let (($x43 (= input.dst.llvm-%n ?x37)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x64)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x41 $x78)))
 (let (($x5 (and $x121 $x35)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x55 $x5)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x45)))))))
 (let (($x73 (and (and (and $x48 $x44) $x57) $x43)))
 (let (($x84 (= $x73 true)))
 (let (($x82 (= $x84 true)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x91 (and $x67 $x82)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x97 (and $x49 $x91)))
 (let (($x122 (forall ((Lambda32 (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x93 (_ bv1 32))))
 (=> $x109 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x116 (forall ((Lambda32 (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x93 (_ bv1 32))))
 (= $x109 false)))))
 ))
 (let (($x110 (forall ((Lambda32 (_ BitVec 32)) )(let (($x98 (= false false)))
 (let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x93 (_ bv0 32))))
 (=> $x106 $x98))))))
 ))
 (let (($x103 (forall ((Lambda32 (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x93 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x93 (_ bv0 32))))
 (= $x106 true)))))
 ))
 (let (($x108 (and $x103 $x110)))
 (let (($x117 (and $x108 $x116)))
 (let (($x123 (and $x117 $x122)))
 (let (($x95 (and $x123 $x97)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x115 (and $x28 $x95)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x58 (and $x66 $x115)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x31 (and $x15 $x58)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x25 (and $x17 $x31)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x111 (and $x21 $x25)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x76 (and $x13 $x111)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x60 (and $x70 $x76)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x72 (and $x20 $x60)))
 (let (($x102 (=> $x72 $x105)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (= $x171 false)))
 (let (($x173 (= $x172 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x68)))
 (let (($x157 (= ?x50 input.dst.llvm-%n)))
 (let (($x158 (= $x157 true)))
 (let (($x153 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x153 true)))
 (let (($x149 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x141 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x9 $x126)))
 (let (($x130 (and $x127 $x129)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x65 $x130)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x132 (and $x96 $x131)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x72 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x74 (= $x72 true)))
 (let (($x111 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x76 (= $x111 true)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x58 true)))
 (let (($x82 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x91 (= $x82 true)))
 (let (($x97 (= $x91 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x43 (= $x37 true)))
 (let (($x73 (= $x43 true)))
 (let (($x81 (= ?x50 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x51 (= $x81 true)))
 (let (($x69 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x94 (= $x69 true)))
 (let (($x118 (= $x94 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x57 (= $x5 true)))
 (let (($x54 (= $x57 true)))
 (let (($x56 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x78 (= $x56 true)))
 (let (($x121 (= $x78 true)))
 (let (($x6 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x55 (= $x6 true)))
 (let (($x41 (= $x55 true)))
 (let (($x27 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x44 (= $x27 true)))
 (let (($x8 (= $x44 true)))
 (let (($x80 (and $x8 $x41)))
 (let (($x64 (and $x80 $x121)))
 (let (($x26 (and $x64 $x54)))
 (let (($x92 (and $x26 $x118)))
 (let (($x59 (and $x92 $x51)))
 (let (($x84 (and $x59 $x73)))
 (let (($x95 (and $x84 $x97)))
 (let (($x25 (and $x95 $x31)))
 (let (($x60 (and $x25 $x76)))
 (let (($x89 (and $x60 $x74)))
 (let (($x135 (and $x89 $x134)))
 (let (($x140 (and $x135 $x139)))
 (let (($x144 (and $x140 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x152 (and $x148 $x151)))
 (let (($x155 (and $x152 $x154)))
 (let (($x159 (and $x155 $x158)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (and $x52 $x159)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x161 (and $x100 $x160)))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x119 (_ bv1 32))))
 (=> $x123 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x49 (forall ((Lambda32 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x119 (_ bv1 32))))
 (= $x123 false)))))
 ))
 (let (($x47 (forall ((Lambda32 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x119 (_ bv0 32))))
 (=> $x110 $x113))))))
 ))
 (let (($x109 (forall ((Lambda32 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x119 (_ bv0 32))))
 (= $x110 true)))))
 ))
 (let (($x22 (and $x109 $x47)))
 (let (($x19 (and $x22 $x49)))
 (let (($x29 (and $x19 $x63)))
 (let (($x162 (and $x29 $x161)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x163 (and $x14 $x162)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x164 (and $x30 $x163)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x165 (and $x32 $x164)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x166 (and $x16 $x165)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x167 (and $x12 $x166)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x168 (and $x88 $x167)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x169 (and $x7 $x168)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x170 (and $x11 $x169)))
 (let (($x174 (=> $x170 $x173)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (= $x171 false)))
 (let (($x173 (= $x172 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x68)))
 (let (($x157 (= ?x50 input.dst.llvm-%n)))
 (let (($x158 (= $x157 true)))
 (let (($x153 (= (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x153 true)))
 (let (($x149 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x150 (= $x149 true)))
 (let (($x151 (= $x150 true)))
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x141 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x137 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x9 $x126)))
 (let (($x130 (and $x127 $x129)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x65 $x130)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x132 (and $x96 $x131)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x72 (= (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x74 (= $x72 true)))
 (let (($x111 (= (_ bv0 32) input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x76 (= $x111 true)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x31 (= $x58 true)))
 (let (($x82 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x91 (= $x82 true)))
 (let (($x97 (= $x91 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x43 (= $x37 true)))
 (let (($x73 (= $x43 true)))
 (let (($x81 (= ?x50 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x51 (= $x81 true)))
 (let (($x69 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x94 (= $x69 true)))
 (let (($x118 (= $x94 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x57 (= $x5 true)))
 (let (($x54 (= $x57 true)))
 (let (($x56 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x78 (= $x56 true)))
 (let (($x121 (= $x78 true)))
 (let (($x6 (bvsle input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x55 (= $x6 true)))
 (let (($x41 (= $x55 true)))
 (let (($x27 (bvule input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x44 (= $x27 true)))
 (let (($x8 (= $x44 true)))
 (let (($x80 (and $x8 $x41)))
 (let (($x64 (and $x80 $x121)))
 (let (($x26 (and $x64 $x54)))
 (let (($x92 (and $x26 $x118)))
 (let (($x59 (and $x92 $x51)))
 (let (($x84 (and $x59 $x73)))
 (let (($x95 (and $x84 $x97)))
 (let (($x25 (and $x95 $x31)))
 (let (($x60 (and $x25 $x76)))
 (let (($x89 (and $x60 $x74)))
 (let (($x135 (and $x89 $x134)))
 (let (($x140 (and $x135 $x139)))
 (let (($x144 (and $x140 $x143)))
 (let (($x148 (and $x144 $x147)))
 (let (($x152 (and $x148 $x151)))
 (let (($x155 (and $x152 $x154)))
 (let (($x159 (and $x155 $x158)))
 (let (($x52 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (and $x52 $x159)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x161 (and $x100 $x160)))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x119 (_ bv1 32))))
 (=> $x123 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x49 (forall ((Lambda32 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x119 (_ bv1 32))))
 (= $x123 false)))))
 ))
 (let (($x47 (forall ((Lambda32 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x119 (_ bv0 32))))
 (=> $x110 $x113))))))
 ))
 (let (($x109 (forall ((Lambda32 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x119 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x119 (_ bv0 32))))
 (= $x110 true)))))
 ))
 (let (($x22 (and $x109 $x47)))
 (let (($x19 (and $x22 $x49)))
 (let (($x29 (and $x19 $x63)))
 (let (($x162 (and $x29 $x161)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x163 (and $x14 $x162)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x164 (and $x30 $x163)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x165 (and $x32 $x164)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x166 (and $x16 $x165)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x167 (and $x12 $x166)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x168 (and $x88 $x167)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x169 (and $x7 $x168)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x170 (and $x11 $x169)))
 (let (($x174 (=> $x170 $x173)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000001a0)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000001a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000001a0)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (not $x161)))
 (let (($x159 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (not $x159)))
 (let (($x163 (or $x160 $x162)))
 (let (($x164 (= $x163 true)))
 (let (($x165 (= $x164 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x145 (= ?x135 input.dst.llvm-%n)))
 (let (($x146 (= $x145 true)))
 (let ((?x139 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x139)))
 (let (($x141 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x141 true)))
 (let (($x136 (= ?x135 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x126 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x65 (= $x114 true)))
 (let (($x9 (= $x65 true)))
 (let (($x99 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x104 (= $x99 true)))
 (let (($x107 (= $x104 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x90)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x76 $x74)))
 (let (($x10 (and $x89 $x83)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x59 $x10)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x97)))))))
 (let (($x53 (and $x111 $x24)))
 (let (($x85 (= $x53 true)))
 (let (($x62 (= $x85 true)))
 (let (($x118 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x92 (= $x118 true)))
 (let (($x33 (= $x92 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x57)))
 (let (($x69 (= ?x54 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x69 true)))
 (let (($x68 (and $x94 $x33)))
 (let (($x86 (and $x68 $x62)))
 (let (($x96 (and $x86 $x107)))
 (let (($x120 (and $x96 $x9)))
 (let (($x129 (and $x120 $x128)))
 (let (($x133 (and $x129 $x132)))
 (let (($x138 (and $x133 $x137)))
 (let (($x143 (and $x138 $x142)))
 (let (($x147 (and $x143 $x146)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x148 (and $x64 $x147)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x149 (and $x56 $x148)))
 (let (($x55 (forall ((Lambda32 (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x117 (_ bv1 32))))
 (=> $x29 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x117 (_ bv1 32))))
 (= $x29 false)))))
 ))
 (let (($x67 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (= false false)))
 (let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x117 (_ bv0 32))))
 (=> $x47 $x125))))))
 ))
 (let (($x123 (forall ((Lambda32 (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x117 (_ bv0 32))))
 (= $x47 true)))))
 ))
 (let (($x71 (and $x123 $x67)))
 (let (($x39 (and $x71 $x100)))
 (let (($x41 (and $x39 $x55)))
 (let (($x150 (and $x41 $x149)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x151 (and $x23 $x150)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x152 (and $x15 $x151)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x153 (and $x12 $x152)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x154 (and $x61 $x153)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x155 (and $x105 $x154)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x156 (and $x32 $x155)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x157 (and $x70 $x156)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x158 (and $x88 $x157)))
 (let (($x166 (=> $x158 $x165)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (not $x161)))
 (let (($x159 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (not $x159)))
 (let (($x163 (or $x160 $x162)))
 (let (($x164 (= $x163 true)))
 (let (($x165 (= $x164 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x145 (= ?x135 input.dst.llvm-%n)))
 (let (($x146 (= $x145 true)))
 (let ((?x139 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x139)))
 (let (($x141 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (= $x141 true)))
 (let (($x136 (= ?x135 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x130 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x126 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x65 (= $x114 true)))
 (let (($x9 (= $x65 true)))
 (let (($x99 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x104 (= $x99 true)))
 (let (($x107 (= $x104 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x90)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x76 $x74)))
 (let (($x10 (and $x89 $x83)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x59 $x10)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x97)))))))
 (let (($x53 (and $x111 $x24)))
 (let (($x85 (= $x53 true)))
 (let (($x62 (= $x85 true)))
 (let (($x118 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x92 (= $x118 true)))
 (let (($x33 (= $x92 true)))
 (let ((?x57 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x57)))
 (let (($x69 (= ?x54 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x69 true)))
 (let (($x68 (and $x94 $x33)))
 (let (($x86 (and $x68 $x62)))
 (let (($x96 (and $x86 $x107)))
 (let (($x120 (and $x96 $x9)))
 (let (($x129 (and $x120 $x128)))
 (let (($x133 (and $x129 $x132)))
 (let (($x138 (and $x133 $x137)))
 (let (($x143 (and $x138 $x142)))
 (let (($x147 (and $x143 $x146)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x148 (and $x64 $x147)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x149 (and $x56 $x148)))
 (let (($x55 (forall ((Lambda32 (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x117 (_ bv1 32))))
 (=> $x29 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x117 (_ bv1 32))))
 (= $x29 false)))))
 ))
 (let (($x67 (forall ((Lambda32 (_ BitVec 32)) )(let (($x125 (= false false)))
 (let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x117 (_ bv0 32))))
 (=> $x47 $x125))))))
 ))
 (let (($x123 (forall ((Lambda32 (_ BitVec 32)) )(let (($x119 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x117 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x117 (_ bv0 32))))
 (= $x47 true)))))
 ))
 (let (($x71 (and $x123 $x67)))
 (let (($x39 (and $x71 $x100)))
 (let (($x41 (and $x39 $x55)))
 (let (($x150 (and $x41 $x149)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x151 (and $x23 $x150)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x152 (and $x15 $x151)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x153 (and $x12 $x152)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x154 (and $x61 $x153)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x155 (and $x105 $x154)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x156 (and $x32 $x155)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x157 (and $x70 $x156)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x158 (and $x88 $x157)))
 (let (($x166 (=> $x158 $x165)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 134 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x169 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x170 (ite $x168 ?x169 (_ bv0 32))))
 (let ((?x44 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x27 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x171 (ite $x27 ?x44 ?x170)))
 (let ((?x172 (bvmul (_ bv4294967295 32) ?x171)))
 (let ((?x173 (bvneg ?x172)))
 (let (($x175 (= ?x173 ?x174)))
 (let (($x102 (= $x175 true)))
 (let ((?x161 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x161)))
 (let (($x164 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x164 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x156)))
 (let (($x158 (= ?x157 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x158 true)))
 (let (($x152 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x144 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let (($x135 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x65)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x99 $x96)))
 (let (($x120 (and $x114 $x9)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x76 $x120)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x10)))))))
 (let (($x126 (and $x87 $x112)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x82 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x82)))
 (let (($x115 (= ?x91 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x58 (= $x115 true)))
 (let (($x97 (= ?x91 input.dst.llvm-%n)))
 (let (($x95 (= $x97 true)))
 (let (($x31 (and $x95 $x58)))
 (let (($x129 (and $x31 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x138 (and $x134 $x137)))
 (let (($x142 (and $x138 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x166 (and $x160 $x165)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x81 (and (not $x25) $x166)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x37 $x81)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x7 (and $x92 $x110)))
 (let (($x69 (forall ((Lambda32 (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x19 (_ bv1 32))))
 (=> $x41 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x56 (forall ((Lambda32 (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x19 (_ bv1 32))))
 (= $x41 false)))))
 ))
 (let (($x52 (forall ((Lambda32 (_ BitVec 32)) )(let (($x45 (= false false)))
 (let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x19 (_ bv0 32))))
 (=> $x67 $x45))))))
 ))
 (let (($x29 (forall ((Lambda32 (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x19 (_ bv0 32))))
 (= $x67 true)))))
 ))
 (let (($x8 (and $x29 $x52)))
 (let (($x78 (and $x8 $x56)))
 (let (($x94 (and $x78 $x69)))
 (let (($x48 (and $x94 $x7)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x13 (and $x30 $x48)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x108 (and $x38 $x13)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x109 (and $x66 $x108)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x113 (and $x14 $x109)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x49 (and $x79 $x113)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x77 (and $x16 $x49)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x63 (and $x20 $x77)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x18 (and $x88 $x63)))
 (let (($x106 (=> $x18 $x102)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x169 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x168 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x170 (ite $x168 ?x169 (_ bv0 32))))
 (let ((?x44 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x27 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x171 (ite $x27 ?x44 ?x170)))
 (let ((?x172 (bvmul (_ bv4294967295 32) ?x171)))
 (let ((?x173 (bvneg ?x172)))
 (let (($x175 (= ?x173 ?x174)))
 (let (($x102 (= $x175 true)))
 (let ((?x161 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x161)))
 (let (($x164 (= ?x162 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x164 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x156)))
 (let (($x158 (= ?x157 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x158 true)))
 (let (($x152 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x144 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let (($x135 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x136 (= $x135 true)))
 (let (($x137 (= $x136 true)))
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x65)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x99 $x96)))
 (let (($x120 (and $x114 $x9)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x76 $x120)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x10)))))))
 (let (($x126 (and $x87 $x112)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x82 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x82)))
 (let (($x115 (= ?x91 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x58 (= $x115 true)))
 (let (($x97 (= ?x91 input.dst.llvm-%n)))
 (let (($x95 (= $x97 true)))
 (let (($x31 (and $x95 $x58)))
 (let (($x129 (and $x31 $x128)))
 (let (($x134 (and $x129 $x133)))
 (let (($x138 (and $x134 $x137)))
 (let (($x142 (and $x138 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x166 (and $x160 $x165)))
 (let (($x25 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x81 (and (not $x25) $x166)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x37 $x81)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x7 (and $x92 $x110)))
 (let (($x69 (forall ((Lambda32 (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x19 (_ bv1 32))))
 (=> $x41 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x56 (forall ((Lambda32 (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x19 (_ bv1 32))))
 (= $x41 false)))))
 ))
 (let (($x52 (forall ((Lambda32 (_ BitVec 32)) )(let (($x45 (= false false)))
 (let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x19 (_ bv0 32))))
 (=> $x67 $x45))))))
 ))
 (let (($x29 (forall ((Lambda32 (_ BitVec 32)) )(let (($x117 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x19 (ite $x117 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x19 (_ bv0 32))))
 (= $x67 true)))))
 ))
 (let (($x8 (and $x29 $x52)))
 (let (($x78 (and $x8 $x56)))
 (let (($x94 (and $x78 $x69)))
 (let (($x48 (and $x94 $x7)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x13 (and $x30 $x48)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x108 (and $x38 $x13)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x109 (and $x66 $x108)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x113 (and $x14 $x109)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x49 (and $x79 $x113)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x77 (and $x16 $x49)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x63 (and $x20 $x77)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x18 (and $x88 $x63)))
 (let (($x106 (=> $x18 $x102)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 144 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x35 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x22 (ite $x35 ?x93 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x47 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x123 (ite $x47 ?x23 ?x22)))
 (let ((?x125 (bvmul (_ bv4294967295 32) ?x123)))
 (let ((?x100 (bvneg ?x125)))
 (let (($x55 (= ?x100 ?x6)))
 (let (($x121 (= $x55 true)))
 (let ((?x113 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x113)))
 (let (($x63 (= ?x49 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x63 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x7)))
 (let (($x13 (= ?x48 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x13 true)))
 (let (($x165 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x166 (= $x165 true)))
 (let (($x81 (= $x166 true)))
 (let (($x161 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x162 (= $x161 true)))
 (let (($x163 (= $x162 true)))
 (let (($x157 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x144 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x135)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x130 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x76 $x137)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x9)))))))
 (let (($x139 (and $x129 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x74)))
 (let (($x24 (= ?x90 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x53 (= $x24 true)))
 (let (($x89 (= ?x90 input.dst.llvm-%n)))
 (let (($x10 (= $x89 true)))
 (let (($x85 (and $x10 $x53)))
 (let (($x142 (and $x85 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x164 (and $x160 $x163)))
 (let (($x110 (and $x164 $x81)))
 (let (($x109 (and $x110 $x108)))
 (let (($x27 (and $x109 $x18)))
 (let (($x72 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x168 (and (not $x72) $x27)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x169 (and $x31 $x168)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x170 (and $x95 $x169)))
 (let (($x91 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x39 (_ bv1 32))))
 (=> $x94 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x92 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x39 (_ bv1 32))))
 (= $x94 false)))))
 ))
 (let (($x64 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x39 (_ bv0 32))))
 (=> $x52 $x80))))))
 ))
 (let (($x41 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x39 (_ bv0 32))))
 (= $x52 true)))))
 ))
 (let (($x54 (and $x41 $x64)))
 (let (($x33 (and $x54 $x92)))
 (let (($x84 (and $x33 $x91)))
 (let (($x171 (and $x84 $x170)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x172 (and $x15 $x171)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x173 (and $x12 $x172)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x174 (and $x61 $x173)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x175 (and $x105 $x174)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x102 (and $x21 $x175)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x106 (and $x70 $x102)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x28 (and $x88 $x106)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x51 (and $x17 $x28)))
 (let (($x5 (=> $x51 $x121)))
 (not $x5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x35 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x22 (ite $x35 ?x93 (_ bv0 32))))
 (let ((?x23 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x47 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x123 (ite $x47 ?x23 ?x22)))
 (let ((?x125 (bvmul (_ bv4294967295 32) ?x123)))
 (let ((?x100 (bvneg ?x125)))
 (let (($x55 (= ?x100 ?x6)))
 (let (($x121 (= $x55 true)))
 (let ((?x113 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x113)))
 (let (($x63 (= ?x49 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x63 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x7)))
 (let (($x13 (= ?x48 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (= $x13 true)))
 (let (($x165 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x166 (= $x165 true)))
 (let (($x81 (= $x166 true)))
 (let (($x161 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x162 (= $x161 true)))
 (let (($x163 (= $x162 true)))
 (let (($x157 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x152 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x153 (= $x152 true)))
 (let (($x154 (= $x153 true)))
 (let (($x148 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x149 (= $x148 true)))
 (let (($x150 (= $x149 true)))
 (let (($x144 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x144 true)))
 (let (($x146 (= $x145 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x135)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x130 $x133)))
 (let (($x137 (and $x134 $x136)))
 (let (($x76 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x76 $x137)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x9)))))))
 (let (($x139 (and $x129 $x138)))
 (let (($x140 (= $x139 true)))
 (let (($x141 (= $x140 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x74)))
 (let (($x24 (= ?x90 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x53 (= $x24 true)))
 (let (($x89 (= ?x90 input.dst.llvm-%n)))
 (let (($x10 (= $x89 true)))
 (let (($x85 (and $x10 $x53)))
 (let (($x142 (and $x85 $x141)))
 (let (($x147 (and $x142 $x146)))
 (let (($x151 (and $x147 $x150)))
 (let (($x155 (and $x151 $x154)))
 (let (($x160 (and $x155 $x159)))
 (let (($x164 (and $x160 $x163)))
 (let (($x110 (and $x164 $x81)))
 (let (($x109 (and $x110 $x108)))
 (let (($x27 (and $x109 $x18)))
 (let (($x72 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x168 (and (not $x72) $x27)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x169 (and $x31 $x168)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x170 (and $x95 $x169)))
 (let (($x91 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x39 (_ bv1 32))))
 (=> $x94 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x92 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x39 (_ bv1 32))))
 (= $x94 false)))))
 ))
 (let (($x64 (forall ((Lambda32 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x39 (_ bv0 32))))
 (=> $x52 $x80))))))
 ))
 (let (($x41 (forall ((Lambda32 (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x39 (ite $x19 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x39 (_ bv0 32))))
 (= $x52 true)))))
 ))
 (let (($x54 (and $x41 $x64)))
 (let (($x33 (and $x54 $x92)))
 (let (($x84 (and $x33 $x91)))
 (let (($x171 (and $x84 $x170)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x172 (and $x15 $x171)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x173 (and $x12 $x172)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x174 (and $x61 $x173)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x175 (and $x105 $x174)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x102 (and $x21 $x175)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x106 (and $x70 $x102)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x28 (and $x88 $x106)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x51 (and $x17 $x28)))
 (let (($x5 (=> $x51 $x121)))
 (not $x5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 144 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x43 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x71 (ite $x43 ?x119 (_ bv0 32))))
 (let ((?x30 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x67 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x29 (ite $x67 ?x30 ?x71)))
 (let (($x45 (bvuge ?x29 (_ bv1 32))))
 (let (($x56 (= $x45 true)))
 (let (($x26 (= $x56 true)))
 (let ((?x175 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x175)))
 (let (($x28 (= ?x102 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x28 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x170)))
 (let (($x172 (= ?x171 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x172 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x27 (= $x18 true)))
 (let (($x168 (= $x27 true)))
 (let (($x113 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x49 (= $x113 true)))
 (let (($x77 (= $x49 true)))
 (let (($x48 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x13 (= $x48 true)))
 (let (($x108 (= $x13 true)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x161)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x156 $x159)))
 (let (($x163 (and $x160 $x162)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x142 $x163)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x149)))))))
 (let (($x165 (and $x155 $x164)))
 (let (($x166 (= $x165 true)))
 (let (($x81 (= $x166 true)))
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x120)))
 (let (($x136 (= ?x112 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x59 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x59 true)))
 (let (($x130 (= $x76 true)))
 (let (($x126 (= ?x112 input.dst.llvm-%n)))
 (let (($x127 (= $x126 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x114 true)))
 (let (($x96 (= $x65 true)))
 (let (($x129 (and $x96 $x127)))
 (let (($x131 (and $x129 $x130)))
 (let (($x135 (and $x131 $x134)))
 (let (($x138 (and $x135 $x137)))
 (let (($x110 (and $x138 $x81)))
 (let (($x109 (and $x110 $x108)))
 (let (($x63 (and $x109 $x77)))
 (let (($x169 (and $x63 $x168)))
 (let (($x174 (and $x169 $x173)))
 (let (($x47 (and $x174 $x51)))
 (let (($x104 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (and (not $x104) $x47)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (and $x85 $x35)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x22 (and $x10 $x93)))
 (let (($x90 (forall ((Lambda32 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x78 (_ bv1 32))))
 (=> $x84 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x95 (forall ((Lambda32 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x78 (_ bv1 32))))
 (= $x84 false)))))
 ))
 (let (($x37 (forall ((Lambda32 (_ BitVec 32)) )(let (($x118 (= false false)))
 (let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x78 (_ bv0 32))))
 (=> $x64 $x118))))))
 ))
 (let (($x94 (forall ((Lambda32 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x78 (_ bv0 32))))
 (= $x64 true)))))
 ))
 (let (($x73 (and $x94 $x37)))
 (let (($x115 (and $x73 $x95)))
 (let (($x83 (and $x115 $x90)))
 (let (($x123 (and $x83 $x22)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x125 (and $x38 $x123)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x100 (and $x66 $x125)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x6 (and $x14 $x100)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x55 (and $x79 $x6)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x121 (and $x32 $x55)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x5 (and $x50 $x121)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x57 (and $x111 $x5)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x87 (and $x17 $x57)))
 (let (($x69 (=> $x87 $x26)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x43 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x71 (ite $x43 ?x119 (_ bv0 32))))
 (let ((?x30 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x67 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x29 (ite $x67 ?x30 ?x71)))
 (let (($x45 (bvuge ?x29 (_ bv1 32))))
 (let (($x56 (= $x45 true)))
 (let (($x26 (= $x56 true)))
 (let ((?x175 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x175)))
 (let (($x28 (= ?x102 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x28 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x170)))
 (let (($x172 (= ?x171 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (= $x172 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x27 (= $x18 true)))
 (let (($x168 (= $x27 true)))
 (let (($x113 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x49 (= $x113 true)))
 (let (($x77 (= $x49 true)))
 (let (($x48 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x13 (= $x48 true)))
 (let (($x108 (= $x13 true)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x161)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x158)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x156 $x159)))
 (let (($x163 (and $x160 $x162)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x142 $x163)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x149)))))))
 (let (($x165 (and $x155 $x164)))
 (let (($x166 (= $x165 true)))
 (let (($x81 (= $x166 true)))
 (let ((?x120 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x120)))
 (let (($x136 (= ?x112 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (= $x136 true)))
 (let (($x132 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x59 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x76 (= $x59 true)))
 (let (($x130 (= $x76 true)))
 (let (($x126 (= ?x112 input.dst.llvm-%n)))
 (let (($x127 (= $x126 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x114 true)))
 (let (($x96 (= $x65 true)))
 (let (($x129 (and $x96 $x127)))
 (let (($x131 (and $x129 $x130)))
 (let (($x135 (and $x131 $x134)))
 (let (($x138 (and $x135 $x137)))
 (let (($x110 (and $x138 $x81)))
 (let (($x109 (and $x110 $x108)))
 (let (($x63 (and $x109 $x77)))
 (let (($x169 (and $x63 $x168)))
 (let (($x174 (and $x169 $x173)))
 (let (($x47 (and $x174 $x51)))
 (let (($x104 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x35 (and (not $x104) $x47)))
 (let (($x85 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x93 (and $x85 $x35)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x22 (and $x10 $x93)))
 (let (($x90 (forall ((Lambda32 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x78 (_ bv1 32))))
 (=> $x84 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x95 (forall ((Lambda32 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x78 (_ bv1 32))))
 (= $x84 false)))))
 ))
 (let (($x37 (forall ((Lambda32 (_ BitVec 32)) )(let (($x118 (= false false)))
 (let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x78 (_ bv0 32))))
 (=> $x64 $x118))))))
 ))
 (let (($x94 (forall ((Lambda32 (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x78 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x78 (_ bv0 32))))
 (= $x64 true)))))
 ))
 (let (($x73 (and $x94 $x37)))
 (let (($x115 (and $x73 $x95)))
 (let (($x83 (and $x115 $x90)))
 (let (($x123 (and $x83 $x22)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x125 (and $x38 $x123)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x100 (and $x66 $x125)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x6 (and $x14 $x100)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x55 (and $x79 $x6)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x121 (and $x32 $x55)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x5 (and $x50 $x121)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x57 (and $x111 $x5)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x87 (and $x17 $x57)))
 (let (($x69 (=> $x87 $x26)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 142 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x8 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x80 (ite $x8 ?x41 (_ bv0 32))))
 (let ((?x117 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x60 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x92 (ite $x60 ?x117 ?x80)))
 (let (($x82 (bvsge ?x92 (_ bv1 32))))
 (let (($x91 (= $x82 true)))
 (let (($x58 (= $x91 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x55)))
 (let (($x57 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x57 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x22)))
 (let (($x125 (= ?x123 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x125 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x47 (= $x51 true)))
 (let (($x35 (= $x47 true)))
 (let (($x175 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x102 (= $x175 true)))
 (let (($x106 (= $x102 true)))
 (let (($x171 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x113)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x7 $x108)))
 (let (($x77 (and $x109 $x49)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x142 $x77)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x162)))))))
 (let (($x18 (and $x110 $x63)))
 (let (($x27 (= $x18 true)))
 (let (($x168 (= $x27 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x150 (= ?x135 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (= $x150 true)))
 (let (($x147 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x148 (= $x147 true)))
 (let (($x146 (= $x148 true)))
 (let (($x143 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x144 (= $x143 true)))
 (let (($x154 (= $x144 true)))
 (let (($x136 (= ?x135 input.dst.llvm-%n)))
 (let (($x137 (= $x136 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x138 (and $x132 $x137)))
 (let (($x145 (and $x138 $x154)))
 (let (($x149 (and $x145 $x146)))
 (let (($x152 (and $x149 $x151)))
 (let (($x169 (and $x152 $x168)))
 (let (($x174 (and $x169 $x173)))
 (let (($x28 (and $x174 $x106)))
 (let (($x93 (and $x28 $x35)))
 (let (($x6 (and $x93 $x100)))
 (let (($x67 (and $x6 $x87)))
 (let (($x129 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and (not $x129) $x67)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x119 (and $x126 $x43)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x71 (and $x9 $x119)))
 (let (($x114 (forall ((Lambda32 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x33 (_ bv1 32))))
 (=> $x83 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x10 (forall ((Lambda32 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x33 (_ bv1 32))))
 (= $x83 false)))))
 ))
 (let (($x31 (forall ((Lambda32 (_ BitVec 32)) )(let (($x97 (= false false)))
 (let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x33 (_ bv0 32))))
 (=> $x37 $x97))))))
 ))
 (let (($x84 (forall ((Lambda32 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x33 (_ bv0 32))))
 (= $x37 true)))))
 ))
 (let (($x86 (and $x84 $x31)))
 (let (($x24 (and $x86 $x10)))
 (let (($x65 (and $x24 $x114)))
 (let (($x29 (and $x65 $x71)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x45 (and $x12 $x29)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x56 (and $x61 $x45)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x26 (and $x105 $x56)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x69 (and $x21 $x26)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x68 (and $x16 $x69)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x140 (and $x62 $x68)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x52 (and $x11 $x140)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x15 (and $x88 $x52)))
 (let (($x72 (=> $x15 $x58)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x8 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x80 (ite $x8 ?x41 (_ bv0 32))))
 (let ((?x117 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x60 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x92 (ite $x60 ?x117 ?x80)))
 (let (($x82 (bvsge ?x92 (_ bv1 32))))
 (let (($x91 (= $x82 true)))
 (let (($x58 (= $x91 true)))
 (let ((?x55 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x55)))
 (let (($x57 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x87 (= $x57 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x22)))
 (let (($x125 (= ?x123 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x125 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x47 (= $x51 true)))
 (let (($x35 (= $x47 true)))
 (let (($x175 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x102 (= $x175 true)))
 (let (($x106 (= $x102 true)))
 (let (($x171 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x172 (= $x171 true)))
 (let (($x173 (= $x172 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x113)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x7 $x108)))
 (let (($x77 (and $x109 $x49)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x142 $x77)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x162)))))))
 (let (($x18 (and $x110 $x63)))
 (let (($x27 (= $x18 true)))
 (let (($x168 (= $x27 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x134)))
 (let (($x150 (= ?x135 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (= $x150 true)))
 (let (($x147 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x148 (= $x147 true)))
 (let (($x146 (= $x148 true)))
 (let (($x143 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x144 (= $x143 true)))
 (let (($x154 (= $x144 true)))
 (let (($x136 (= ?x135 input.dst.llvm-%n)))
 (let (($x137 (= $x136 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x138 (and $x132 $x137)))
 (let (($x145 (and $x138 $x154)))
 (let (($x149 (and $x145 $x146)))
 (let (($x152 (and $x149 $x151)))
 (let (($x169 (and $x152 $x168)))
 (let (($x174 (and $x169 $x173)))
 (let (($x28 (and $x174 $x106)))
 (let (($x93 (and $x28 $x35)))
 (let (($x6 (and $x93 $x100)))
 (let (($x67 (and $x6 $x87)))
 (let (($x129 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (and (not $x129) $x67)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x119 (and $x126 $x43)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x71 (and $x9 $x119)))
 (let (($x114 (forall ((Lambda32 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x33 (_ bv1 32))))
 (=> $x83 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x10 (forall ((Lambda32 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x33 (_ bv1 32))))
 (= $x83 false)))))
 ))
 (let (($x31 (forall ((Lambda32 (_ BitVec 32)) )(let (($x97 (= false false)))
 (let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x33 (_ bv0 32))))
 (=> $x37 $x97))))))
 ))
 (let (($x84 (forall ((Lambda32 (_ BitVec 32)) )(let (($x78 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x33 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x33 (_ bv0 32))))
 (= $x37 true)))))
 ))
 (let (($x86 (and $x84 $x31)))
 (let (($x24 (and $x86 $x10)))
 (let (($x65 (and $x24 $x114)))
 (let (($x29 (and $x65 $x71)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x45 (and $x12 $x29)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x56 (and $x61 $x45)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x26 (and $x105 $x56)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x69 (and $x21 $x26)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x68 (and $x16 $x69)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x140 (and $x62 $x68)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x52 (and $x11 $x140)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x15 (and $x88 $x52)))
 (let (($x72 (=> $x15 $x58)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000001fc)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000001ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000001fc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x58 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x44 (ite $x58 ?x72 (_ bv0 32))))
 (let ((?x91 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x82 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x155 (ite $x82 ?x91 ?x44)))
 (let (($x64 (bvsge ?x155 (_ bv0 32))))
 (let (($x38 (= $x64 true)))
 (let (($x99 (= $x38 true)))
 (let ((?x67 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x67)))
 (let (($x71 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x71 true)))
 (let ((?x55 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x55)))
 (let (($x5 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x5 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x125 (= $x123 true)))
 (let (($x100 (= $x125 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x35 (= $x47 true)))
 (let (($x93 (= $x35 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x171)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x18 $x169)))
 (let (($x173 (and $x170 $x172)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x165 $x173)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x175 (and $x63 $x174)))
 (let (($x102 (= $x175 true)))
 (let (($x106 (= $x102 true)))
 (let ((?x146 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x146)))
 (let (($x160 (= ?x149 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (= $x160 true)))
 (let (($x156 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x157 (= $x156 true)))
 (let (($x81 (= $x157 true)))
 (let (($x150 (= ?x149 input.dst.llvm-%n)))
 (let (($x151 (= $x150 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x154 true)))
 (let (($x147 (= $x145 true)))
 (let (($x152 (and $x147 $x151)))
 (let (($x158 (and $x152 $x81)))
 (let (($x159 (and $x158 $x161)))
 (let (($x28 (and $x159 $x106)))
 (let (($x22 (and $x28 $x93)))
 (let (($x6 (and $x22 $x100)))
 (let (($x87 (and $x6 $x57)))
 (let (($x45 (and $x87 $x29)))
 (let (($x138 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and (not $x138) $x45)))
 (let (($x136 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x69 (and $x136 $x26)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x68 (and $x133 $x69)))
 (let (($x130 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x115 (_ bv1 32))))
 (=> $x65 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x9 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x115 (_ bv1 32))))
 (= $x65 false)))))
 ))
 (let (($x85 (forall ((Lambda32 (_ BitVec 32)) )(let (($x89 (= false false)))
 (let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x115 (_ bv0 32))))
 (=> $x31 $x89))))))
 ))
 (let (($x83 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x115 (_ bv0 32))))
 (= $x31 true)))))
 ))
 (let (($x128 (and $x83 $x85)))
 (let (($x120 (and $x128 $x9)))
 (let (($x131 (and $x120 $x130)))
 (let (($x140 (and $x131 $x68)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x52 (and $x66 $x140)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x15 (and $x14 $x52)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x60 (and $x79 $x15)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x117 (and $x32 $x60)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x8 (and $x70 $x117)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x41 (and $x111 $x8)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x80 (and $x17 $x41)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x92 (and $x139 $x80)))
 (let (($x19 (=> $x92 $x99)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x58 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x44 (ite $x58 ?x72 (_ bv0 32))))
 (let ((?x91 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x82 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x155 (ite $x82 ?x91 ?x44)))
 (let (($x64 (bvsge ?x155 (_ bv0 32))))
 (let (($x38 (= $x64 true)))
 (let (($x99 (= $x38 true)))
 (let ((?x67 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x67)))
 (let (($x71 (= ?x43 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x71 true)))
 (let ((?x55 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x55)))
 (let (($x5 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x5 true)))
 (let (($x123 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x125 (= $x123 true)))
 (let (($x100 (= $x125 true)))
 (let (($x47 (bvsge input.spec-%var-r-0.L2%7%bbentry (_ bv0 32))))
 (let (($x35 (= $x47 true)))
 (let (($x93 (= $x35 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x171)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x18 $x169)))
 (let (($x173 (and $x170 $x172)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x165 $x173)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x13)))))))
 (let (($x175 (and $x63 $x174)))
 (let (($x102 (= $x175 true)))
 (let (($x106 (= $x102 true)))
 (let ((?x146 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x146)))
 (let (($x160 (= ?x149 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (= $x160 true)))
 (let (($x156 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x157 (= $x156 true)))
 (let (($x81 (= $x157 true)))
 (let (($x150 (= ?x149 input.dst.llvm-%n)))
 (let (($x151 (= $x150 true)))
 (let (($x154 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x154 true)))
 (let (($x147 (= $x145 true)))
 (let (($x152 (and $x147 $x151)))
 (let (($x158 (and $x152 $x81)))
 (let (($x159 (and $x158 $x161)))
 (let (($x28 (and $x159 $x106)))
 (let (($x22 (and $x28 $x93)))
 (let (($x6 (and $x22 $x100)))
 (let (($x87 (and $x6 $x57)))
 (let (($x45 (and $x87 $x29)))
 (let (($x138 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and (not $x138) $x45)))
 (let (($x136 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x69 (and $x136 $x26)))
 (let (($x133 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x68 (and $x133 $x69)))
 (let (($x130 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x115 (_ bv1 32))))
 (=> $x65 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x9 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x115 (_ bv1 32))))
 (= $x65 false)))))
 ))
 (let (($x85 (forall ((Lambda32 (_ BitVec 32)) )(let (($x89 (= false false)))
 (let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x115 (_ bv0 32))))
 (=> $x31 $x89))))))
 ))
 (let (($x83 (forall ((Lambda32 (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x115 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x115 (_ bv0 32))))
 (= $x31 true)))))
 ))
 (let (($x128 (and $x83 $x85)))
 (let (($x120 (and $x128 $x9)))
 (let (($x131 (and $x120 $x130)))
 (let (($x140 (and $x131 $x68)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x52 (and $x66 $x140)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x15 (and $x14 $x52)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x60 (and $x79 $x15)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x117 (and $x32 $x60)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x8 (and $x70 $x117)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x41 (and $x111 $x8)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x80 (and $x17 $x41)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x92 (and $x139 $x80)))
 (let (($x19 (=> $x92 $x99)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000208)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80800008)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000208)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80800008)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80800008)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x90000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x90000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x90000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (bvuge ?x54 (_ bv1 32))))
 (let (($x37 (= $x163 true)))
 (let (($x12 (= $x37 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x52)))
 (let (($x60 (= ?x15 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x60 true)))
 (let (($x26 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x69 (= $x26 true)))
 (let (($x68 (= $x69 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (= $x119 true)))
 (let (($x29 (= $x71 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x100)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x35 $x123)))
 (let (($x55 (and $x125 $x6)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x27 $x55)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x174)))))))
 (let (($x5 (and $x47 $x121)))
 (let (($x57 (= $x5 true)))
 (let (($x87 (= $x57 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x166)))
 (let (($x113 (= ?x110 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x49 (= $x113 true)))
 (let (($x142 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x13 (= $x142 true)))
 (let (($x108 (= $x13 true)))
 (let (($x141 (= ?x110 input.dst.llvm-%n)))
 (let (($x7 (= $x141 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x81)))
 (let (($x161 (= ?x158 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x161 true)))
 (let (($x48 (and $x159 $x7)))
 (let (($x109 (and $x48 $x108)))
 (let (($x63 (and $x109 $x49)))
 (let (($x67 (and $x63 $x87)))
 (let (($x45 (and $x67 $x29)))
 (let (($x140 (and $x45 $x68)))
 (let (($x8 (and $x140 $x117)))
 (let (($x152 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and (not $x152) $x8)))
 (let (($x150 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (and $x150 $x80)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x82 (and $x148 $x92)))
 (let (($x154 (forall ((Lambda32 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x24 (_ bv1 32))))
 (=> $x131 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x133 (forall ((Lambda32 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x24 (_ bv1 32))))
 (= $x131 false)))))
 ))
 (let (($x126 (forall ((Lambda32 (_ BitVec 32)) )(let (($x96 (= false false)))
 (let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x24 (_ bv0 32))))
 (=> $x85 $x96))))))
 ))
 (let (($x65 (forall ((Lambda32 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x24 (_ bv0 32))))
 (= $x85 true)))))
 ))
 (let (($x59 (and $x65 $x126)))
 (let (($x134 (and $x59 $x133)))
 (let (($x145 (and $x134 $x154)))
 (let (($x91 (and $x145 $x82)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x58 (and $x61 $x91)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x72 (and $x105 $x58)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x44 (and $x21 $x72)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x155 (and $x16 $x44)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x64 (and $x50 $x155)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x38 (and $x11 $x64)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x99 (and $x88 $x38)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x19 (and $x153 $x99)))
 (let (($x127 (=> $x19 $x12)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (bvuge ?x54 (_ bv1 32))))
 (let (($x37 (= $x163 true)))
 (let (($x12 (= $x37 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x52)))
 (let (($x60 (= ?x15 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x60 true)))
 (let (($x26 (bvuge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv1 32))))
 (let (($x69 (= $x26 true)))
 (let (($x68 (= $x69 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (= $x119 true)))
 (let (($x29 (= $x71 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x100)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x35 $x123)))
 (let (($x55 (and $x125 $x6)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x27 $x55)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x174)))))))
 (let (($x5 (and $x47 $x121)))
 (let (($x57 (= $x5 true)))
 (let (($x87 (= $x57 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x166)))
 (let (($x113 (= ?x110 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x49 (= $x113 true)))
 (let (($x142 (bvuge input.spec-%var-i-0.L2%7%bbentry (_ bv1 32))))
 (let (($x13 (= $x142 true)))
 (let (($x108 (= $x13 true)))
 (let (($x141 (= ?x110 input.dst.llvm-%n)))
 (let (($x7 (= $x141 true)))
 (let ((?x81 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x81)))
 (let (($x161 (= ?x158 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x161 true)))
 (let (($x48 (and $x159 $x7)))
 (let (($x109 (and $x48 $x108)))
 (let (($x63 (and $x109 $x49)))
 (let (($x67 (and $x63 $x87)))
 (let (($x45 (and $x67 $x29)))
 (let (($x140 (and $x45 $x68)))
 (let (($x8 (and $x140 $x117)))
 (let (($x152 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and (not $x152) $x8)))
 (let (($x150 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (and $x150 $x80)))
 (let (($x148 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x82 (and $x148 $x92)))
 (let (($x154 (forall ((Lambda32 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x24 (_ bv1 32))))
 (=> $x131 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x133 (forall ((Lambda32 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x24 (_ bv1 32))))
 (= $x131 false)))))
 ))
 (let (($x126 (forall ((Lambda32 (_ BitVec 32)) )(let (($x96 (= false false)))
 (let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x24 (_ bv0 32))))
 (=> $x85 $x96))))))
 ))
 (let (($x65 (forall ((Lambda32 (_ BitVec 32)) )(let (($x115 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x24 (ite $x115 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x24 (_ bv0 32))))
 (= $x85 true)))))
 ))
 (let (($x59 (and $x65 $x126)))
 (let (($x134 (and $x59 $x133)))
 (let (($x145 (and $x134 $x154)))
 (let (($x91 (and $x145 $x82)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x58 (and $x61 $x91)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x72 (and $x105 $x58)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x44 (and $x21 $x72)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x155 (and $x16 $x44)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x64 (and $x50 $x155)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x38 (and $x11 $x64)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x99 (and $x88 $x38)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x19 (and $x153 $x99)))
 (let (($x127 (=> $x19 $x12)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x137 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x66 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x78 (ite $x66 ?x137 (_ bv0 32))))
 (let ((?x31 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x165 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x86 (ite $x165 ?x31 ?x78)))
 (let ((?x83 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x89 (bvneg ?x83)))
 (let (($x76 (= ?x89 ?x9)))
 (let (($x130 (= $x76 true)))
 (let ((?x80 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x80)))
 (let (($x91 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x91 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x140)))
 (let (($x15 (= ?x52 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x15 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x45 true)))
 (let (($x69 (= $x26 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x121)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x123 $x6)))
 (let (($x57 (and $x55 $x5)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x172 $x57)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x28)))))))
 (let (($x67 (and $x22 $x87)))
 (let (($x43 (= $x67 true)))
 (let (($x119 (= $x43 true)))
 (let ((?x142 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x142)))
 (let (($x49 (= ?x13 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (= $x49 true)))
 (let (($x109 (= ?x13 input.dst.llvm-%n)))
 (let (($x113 (= $x109 true)))
 (let (($x168 (and $x113 $x63)))
 (let (($x71 (and $x168 $x119)))
 (let (($x68 (and $x71 $x69)))
 (let (($x117 (and $x68 $x60)))
 (let (($x72 (and $x117 $x58)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x155 (and (not $x7) $x72)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and $x77 $x155)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x38 (and $x159 $x64)))
 (let (($x158 (forall ((Lambda32 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x126 (_ bv1 32))))
 (=> $x147 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x146 (forall ((Lambda32 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x126 (_ bv1 32))))
 (= $x147 false)))))
 ))
 (let (($x143 (forall ((Lambda32 (_ BitVec 32)) )(let (($x133 (= false false)))
 (let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x126 (_ bv0 32))))
 (=> $x59 $x133))))))
 ))
 (let (($x132 (forall ((Lambda32 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x126 (_ bv0 32))))
 (= $x59 true)))))
 ))
 (let (($x144 (and $x132 $x143)))
 (let (($x149 (and $x144 $x146)))
 (let (($x160 (and $x149 $x158)))
 (let (($x99 (and $x160 $x38)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x19 (and $x61 $x99)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x54 (and $x105 $x19)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x163 (and $x21 $x54)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x37 (and $x16 $x163)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x12 (and $x50 $x37)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x127 (and $x11 $x12)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x39 (and $x88 $x127)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x164 (and $x153 $x39)))
 (let (($x135 (=> $x164 $x130)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x137 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x66 (= (_ bv0 32) (_ bv0 32))))
 (let ((?x78 (ite $x66 ?x137 (_ bv0 32))))
 (let ((?x31 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x165 (= (_ bv0 32) (_ bv1 32))))
 (let ((?x86 (ite $x165 ?x31 ?x78)))
 (let ((?x83 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x89 (bvneg ?x83)))
 (let (($x76 (= ?x89 ?x9)))
 (let (($x130 (= $x76 true)))
 (let ((?x80 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x80)))
 (let (($x91 (= ?x92 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x91 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x140)))
 (let (($x15 (= ?x52 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x60 (= $x15 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x45 true)))
 (let (($x69 (= $x26 true)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x121)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x123 $x6)))
 (let (($x57 (and $x55 $x5)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x172 $x57)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x28)))))))
 (let (($x67 (and $x22 $x87)))
 (let (($x43 (= $x67 true)))
 (let (($x119 (= $x43 true)))
 (let ((?x142 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x142)))
 (let (($x49 (= ?x13 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (= $x49 true)))
 (let (($x109 (= ?x13 input.dst.llvm-%n)))
 (let (($x113 (= $x109 true)))
 (let (($x168 (and $x113 $x63)))
 (let (($x71 (and $x168 $x119)))
 (let (($x68 (and $x71 $x69)))
 (let (($x117 (and $x68 $x60)))
 (let (($x72 (and $x117 $x58)))
 (let (($x7 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x155 (and (not $x7) $x72)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (and $x77 $x155)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x38 (and $x159 $x64)))
 (let (($x158 (forall ((Lambda32 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x126 (_ bv1 32))))
 (=> $x147 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x146 (forall ((Lambda32 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x126 (_ bv1 32))))
 (= $x147 false)))))
 ))
 (let (($x143 (forall ((Lambda32 (_ BitVec 32)) )(let (($x133 (= false false)))
 (let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x126 (_ bv0 32))))
 (=> $x59 $x133))))))
 ))
 (let (($x132 (forall ((Lambda32 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x126 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x126 (_ bv0 32))))
 (= $x59 true)))))
 ))
 (let (($x144 (and $x132 $x143)))
 (let (($x149 (and $x144 $x146)))
 (let (($x160 (and $x149 $x158)))
 (let (($x99 (and $x160 $x38)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x19 (and $x61 $x99)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x54 (and $x105 $x19)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x163 (and $x21 $x54)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x37 (and $x16 $x163)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x12 (and $x50 $x37)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x127 (and $x11 $x12)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x39 (and $x88 $x127)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x164 (and $x153 $x39)))
 (let (($x135 (=> $x164 $x130)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 124 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x115 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x152 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x65 (ite $x152 ?x115 (_ bv0 32))))
 (let ((?x33 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x128 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x96 (ite $x128 ?x33 ?x65)))
 (let ((?x120 (bvmul (_ bv4294967295 32) ?x96)))
 (let ((?x134 (bvneg ?x120)))
 (let (($x145 (= ?x134 ?x154)))
 (let (($x150 (= $x145 true)))
 (let ((?x12 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x12)))
 (let (($x164 (= ?x127 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x164 true)))
 (let ((?x38 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x38)))
 (let (($x19 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x19 true)))
 (let (($x58 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x58 true)))
 (let (($x155 (= $x72 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x52)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x45 $x68)))
 (let (($x60 (and $x140 $x15)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x123 $x60)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x57)))))))
 (let (($x8 (and $x29 $x117)))
 (let (($x80 (= $x8 true)))
 (let (($x92 (= $x80 true)))
 (let ((?x102 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x102)))
 (let (($x18 (= ?x106 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x27 (= $x18 true)))
 (let (($x28 (= ?x106 input.dst.llvm-%n)))
 (let (($x47 (= $x28 true)))
 (let (($x35 (and $x47 $x27)))
 (let (($x82 (and $x35 $x92)))
 (let (($x64 (and $x82 $x155)))
 (let (($x163 (and $x64 $x54)))
 (let (($x31 (and $x163 $x165)))
 (let (($x93 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (and (not $x93) $x31)))
 (let (($x173 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x173 $x137)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x86 (and $x49 $x78)))
 (let (($x108 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x143 (_ bv1 32))))
 (=> $x161 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x166 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x143 (_ bv1 32))))
 (= $x161 false)))))
 ))
 (let (($x157 (forall ((Lambda32 (_ BitVec 32)) )(let (($x146 (= false false)))
 (let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x143 (_ bv0 32))))
 (=> $x144 $x146))))))
 ))
 (let (($x148 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x143 (_ bv0 32))))
 (= $x144 true)))))
 ))
 (let (($x81 (and $x148 $x157)))
 (let (($x110 (and $x81 $x166)))
 (let (($x109 (and $x110 $x108)))
 (let (($x83 (and $x109 $x86)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x89 (and $x61 $x83)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x9 (and $x105 $x89)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x76 (and $x21 $x9)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x130 (and $x16 $x76)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x50 $x130)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x138 (and $x11 $x135)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x169 (and $x88 $x138)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x51 (and $x153 $x169)))
 (let (($x41 (=> $x51 $x150)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvadd input.dst.llvm-%r.0.Lfor.cond%1%bbentry input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x115 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x152 (= (_ bv1 32) (_ bv0 32))))
 (let ((?x65 (ite $x152 ?x115 (_ bv0 32))))
 (let ((?x33 (bvadd input.spec-%var-i-0.L2%7%bbentry input.spec-%var-r-0.L2%7%bbentry)))
 (let (($x128 (= (_ bv1 32) (_ bv1 32))))
 (let ((?x96 (ite $x128 ?x33 ?x65)))
 (let ((?x120 (bvmul (_ bv4294967295 32) ?x96)))
 (let ((?x134 (bvneg ?x120)))
 (let (($x145 (= ?x134 ?x154)))
 (let (($x150 (= $x145 true)))
 (let ((?x12 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x12)))
 (let (($x164 (= ?x127 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x164 true)))
 (let ((?x38 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x38)))
 (let (($x19 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x19 true)))
 (let (($x58 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x58 true)))
 (let (($x155 (= $x72 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x52)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x45 $x68)))
 (let (($x60 (and $x140 $x15)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x123 $x60)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x57)))))))
 (let (($x8 (and $x29 $x117)))
 (let (($x80 (= $x8 true)))
 (let (($x92 (= $x80 true)))
 (let ((?x102 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x102)))
 (let (($x18 (= ?x106 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x27 (= $x18 true)))
 (let (($x28 (= ?x106 input.dst.llvm-%n)))
 (let (($x47 (= $x28 true)))
 (let (($x35 (and $x47 $x27)))
 (let (($x82 (and $x35 $x92)))
 (let (($x64 (and $x82 $x155)))
 (let (($x163 (and $x64 $x54)))
 (let (($x31 (and $x163 $x165)))
 (let (($x93 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x137 (and (not $x93) $x31)))
 (let (($x173 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x78 (and $x173 $x137)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x86 (and $x49 $x78)))
 (let (($x108 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x143 (_ bv1 32))))
 (=> $x161 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x166 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x143 (_ bv1 32))))
 (= $x161 false)))))
 ))
 (let (($x157 (forall ((Lambda32 (_ BitVec 32)) )(let (($x146 (= false false)))
 (let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x143 (_ bv0 32))))
 (=> $x144 $x146))))))
 ))
 (let (($x148 (forall ((Lambda32 (_ BitVec 32)) )(let (($x59 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x143 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x143 (_ bv0 32))))
 (= $x144 true)))))
 ))
 (let (($x81 (and $x148 $x157)))
 (let (($x110 (and $x81 $x166)))
 (let (($x109 (and $x110 $x108)))
 (let (($x83 (and $x109 $x86)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x89 (and $x61 $x83)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x9 (and $x105 $x89)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x76 (and $x21 $x9)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x130 (and $x16 $x76)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x135 (and $x50 $x130)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x138 (and $x11 $x135)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x169 (and $x88 $x138)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x51 (and $x153 $x169)))
 (let (($x41 (=> $x51 $x150)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 124 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (not $x150)))
 (let (($x154 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x145 (not $x154)))
 (let (($x156 (or $x145 $x41)))
 (let (($x22 (= $x156 true)))
 (let (($x170 (= $x22 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x37)))
 (let (($x76 (= ?x12 input.dst.llvm-%n)))
 (let (($x130 (= $x76 true)))
 (let ((?x31 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x31)))
 (let (($x86 (= ?x137 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x86 true)))
 (let (($x127 (= ?x12 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x39 (= $x127 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x72)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x80 $x91)))
 (let (($x64 (and $x58 $x155)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x119 $x64)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x68)))))))
 (let (($x99 (and $x8 $x38)))
 (let (($x19 (= $x99 true)))
 (let (($x54 (= $x19 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x6)))
 (let (($x55 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x55 true)))
 (let (($x163 (and $x57 $x54)))
 (let (($x164 (and $x163 $x39)))
 (let (($x89 (and $x164 $x83)))
 (let (($x135 (and $x89 $x130)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x125 $x135)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x169 (and $x18 $x138)))
 (let (($x175 (forall ((Lambda32 (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x157 (_ bv1 32))))
 (=> $x113 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x157 (_ bv1 32))))
 (= $x113 false)))))
 ))
 (let (($x142 (forall ((Lambda32 (_ BitVec 32)) )(let (($x166 (= false false)))
 (let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x157 (_ bv0 32))))
 (=> $x81 $x166))))))
 ))
 (let (($x159 (forall ((Lambda32 (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x157 (_ bv0 32))))
 (= $x81 true)))))
 ))
 (let (($x13 (and $x159 $x142)))
 (let (($x168 (and $x13 $x63)))
 (let (($x28 (and $x168 $x175)))
 (let (($x51 (and $x28 $x169)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x128 (and $x61 $x51)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x33 (and $x105 $x128)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x152 (and $x21 $x33)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x115 (and $x16 $x152)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x65 (and $x50 $x115)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x96 (and $x11 $x65)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x120 (and $x88 $x96)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x134 (and $x153 $x120)))
 (let (($x131 (=> $x134 $x170)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (not $x150)))
 (let (($x154 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x145 (not $x154)))
 (let (($x156 (or $x145 $x41)))
 (let (($x22 (= $x156 true)))
 (let (($x170 (= $x22 true)))
 (let ((?x37 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x37)))
 (let (($x76 (= ?x12 input.dst.llvm-%n)))
 (let (($x130 (= $x76 true)))
 (let ((?x31 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x31)))
 (let (($x86 (= ?x137 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x86 true)))
 (let (($x127 (= ?x12 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x39 (= $x127 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x72)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x80 $x91)))
 (let (($x64 (and $x58 $x155)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x119 $x64)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x68)))))))
 (let (($x99 (and $x8 $x38)))
 (let (($x19 (= $x99 true)))
 (let (($x54 (= $x19 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x6)))
 (let (($x55 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x57 (= $x55 true)))
 (let (($x163 (and $x57 $x54)))
 (let (($x164 (and $x163 $x39)))
 (let (($x89 (and $x164 $x83)))
 (let (($x135 (and $x89 $x130)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x125 $x135)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x169 (and $x18 $x138)))
 (let (($x175 (forall ((Lambda32 (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x157 (_ bv1 32))))
 (=> $x113 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x63 (forall ((Lambda32 (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x157 (_ bv1 32))))
 (= $x113 false)))))
 ))
 (let (($x142 (forall ((Lambda32 (_ BitVec 32)) )(let (($x166 (= false false)))
 (let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x157 (_ bv0 32))))
 (=> $x81 $x166))))))
 ))
 (let (($x159 (forall ((Lambda32 (_ BitVec 32)) )(let (($x144 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x157 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x157 (_ bv0 32))))
 (= $x81 true)))))
 ))
 (let (($x13 (and $x159 $x142)))
 (let (($x168 (and $x13 $x63)))
 (let (($x28 (and $x168 $x175)))
 (let (($x51 (and $x28 $x169)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x128 (and $x61 $x51)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x33 (and $x105 $x128)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x152 (and $x21 $x33)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x115 (and $x16 $x152)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x65 (and $x50 $x115)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x96 (and $x11 $x65)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x120 (and $x88 $x96)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x134 (and $x153 $x120)))
 (let (($x131 (=> $x134 $x170)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 114 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (not $x148)))
 (let (($x151 (= $x146 false)))
 (let (($x110 (= $x151 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x43)))
 (let (($x145 (= ?x119 input.dst.llvm-%n)))
 (let (($x150 (= $x145 true)))
 (let ((?x152 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x152)))
 (let (($x96 (= ?x115 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x96 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x9)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x137 $x83)))
 (let (($x130 (and $x89 $x76)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x155 $x130)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x37)))))))
 (let (($x138 (and $x31 $x135)))
 (let (($x169 (= $x138 true)))
 (let (($x51 (= $x169 true)))
 (let (($x80 (= ?x119 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (= $x80 true)))
 (let ((?x140 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x140)))
 (let (($x60 (= ?x52 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x8 (= $x60 true)))
 (let (($x82 (and $x8 $x92)))
 (let (($x128 (and $x82 $x51)))
 (let (($x134 (and $x128 $x120)))
 (let (($x41 (and $x134 $x150)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x156 (and $x69 $x41)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x22 (and $x117 $x156)))
 (let (($x57 (forall ((Lambda32 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x142 (_ bv1 32))))
 (=> $x47 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x27 (forall ((Lambda32 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x142 (_ bv1 32))))
 (= $x47 false)))))
 ))
 (let (($x102 (forall ((Lambda32 (_ BitVec 32)) )(let (($x63 (= false false)))
 (let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x142 (_ bv0 32))))
 (=> $x13 $x63))))))
 ))
 (let (($x49 (forall ((Lambda32 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x142 (_ bv0 32))))
 (= $x13 true)))))
 ))
 (let (($x106 (and $x49 $x102)))
 (let (($x35 (and $x106 $x27)))
 (let (($x29 (and $x35 $x57)))
 (let (($x170 (and $x29 $x22)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x131 (and $x61 $x170)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x24 (and $x105 $x131)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x87 (and $x21 $x24)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x67 (and $x16 $x87)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x147 (and $x50 $x67)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x126 (and $x11 $x147)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x93 (and $x88 $x126)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x59 (and $x153 $x93)))
 (let (($x108 (=> $x59 $x110)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (not $x148)))
 (let (($x151 (= $x146 false)))
 (let (($x110 (= $x151 true)))
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x43)))
 (let (($x145 (= ?x119 input.dst.llvm-%n)))
 (let (($x150 (= $x145 true)))
 (let ((?x152 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x152)))
 (let (($x96 (= ?x115 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x96 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x9)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x137 $x83)))
 (let (($x130 (and $x89 $x76)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x155 $x130)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x37)))))))
 (let (($x138 (and $x31 $x135)))
 (let (($x169 (= $x138 true)))
 (let (($x51 (= $x169 true)))
 (let (($x80 (= ?x119 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (= $x80 true)))
 (let ((?x140 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x140)))
 (let (($x60 (= ?x52 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x8 (= $x60 true)))
 (let (($x82 (and $x8 $x92)))
 (let (($x128 (and $x82 $x51)))
 (let (($x134 (and $x128 $x120)))
 (let (($x41 (and $x134 $x150)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x156 (and $x69 $x41)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x22 (and $x117 $x156)))
 (let (($x57 (forall ((Lambda32 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x142 (_ bv1 32))))
 (=> $x47 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x27 (forall ((Lambda32 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x142 (_ bv1 32))))
 (= $x47 false)))))
 ))
 (let (($x102 (forall ((Lambda32 (_ BitVec 32)) )(let (($x63 (= false false)))
 (let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x142 (_ bv0 32))))
 (=> $x13 $x63))))))
 ))
 (let (($x49 (forall ((Lambda32 (_ BitVec 32)) )(let (($x81 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x142 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x142 (_ bv0 32))))
 (= $x13 true)))))
 ))
 (let (($x106 (and $x49 $x102)))
 (let (($x35 (and $x106 $x27)))
 (let (($x29 (and $x35 $x57)))
 (let (($x170 (and $x29 $x22)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x131 (and $x61 $x170)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x24 (and $x105 $x131)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x87 (and $x21 $x24)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x67 (and $x16 $x87)))
 (let (($x50 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x147 (and $x50 $x67)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x126 (and $x11 $x147)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x93 (and $x88 $x126)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x59 (and $x153 $x93)))
 (let (($x108 (=> $x59 $x110)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x006a8080)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x006a8083)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x006a8080)
  (define-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x28 (or $x168 $x175)))
 (let (($x125 (= $x28 true)))
 (let (($x6 (= $x125 true)))
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x150)))
 (let (($x148 (= ?x41 input.dst.llvm-%n)))
 (let (($x146 (= $x148 true)))
 (let ((?x24 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x24)))
 (let (($x147 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x147 true)))
 (let (($x156 (= ?x41 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x22 (= $x156 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x152)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x138 $x128)))
 (let (($x65 (and $x33 $x115)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x39 $x65)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x86)))))))
 (let (($x120 (and $x135 $x96)))
 (let (($x134 (= $x120 true)))
 (let (($x154 (= $x134 true)))
 (let ((?x165 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x165)))
 (let (($x163 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x163 true)))
 (let (($x145 (and $x19 $x154)))
 (let (($x170 (and $x145 $x22)))
 (let (($x93 (and $x170 $x126)))
 (let (($x151 (and $x93 $x146)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x82 $x151)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x108 (and $x119 $x110)))
 (let (($x60 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x171 (_ bv1 32))))
 (=> $x29 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x117 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x171 (_ bv1 32))))
 (= $x29 false)))))
 ))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x18 (= false false)))
 (let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x171 (_ bv0 32))))
 (=> $x102 $x18))))))
 ))
 (let (($x47 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x171 (_ bv0 32))))
 (= $x102 true)))))
 ))
 (let (($x5 (and $x47 $x100)))
 (let (($x123 (and $x5 $x117)))
 (let (($x8 (and $x123 $x60)))
 (let (($x109 (and $x8 $x108)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x58 (and $x14 $x109)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x161 (and $x79 $x58)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x143 (and $x32 $x161)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x71 (and $x70 $x143)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x144 (and $x62 $x71)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x159 (and $x17 $x144)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x166 (and $x139 $x159)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x141 (and $x20 $x166)))
 (let (($x121 (=> $x141 $x6)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x28 (or $x168 $x175)))
 (let (($x125 (= $x28 true)))
 (let (($x6 (= $x125 true)))
 (let ((?x150 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x150)))
 (let (($x148 (= ?x41 input.dst.llvm-%n)))
 (let (($x146 (= $x148 true)))
 (let ((?x24 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x24)))
 (let (($x147 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x147 true)))
 (let (($x156 (= ?x41 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x22 (= $x156 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x152)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x138 $x128)))
 (let (($x65 (and $x33 $x115)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x39 $x65)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x86)))))))
 (let (($x120 (and $x135 $x96)))
 (let (($x134 (= $x120 true)))
 (let (($x154 (= $x134 true)))
 (let ((?x165 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x165)))
 (let (($x163 (= ?x99 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x163 true)))
 (let (($x145 (and $x19 $x154)))
 (let (($x170 (and $x145 $x22)))
 (let (($x93 (and $x170 $x126)))
 (let (($x151 (and $x93 $x146)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x82 $x151)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x108 (and $x119 $x110)))
 (let (($x60 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x171 (_ bv1 32))))
 (=> $x29 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x117 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x171 (_ bv1 32))))
 (= $x29 false)))))
 ))
 (let (($x100 (forall ((Lambda32 (_ BitVec 32)) )(let (($x18 (= false false)))
 (let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x171 (_ bv0 32))))
 (=> $x102 $x18))))))
 ))
 (let (($x47 (forall ((Lambda32 (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x171 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x171 (_ bv0 32))))
 (= $x102 true)))))
 ))
 (let (($x5 (and $x47 $x100)))
 (let (($x123 (and $x5 $x117)))
 (let (($x8 (and $x123 $x60)))
 (let (($x109 (and $x8 $x108)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x58 (and $x14 $x109)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x161 (and $x79 $x58)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x143 (and $x32 $x161)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x71 (and $x70 $x143)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x144 (and $x62 $x71)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x159 (and $x17 $x144)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x166 (and $x139 $x159)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x141 (and $x20 $x166)))
 (let (($x121 (=> $x141 $x6)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 112 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x66 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x66 true)))
 (let (($x7 (= $x174 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x6)))
 (let (($x37 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x37 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x71)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x108 $x161)))
 (let (($x159 (and $x143 $x144)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x22 $x159)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x126)))))))
 (let (($x141 (and $x110 $x166)))
 (let (($x168 (= $x141 true)))
 (let (($x175 (= $x168 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x138)))
 (let (($x134 (= ?x169 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (= $x134 true)))
 (let ((?x152 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x152)))
 (let (($x65 (= ?x115 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x65 true)))
 (let (($x51 (= ?x169 input.dst.llvm-%n)))
 (let (($x128 (= $x51 true)))
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (not $x9)))
 (let (($x135 (= $x76 true)))
 (let (($x127 (= $x135 true)))
 (let (($x33 (and $x127 $x128)))
 (let (($x120 (and $x33 $x96)))
 (let (($x145 (and $x120 $x154)))
 (let (($x28 (and $x145 $x175)))
 (let (($x13 (and $x28 $x12)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x61 (and $x86 $x13)))
 (let (($x78 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x45 (and $x78 $x61)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x157 (and $x130 $x45)))
 (let (($x19 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x35 (_ bv1 32))))
 (=> $x8 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x119 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x35 (_ bv1 32))))
 (= $x8 false)))))
 ))
 (let (($x69 (forall ((Lambda32 (_ BitVec 32)) )(let (($x172 (= false false)))
 (let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x35 (_ bv0 32))))
 (=> $x100 $x172))))))
 ))
 (let (($x29 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x35 (_ bv0 32))))
 (= $x100 true)))))
 ))
 (let (($x52 (and $x29 $x69)))
 (let (($x80 (and $x52 $x119)))
 (let (($x164 (and $x80 $x19)))
 (let (($x113 (and $x164 $x157)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x49 (and $x105 $x113)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x63 (and $x21 $x49)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x27 (and $x16 $x63)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x55 (and $x50 $x27)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x57 (and $x111 $x55)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x26 (and $x88 $x57)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x68 (and $x162 $x26)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x140 (and $x64 $x68)))
 (let (($x85 (=> $x140 $x7)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x66 (= input.spec-%var-r-0.L2%7%bbentry input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x66 true)))
 (let (($x7 (= $x174 true)))
 (let ((?x6 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x6)))
 (let (($x37 (= ?x121 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x37 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x71)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x108 $x161)))
 (let (($x159 (and $x143 $x144)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x22 $x159)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x126)))))))
 (let (($x141 (and $x110 $x166)))
 (let (($x168 (= $x141 true)))
 (let (($x175 (= $x168 true)))
 (let ((?x138 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x138)))
 (let (($x134 (= ?x169 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (= $x134 true)))
 (let ((?x152 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x152)))
 (let (($x65 (= ?x115 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x65 true)))
 (let (($x51 (= ?x169 input.dst.llvm-%n)))
 (let (($x128 (= $x51 true)))
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (not $x9)))
 (let (($x135 (= $x76 true)))
 (let (($x127 (= $x135 true)))
 (let (($x33 (and $x127 $x128)))
 (let (($x120 (and $x33 $x96)))
 (let (($x145 (and $x120 $x154)))
 (let (($x28 (and $x145 $x175)))
 (let (($x13 (and $x28 $x12)))
 (let (($x86 (bvsgt input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x61 (and $x86 $x13)))
 (let (($x78 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x45 (and $x78 $x61)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x157 (and $x130 $x45)))
 (let (($x19 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x35 (_ bv1 32))))
 (=> $x8 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x119 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x35 (_ bv1 32))))
 (= $x8 false)))))
 ))
 (let (($x69 (forall ((Lambda32 (_ BitVec 32)) )(let (($x172 (= false false)))
 (let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x35 (_ bv0 32))))
 (=> $x100 $x172))))))
 ))
 (let (($x29 (forall ((Lambda32 (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x35 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x35 (_ bv0 32))))
 (= $x100 true)))))
 ))
 (let (($x52 (and $x29 $x69)))
 (let (($x80 (and $x52 $x119)))
 (let (($x164 (and $x80 $x19)))
 (let (($x113 (and $x164 $x157)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x49 (and $x105 $x113)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x63 (and $x21 $x49)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x27 (and $x16 $x63)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x55 (and $x50 $x27)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x57 (and $x111 $x55)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x26 (and $x88 $x57)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x68 (and $x162 $x26)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x140 (and $x64 $x68)))
 (let (($x85 (=> $x140 $x7)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 117 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (not $x14)))
 (let (($x81 (or $x14 $x38)))
 (let (($x106 (= $x81 true)))
 (let (($x47 (= $x106 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x134)))
 (let (($x63 (= ?x154 input.dst.llvm-%n)))
 (let (($x27 (= $x63 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x12)))
 (let (($x45 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x45 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x141)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x143 $x159)))
 (let (($x175 (and $x166 $x168)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x147 $x175)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x146 $x110)))))))
 (let (($x125 (and $x161 $x28)))
 (let (($x6 (= $x125 true)))
 (let (($x121 (= $x6 true)))
 (let (($x145 (= ?x154 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x170 (= $x145 true)))
 (let ((?x152 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x152)))
 (let (($x96 (= ?x115 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x96 true)))
 (let (($x131 (and $x120 $x170)))
 (let (($x173 (and $x131 $x121)))
 (let (($x113 (and $x173 $x157)))
 (let (($x55 (and $x113 $x27)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x57 (and $x51 $x55)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x26 (and $x39 $x57)))
 (let (($x76 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x123 (_ bv1 32))))
 (=> $x164 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x130 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x123 (_ bv1 32))))
 (= $x164 false)))))
 ))
 (let (($x82 (forall ((Lambda32 (_ BitVec 32)) )(let (($x43 (= false false)))
 (let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x123 (_ bv0 32))))
 (=> $x69 $x43))))))
 ))
 (let (($x8 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x123 (_ bv0 32))))
 (= $x69 true)))))
 ))
 (let (($x54 (and $x8 $x82)))
 (let (($x72 (and $x54 $x130)))
 (let (($x135 (and $x72 $x76)))
 (let (($x68 (and $x135 $x26)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x140 (and $x79 $x68)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x66 (and $x32 $x140)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x174 (and $x70 $x66)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x7 (and $x62 $x174)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x85 (and $x11 $x7)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x132 (and $x139 $x85)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x41 (and $x91 $x132)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x102 (and $x20 $x41)))
 (let (($x18 (=> $x102 $x47)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%r.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-r-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (not $x14)))
 (let (($x81 (or $x14 $x38)))
 (let (($x106 (= $x81 true)))
 (let (($x47 (= $x106 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x134)))
 (let (($x63 (= ?x154 input.dst.llvm-%n)))
 (let (($x27 (= $x63 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x12)))
 (let (($x45 (= ?x13 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x45 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x141)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x143 $x159)))
 (let (($x175 (and $x166 $x168)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x147 $x175)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x146 $x110)))))))
 (let (($x125 (and $x161 $x28)))
 (let (($x6 (= $x125 true)))
 (let (($x121 (= $x6 true)))
 (let (($x145 (= ?x154 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x170 (= $x145 true)))
 (let ((?x152 (bvmul input.spec-%var-r-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x152)))
 (let (($x96 (= ?x115 input.dst.llvm-%r.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x96 true)))
 (let (($x131 (and $x120 $x170)))
 (let (($x173 (and $x131 $x121)))
 (let (($x113 (and $x173 $x157)))
 (let (($x55 (and $x113 $x27)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x57 (and $x51 $x55)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x26 (and $x39 $x57)))
 (let (($x76 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x123 (_ bv1 32))))
 (=> $x164 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x130 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x123 (_ bv1 32))))
 (= $x164 false)))))
 ))
 (let (($x82 (forall ((Lambda32 (_ BitVec 32)) )(let (($x43 (= false false)))
 (let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x123 (_ bv0 32))))
 (=> $x69 $x43))))))
 ))
 (let (($x8 (forall ((Lambda32 (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x123 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x123 (_ bv0 32))))
 (= $x69 true)))))
 ))
 (let (($x54 (and $x8 $x82)))
 (let (($x72 (and $x54 $x130)))
 (let (($x135 (and $x72 $x76)))
 (let (($x68 (and $x135 $x26)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x140 (and $x79 $x68)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x66 (and $x32 $x140)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x174 (and $x70 $x66)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x7 (and $x62 $x174)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x85 (and $x11 $x7)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x132 (and $x139 $x85)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x41 (and $x91 $x132)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x102 (and $x20 $x41)))
 (let (($x18 (=> $x102 $x47)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 112 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x6)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x141 $x28)))
 (let (($x173 (and $x125 $x121)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x166 $x173)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x109)))))))
 (let (($x142 (and $x144 $x37)))
 (let (($x5 (= $x142 true)))
 (let (($x29 (= $x5 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x26 (concat ?x27 (concat ?x157 ?x61)))))
 (let (($x41 (= ?x68 input.dst.llvm-%n)))
 (let (($x102 (= $x41 true)))
 (let (($x140 (= input.dst.llvm-%n ?x68)))
 (let (($x7 (and (and (and $x144 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x37) $x140)))
 (let (($x85 (= $x7 true)))
 (let (($x132 (= $x85 true)))
 (let (($x14 (and $x132 $x102)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x38 (and $x87 $x14)))
 (let (($x145 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x81 (and $x145 $x38)))
 (let (($x120 (forall ((Lambda32 (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x82 (_ bv1 32))))
 (=> $x127 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x138 (forall ((Lambda32 (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x82 (_ bv1 32))))
 (= $x127 false)))))
 ))
 (let (($x89 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (= false false)))
 (let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x82 (_ bv0 32))))
 (=> $x54 $x130))))))
 ))
 (let (($x31 (forall ((Lambda32 (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x82 (_ bv0 32))))
 (= $x54 true)))))
 ))
 (let (($x9 (and $x31 $x89)))
 (let (($x169 (and $x9 $x138)))
 (let (($x134 (and $x169 $x120)))
 (let (($x106 (and $x134 $x81)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x47 (and $x79 $x106)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x18 (and $x32 $x47)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x117 (and $x70 $x18)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x151 (and $x62 $x117)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x24 (and $x11 $x151)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x100 (and $x139 $x24)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x105 (and $x91 $x100)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x155 (and $x20 $x105)))
 (let (($x172 (=> $x155 $x29)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x6)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x141 $x28)))
 (let (($x173 (and $x125 $x121)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x166 $x173)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x109)))))))
 (let (($x142 (and $x144 $x37)))
 (let (($x5 (= $x142 true)))
 (let (($x29 (= $x5 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x26 (concat ?x27 (concat ?x157 ?x61)))))
 (let (($x41 (= ?x68 input.dst.llvm-%n)))
 (let (($x102 (= $x41 true)))
 (let (($x140 (= input.dst.llvm-%n ?x68)))
 (let (($x7 (and (and (and $x144 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x37) $x140)))
 (let (($x85 (= $x7 true)))
 (let (($x132 (= $x85 true)))
 (let (($x14 (and $x132 $x102)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x38 (and $x87 $x14)))
 (let (($x145 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x81 (and $x145 $x38)))
 (let (($x120 (forall ((Lambda32 (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x82 (_ bv1 32))))
 (=> $x127 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x138 (forall ((Lambda32 (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x82 (_ bv1 32))))
 (= $x127 false)))))
 ))
 (let (($x89 (forall ((Lambda32 (_ BitVec 32)) )(let (($x130 (= false false)))
 (let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x82 (_ bv0 32))))
 (=> $x54 $x130))))))
 ))
 (let (($x31 (forall ((Lambda32 (_ BitVec 32)) )(let (($x69 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x82 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x82 (_ bv0 32))))
 (= $x54 true)))))
 ))
 (let (($x9 (and $x31 $x89)))
 (let (($x169 (and $x9 $x138)))
 (let (($x134 (and $x169 $x120)))
 (let (($x106 (and $x134 $x81)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x47 (and $x79 $x106)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x18 (and $x32 $x47)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x117 (and $x70 $x18)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x151 (and $x62 $x117)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x24 (and $x11 $x151)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x100 (and $x139 $x24)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x105 (and $x91 $x100)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x155 (and $x20 $x105)))
 (let (($x172 (=> $x155 $x29)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x135)))
 (let (($x152 (= ?x51 input.dst.llvm-%n)))
 (let (($x115 (= $x152 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x117 (concat ?x106 (concat ?x102 ?x132)))))
 (let (($x29 (= ?x151 input.dst.llvm-%n)))
 (let (($x172 (= $x29 true)))
 (let (($x24 (= input.dst.llvm-%n ?x151)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x113)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x63 $x157)))
 (let (($x68 (and $x61 $x55)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x49 $x68)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x6)))))))
 (let (($x155 (and (and (and $x57 $x159) $x140) $x24)))
 (let (($x142 (= $x155 true)))
 (let (($x5 (= $x142 true)))
 (let (($x119 (and $x5 $x172)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x126 (and $x144 $x119)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x58 (and $x67 $x126)))
 (let (($x156 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x89 (_ bv1 32))))
 (=> $x154 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x170 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x89 (_ bv1 32))))
 (= $x154 false)))))
 ))
 (let (($x65 (forall ((Lambda32 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x89 (_ bv0 32))))
 (=> $x9 $x138))))))
 ))
 (let (($x39 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x89 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x96 (and $x39 $x65)))
 (let (($x131 (and $x96 $x170)))
 (let (($x109 (and $x131 $x156)))
 (let (($x13 (and $x109 $x58)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x52 (and $x79 $x13)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x171 (and $x32 $x52)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x33 (and $x70 $x171)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x35 (and $x62 $x33)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x8 (and $x11 $x35)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x43 (and $x139 $x8)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x80 (and $x91 $x43)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x72 (and $x20 $x80)))
 (let (($x163 (=> $x72 $x115)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x135)))
 (let (($x152 (= ?x51 input.dst.llvm-%n)))
 (let (($x115 (= $x152 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x117 (concat ?x106 (concat ?x102 ?x132)))))
 (let (($x29 (= ?x151 input.dst.llvm-%n)))
 (let (($x172 (= $x29 true)))
 (let (($x24 (= input.dst.llvm-%n ?x151)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x113)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x63 $x157)))
 (let (($x68 (and $x61 $x55)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x49 $x68)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x6)))))))
 (let (($x155 (and (and (and $x57 $x159) $x140) $x24)))
 (let (($x142 (= $x155 true)))
 (let (($x5 (= $x142 true)))
 (let (($x119 (and $x5 $x172)))
 (let (($x144 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x126 (and $x144 $x119)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x58 (and $x67 $x126)))
 (let (($x156 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x89 (_ bv1 32))))
 (=> $x154 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x170 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x89 (_ bv1 32))))
 (= $x154 false)))))
 ))
 (let (($x65 (forall ((Lambda32 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x89 (_ bv0 32))))
 (=> $x9 $x138))))))
 ))
 (let (($x39 (forall ((Lambda32 (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x89 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x89 (_ bv0 32))))
 (= $x9 true)))))
 ))
 (let (($x96 (and $x39 $x65)))
 (let (($x131 (and $x96 $x170)))
 (let (($x109 (and $x131 $x156)))
 (let (($x13 (and $x109 $x58)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x52 (and $x79 $x13)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x171 (and $x32 $x52)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x33 (and $x70 $x171)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x35 (and $x62 $x33)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x8 (and $x11 $x35)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x43 (and $x139 $x8)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x80 (and $x91 $x43)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x72 (and $x20 $x80)))
 (let (($x163 (=> $x72 $x115)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x169)))
 (let (($x134 (= ?x120 input.spec-%var-n-1)))
 (let (($x87 (= $x134 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x105 (concat ?x113 (concat ?x27 ?x49)))))
 (let (($x80 (= input.dst.llvm-%n ?x7)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x33)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x58 $x52)))
 (let (($x8 (and $x171 $x35)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x41 $x8)))
 (let (($x106 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x155)))))))
 (let (($x135 (and (and (and $x126 $x106) $x43) $x80)))
 (let (($x51 (= $x135 true)))
 (let (($x152 (= $x51 true)))
 (let (($x117 (= ?x7 input.dst.llvm-%n)))
 (let (($x38 (= $x117 true)))
 (let (($x115 (and $x38 $x152)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x163 (and $x57 $x115)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x19 (and $x173 $x163)))
 (let (($x175 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x65 (_ bv1 32))))
 (=> $x161 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x147 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x65 (_ bv1 32))))
 (= $x161 false)))))
 ))
 (let (($x22 (forall ((Lambda32 (_ BitVec 32)) )(let (($x170 (= false false)))
 (let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x65 (_ bv0 32))))
 (=> $x96 $x170))))))
 ))
 (let (($x145 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x65 (_ bv0 32))))
 (= $x96 true)))))
 ))
 (let (($x108 (and $x145 $x22)))
 (let (($x143 (and $x108 $x147)))
 (let (($x6 (and $x143 $x175)))
 (let (($x93 (and $x6 $x19)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x148 (and $x79 $x93)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x85 (and $x32 $x148)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x164 (and $x70 $x85)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x123 (and $x62 $x164)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x59 (and $x11 $x123)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x69 (and $x139 $x59)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x31 (and $x91 $x69)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x130 (and $x20 $x31)))
 (let (($x71 (=> $x130 $x87)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%29%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%21%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-21.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-22.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-11.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-15.L2%35%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x169)))
 (let (($x134 (= ?x120 input.spec-%var-n-1)))
 (let (($x87 (= $x134 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x105 (concat ?x113 (concat ?x27 ?x49)))))
 (let (($x80 (= input.dst.llvm-%n ?x7)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x33)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x58 $x52)))
 (let (($x8 (and $x171 $x35)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x41 $x8)))
 (let (($x106 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x155)))))))
 (let (($x135 (and (and (and $x126 $x106) $x43) $x80)))
 (let (($x51 (= $x135 true)))
 (let (($x152 (= $x51 true)))
 (let (($x117 (= ?x7 input.dst.llvm-%n)))
 (let (($x38 (= $x117 true)))
 (let (($x115 (and $x38 $x152)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x163 (and $x57 $x115)))
 (let (($x173 (= (_ bv1 32) input.spec-%tmpvar-13.L2%29%d)))
 (let (($x19 (and $x173 $x163)))
 (let (($x175 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x65 (_ bv1 32))))
 (=> $x161 (= (input.spec-%tmpvar-1.L2%21%d.1.1 Lambda32) (_ bv0 32)))))))
 ))
 (let (($x147 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x65 (_ bv1 32))))
 (= $x161 false)))))
 ))
 (let (($x22 (forall ((Lambda32 (_ BitVec 32)) )(let (($x170 (= false false)))
 (let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x65 (_ bv0 32))))
 (=> $x96 $x170))))))
 ))
 (let (($x145 (forall ((Lambda32 (_ BitVec 32)) )(let (($x9 (input.spec-%tmpvar-1.L2%21%d.0.1 Lambda32)))
 (let ((?x65 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x65 (_ bv0 32))))
 (= $x96 true)))))
 ))
 (let (($x108 (and $x145 $x22)))
 (let (($x143 (and $x108 $x147)))
 (let (($x6 (and $x143 $x175)))
 (let (($x93 (and $x6 $x19)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-2.L2%21%d)))
 (let (($x148 (and $x79 $x93)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-3.L2%21%d)))
 (let (($x85 (and $x32 $x148)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-6.L2%21%d)))
 (let (($x164 (and $x70 $x85)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-9.L2%21%d)))
 (let (($x123 (and $x62 $x164)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-21.L2%7%bbentry)))
 (let (($x59 (and $x11 $x123)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-22.L2%7%bbentry)))
 (let (($x69 (and $x139 $x59)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-11.L2%27%bbentry)))
 (let (($x31 (and $x91 $x69)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-15.L2%35%bbentry)))
 (let (($x130 (and $x20 $x31)))
 (let (($x71 (=> $x130 $x87)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460635/query
