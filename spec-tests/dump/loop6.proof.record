==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--symbol.1_end #b11001000000000000000000110010011)
(= input.memlabel-mem--symbol.1_begin #b11001000000000000000000000000100)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= dst_symbol_addr.1 #b11001000000000000000000000000100)
(= symbol.1 #b11001000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000001100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000001100000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000001100000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32) (_ bv2147484047 32))
(define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun dst_symbol_addr.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun symbol.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147484051 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00800248)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x008003d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffe4f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00800248)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00800248)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (= true false)))
 (let (($x143 (= $x142 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x133 (concat ?x130 (concat ?x126 ?x124)))))
 (let (($x135 (= ?x134 input.dst.llvm-%n)))
 (let (($x136 (= $x135 true)))
 (let (($x118 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x119 (= $x118 true)))
 (let (($x120 (= $x119 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x102 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x95 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x95)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (and $x93 $x96)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x92 $x97)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x49 $x75)))
 (let (($x14 (not $x10)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x48 $x26)))
 (let (($x88 (and (not $x54) $x14)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x52 $x57)))
 (let (($x33 (not $x27)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x72 $x32)))
 (let (($x71 (and (not $x87) $x33)))
 (let (($x111 (and (and (and (and (and (and $x71 $x88) $x89) $x91) $x98) $x101) $x103)))
 (let (($x112 (and $x111 $x105)))
 (let (($x56 (= symbol.1 dst_symbol_addr.1)))
 (let (($x113 (and $x56 $x112)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x84 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x84) (or $x86 $x83)))))))
 (let (($x114 (and $x50 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x121 (and $x116 $x120)))
 (let (($x137 (and $x121 $x136)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x41 $x137)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x139 (and $x61 $x138)))
 (let (($x30 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x23 (_ bv1 32))))
 (=> $x65 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x23 (_ bv1 32))))
 (= $x65 false)))))
 ))
 (let (($x85 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (= false false)))
 (let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x23 (_ bv0 32))))
 (=> $x5 $x66))))))
 ))
 (let (($x80 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x23 (_ bv0 32))))
 (= $x5 true)))))
 ))
 (let (($x59 (and $x80 $x85)))
 (let (($x64 (and $x59 $x37)))
 (let (($x81 (and $x64 $x30)))
 (let (($x140 (and $x81 $x139)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x141 (and $x60 $x140)))
 (let (($x144 (=> $x141 $x143)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x142 (= true false)))
 (let (($x143 (= $x142 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x133 (concat ?x130 (concat ?x126 ?x124)))))
 (let (($x135 (= ?x134 input.dst.llvm-%n)))
 (let (($x136 (= $x135 true)))
 (let (($x118 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x119 (= $x118 true)))
 (let (($x120 (= $x119 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x104)))
 (let ((?x102 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x102)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x95 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x95)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (and $x93 $x96)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x92 $x97)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x49 $x75)))
 (let (($x14 (not $x10)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x48 $x26)))
 (let (($x88 (and (not $x54) $x14)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x52 $x57)))
 (let (($x33 (not $x27)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x72 $x32)))
 (let (($x71 (and (not $x87) $x33)))
 (let (($x111 (and (and (and (and (and (and $x71 $x88) $x89) $x91) $x98) $x101) $x103)))
 (let (($x112 (and $x111 $x105)))
 (let (($x56 (= symbol.1 dst_symbol_addr.1)))
 (let (($x113 (and $x56 $x112)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x84 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x84) (or $x86 $x83)))))))
 (let (($x114 (and $x50 $x113)))
 (let (($x115 (= $x114 true)))
 (let (($x116 (= $x115 true)))
 (let (($x121 (and $x116 $x120)))
 (let (($x137 (and $x121 $x136)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x138 (and $x41 $x137)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x139 (and $x61 $x138)))
 (let (($x30 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x23 (_ bv1 32))))
 (=> $x65 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x23 (_ bv1 32))))
 (= $x65 false)))))
 ))
 (let (($x85 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (= false false)))
 (let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x23 (_ bv0 32))))
 (=> $x5 $x66))))))
 ))
 (let (($x80 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x23 (_ bv0 32))))
 (= $x5 true)))))
 ))
 (let (($x59 (and $x80 $x85)))
 (let (($x64 (and $x59 $x37)))
 (let (($x81 (and $x64 $x30)))
 (let (($x140 (and $x81 $x139)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x141 (and $x60 $x140)))
 (let (($x144 (=> $x141 $x143)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x120)))
 (let ((?x118 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x118)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let ((?x105 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x112 (= input.memlabel-mem--symbol.1_end ?x105)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x12 $x112)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x64 $x113)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (and $x75 $x97)))
 (let (($x88 (not $x99)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x100 $x26)))
 (let (($x27 (and (not $x93) $x88)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x37 $x67)))
 (let (($x96 (not $x17)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x68 $x73)))
 (let (($x86 (and (not $x33) $x96)))
 (let (($x130 (and (and (and (and (and (and $x86 $x27) $x14) $x98) $x114) $x117) $x119)))
 (let (($x125 (and $x130 $x121)))
 (let (($x94 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x94 $x125)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x102 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x92 $x106)))))))
 (let (($x36 (and $x110 $x126)))
 (let (($x13 (= $x36 true)))
 (let (($x18 (= $x13 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x142 (concat ?x139 (concat ?x135 ?x131)))))
 (let (($x144 (= input.dst.llvm-%n ?x143)))
 (let (($x123 (and (and (and $x110 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x126) $x144)))
 (let (($x39 (= $x123 true)))
 (let (($x70 (= $x39 true)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x15 (and $x41 $x70)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x16 (and $x61 $x15)))
 (let (($x30 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x66 (_ bv1 32))))
 (=> $x9 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x81 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x66 (_ bv1 32))))
 (= $x9 false)))))
 ))
 (let (($x84 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (= false false)))
 (let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x66 (_ bv0 32))))
 (=> $x25 $x6))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x66 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x77 (and $x59 $x84)))
 (let (($x22 (and $x77 $x81)))
 (let (($x103 (and $x22 $x30)))
 (let (($x8 (and $x103 $x16)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x51 (and $x43 $x8)))
 (let (($x55 (=> $x51 $x18)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x120)))
 (let ((?x118 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x118)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let ((?x105 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x112 (= input.memlabel-mem--symbol.1_end ?x105)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x12 $x112)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x64 $x113)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (and $x75 $x97)))
 (let (($x88 (not $x99)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x100 $x26)))
 (let (($x27 (and (not $x93) $x88)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x37 $x67)))
 (let (($x96 (not $x17)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x68 $x73)))
 (let (($x86 (and (not $x33) $x96)))
 (let (($x130 (and (and (and (and (and (and $x86 $x27) $x14) $x98) $x114) $x117) $x119)))
 (let (($x125 (and $x130 $x121)))
 (let (($x94 (= symbol.1 dst_symbol_addr.1)))
 (let (($x126 (and $x94 $x125)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x102 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x92 $x106)))))))
 (let (($x36 (and $x110 $x126)))
 (let (($x13 (= $x36 true)))
 (let (($x18 (= $x13 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x142 (concat ?x139 (concat ?x135 ?x131)))))
 (let (($x144 (= input.dst.llvm-%n ?x143)))
 (let (($x123 (and (and (and $x110 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x126) $x144)))
 (let (($x39 (= $x123 true)))
 (let (($x70 (= $x39 true)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x15 (and $x41 $x70)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x16 (and $x61 $x15)))
 (let (($x30 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x66 (_ bv1 32))))
 (=> $x9 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x81 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x66 (_ bv1 32))))
 (= $x9 false)))))
 ))
 (let (($x84 (forall ((Lambda25 (_ BitVec 32)) )(let (($x6 (= false false)))
 (let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x66 (_ bv0 32))))
 (=> $x25 $x6))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x66 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x66 (_ bv0 32))))
 (= $x25 true)))))
 ))
 (let (($x77 (and $x59 $x84)))
 (let (($x22 (and $x77 $x81)))
 (let (($x103 (and $x22 $x30)))
 (let (($x8 (and $x103 $x16)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x51 (and $x43 $x8)))
 (let (($x55 (=> $x51 $x18)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (= (_ bv0 32) input.spec-%var-n-1)))
 (let (($x21 (= $x69 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x47 (concat ?x13 (concat ?x16 ?x70)))))
 (let (($x91 (= input.dst.llvm-%n ?x83)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x137)))
 (let ((?x141 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x141)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x130 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x120 (= input.memlabel-mem--symbol.1_end ?x130)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (and $x118 $x120)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x129 $x121)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x104 $x105)))
 (let (($x113 (not $x112)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x133 $x64)))
 (let (($x128 (and (not $x12) $x113)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x27 $x122)))
 (let (($x132 (not $x14)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x97 $x99)))
 (let (($x98 (and (not $x88) $x132)))
 (let (($x140 (and (and (and (and (and (and $x98 $x128) $x115) $x117) $x125) $x124) $x142)))
 (let (($x143 (and $x140 $x138)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x144 (and $x75 $x143)))
 (let (($x10 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x145) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x48 $x37)))))))
 (let (($x19 (and (and (and $x26 $x10) $x144) $x91)))
 (let (($x58 (= $x19 true)))
 (let (($x60 (= $x58 true)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x5 (and $x101 $x60)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x46 (and $x65 $x5)))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x84 (_ bv1 32))))
 (=> $x53 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x89 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x84 (_ bv1 32))))
 (= $x53 false)))))
 ))
 (let (($x111 (forall ((Lambda25 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x84 (_ bv0 32))))
 (=> $x77 $x81))))))
 ))
 (let (($x79 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x84 (_ bv0 32))))
 (= $x77 true)))))
 ))
 (let (($x72 (and $x79 $x111)))
 (let (($x107 (and $x72 $x89)))
 (let (($x50 (and $x107 $x44)))
 (let (($x80 (and $x50 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x38 (and $x43 $x80)))
 (let (($x31 (=> $x38 $x21)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (= (_ bv0 32) input.spec-%var-n-1)))
 (let (($x21 (= $x69 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x47 (concat ?x13 (concat ?x16 ?x70)))))
 (let (($x91 (= input.dst.llvm-%n ?x83)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x137)))
 (let ((?x141 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x141)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x130 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x120 (= input.memlabel-mem--symbol.1_end ?x130)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (and $x118 $x120)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x129 $x121)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x104 $x105)))
 (let (($x113 (not $x112)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x133 $x64)))
 (let (($x128 (and (not $x12) $x113)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x27 $x122)))
 (let (($x132 (not $x14)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x97 $x99)))
 (let (($x98 (and (not $x88) $x132)))
 (let (($x140 (and (and (and (and (and (and $x98 $x128) $x115) $x117) $x125) $x124) $x142)))
 (let (($x143 (and $x140 $x138)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x144 (and $x75 $x143)))
 (let (($x10 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x145) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x48 $x37)))))))
 (let (($x19 (and (and (and $x26 $x10) $x144) $x91)))
 (let (($x58 (= $x19 true)))
 (let (($x60 (= $x58 true)))
 (let (($x101 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x5 (and $x101 $x60)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x46 (and $x65 $x5)))
 (let (($x44 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x84 (_ bv1 32))))
 (=> $x53 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x89 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x84 (_ bv1 32))))
 (= $x53 false)))))
 ))
 (let (($x111 (forall ((Lambda25 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x84 (_ bv0 32))))
 (=> $x77 $x81))))))
 ))
 (let (($x79 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x84 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x84 (_ bv0 32))))
 (= $x77 true)))))
 ))
 (let (($x72 (and $x79 $x111)))
 (let (($x107 (and $x72 $x89)))
 (let (($x50 (and $x107 $x44)))
 (let (($x80 (and $x50 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x38 (and $x43 $x80)))
 (let (($x31 (=> $x38 $x21)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa61d4183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x41)))
 (let (($x82 (= ?x52 input.dst.llvm-%n)))
 (let (($x78 (= $x82 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x106 (concat ?x21 (concat ?x46 ?x60)))))
 (let (($x39 (= input.dst.llvm-%n ?x49)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x51)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x55)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (and $x141 $x137)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x136 $x138)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x119 $x130)))
 (let (($x121 (not $x120)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x135 $x129)))
 (let (($x131 (and (not $x118) $x121)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x128 $x139)))
 (let (($x134 (not $x115)))
 (let (($x112 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x105 $x112)))
 (let (($x117 (and (not $x113) $x134)))
 (let (($x18 (and (and (and (and (and (and $x117 $x131) $x126) $x124) $x143) $x123) $x47)))
 (let (($x83 (and $x18 $x36)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x104 $x83)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x75 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x76 $x27)))))))
 (let (($x63 (and (and (and $x64 $x96) $x91) $x39)))
 (let (($x20 (= $x63 true)))
 (let (($x59 (= $x20 true)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x6 (and $x33 $x59)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x28 (and $x68 $x6)))
 (let (($x108 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x109 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x65 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x109 (_ bv1 32))))
 (= $x50 false)))))
 ))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x61 (= false false)))
 (let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x109 (_ bv0 32))))
 (=> $x111 $x61))))))
 ))
 (let (($x53 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x109 (_ bv0 32))))
 (= $x111 true)))))
 ))
 (let (($x7 (and $x53 $x71)))
 (let (($x92 (and $x7 $x65)))
 (let (($x57 (and $x92 $x108)))
 (let (($x22 (and $x57 $x28)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x30 (and $x24 $x22)))
 (let (($x45 (=> $x30 $x78)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x41)))
 (let (($x82 (= ?x52 input.dst.llvm-%n)))
 (let (($x78 (= $x82 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x106 (concat ?x21 (concat ?x46 ?x60)))))
 (let (($x39 (= input.dst.llvm-%n ?x49)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x51)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x55)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (and $x141 $x137)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x136 $x138)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x119 $x130)))
 (let (($x121 (not $x120)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x135 $x129)))
 (let (($x131 (and (not $x118) $x121)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x128 $x139)))
 (let (($x134 (not $x115)))
 (let (($x112 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x105 $x112)))
 (let (($x117 (and (not $x113) $x134)))
 (let (($x18 (and (and (and (and (and (and $x117 $x131) $x126) $x124) $x143) $x123) $x47)))
 (let (($x83 (and $x18 $x36)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x104 $x83)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x75 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x76 $x27)))))))
 (let (($x63 (and (and (and $x64 $x96) $x91) $x39)))
 (let (($x20 (= $x63 true)))
 (let (($x59 (= $x20 true)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x6 (and $x33 $x59)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x28 (and $x68 $x6)))
 (let (($x108 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x109 (_ bv1 32))))
 (=> $x50 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x65 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x50 (bvuge ?x109 (_ bv1 32))))
 (= $x50 false)))))
 ))
 (let (($x71 (forall ((Lambda25 (_ BitVec 32)) )(let (($x61 (= false false)))
 (let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x109 (_ bv0 32))))
 (=> $x111 $x61))))))
 ))
 (let (($x53 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x109 (_ bv0 32))))
 (= $x111 true)))))
 ))
 (let (($x7 (and $x53 $x71)))
 (let (($x92 (and $x7 $x65)))
 (let (($x57 (and $x92 $x108)))
 (let (($x22 (and $x57 $x28)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x30 (and $x24 $x22)))
 (let (($x45 (=> $x30 $x78)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x89)))
 (let (($x44 (= ?x34 input.spec-%var-n-1)))
 (let (($x101 (= $x44 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x78 (concat ?x41 (concat ?x28 ?x59)))))
 (let (($x74 (= input.dst.llvm-%n ?x45)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x38)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x32)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (and $x55 $x51)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x8 $x36)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x137 (and $x142 $x140)))
 (let (($x138 (not $x137)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x16 $x136)))
 (let (($x70 (and (not $x141) $x138)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x131 $x13)))
 (let (($x15 (not $x126)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x130 $x120)))
 (let (($x124 (and (not $x121) $x15)))
 (let (($x31 (and (and (and (and (and (and $x124 $x70) $x144) $x123) $x83) $x19) $x106)))
 (let (($x49 (and $x31 $x69)))
 (let (($x119 (= symbol.1 dst_symbol_addr.1)))
 (let (($x39 (and $x119 $x49)))
 (let (($x132 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x116 $x128)))))))
 (let (($x58 (and (and (and $x129 $x132) $x39) $x74)))
 (let (($x84 (= $x58 true)))
 (let (($x95 (= $x84 true)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x88 $x95)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x43 (and $x97 $x110)))
 (let (($x10 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x71 (_ bv1 32))))
 (=> $x94 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x73 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x71 (_ bv1 32))))
 (= $x94 false)))))
 ))
 (let (($x145 (forall ((Lambda25 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x71 (_ bv0 32))))
 (=> $x7 $x65))))))
 ))
 (let (($x102 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x71 (_ bv0 32))))
 (= $x7 true)))))
 ))
 (let (($x54 (and $x102 $x145)))
 (let (($x48 (and $x54 $x73)))
 (let (($x90 (and $x48 $x10)))
 (let (($x9 (and $x90 $x43)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x79 (and $x24 $x9)))
 (let (($x100 (=> $x79 $x101)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x89)))
 (let (($x44 (= ?x34 input.spec-%var-n-1)))
 (let (($x101 (= $x44 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x78 (concat ?x41 (concat ?x28 ?x59)))))
 (let (($x74 (= input.dst.llvm-%n ?x45)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x38)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x32)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (and $x55 $x51)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x8 $x36)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x137 (and $x142 $x140)))
 (let (($x138 (not $x137)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x16 $x136)))
 (let (($x70 (and (not $x141) $x138)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x131 $x13)))
 (let (($x15 (not $x126)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x130 $x120)))
 (let (($x124 (and (not $x121) $x15)))
 (let (($x31 (and (and (and (and (and (and $x124 $x70) $x144) $x123) $x83) $x19) $x106)))
 (let (($x49 (and $x31 $x69)))
 (let (($x119 (= symbol.1 dst_symbol_addr.1)))
 (let (($x39 (and $x119 $x49)))
 (let (($x132 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x116 $x128)))))))
 (let (($x58 (and (and (and $x129 $x132) $x39) $x74)))
 (let (($x84 (= $x58 true)))
 (let (($x95 (= $x84 true)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x88 $x95)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x43 (and $x97 $x110)))
 (let (($x10 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x71 (_ bv1 32))))
 (=> $x94 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x73 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x71 (_ bv1 32))))
 (= $x94 false)))))
 ))
 (let (($x145 (forall ((Lambda25 (_ BitVec 32)) )(let (($x65 (= false false)))
 (let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x71 (_ bv0 32))))
 (=> $x7 $x65))))))
 ))
 (let (($x102 (forall ((Lambda25 (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x71 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x71 (_ bv0 32))))
 (= $x7 true)))))
 ))
 (let (($x54 (and $x102 $x145)))
 (let (($x48 (and $x54 $x73)))
 (let (($x90 (and $x48 $x10)))
 (let (($x9 (and $x90 $x43)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x79 (and $x24 $x9)))
 (let (($x100 (=> $x79 $x101)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x108 (= $x92 true)))
 (let (($x57 (= $x108 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x44 (concat ?x81 (concat ?x110 ?x84)))))
 (let (($x100 (= input.dst.llvm-%n ?x101)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x78)))
 (let ((?x63 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x63)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x31 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x80 $x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x19 $x38)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x55 $x47)))
 (let (($x51 (not $x18)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x123 $x46)))
 (let (($x83 (and (not $x8) $x51)))
 (let (($x70 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x138 $x70)))
 (let (($x144 (not $x21)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x142 $x140)))
 (let (($x35 (and (not $x137) $x144)))
 (let (($x22 (and (and (and (and (and (and $x35 $x83) $x60) $x56) $x69) $x67) $x82)))
 (let (($x52 (and $x22 $x30)))
 (let (($x143 (= symbol.1 dst_symbol_addr.1)))
 (let (($x45 (and $x143 $x52)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x125 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x125) (or $x121 $x62)))))))
 (let (($x20 (and (and (and $x16 $x115) $x45) $x100)))
 (let (($x111 (= $x20 true)))
 (let (($x23 (= $x111 true)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and $x116 $x23)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x85 (and $x104 $x26)))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x40 (_ bv1 32))))
 (=> $x90 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x97 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x40 (_ bv1 32))))
 (= $x90 false)))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x68 (= false false)))
 (let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x40 (_ bv0 32))))
 (=> $x145 $x68))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x40 (_ bv0 32))))
 (= $x145 true)))))
 ))
 (let (($x127 (and $x94 $x86)))
 (let (($x99 (and $x127 $x97)))
 (let (($x96 (and $x99 $x12)))
 (let (($x53 (and $x96 $x85)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x29 $x53)))
 (let (($x33 (=> $x61 $x57)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x108 (= $x92 true)))
 (let (($x57 (= $x108 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x44 (concat ?x81 (concat ?x110 ?x84)))))
 (let (($x100 (= input.dst.llvm-%n ?x101)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x78)))
 (let ((?x63 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x63)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x31 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x80 $x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x19 $x38)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x55 $x47)))
 (let (($x51 (not $x18)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x123 $x46)))
 (let (($x83 (and (not $x8) $x51)))
 (let (($x70 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x138 $x70)))
 (let (($x144 (not $x21)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x142 $x140)))
 (let (($x35 (and (not $x137) $x144)))
 (let (($x22 (and (and (and (and (and (and $x35 $x83) $x60) $x56) $x69) $x67) $x82)))
 (let (($x52 (and $x22 $x30)))
 (let (($x143 (= symbol.1 dst_symbol_addr.1)))
 (let (($x45 (and $x143 $x52)))
 (let (($x115 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x125 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x125) (or $x121 $x62)))))))
 (let (($x20 (and (and (and $x16 $x115) $x45) $x100)))
 (let (($x111 (= $x20 true)))
 (let (($x23 (= $x111 true)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and $x116 $x23)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x85 (and $x104 $x26)))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x40 (_ bv1 32))))
 (=> $x90 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x97 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x40 (_ bv1 32))))
 (= $x90 false)))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x68 (= false false)))
 (let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x40 (_ bv0 32))))
 (=> $x145 $x68))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x40 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x40 (_ bv0 32))))
 (= $x145 true)))))
 ))
 (let (($x127 (and $x94 $x86)))
 (let (($x99 (and $x127 $x97)))
 (let (($x96 (and $x99 $x12)))
 (let (($x53 (and $x96 $x85)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x29 $x53)))
 (let (($x33 (=> $x61 $x57)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffff7ff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x10 (= $x93 true)))
 (let (($x76 (= $x10 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x57 (concat ?x107 (concat ?x26 ?x111)))))
 (let (($x133 (= input.dst.llvm-%n ?x33)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x44)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x74)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x22 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x78 (and $x59 $x22)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x67 $x78)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x80 $x32)))
 (let (($x31 (not $x106)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x56 $x6)))
 (let (($x69 (and (not $x19) $x31)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x51 $x83)))
 (let (($x60 (not $x103)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x55 $x47)))
 (let (($x91 (and (not $x18) $x60)))
 (let (($x43 (and (and (and (and (and (and $x91 $x69) $x28) $x39) $x30) $x122) $x34)))
 (let (($x89 (and $x43 $x9)))
 (let (($x36 (= symbol.1 dst_symbol_addr.1)))
 (let (($x101 (and $x36 $x89)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x141 (or (bvugt input.memlabel-mem--symbol.1_begin ?x115) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x141) (or $x137 $x5)))))))
 (let (($x71 (and (and (and $x123 $x13) $x101) $x133)))
 (let (($x24 (= $x71 true)))
 (let (($x98 (= $x24 true)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and $x121 $x98)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x50 (and $x125 $x77)))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x48 (_ bv1 32))))
 (=> $x96 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x48 (_ bv1 32))))
 (= $x96 false)))))
 ))
 (let (($x88 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (= false false)))
 (let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x48 (_ bv0 32))))
 (=> $x86 $x75))))))
 ))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x48 (_ bv0 32))))
 (= $x86 true)))))
 ))
 (let (($x17 (and $x90 $x88)))
 (let (($x105 (and $x17 $x104)))
 (let (($x14 (and $x105 $x37)))
 (let (($x102 (and $x14 $x50)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x65 (and $x27 $x102)))
 (let (($x64 (=> $x65 $x76)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x10 (= $x93 true)))
 (let (($x76 (= $x10 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x57 (concat ?x107 (concat ?x26 ?x111)))))
 (let (($x133 (= input.dst.llvm-%n ?x33)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x44)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x74)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x22 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x78 (and $x59 $x22)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x67 $x78)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x80 $x32)))
 (let (($x31 (not $x106)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x56 $x6)))
 (let (($x69 (and (not $x19) $x31)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x51 $x83)))
 (let (($x60 (not $x103)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x55 $x47)))
 (let (($x91 (and (not $x18) $x60)))
 (let (($x43 (and (and (and (and (and (and $x91 $x69) $x28) $x39) $x30) $x122) $x34)))
 (let (($x89 (and $x43 $x9)))
 (let (($x36 (= symbol.1 dst_symbol_addr.1)))
 (let (($x101 (and $x36 $x89)))
 (let (($x13 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x141 (or (bvugt input.memlabel-mem--symbol.1_begin ?x115) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x141) (or $x137 $x5)))))))
 (let (($x71 (and (and (and $x123 $x13) $x101) $x133)))
 (let (($x24 (= $x71 true)))
 (let (($x98 (= $x24 true)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x77 (and $x121 $x98)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x50 (and $x125 $x77)))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x48 (_ bv1 32))))
 (=> $x96 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x48 (_ bv1 32))))
 (= $x96 false)))))
 ))
 (let (($x88 (forall ((Lambda25 (_ BitVec 32)) )(let (($x75 (= false false)))
 (let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x48 (_ bv0 32))))
 (=> $x86 $x75))))))
 ))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x48 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x48 (_ bv0 32))))
 (= $x86 true)))))
 ))
 (let (($x17 (and $x90 $x88)))
 (let (($x105 (and $x17 $x104)))
 (let (($x14 (and $x105 $x37)))
 (let (($x102 (and $x14 $x50)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x65 (and $x27 $x102)))
 (let (($x64 (=> $x65 $x76)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x9ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x25 (= $x97 true)))
 (let (($x12 (= $x25 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x76 (concat ?x73 (concat ?x77 ?x24)))))
 (let (($x135 (= input.dst.llvm-%n ?x64)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x57)))
 (let ((?x100 (bvand symbol.1 (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x100)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x34 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x43 (= input.memlabel-mem--symbol.1_end ?x34)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x84 $x43)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x122 $x44)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x59 $x63)))
 (let (($x22 (not $x82)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x67 (and $x39 $x95)))
 (let (($x30 (and (not $x67) $x22)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x31 $x69)))
 (let (($x28 (not $x79)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x80 $x32)))
 (let (($x49 (and (not $x106) $x28)))
 (let (($x85 (and (and (and (and (and (and $x49 $x30) $x110) $x45) $x9) $x58) $x108)))
 (let (($x92 (and $x85 $x53)))
 (let (($x38 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x38 $x92)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x8 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x8) (or $x18 $x41)))))))
 (let (($x40 (and (and (and $x56 $x70) $x33) $x135)))
 (let (($x29 (= $x40 true)))
 (let (($x134 (= $x29 true)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x109 (and $x137 $x134)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x54 (and $x141 $x109)))
 (let (($x42 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x99 (_ bv1 32))))
 (=> $x14 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x99 (_ bv1 32))))
 (= $x14 false)))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x99 (_ bv0 32))))
 (=> $x88 $x114))))))
 ))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x99 (_ bv0 32))))
 (= $x88 true)))))
 ))
 (let (($x129 (and $x96 $x116)))
 (let (($x119 (and $x129 $x125)))
 (let (($x139 (and $x119 $x42)))
 (let (($x94 (and $x139 $x54)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x68 (and $x113 $x94)))
 (let (($x112 (=> $x68 $x12)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x25 (= $x97 true)))
 (let (($x12 (= $x25 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x76 (concat ?x73 (concat ?x77 ?x24)))))
 (let (($x135 (= input.dst.llvm-%n ?x64)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x57)))
 (let ((?x100 (bvand symbol.1 (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x100)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x34 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x43 (= input.memlabel-mem--symbol.1_end ?x34)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x84 $x43)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x122 $x44)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x59 $x63)))
 (let (($x22 (not $x82)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x67 (and $x39 $x95)))
 (let (($x30 (and (not $x67) $x22)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x31 $x69)))
 (let (($x28 (not $x79)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x80 $x32)))
 (let (($x49 (and (not $x106) $x28)))
 (let (($x85 (and (and (and (and (and (and $x49 $x30) $x110) $x45) $x9) $x58) $x108)))
 (let (($x92 (and $x85 $x53)))
 (let (($x38 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x38 $x92)))
 (let (($x70 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x8 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x8) (or $x18 $x41)))))))
 (let (($x40 (and (and (and $x56 $x70) $x33) $x135)))
 (let (($x29 (= $x40 true)))
 (let (($x134 (= $x29 true)))
 (let (($x137 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x109 (and $x137 $x134)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x54 (and $x141 $x109)))
 (let (($x42 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x99 (_ bv1 32))))
 (=> $x14 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x99 (_ bv1 32))))
 (= $x14 false)))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x99 (_ bv0 32))))
 (=> $x88 $x114))))))
 ))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x99 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x99 (_ bv0 32))))
 (= $x88 true)))))
 ))
 (let (($x129 (and $x96 $x116)))
 (let (($x119 (and $x129 $x125)))
 (let (($x139 (and $x119 $x42)))
 (let (($x94 (and $x139 $x54)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x68 (and $x113 $x94)))
 (let (($x112 (=> $x68 $x12)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x158 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x148 (_ bv1 32)))))
 ))
 (let (($x151 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x153 (and $x151 $x152)))
 (let (($x159 (and $x153 $x158)))
 (let (($x160 (and $x159 $x152)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x112 (concat ?x97 (concat ?x109 ?x29)))))
 (let (($x5 (= input.dst.llvm-%n ?x117)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x76)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x133)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x108 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x108)))
 (let (($x111 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x57 (and $x111 $x85)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x58 $x57)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x84 $x74)))
 (let (($x43 (not $x34)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (and $x45 $x23)))
 (let (($x9 (and (not $x122) $x43)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x22 $x30)))
 (let (($x110 (not $x61)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x59 $x63)))
 (let (($x52 (and (not $x82) $x110)))
 (let (($x50 (and (and (and (and (and (and $x52 $x9) $x26) $x101) $x53) $x20) $x10)))
 (let (($x93 (and $x50 $x102)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x64 (and $x78 $x93)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x19 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x19) (or $x106 $x81)))))))
 (let (($x27 (and (and (and $x39 $x83) $x64) $x5)))
 (let (($x126 (= $x27 true)))
 (let (($x72 (= $x126 true)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x127 (and $x18 $x72)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x90 (and $x8 $x127)))
 (let (($x128 (forall ((Lambda25 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x105 (_ bv1 32))))
 (=> $x139 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x141 (forall ((Lambda25 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x105 (_ bv1 32))))
 (= $x139 false)))))
 ))
 (let (($x121 (forall ((Lambda25 (_ BitVec 32)) )(let (($x118 (= false false)))
 (let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x105 (_ bv0 32))))
 (=> $x116 $x118))))))
 ))
 (let (($x14 (forall ((Lambda25 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x105 (_ bv0 32))))
 (= $x116 true)))))
 ))
 (let (($x16 (and $x14 $x121)))
 (let (($x143 (and $x16 $x141)))
 (let (($x131 (and $x143 $x128)))
 (let (($x75 (and $x131 $x90)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x104 (and $x140 $x75)))
 (let (($x163 (=> $x104 $x162)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x158 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x148 (_ bv1 32)))))
 ))
 (let (($x151 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x153 (and $x151 $x152)))
 (let (($x159 (and $x153 $x158)))
 (let (($x160 (and $x159 $x152)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x112 (concat ?x97 (concat ?x109 ?x29)))))
 (let (($x5 (= input.dst.llvm-%n ?x117)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x76)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x133)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x108 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x108)))
 (let (($x111 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x57 (and $x111 $x85)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x58 $x57)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x84 $x74)))
 (let (($x43 (not $x34)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x122 (and $x45 $x23)))
 (let (($x9 (and (not $x122) $x43)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x22 $x30)))
 (let (($x110 (not $x61)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x59 $x63)))
 (let (($x52 (and (not $x82) $x110)))
 (let (($x50 (and (and (and (and (and (and $x52 $x9) $x26) $x101) $x53) $x20) $x10)))
 (let (($x93 (and $x50 $x102)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x64 (and $x78 $x93)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x19 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x19) (or $x106 $x81)))))))
 (let (($x27 (and (and (and $x39 $x83) $x64) $x5)))
 (let (($x126 (= $x27 true)))
 (let (($x72 (= $x126 true)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x127 (and $x18 $x72)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x90 (and $x8 $x127)))
 (let (($x128 (forall ((Lambda25 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x105 (_ bv1 32))))
 (=> $x139 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x141 (forall ((Lambda25 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x105 (_ bv1 32))))
 (= $x139 false)))))
 ))
 (let (($x121 (forall ((Lambda25 (_ BitVec 32)) )(let (($x118 (= false false)))
 (let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x105 (_ bv0 32))))
 (=> $x116 $x118))))))
 ))
 (let (($x14 (forall ((Lambda25 (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x105 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x105 (_ bv0 32))))
 (= $x116 true)))))
 ))
 (let (($x16 (and $x14 $x121)))
 (let (($x143 (and $x16 $x141)))
 (let (($x131 (and $x143 $x128)))
 (let (($x75 (and $x131 $x90)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x104 (and $x140 $x75)))
 (let (($x163 (=> $x104 $x162)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32))) (_ bv1 32)))))
 (let ((?x195 (concat ?x194 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32))) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32))) (_ bv3 32)))))
 (let ((?x172 (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25)))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x144 (_ bv1 32))))
 (=> $x167 (= ?x172 (concat ?x200 (concat ?x197 ?x195)))))))))))))
 ))
 (let (($x169 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x42 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x144 (_ bv1 32))))
 (= $x167 (bvuge ?x42 (_ bv1 32))))))))
 ))
 (let (($x35 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x144 (_ bv0 32))))
 (=> $x91 $x141))))))
 ))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x42 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x144 (_ bv0 32))))
 (= $x91 (= ?x42 (_ bv0 32))))))))
 ))
 (let (($x124 (and $x37 $x35)))
 (let (($x170 (and $x124 $x169)))
 (let (($x205 (and $x170 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x149 (concat ?x87 (concat ?x90 ?x72)))))
 (let (($x151 (= input.dst.llvm-%n ?x150)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x94)))
 (let ((?x12 (bvand symbol.1 (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x12)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x50 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x50)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x102 (and $x133 $x76)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x24 $x102)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x100 $x108)))
 (let (($x57 (not $x85)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x98 $x58)))
 (let (($x77 (and (not $x111) $x57)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x9 $x65)))
 (let (($x73 (not $x26)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x74 $x34)))
 (let (($x101 (and (not $x43) $x73)))
 (let (($x25 (and (and (and (and (and (and $x101 $x77) $x92) $x20) $x93) $x135) $x112)))
 (let (($x117 (and $x25 $x68)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x84 $x117)))
 (let (($x79 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x71) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x107 $x22)))))))
 (let (($x156 (and (and (and $x23 $x79) $x5) $x151)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x32 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x159 (and $x32 $x158)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x160 (and $x38 $x159)))
 (let (($x138 (forall ((Lambda25 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x121 (_ bv1 32))))
 (=> $x46 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x36 (forall ((Lambda25 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x121 (_ bv1 32))))
 (= $x46 false)))))
 ))
 (let (($x123 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x121 (_ bv0 32))))
 (=> $x16 $x141))))))
 ))
 (let (($x136 (forall ((Lambda25 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x121 (_ bv0 32))))
 (= $x16 true)))))
 ))
 (let (($x13 (and $x136 $x123)))
 (let (($x55 (and $x13 $x36)))
 (let (($x6 (and $x55 $x138)))
 (let (($x161 (and $x6 $x160)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x162 (and $x140 $x161)))
 (let (($x208 (=> $x162 $x207)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32))) (_ bv1 32)))))
 (let ((?x195 (concat ?x194 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32))) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32))) (_ bv3 32)))))
 (let ((?x172 (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25)))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x144 (_ bv1 32))))
 (=> $x167 (= ?x172 (concat ?x200 (concat ?x197 ?x195)))))))))))))
 ))
 (let (($x169 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x42 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x144 (_ bv1 32))))
 (= $x167 (bvuge ?x42 (_ bv1 32))))))))
 ))
 (let (($x35 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x144 (_ bv0 32))))
 (=> $x91 $x141))))))
 ))
 (let (($x37 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x42 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25)))
 (let ((?x144 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (= ?x144 (_ bv0 32))))
 (= $x91 (= ?x42 (_ bv0 32))))))))
 ))
 (let (($x124 (and $x37 $x35)))
 (let (($x170 (and $x124 $x169)))
 (let (($x205 (and $x170 $x204)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x149 (concat ?x87 (concat ?x90 ?x72)))))
 (let (($x151 (= input.dst.llvm-%n ?x150)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x94)))
 (let ((?x12 (bvand symbol.1 (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x12)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x50 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x50)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x102 (and $x133 $x76)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x24 $x102)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x100 $x108)))
 (let (($x57 (not $x85)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x98 $x58)))
 (let (($x77 (and (not $x111) $x57)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x9 $x65)))
 (let (($x73 (not $x26)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x74 $x34)))
 (let (($x101 (and (not $x43) $x73)))
 (let (($x25 (and (and (and (and (and (and $x101 $x77) $x92) $x20) $x93) $x135) $x112)))
 (let (($x117 (and $x25 $x68)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x84 $x117)))
 (let (($x79 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x71) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x107 $x22)))))))
 (let (($x156 (and (and (and $x23 $x79) $x5) $x151)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x32 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x159 (and $x32 $x158)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x160 (and $x38 $x159)))
 (let (($x138 (forall ((Lambda25 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x121 (_ bv1 32))))
 (=> $x46 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x36 (forall ((Lambda25 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x121 (_ bv1 32))))
 (= $x46 false)))))
 ))
 (let (($x123 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x121 (_ bv0 32))))
 (=> $x16 $x141))))))
 ))
 (let (($x136 (forall ((Lambda25 (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x121 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x121 (_ bv0 32))))
 (= $x16 true)))))
 ))
 (let (($x13 (and $x136 $x123)))
 (let (($x55 (and $x13 $x36)))
 (let (($x6 (and $x55 $x138)))
 (let (($x161 (and $x6 $x160)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x162 (and $x140 $x161)))
 (let (($x208 (=> $x162 $x207)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000088)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun Lambda25!2 () (_ BitVec 32)
    #x20000027)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7fffff64)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000008b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x800000f3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000088)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7fffff64)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7fffff64)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda25!2 () (_ BitVec 32)
    #x00000062)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe6c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe6c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x169 (= false true)))
 (let (($x170 (= $x169 true)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x144 (concat ?x160 ?x158)))))
 (let (($x42 (= input.dst.llvm-%n ?x115)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x104)))
 (let ((?x148 (bvand symbol.1 (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x148)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x25 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x94 (= input.memlabel-mem--symbol.1_end ?x25)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x12 $x94)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x54 $x68)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x10 $x50)))
 (let (($x102 (not $x76)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x24)))
 (let (($x29 (and (not $x133) $x102)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x77 $x97)))
 (let (($x134 (not $x92)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x108 $x85)))
 (let (($x20 (and (not $x57) $x134)))
 (let (($x147 (and (and (and (and (and (and $x20 $x29) $x64) $x135) $x117) $x27) $x149)))
 (let (($x150 (and $x147 $x146)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x151 (and $x100 $x150)))
 (let (($x110 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x84 (or (bvugt input.memlabel-mem--symbol.1_begin ?x152) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x84) (or $x89 $x9)))))))
 (let (($x37 (and (and (and $x58 $x110) $x151) $x42)))
 (let (($x15 (= $x37 true)))
 (let (($x35 (= $x15 true)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x124 (and $x82 $x35)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x167 (and $x59 $x124)))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x123 (_ bv1 32))))
 (=> $x19 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x80 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x123 (_ bv1 32))))
 (= $x19 false)))))
 ))
 (let (($x70 (forall ((Lambda25 (_ BitVec 32)) )(let (($x36 (= false false)))
 (let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x123 (_ bv0 32))))
 (=> $x13 $x36))))))
 ))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x123 (_ bv0 32))))
 (= $x13 true)))))
 ))
 (let (($x62 (and $x8 $x70)))
 (let (($x106 (and $x62 $x80)))
 (let (($x67 (and $x106 $x83)))
 (let (($x166 (and $x67 $x167)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x168 (and $x140 $x166)))
 (let (($x172 (=> $x168 $x170)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x169 (= false true)))
 (let (($x170 (= $x169 true)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x114 (concat ?x144 (concat ?x160 ?x158)))))
 (let (($x42 (= input.dst.llvm-%n ?x115)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x104)))
 (let ((?x148 (bvand symbol.1 (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x148)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x25 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x94 (= input.memlabel-mem--symbol.1_end ?x25)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x12 $x94)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x54 $x68)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x10 $x50)))
 (let (($x102 (not $x76)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x24)))
 (let (($x29 (and (not $x133) $x102)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x77 $x97)))
 (let (($x134 (not $x92)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x108 $x85)))
 (let (($x20 (and (not $x57) $x134)))
 (let (($x147 (and (and (and (and (and (and $x20 $x29) $x64) $x135) $x117) $x27) $x149)))
 (let (($x150 (and $x147 $x146)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x151 (and $x100 $x150)))
 (let (($x110 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x84 (or (bvugt input.memlabel-mem--symbol.1_begin ?x152) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x84) (or $x89 $x9)))))))
 (let (($x37 (and (and (and $x58 $x110) $x151) $x42)))
 (let (($x15 (= $x37 true)))
 (let (($x35 (= $x15 true)))
 (let (($x82 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x124 (and $x82 $x35)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x167 (and $x59 $x124)))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x123 (_ bv1 32))))
 (=> $x19 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x80 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x123 (_ bv1 32))))
 (= $x19 false)))))
 ))
 (let (($x70 (forall ((Lambda25 (_ BitVec 32)) )(let (($x36 (= false false)))
 (let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x123 (_ bv0 32))))
 (=> $x13 $x36))))))
 ))
 (let (($x8 (forall ((Lambda25 (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x123 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x123 (_ bv0 32))))
 (= $x13 true)))))
 ))
 (let (($x62 (and $x8 $x70)))
 (let (($x106 (and $x62 $x80)))
 (let (($x67 (and $x106 $x83)))
 (let (($x166 (and $x67 $x167)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x168 (and $x140 $x166)))
 (let (($x172 (=> $x168 $x170)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x32 (= $x6 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x175 (concat ?x169 (concat ?x124 ?x15)))))
 (let (($x157 (= input.dst.llvm-%n ?x30)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x114)))
 (let ((?x156 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x156)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x149 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x149)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x75 $x147)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x27 $x104)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x12 $x112)))
 (let (($x94 (not $x25)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x135 $x90)))
 (let (($x117 (and (not $x54) $x94)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x102 $x29)))
 (let (($x64 (not $x87)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x10 $x50)))
 (let (($x48 (and (not $x76) $x64)))
 (let (($x161 (and (and (and (and (and (and $x48 $x117) $x72) $x153) $x146) $x132) $x125)))
 (let (($x91 (and $x161 $x162)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x93 $x91)))
 (let (($x26 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x53 (or (bvugt input.memlabel-mem--symbol.1_begin ?x110) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x53) (or $x57 $x33)))))))
 (let (($x39 (and (and (and $x109 $x26) $x115) $x157)))
 (let (($x105 (= $x39 true)))
 (let (($x136 (= $x105 true)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x141 (and $x89 $x136)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x137 (and $x84 $x141)))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x103 (_ bv1 32))))
 (=> $x67 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x103 (_ bv1 32))))
 (= $x67 false)))))
 ))
 (let (($x28 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x103 (_ bv0 32))))
 (=> $x70 $x38))))))
 ))
 (let (($x19 (forall ((Lambda25 (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x103 (_ bv0 32))))
 (= $x70 true)))))
 ))
 (let (($x71 (and $x19 $x28)))
 (let (($x63 (and $x71 $x59)))
 (let (($x79 (and $x63 $x122)))
 (let (($x55 (and $x79 $x137)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x138 (and $x113 $x55)))
 (let (($x45 (=> $x138 $x32)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x32 (= $x6 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x175 (concat ?x169 (concat ?x124 ?x15)))))
 (let (($x157 (= input.dst.llvm-%n ?x30)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x114)))
 (let ((?x156 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x156)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x149 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x149)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x75 $x147)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x27 $x104)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x12 $x112)))
 (let (($x94 (not $x25)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x135 $x90)))
 (let (($x117 (and (not $x54) $x94)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x102 $x29)))
 (let (($x64 (not $x87)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x10 $x50)))
 (let (($x48 (and (not $x76) $x64)))
 (let (($x161 (and (and (and (and (and (and $x48 $x117) $x72) $x153) $x146) $x132) $x125)))
 (let (($x91 (and $x161 $x162)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x93 $x91)))
 (let (($x26 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x53 (or (bvugt input.memlabel-mem--symbol.1_begin ?x110) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x53) (or $x57 $x33)))))))
 (let (($x39 (and (and (and $x109 $x26) $x115) $x157)))
 (let (($x105 (= $x39 true)))
 (let (($x136 (= $x105 true)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x141 (and $x89 $x136)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x137 (and $x84 $x141)))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x103 (_ bv1 32))))
 (=> $x67 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x59 (forall ((Lambda25 (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x103 (_ bv1 32))))
 (= $x67 false)))))
 ))
 (let (($x28 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x103 (_ bv0 32))))
 (=> $x70 $x38))))))
 ))
 (let (($x19 (forall ((Lambda25 (_ BitVec 32)) )(let (($x139 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x103 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x103 (_ bv0 32))))
 (= $x70 true)))))
 ))
 (let (($x71 (and $x19 $x28)))
 (let (($x63 (and $x71 $x59)))
 (let (($x79 (and $x63 $x122)))
 (let (($x55 (and $x79 $x137)))
 (let (($x113 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x138 (and $x113 $x55)))
 (let (($x45 (=> $x138 $x32)))
 (not $x45))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa61d4183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x257 (= $x229 false)))
 (let (($x258 (= $x257 true)))
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x33)))
 (let (($x250 (= ?x77 input.dst.llvm-%n)))
 (let (($x251 (= $x250 true)))
 (let (($x247 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let ((?x230 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd symbol.1 ?x230)))
 (let (($x240 (and (bvule input.memlabel-mem--symbol.1_begin ?x231) (bvule (bvadd ?x231 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x244 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false $x240)))))
 (let (($x233 (=> (and $x229 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x240)))))
 (let (($x234 (= $x233 true)))
 (let (($x245 (= $x234 true)))
 (let (($x225 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x225 true)))
 (let (($x227 (= $x226 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x221 true)))
 (let (($x223 (= $x222 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x217 true)))
 (let (($x219 (= $x218 true)))
 (let (($x213 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (= $x213 true)))
 (let (($x215 (= $x214 true)))
 (let (($x187 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x165 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x165))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv2 32))) ?x185)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv3 32))) ?x183)))
 (let ((?x119 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (bvuge ?x203 (_ bv1 32))))
 (=> $x145 (= ?x119 ?x178)))))))))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x201 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (bvuge ?x203 (_ bv1 32))))
 (= $x145 (bvuge ?x201 (_ bv1 32)))))))))
 ))
 (let (($x209 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (= false false)))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x203 (_ bv0 32))))
 (=> $x204 $x78))))))
 ))
 (let (($x206 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x201 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x203 (_ bv0 32))))
 (= $x204 (= ?x201 (_ bv0 32)))))))))
 ))
 (let (($x81 (and $x206 $x209)))
 (let (($x14 (and $x81 $x86)))
 (let (($x188 (and $x14 $x187)))
 (let (($x189 (= $x188 true)))
 (let (($x210 (= $x189 true)))
 (let (($x36 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x80 (= $x36 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x55)))
 (let ((?x141 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x141)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x167 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x167)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x30 (and $x124 $x170)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x35 $x30)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x91 $x115)))
 (let (($x42 (not $x88)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x161 $x114)))
 (let (($x175 (and (not $x162) $x42)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x150 $x151)))
 (let (($x158 (not $x132)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x104 $x146)))
 (let (($x125 (and (not $x160) $x158)))
 (let (($x37 (and (and (and (and (and (and $x125 $x175) $x166) $x169) $x157) $x136) $x137)))
 (let (($x123 (and $x37 $x138)))
 (let (($x147 (= symbol.1 dst_symbol_addr.1)))
 (let (($x140 (and $x147 $x123)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x144 $x5)))))))
 (let (($x52 (and $x149 $x140)))
 (let (($x129 (= $x52 true)))
 (let (($x46 (= $x129 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x76 (= $x50 true)))
 (let (($x127 (= $x76 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x133 (= $x24 true)))
 (let (($x93 (= $x133 true)))
 (let (($x109 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x65 (= $x109 true)))
 (let (($x26 (= $x65 true)))
 (let (($x97 (= ?x77 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (= $x97 true)))
 (let (($x16 (and $x92 $x26)))
 (let (($x10 (and $x16 $x93)))
 (let (($x102 (and $x10 $x127)))
 (let (($x8 (and $x102 $x46)))
 (let (($x95 (and $x8 $x80)))
 (let (($x211 (and $x95 $x210)))
 (let (($x216 (and $x211 $x215)))
 (let (($x220 (and $x216 $x219)))
 (let (($x224 (and $x220 $x223)))
 (let (($x228 (and $x224 $x227)))
 (let (($x246 (and $x228 $x245)))
 (let (($x249 (and $x246 $x248)))
 (let (($x252 (and $x249 $x251)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x253 (and $x57 $x252)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x254 (and $x53 $x253)))
 (let (($x142 (forall ((Lambda25 (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x106 (_ bv1 32))))
 (=> $x79 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x84 (forall ((Lambda25 (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x106 (_ bv1 32))))
 (= $x79 false)))))
 ))
 (let (($x82 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (= false false)))
 (let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x106 (_ bv0 32))))
 (=> $x28 $x78))))))
 ))
 (let (($x67 (forall ((Lambda25 (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x106 (_ bv0 32))))
 (= $x28 true)))))
 ))
 (let (($x69 (and $x67 $x82)))
 (let (($x74 (and $x69 $x84)))
 (let (($x61 (and $x74 $x142)))
 (let (($x255 (and $x61 $x254)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x256 (and $x13 $x255)))
 (let (($x259 (=> $x256 $x258)))
 (not $x259))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x229 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x257 (= $x229 false)))
 (let (($x258 (= $x257 true)))
 (let ((?x33 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x33)))
 (let (($x250 (= ?x77 input.dst.llvm-%n)))
 (let (($x251 (= $x250 true)))
 (let (($x247 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let ((?x230 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd symbol.1 ?x230)))
 (let (($x240 (and (bvule input.memlabel-mem--symbol.1_begin ?x231) (bvule (bvadd ?x231 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x244 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false $x240)))))
 (let (($x233 (=> (and $x229 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x240)))))
 (let (($x234 (= $x233 true)))
 (let (($x245 (= $x234 true)))
 (let (($x225 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (= $x225 true)))
 (let (($x227 (= $x226 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x221 true)))
 (let (($x223 (= $x222 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x217 true)))
 (let (($x219 (= $x218 true)))
 (let (($x213 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (= $x213 true)))
 (let (($x215 (= $x214 true)))
 (let (($x187 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x165 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x165))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv2 32))) ?x185)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv3 32))) ?x183)))
 (let ((?x119 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (bvuge ?x203 (_ bv1 32))))
 (=> $x145 (= ?x119 ?x178)))))))))))
 ))
 (let (($x86 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x201 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (bvuge ?x203 (_ bv1 32))))
 (= $x145 (bvuge ?x201 (_ bv1 32)))))))))
 ))
 (let (($x209 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (= false false)))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x203 (_ bv0 32))))
 (=> $x204 $x78))))))
 ))
 (let (($x206 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x201 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x203 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x203 (_ bv0 32))))
 (= $x204 (= ?x201 (_ bv0 32)))))))))
 ))
 (let (($x81 (and $x206 $x209)))
 (let (($x14 (and $x81 $x86)))
 (let (($x188 (and $x14 $x187)))
 (let (($x189 (= $x188 true)))
 (let (($x210 (= $x189 true)))
 (let (($x36 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x80 (= $x36 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x55)))
 (let ((?x141 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x141)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x167 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x167)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x30 (and $x124 $x170)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x35 $x30)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x91 $x115)))
 (let (($x42 (not $x88)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x161 $x114)))
 (let (($x175 (and (not $x162) $x42)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x150 $x151)))
 (let (($x158 (not $x132)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x104 $x146)))
 (let (($x125 (and (not $x160) $x158)))
 (let (($x37 (and (and (and (and (and (and $x125 $x175) $x166) $x169) $x157) $x136) $x137)))
 (let (($x123 (and $x37 $x138)))
 (let (($x147 (= symbol.1 dst_symbol_addr.1)))
 (let (($x140 (and $x147 $x123)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x144 $x5)))))))
 (let (($x52 (and $x149 $x140)))
 (let (($x129 (= $x52 true)))
 (let (($x46 (= $x129 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x76 (= $x50 true)))
 (let (($x127 (= $x76 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x133 (= $x24 true)))
 (let (($x93 (= $x133 true)))
 (let (($x109 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x65 (= $x109 true)))
 (let (($x26 (= $x65 true)))
 (let (($x97 (= ?x77 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x92 (= $x97 true)))
 (let (($x16 (and $x92 $x26)))
 (let (($x10 (and $x16 $x93)))
 (let (($x102 (and $x10 $x127)))
 (let (($x8 (and $x102 $x46)))
 (let (($x95 (and $x8 $x80)))
 (let (($x211 (and $x95 $x210)))
 (let (($x216 (and $x211 $x215)))
 (let (($x220 (and $x216 $x219)))
 (let (($x224 (and $x220 $x223)))
 (let (($x228 (and $x224 $x227)))
 (let (($x246 (and $x228 $x245)))
 (let (($x249 (and $x246 $x248)))
 (let (($x252 (and $x249 $x251)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x253 (and $x57 $x252)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x254 (and $x53 $x253)))
 (let (($x142 (forall ((Lambda25 (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x106 (_ bv1 32))))
 (=> $x79 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x84 (forall ((Lambda25 (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x106 (_ bv1 32))))
 (= $x79 false)))))
 ))
 (let (($x82 (forall ((Lambda25 (_ BitVec 32)) )(let (($x78 (= false false)))
 (let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x106 (_ bv0 32))))
 (=> $x28 $x78))))))
 ))
 (let (($x67 (forall ((Lambda25 (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x106 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x106 (_ bv0 32))))
 (= $x28 true)))))
 ))
 (let (($x69 (and $x67 $x82)))
 (let (($x74 (and $x69 $x84)))
 (let (($x61 (and $x74 $x142)))
 (let (($x255 (and $x61 $x254)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x256 (and $x13 $x255)))
 (let (($x259 (=> $x256 $x258)))
 (not $x259))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x7ffffe83 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe82 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe81 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x35000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x32003f2c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x32003f2f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x3500019f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x32003f2c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x35000010)
  (define-fun symbol.1 () (_ BitVec 32)
    #x35000010)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x35000013 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000012 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000011 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000010 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (not $x28)))
 (let (($x163 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x47 (not $x163)))
 (let (($x21 (or $x47 $x41)))
 (let (($x96 (= $x21 true)))
 (let (($x130 (= $x96 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x126)))
 (let (($x118 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x118 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x191)))
 (let (($x194 (= ?x200 input.dst.llvm-%n)))
 (let (($x207 (= $x194 true)))
 (let (($x196 (= ?x200 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x197 (= $x196 true)))
 (let (($x23 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x143 (= $x23 true)))
 (let (($x83 (= $x143 true)))
 (let (($x122 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x34 (= $x122 true)))
 (let (($x101 (= $x34 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x19 true)))
 (let (($x59 (= $x38 true)))
 (let (($x121 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x251 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x251))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x251 (_ bv2 32))) ?x255)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x251 (_ bv3 32))) ?x258)))
 (let ((?x230 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x213 (_ bv1 32))))
 (=> $x225 (= ?x230 ?x232)))))))))))
 ))
 (let (($x227 (forall ((Lambda25 (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x213 (_ bv1 32))))
 (= $x225 (bvuge ?x211 (_ bv1 32)))))))))
 ))
 (let (($x219 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (= false false)))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (= ?x213 (_ bv0 32))))
 (=> $x214 $x24))))))
 ))
 (let (($x216 (forall ((Lambda25 (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (= ?x213 (_ bv0 32))))
 (= $x214 (= ?x211 (_ bv0 32)))))))))
 ))
 (let (($x220 (and $x216 $x219)))
 (let (($x228 (and $x220 $x227)))
 (let (($x139 (and $x228 $x121)))
 (let (($x73 (= $x139 true)))
 (let (($x22 (= $x73 true)))
 (let (($x165 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x179 (= $x165 true)))
 (let (($x180 (= $x179 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x128 (= $x119 true)))
 (let (($x18 (= $x128 true)))
 (let (($x116 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x60 (= $x116 true)))
 (let (($x86 (= $x60 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x81 (= $x209 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x36)))
 (let ((?x46 (bvand symbol.1 (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x46)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x55 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x138 (= input.memlabel-mem--symbol.1_end ?x55)))
 (let (($x137 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x123 (and $x137 $x138)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x141 $x123)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x30 (and $x167 $x170)))
 (let (($x157 (not $x30)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x35 $x124)))
 (let (($x39 (and (not $x15) $x157)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x6 $x166)))
 (let (($x168 (not $x32)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x88 $x42)))
 (let (($x45 (and (not $x175) $x168)))
 (let (($x199 (and (and (and (and (and (and $x45 $x39) $x105) $x9) $x140) $x129) $x8)))
 (let (($x192 (and $x199 $x80)))
 (let (($x64 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x64 $x192)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x156 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x156) (or $x158 $x125)))))))
 (let (($x201 (and $x115 $x198)))
 (let (($x202 (= $x201 true)))
 (let (($x205 (= $x202 true)))
 (let (($x145 (and $x205 $x81)))
 (let (($x14 (and $x145 $x86)))
 (let (($x155 (and $x14 $x18)))
 (let (($x40 (and $x155 $x180)))
 (let (($x62 (and $x40 $x22)))
 (let (($x152 (and $x62 $x59)))
 (let (($x20 (and $x152 $x101)))
 (let (($x98 (and $x20 $x83)))
 (let (($x193 (and $x98 $x197)))
 (let (($x31 (and $x193 $x207)))
 (let (($x56 (and $x31 $x49)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x7 (and $x27 $x56)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x17 (and $x5 $x7)))
 (let (($x164 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x109 (_ bv1 32))))
 (=> $x102 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x109 (_ bv1 32))))
 (= $x102 false)))))
 ))
 (let (($x10 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (= false false)))
 (let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x109 (_ bv0 32))))
 (=> $x65 $x24))))))
 ))
 (let (($x16 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x109 (_ bv0 32))))
 (= $x65 true)))))
 ))
 (let (($x50 (and $x16 $x10)))
 (let (($x148 (and $x50 $x90)))
 (let (($x144 (and $x148 $x164)))
 (let (($x99 (and $x144 $x17)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x120 (and $x53 $x99)))
 (let ((?x70 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvadd symbol.1 ?x70)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x13) (bvule (bvadd ?x13 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x71 (=> (and $x28 (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x173 (and $x71 $x120)))
 (let (($x154 (=> $x173 $x130)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x41 (not $x28)))
 (let (($x163 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x47 (not $x163)))
 (let (($x21 (or $x47 $x41)))
 (let (($x96 (= $x21 true)))
 (let (($x130 (= $x96 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x126)))
 (let (($x118 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x49 (= $x118 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x191)))
 (let (($x194 (= ?x200 input.dst.llvm-%n)))
 (let (($x207 (= $x194 true)))
 (let (($x196 (= ?x200 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x197 (= $x196 true)))
 (let (($x23 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x143 (= $x23 true)))
 (let (($x83 (= $x143 true)))
 (let (($x122 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x34 (= $x122 true)))
 (let (($x101 (= $x34 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x19 true)))
 (let (($x59 (= $x38 true)))
 (let (($x121 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x251 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x251))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x251 (_ bv2 32))) ?x255)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x251 (_ bv3 32))) ?x258)))
 (let ((?x230 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x213 (_ bv1 32))))
 (=> $x225 (= ?x230 ?x232)))))))))))
 ))
 (let (($x227 (forall ((Lambda25 (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x213 (_ bv1 32))))
 (= $x225 (bvuge ?x211 (_ bv1 32)))))))))
 ))
 (let (($x219 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (= false false)))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (= ?x213 (_ bv0 32))))
 (=> $x214 $x24))))))
 ))
 (let (($x216 (forall ((Lambda25 (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x211 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x213 (ite $x182 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (= ?x213 (_ bv0 32))))
 (= $x214 (= ?x211 (_ bv0 32)))))))))
 ))
 (let (($x220 (and $x216 $x219)))
 (let (($x228 (and $x220 $x227)))
 (let (($x139 (and $x228 $x121)))
 (let (($x73 (= $x139 true)))
 (let (($x22 (= $x73 true)))
 (let (($x165 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x179 (= $x165 true)))
 (let (($x180 (= $x179 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x128 (= $x119 true)))
 (let (($x18 (= $x128 true)))
 (let (($x116 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x60 (= $x116 true)))
 (let (($x86 (= $x60 true)))
 (let (($x208 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x209 (= $x208 true)))
 (let (($x81 (= $x209 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x36)))
 (let ((?x46 (bvand symbol.1 (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x46)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x55 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x138 (= input.memlabel-mem--symbol.1_end ?x55)))
 (let (($x137 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x123 (and $x137 $x138)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x141 $x123)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x30 (and $x167 $x170)))
 (let (($x157 (not $x30)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x35 $x124)))
 (let (($x39 (and (not $x15) $x157)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x6 $x166)))
 (let (($x168 (not $x32)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x88 $x42)))
 (let (($x45 (and (not $x175) $x168)))
 (let (($x199 (and (and (and (and (and (and $x45 $x39) $x105) $x9) $x140) $x129) $x8)))
 (let (($x192 (and $x199 $x80)))
 (let (($x64 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x64 $x192)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x156 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x156) (or $x158 $x125)))))))
 (let (($x201 (and $x115 $x198)))
 (let (($x202 (= $x201 true)))
 (let (($x205 (= $x202 true)))
 (let (($x145 (and $x205 $x81)))
 (let (($x14 (and $x145 $x86)))
 (let (($x155 (and $x14 $x18)))
 (let (($x40 (and $x155 $x180)))
 (let (($x62 (and $x40 $x22)))
 (let (($x152 (and $x62 $x59)))
 (let (($x20 (and $x152 $x101)))
 (let (($x98 (and $x20 $x83)))
 (let (($x193 (and $x98 $x197)))
 (let (($x31 (and $x193 $x207)))
 (let (($x56 (and $x31 $x49)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x7 (and $x27 $x56)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x17 (and $x5 $x7)))
 (let (($x164 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x109 (_ bv1 32))))
 (=> $x102 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x109 (_ bv1 32))))
 (= $x102 false)))))
 ))
 (let (($x10 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (= false false)))
 (let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x109 (_ bv0 32))))
 (=> $x65 $x24))))))
 ))
 (let (($x16 (forall ((Lambda25 (_ BitVec 32)) )(let (($x85 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x109 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x109 (_ bv0 32))))
 (= $x65 true)))))
 ))
 (let (($x50 (and $x16 $x10)))
 (let (($x148 (and $x50 $x90)))
 (let (($x144 (and $x148 $x164)))
 (let (($x99 (and $x144 $x17)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x120 (and $x53 $x99)))
 (let ((?x70 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvadd symbol.1 ?x70)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x13) (bvule (bvadd ?x13 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x71 (=> (and $x28 (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x173 (and $x71 $x120)))
 (let (($x154 (=> $x173 $x130)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x290 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x287 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x288 (bvmul (_ bv4294967295 32) ?x287)))
 (let ((?x289 (bvneg ?x288)))
 (let (($x291 (= ?x289 ?x290)))
 (let (($x292 (= $x291 true)))
 (let ((?x275 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x275)))
 (let (($x277 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (= $x277 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x249 (bvsub ?x113 ?x63)))
 (let (($x265 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x249) (bvult ?x113 ?x249))))
 (let ((?x241 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvmul (_ bv4 64) ?x241)))
 (let ((?x247 ((_ extract 63 32) ?x234)))
 (let (($x248 (= (_ bv0 32) ?x247)))
 (let (($x240 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x268 (and (and (and true $x240) $x248) $x265)))
 (let (($x245 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x269 (and $x245 $x268)))
 (let (($x270 (= true $x269)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x29 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x222 (= $x221 true)))
 (let (($x223 (= $x222 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x181 true)))
 (let (($x187 (= $x184 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x171 true)))
 (let (($x183 (= $x185 true)))
 (let (($x25 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x236 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x236))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv2 32))) ?x108)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv3 32))) ?x134)))
 (let ((?x174 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x34 (_ bv1 32))))
 (=> $x193 (= ?x174 ?x127)))))))))))
 ))
 (let (($x207 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x152 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x34 (_ bv1 32))))
 (= $x193 (bvuge ?x152 (_ bv1 32)))))))))
 ))
 (let (($x98 (forall ((Lambda25 (_ BitVec 32)) )(let (($x12 (= false false)))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x34 (_ bv0 32))))
 (=> $x101 $x12))))))
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x152 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x34 (_ bv0 32))))
 (= $x101 (= ?x152 (_ bv0 32)))))))))
 ))
 (let (($x190 (and $x23 $x98)))
 (let (($x31 (and $x190 $x207)))
 (let (($x176 (and $x31 $x25)))
 (let (($x231 (= $x176 true)))
 (let (($x186 (= $x231 true)))
 (let (($x256 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x257 (= $x256 true)))
 (let (($x253 (= $x257 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x259 (= $x251 true)))
 (let (($x260 (= $x259 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x230 (= $x228 true)))
 (let (($x235 (= $x230 true)))
 (let (($x225 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x224 (= $x225 true)))
 (let (($x226 (= $x224 true)))
 (let (($x218 (= $x29 true)))
 (let (($x219 (= $x218 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x165)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x18)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x116 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x60 (= input.memlabel-mem--symbol.1_end ?x116)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x81 $x60)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x209 $x86)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x192 (and $x36 $x80)))
 (let (($x198 (not $x192)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x199 (and $x46 $x8)))
 (let (($x202 (and (not $x199) $x198)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x123 $x140)))
 (let (($x52 (not $x204)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x37 $x55)))
 (let (($x195 (and (not $x138) $x52)))
 (let (($x189 (and (and (and (and (and (and $x195 $x202) $x205) $x208) $x14) $x128) $x155)))
 (let (($x188 (and $x189 $x179)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x210 (and $x45 $x188)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x170 (or (bvugt input.memlabel-mem--symbol.1_begin ?x15) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x170) (or $x95 $x105)))))))
 (let (($x211 (and $x137 $x210)))
 (let (($x212 (= $x211 true)))
 (let (($x215 (= $x212 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x169 (= ?x88 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x6 (= $x169 true)))
 (let (($x42 (= ?x88 input.dst.llvm-%n)))
 (let (($x175 (= $x42 true)))
 (let (($x166 (and $x175 $x6)))
 (let (($x216 (and $x166 $x215)))
 (let (($x220 (and $x216 $x219)))
 (let (($x227 (and $x220 $x226)))
 (let (($x250 (and $x227 $x235)))
 (let (($x242 (and $x250 $x260)))
 (let (($x254 (and $x242 $x253)))
 (let (($x177 (and $x254 $x186)))
 (let (($x178 (and $x177 $x183)))
 (let (($x217 (and $x178 $x187)))
 (let (($x229 (and $x217 $x223)))
 (let (($x274 (and $x229 $x273)))
 (let (($x279 (and $x274 $x278)))
 (let (($x115 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x281 (and (not $x115) $x279)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x282 (and $x162 $x281)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x283 (and $x125 $x282)))
 (let (($x151 (forall ((Lambda25 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x102 (_ bv1 32))))
 (=> $x153 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x102 (_ bv1 32))))
 (= $x153 false)))))
 ))
 (let (($x164 (forall ((Lambda25 (_ BitVec 32)) )(let (($x12 (= false false)))
 (let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x102 (_ bv0 32))))
 (=> $x135 $x12))))))
 ))
 (let (($x148 (forall ((Lambda25 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x102 (_ bv0 32))))
 (= $x135 true)))))
 ))
 (let (($x144 (and $x148 $x164)))
 (let (($x48 (and $x144 $x27)))
 (let (($x158 (and $x48 $x151)))
 (let (($x284 (and $x158 $x283)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x285 (and $x85 $x284)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x82 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x286 (and $x82 $x285)))
 (let (($x293 (=> $x286 $x292)))
 (not $x293)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x290 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x287 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x288 (bvmul (_ bv4294967295 32) ?x287)))
 (let ((?x289 (bvneg ?x288)))
 (let (($x291 (= ?x289 ?x290)))
 (let (($x292 (= $x291 true)))
 (let ((?x275 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x275)))
 (let (($x277 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (= $x277 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x249 (bvsub ?x113 ?x63)))
 (let (($x265 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x249) (bvult ?x113 ?x249))))
 (let ((?x241 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvmul (_ bv4 64) ?x241)))
 (let ((?x247 ((_ extract 63 32) ?x234)))
 (let (($x248 (= (_ bv0 32) ?x247)))
 (let (($x240 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x268 (and (and (and true $x240) $x248) $x265)))
 (let (($x245 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x269 (and $x245 $x268)))
 (let (($x270 (= true $x269)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x29 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x222 (= $x221 true)))
 (let (($x223 (= $x222 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x181 true)))
 (let (($x187 (= $x184 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x171 true)))
 (let (($x183 (= $x185 true)))
 (let (($x25 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x236 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x236))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv2 32))) ?x108)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv3 32))) ?x134)))
 (let ((?x174 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x34 (_ bv1 32))))
 (=> $x193 (= ?x174 ?x127)))))))))))
 ))
 (let (($x207 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x152 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x34 (_ bv1 32))))
 (= $x193 (bvuge ?x152 (_ bv1 32)))))))))
 ))
 (let (($x98 (forall ((Lambda25 (_ BitVec 32)) )(let (($x12 (= false false)))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x34 (_ bv0 32))))
 (=> $x101 $x12))))))
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x152 (ite $x59 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x34 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x34 (_ bv0 32))))
 (= $x101 (= ?x152 (_ bv0 32)))))))))
 ))
 (let (($x190 (and $x23 $x98)))
 (let (($x31 (and $x190 $x207)))
 (let (($x176 (and $x31 $x25)))
 (let (($x231 (= $x176 true)))
 (let (($x186 (= $x231 true)))
 (let (($x256 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x257 (= $x256 true)))
 (let (($x253 (= $x257 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x259 (= $x251 true)))
 (let (($x260 (= $x259 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x230 (= $x228 true)))
 (let (($x235 (= $x230 true)))
 (let (($x225 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x224 (= $x225 true)))
 (let (($x226 (= $x224 true)))
 (let (($x218 (= $x29 true)))
 (let (($x219 (= $x218 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x165)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x18)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x116 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x60 (= input.memlabel-mem--symbol.1_end ?x116)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x81 $x60)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x209 $x86)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x192 (and $x36 $x80)))
 (let (($x198 (not $x192)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x199 (and $x46 $x8)))
 (let (($x202 (and (not $x199) $x198)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x123 $x140)))
 (let (($x52 (not $x204)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x37 $x55)))
 (let (($x195 (and (not $x138) $x52)))
 (let (($x189 (and (and (and (and (and (and $x195 $x202) $x205) $x208) $x14) $x128) $x155)))
 (let (($x188 (and $x189 $x179)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x210 (and $x45 $x188)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x170 (or (bvugt input.memlabel-mem--symbol.1_begin ?x15) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x170) (or $x95 $x105)))))))
 (let (($x211 (and $x137 $x210)))
 (let (($x212 (= $x211 true)))
 (let (($x215 (= $x212 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x169 (= ?x88 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x6 (= $x169 true)))
 (let (($x42 (= ?x88 input.dst.llvm-%n)))
 (let (($x175 (= $x42 true)))
 (let (($x166 (and $x175 $x6)))
 (let (($x216 (and $x166 $x215)))
 (let (($x220 (and $x216 $x219)))
 (let (($x227 (and $x220 $x226)))
 (let (($x250 (and $x227 $x235)))
 (let (($x242 (and $x250 $x260)))
 (let (($x254 (and $x242 $x253)))
 (let (($x177 (and $x254 $x186)))
 (let (($x178 (and $x177 $x183)))
 (let (($x217 (and $x178 $x187)))
 (let (($x229 (and $x217 $x223)))
 (let (($x274 (and $x229 $x273)))
 (let (($x279 (and $x274 $x278)))
 (let (($x115 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x281 (and (not $x115) $x279)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x282 (and $x162 $x281)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x283 (and $x125 $x282)))
 (let (($x151 (forall ((Lambda25 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x102 (_ bv1 32))))
 (=> $x153 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x102 (_ bv1 32))))
 (= $x153 false)))))
 ))
 (let (($x164 (forall ((Lambda25 (_ BitVec 32)) )(let (($x12 (= false false)))
 (let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x102 (_ bv0 32))))
 (=> $x135 $x12))))))
 ))
 (let (($x148 (forall ((Lambda25 (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x102 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x102 (_ bv0 32))))
 (= $x135 true)))))
 ))
 (let (($x144 (and $x148 $x164)))
 (let (($x48 (and $x144 $x27)))
 (let (($x158 (and $x48 $x151)))
 (let (($x284 (and $x158 $x283)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x285 (and $x85 $x284)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x82 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x286 (and $x82 $x285)))
 (let (($x293 (=> $x286 $x292)))
 (not $x293)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x173 (bvule ?x120 (_ bv3 32))))
 (let (($x99 (= $x173 true)))
 (let (($x163 (= $x99 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x62)))
 (let (($x191 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x191 true)))
 (let (($x121 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x139 (= $x121 true)))
 (let (($x73 (= $x139 true)))
 (let (($x252 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x232 (= $x252 true)))
 (let (($x87 (= $x232 true)))
 (let (($x146 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x160 (= $x146 true)))
 (let (($x258 (= $x160 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x66)))
 (let ((?x293 (bvand symbol.1 (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x293)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x287 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x288 (= input.memlabel-mem--symbol.1_end ?x287)))
 (let (($x285 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x289 (and $x285 $x288)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x284 $x289)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x276 (and $x274 $x275)))
 (let (($x277 (not $x276)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x273 (and $x271 $x272)))
 (let (($x279 (and (not $x273) $x277)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x263 $x264)))
 (let (($x268 (not $x265)))
 (let (($x262 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x267 $x262)))
 (let (($x270 (and (not $x249) $x268)))
 (let (($x93 (and (and (and (and (and (and $x270 $x279) $x281) $x283) $x290) $x292) $x294)))
 (let (($x10 (and $x93 $x32)))
 (let (($x221 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x221 $x10)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x245 (or (bvugt input.memlabel-mem--symbol.1_begin ?x229) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x248 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x245) (or $x239 $x240)))))))
 (let (($x94 (and $x248 $x50)))
 (let (($x72 (= $x94 true)))
 (let (($x5 (= $x72 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x127 (bvsub ?x113 ?x63)))
 (let (($x176 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x127) (bvult ?x113 ?x127))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x33 (bvmul (_ bv4 64) ?x112)))
 (let ((?x108 ((_ extract 63 32) ?x33)))
 (let (($x134 (= (_ bv0 32) ?x108)))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x177 (and (and (and true $x92) $x134) $x176)))
 (let (($x236 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x171 (and $x236 $x177)))
 (let (($x185 (= true $x171)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x43 $x185)))
 (let (($x178 (= $x183 true)))
 (let (($x181 (= $x178 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x194 true)))
 (let (($x31 (= $x207 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x190 (= $x98 true)))
 (let (($x193 (= $x190 true)))
 (let (($x152 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x259 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x259))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv2 32))) ?x257)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv3 32))) ?x255)))
 (let ((?x165 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x206 (_ bv1 32))))
 (=> $x128 (= ?x165 ?x38)))))))))))
 ))
 (let (($x18 (forall ((Lambda25 (_ BitVec 32)) )(let (($x180 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x206 (_ bv1 32))))
 (= $x128 (bvuge ?x205 (_ bv1 32)))))))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x206 (_ bv0 32))))
 (=> $x208 $x48))))))
 ))
 (let (($x209 (forall ((Lambda25 (_ BitVec 32)) )(let (($x180 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x206 (_ bv0 32))))
 (= $x208 (= ?x205 (_ bv0 32)))))))))
 ))
 (let (($x60 (and $x209 $x116)))
 (let (($x155 (and $x60 $x18)))
 (let (($x122 (and $x155 $x152)))
 (let (($x20 (= $x122 true)))
 (let (($x23 (= $x20 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x137)))
 (let (($x138 (= ?x168 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (= $x138 true)))
 (let (($x45 (= ?x168 input.dst.llvm-%n)))
 (let (($x37 (= $x45 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x107 (= $x105 true)))
 (let (($x136 (= $x107 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x157 (= $x30 true)))
 (let (($x95 (= $x157 true)))
 (let (($x167 (= $x43 true)))
 (let (($x170 (= $x167 true)))
 (let (($x39 (and $x170 $x95)))
 (let (($x9 (and $x39 $x136)))
 (let (($x55 (and $x9 $x37)))
 (let (($x123 (and $x55 $x129)))
 (let (($x83 (and $x123 $x23)))
 (let (($x197 (and $x83 $x193)))
 (let (($x174 (and $x197 $x31)))
 (let (($x184 (and $x174 $x181)))
 (let (($x147 (and $x184 $x5)))
 (let (($x118 (and $x147 $x258)))
 (let (($x131 (and $x118 $x87)))
 (let (($x22 (and $x131 $x73)))
 (let (($x196 (and $x22 $x200)))
 (let (($x51 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x7 (and (not $x51) $x196)))
 (let (($x141 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (and $x141 $x7)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x130 (and $x166 $x17)))
 (let (($x175 (forall ((Lambda25 (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x144 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x144 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x150 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x144 (_ bv0 32))))
 (=> $x153 $x48))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x144 (_ bv0 32))))
 (= $x153 true)))))
 ))
 (let (($x151 (and $x27 $x150)))
 (let (($x162 (and $x151 $x114)))
 (let (($x169 (and $x162 $x175)))
 (let (($x154 (and $x169 $x130)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x41 (and $x65 $x154)))
 (let (($x67 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x84 (=> (and $x43 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x67)))))
 (let (($x21 (and $x84 $x41)))
 (let (($x96 (=> $x21 $x163)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x173 (bvule ?x120 (_ bv3 32))))
 (let (($x99 (= $x173 true)))
 (let (($x163 (= $x99 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x143 (bvneg ?x62)))
 (let (($x191 (= ?x143 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x191 true)))
 (let (($x121 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x139 (= $x121 true)))
 (let (($x73 (= $x139 true)))
 (let (($x252 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x232 (= $x252 true)))
 (let (($x87 (= $x232 true)))
 (let (($x146 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x160 (= $x146 true)))
 (let (($x258 (= $x160 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x66)))
 (let ((?x293 (bvand symbol.1 (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x293)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x287 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x288 (= input.memlabel-mem--symbol.1_end ?x287)))
 (let (($x285 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x289 (and $x285 $x288)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x284 $x289)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x276 (and $x274 $x275)))
 (let (($x277 (not $x276)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x273 (and $x271 $x272)))
 (let (($x279 (and (not $x273) $x277)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x263 $x264)))
 (let (($x268 (not $x265)))
 (let (($x262 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x267 $x262)))
 (let (($x270 (and (not $x249) $x268)))
 (let (($x93 (and (and (and (and (and (and $x270 $x279) $x281) $x283) $x290) $x292) $x294)))
 (let (($x10 (and $x93 $x32)))
 (let (($x221 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x221 $x10)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x245 (or (bvugt input.memlabel-mem--symbol.1_begin ?x229) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x248 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x245) (or $x239 $x240)))))))
 (let (($x94 (and $x248 $x50)))
 (let (($x72 (= $x94 true)))
 (let (($x5 (= $x72 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x127 (bvsub ?x113 ?x63)))
 (let (($x176 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x127) (bvult ?x113 ?x127))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x33 (bvmul (_ bv4 64) ?x112)))
 (let ((?x108 ((_ extract 63 32) ?x33)))
 (let (($x134 (= (_ bv0 32) ?x108)))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x177 (and (and (and true $x92) $x134) $x176)))
 (let (($x236 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x171 (and $x236 $x177)))
 (let (($x185 (= true $x171)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x43 $x185)))
 (let (($x178 (= $x183 true)))
 (let (($x181 (= $x178 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x194 true)))
 (let (($x31 (= $x207 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x190 (= $x98 true)))
 (let (($x193 (= $x190 true)))
 (let (($x152 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x259 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x259))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv2 32))) ?x257)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv3 32))) ?x255)))
 (let ((?x165 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x206 (_ bv1 32))))
 (=> $x128 (= ?x165 ?x38)))))))))))
 ))
 (let (($x18 (forall ((Lambda25 (_ BitVec 32)) )(let (($x180 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x206 (_ bv1 32))))
 (= $x128 (bvuge ?x205 (_ bv1 32)))))))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x206 (_ bv0 32))))
 (=> $x208 $x48))))))
 ))
 (let (($x209 (forall ((Lambda25 (_ BitVec 32)) )(let (($x180 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x205 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x206 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x206 (_ bv0 32))))
 (= $x208 (= ?x205 (_ bv0 32)))))))))
 ))
 (let (($x60 (and $x209 $x116)))
 (let (($x155 (and $x60 $x18)))
 (let (($x122 (and $x155 $x152)))
 (let (($x20 (= $x122 true)))
 (let (($x23 (= $x20 true)))
 (let ((?x137 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x168 (bvneg ?x137)))
 (let (($x138 (= ?x168 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (= $x138 true)))
 (let (($x45 (= ?x168 input.dst.llvm-%n)))
 (let (($x37 (= $x45 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x107 (= $x105 true)))
 (let (($x136 (= $x107 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x157 (= $x30 true)))
 (let (($x95 (= $x157 true)))
 (let (($x167 (= $x43 true)))
 (let (($x170 (= $x167 true)))
 (let (($x39 (and $x170 $x95)))
 (let (($x9 (and $x39 $x136)))
 (let (($x55 (and $x9 $x37)))
 (let (($x123 (and $x55 $x129)))
 (let (($x83 (and $x123 $x23)))
 (let (($x197 (and $x83 $x193)))
 (let (($x174 (and $x197 $x31)))
 (let (($x184 (and $x174 $x181)))
 (let (($x147 (and $x184 $x5)))
 (let (($x118 (and $x147 $x258)))
 (let (($x131 (and $x118 $x87)))
 (let (($x22 (and $x131 $x73)))
 (let (($x196 (and $x22 $x200)))
 (let (($x51 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x7 (and (not $x51) $x196)))
 (let (($x141 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x17 (and $x141 $x7)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x130 (and $x166 $x17)))
 (let (($x175 (forall ((Lambda25 (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x144 (_ bv1 32))))
 (=> $x125 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x144 (_ bv1 32))))
 (= $x125 false)))))
 ))
 (let (($x150 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x144 (_ bv0 32))))
 (=> $x153 $x48))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x144 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (= ?x144 (_ bv0 32))))
 (= $x153 true)))))
 ))
 (let (($x151 (and $x27 $x150)))
 (let (($x162 (and $x151 $x114)))
 (let (($x169 (and $x162 $x175)))
 (let (($x154 (and $x169 $x130)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x41 (and $x65 $x154)))
 (let (($x67 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x84 (=> (and $x43 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x67)))))
 (let (($x21 (and $x84 $x41)))
 (let (($x96 (=> $x21 $x163)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x90001004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10010008)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x90001007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x10010197)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x90001004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10010008)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10010008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x1001000b (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x1001000a (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x10010009 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x10010008 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00004002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xd0000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xee400600)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xee400603)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xd00001cf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xee400600)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xd0000040)
  (define-fun symbol.1 () (_ BitVec 32)
    #xd0000040)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00004002)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xd0000043 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xd0000042 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xd0000041 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xd0000040 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x219 (bvule ?x215 (_ bv4 32))))
 (let (($x226 (= $x219 true)))
 (let (($x230 (= $x226 true)))
 (let ((?x86 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x86)))
 (let (($x213 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x213 true)))
 (let (($x36 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x80 (= $x36 true)))
 (let (($x192 (= $x80 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x8 (= $x46 true)))
 (let (($x199 (= $x8 true)))
 (let (($x52 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x179 (= $x52 true)))
 (let (($x140 (= $x179 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x210)))
 (let ((?x44 (bvand symbol.1 (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x44)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x173 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (and $x41 $x173)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x154 $x99)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (and $x22 $x62)))
 (let (($x191 (not $x143)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x121 $x139)))
 (let (($x196 (and (not $x73) $x191)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x258 $x118)))
 (let (($x232 (not $x252)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x147 $x146)))
 (let (($x131 (and (not $x160) $x232)))
 (let (($x164 (and (and (and (and (and (and $x131 $x196) $x7) $x130) $x163) $x261) $x187)))
 (let (($x91 (and $x164 $x90)))
 (let (($x287 (= symbol.1 dst_symbol_addr.1)))
 (let (($x158 (and $x287 $x91)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x290 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x290)))
 (let (($x292 (or (bvugt input.memlabel-mem--symbol.1_begin ?x290) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x292) (or $x93 $x66)))))))
 (let (($x132 (and $x5 $x158)))
 (let (($x172 (= $x132 true)))
 (let (($x149 (= $x172 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x273 (bvsub ?x113 ?x63)))
 (let (($x276 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x273) (bvult ?x113 ?x273))))
 (let ((?x268 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvmul (_ bv4 64) ?x268)))
 (let ((?x271 ((_ extract 63 32) ?x270)))
 (let (($x272 (= (_ bv0 32) ?x271)))
 (let (($x264 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x56 (and (and (and true $x264) $x272) $x276)))
 (let (($x267 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x281 (and $x267 $x56)))
 (let (($x16 (= true $x281)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (=> $x70 $x16)))
 (let (($x283 (= $x282 true)))
 (let (($x77 (= $x283 true)))
 (let (($x238 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x241 (= $x238 true)))
 (let (($x234 (= $x241 true)))
 (let (($x239 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x239 true)))
 (let (($x240 (= $x233 true)))
 (let (($x237 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (= $x237 true)))
 (let (($x244 (= $x245 true)))
 (let (($x222 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x186 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x186))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv2 32))) ?x25)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv3 32))) ?x171)))
 (let ((?x193 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x253 (_ bv1 32))))
 (=> $x20 (= ?x193 ?x178)))))))))))
 ))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x101 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x253 (_ bv1 32))))
 (= $x20 (bvuge ?x101 (_ bv1 32)))))))))
 ))
 (let (($x255 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (=> $x254 $x162))))))
 ))
 (let (($x256 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x101 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (= $x254 (= ?x101 (_ bv0 32)))))))))
 ))
 (let (($x38 (and $x256 $x255)))
 (let (($x98 (and $x38 $x83)))
 (let (($x223 (and $x98 $x222)))
 (let (($x247 (= $x223 true)))
 (let (($x229 (= $x247 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x206)))
 (let (($x205 (= ?x208 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x40 (= $x205 true)))
 (let (($x202 (= ?x208 input.dst.llvm-%n)))
 (let (($x198 (= $x202 true)))
 (let (($x55 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x138 (= $x55 true)))
 (let (($x129 (= $x138 true)))
 (let (($x45 (= $x70 true)))
 (let (($x37 (= $x45 true)))
 (let (($x123 (and $x37 $x129)))
 (let (($x180 (and $x123 $x198)))
 (let (($x182 (and $x180 $x40)))
 (let (($x243 (and $x182 $x229)))
 (let (($x246 (and $x243 $x244)))
 (let (($x266 (and $x246 $x240)))
 (let (($x248 (and $x266 $x234)))
 (let (($x284 (and $x248 $x77)))
 (let (($x64 (and $x284 $x149)))
 (let (($x195 (and $x64 $x140)))
 (let (($x201 (and $x195 $x199)))
 (let (($x81 (and $x201 $x192)))
 (let (($x211 (and $x81 $x189)))
 (let (($x168 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x227 (and (not $x168) $x211)))
 (let (($x203 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x228 (and $x203 $x227)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x225 (and $x107 $x228)))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x151 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x151 (_ bv1 32))))
 (= $x166 false)))))
 ))
 (let (($x42 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x151 (_ bv0 32))))
 (=> $x125 $x162))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x151 (_ bv0 32))))
 (= $x125 true)))))
 ))
 (let (($x175 (and $x114 $x42)))
 (let (($x141 (and $x175 $x124)))
 (let (($x39 (and $x141 $x95)))
 (let (($x224 (and $x39 $x225)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x216 (and $x102 $x224)))
 (let (($x82 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x65 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x82)))))
 (let (($x74 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x82)))))
 (let (($x218 (and $x74 $x216)))
 (let (($x235 (=> $x218 $x230)))
 (not $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x219 (bvule ?x215 (_ bv4 32))))
 (let (($x226 (= $x219 true)))
 (let (($x230 (= $x226 true)))
 (let ((?x86 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x86)))
 (let (($x213 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x213 true)))
 (let (($x36 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x80 (= $x36 true)))
 (let (($x192 (= $x80 true)))
 (let (($x46 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x8 (= $x46 true)))
 (let (($x199 (= $x8 true)))
 (let (($x52 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x179 (= $x52 true)))
 (let (($x140 (= $x179 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x210)))
 (let ((?x44 (bvand symbol.1 (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x44)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x173 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (and $x41 $x173)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x154 $x99)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (and $x22 $x62)))
 (let (($x191 (not $x143)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x121 $x139)))
 (let (($x196 (and (not $x73) $x191)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x258 $x118)))
 (let (($x232 (not $x252)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x147 $x146)))
 (let (($x131 (and (not $x160) $x232)))
 (let (($x164 (and (and (and (and (and (and $x131 $x196) $x7) $x130) $x163) $x261) $x187)))
 (let (($x91 (and $x164 $x90)))
 (let (($x287 (= symbol.1 dst_symbol_addr.1)))
 (let (($x158 (and $x287 $x91)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x290 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x290)))
 (let (($x292 (or (bvugt input.memlabel-mem--symbol.1_begin ?x290) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x292) (or $x93 $x66)))))))
 (let (($x132 (and $x5 $x158)))
 (let (($x172 (= $x132 true)))
 (let (($x149 (= $x172 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x273 (bvsub ?x113 ?x63)))
 (let (($x276 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x273) (bvult ?x113 ?x273))))
 (let ((?x268 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvmul (_ bv4 64) ?x268)))
 (let ((?x271 ((_ extract 63 32) ?x270)))
 (let (($x272 (= (_ bv0 32) ?x271)))
 (let (($x264 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x56 (and (and (and true $x264) $x272) $x276)))
 (let (($x267 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x281 (and $x267 $x56)))
 (let (($x16 (= true $x281)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (=> $x70 $x16)))
 (let (($x283 (= $x282 true)))
 (let (($x77 (= $x283 true)))
 (let (($x238 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x241 (= $x238 true)))
 (let (($x234 (= $x241 true)))
 (let (($x239 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x233 (= $x239 true)))
 (let (($x240 (= $x233 true)))
 (let (($x237 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (= $x237 true)))
 (let (($x244 (= $x245 true)))
 (let (($x222 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x186 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x186))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv2 32))) ?x25)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv3 32))) ?x171)))
 (let ((?x193 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x253 (_ bv1 32))))
 (=> $x20 (= ?x193 ?x178)))))))))))
 ))
 (let (($x83 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x101 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x253 (_ bv1 32))))
 (= $x20 (bvuge ?x101 (_ bv1 32)))))))))
 ))
 (let (($x255 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (=> $x254 $x162))))))
 ))
 (let (($x256 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x101 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x253 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (= $x254 (= ?x101 (_ bv0 32)))))))))
 ))
 (let (($x38 (and $x256 $x255)))
 (let (($x98 (and $x38 $x83)))
 (let (($x223 (and $x98 $x222)))
 (let (($x247 (= $x223 true)))
 (let (($x229 (= $x247 true)))
 (let ((?x206 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x206)))
 (let (($x205 (= ?x208 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x40 (= $x205 true)))
 (let (($x202 (= ?x208 input.dst.llvm-%n)))
 (let (($x198 (= $x202 true)))
 (let (($x55 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x138 (= $x55 true)))
 (let (($x129 (= $x138 true)))
 (let (($x45 (= $x70 true)))
 (let (($x37 (= $x45 true)))
 (let (($x123 (and $x37 $x129)))
 (let (($x180 (and $x123 $x198)))
 (let (($x182 (and $x180 $x40)))
 (let (($x243 (and $x182 $x229)))
 (let (($x246 (and $x243 $x244)))
 (let (($x266 (and $x246 $x240)))
 (let (($x248 (and $x266 $x234)))
 (let (($x284 (and $x248 $x77)))
 (let (($x64 (and $x284 $x149)))
 (let (($x195 (and $x64 $x140)))
 (let (($x201 (and $x195 $x199)))
 (let (($x81 (and $x201 $x192)))
 (let (($x211 (and $x81 $x189)))
 (let (($x168 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x227 (and (not $x168) $x211)))
 (let (($x203 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x228 (and $x203 $x227)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x225 (and $x107 $x228)))
 (let (($x95 (forall ((Lambda25 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x151 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x151 (_ bv1 32))))
 (= $x166 false)))))
 ))
 (let (($x42 (forall ((Lambda25 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x151 (_ bv0 32))))
 (=> $x125 $x162))))))
 ))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x153 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x151 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x151 (_ bv0 32))))
 (= $x125 true)))))
 ))
 (let (($x175 (and $x114 $x42)))
 (let (($x141 (and $x175 $x124)))
 (let (($x39 (and $x141 $x95)))
 (let (($x224 (and $x39 $x225)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x216 (and $x102 $x224)))
 (let (($x82 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x65 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x82)))))
 (let (($x74 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x82)))))
 (let (($x218 (and $x74 $x216)))
 (let (($x235 (=> $x218 $x230)))
 (not $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000170)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00040001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000173)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000017f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000170)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffff0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00040001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00040001)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000006)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x53620000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd95c6724)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd95c6727)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x5362018f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd95c6724)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x53620000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x53620000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000006)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x53620003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x53620002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x53620001 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x53620000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x76 (bvule ?x49 (_ bv399 32))))
 (let (($x92 (= $x76 true)))
 (let (($x112 (= $x92 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x19)))
 (let (($x152 (= ?x59 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x152 true)))
 (let (($x155 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x165 (= $x155 true)))
 (let (($x188 (= $x165 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x119 (= $x128 true)))
 (let (($x214 (= $x119 true)))
 (let (($x116 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x197 (= $x116 true)))
 (let (($x209 (= $x197 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x207)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x285 (= (_ bv0 32) ?x53)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x250 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x215 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x219 (= input.memlabel-mem--symbol.1_end ?x215)))
 (let (($x218 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x226 (and $x218 $x219)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x216 $x226)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x86 $x14)))
 (let (($x189 (not $x213)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x80 $x192)))
 (let (($x227 (and (not $x81) $x189)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x195 $x46)))
 (let (($x199 (not $x8)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x52 $x179)))
 (let (($x36 (and (not $x140) $x199)))
 (let (($x150 (and (and (and (and (and (and $x36 $x227) $x228) $x224) $x230) $x250) $x285)))
 (let (($x115 (and $x150 $x135)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x169 (and $x173 $x115)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x117 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x117) (or $x210 $x90)))))))
 (let (($x6 (and $x64 $x169)))
 (let (($x15 (= $x6 true)))
 (let (($x167 (= $x15 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x200 (bvsub ?x113 ?x63)))
 (let (($x191 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x200) (bvult ?x113 ?x200))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvmul (_ bv4 64) ?x131)))
 (let ((?x139 ((_ extract 63 32) ?x121)))
 (let (($x73 (= (_ bv0 32) ?x139)))
 (let (($x252 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x252) $x73) $x191)))
 (let (($x146 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x280 (and $x146 $x7)))
 (let (($x17 (= true $x280)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x29 $x17)))
 (let (($x24 (= $x130 true)))
 (let (($x154 (= $x24 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (= $x50 true)))
 (let (($x5 (= $x94 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x294 true)))
 (let (($x32 (= $x66 true)))
 (let (($x291 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x276 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x282 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x276))))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x276 (_ bv2 32))) ?x282)))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x276 (_ bv3 32))) ?x284)))
 (let ((?x248 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x184 (_ bv1 32))))
 (=> $x240 (= ?x248 ?x72)))))))))))
 ))
 (let (($x238 (forall ((Lambda25 (_ BitVec 32)) )(let (($x171 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x178 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x184 (_ bv1 32))))
 (= $x240 (bvuge ?x178 (_ bv1 32)))))))))
 ))
 (let (($x237 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x184 (_ bv0 32))))
 (=> $x222 $x141))))))
 ))
 (let (($x247 (forall ((Lambda25 (_ BitVec 32)) )(let (($x171 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x178 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x184 (_ bv0 32))))
 (= $x222 (= ?x178 (_ bv0 32)))))))))
 ))
 (let (($x245 (and $x247 $x237)))
 (let (($x241 (and $x245 $x238)))
 (let (($x292 (and $x241 $x291)))
 (let (($x109 (= $x292 true)))
 (let (($x293 (= $x109 true)))
 (let ((?x257 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x257)))
 (let (($x23 (= ?x255 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (= $x23 true)))
 (let (($x38 (= ?x255 input.dst.llvm-%n)))
 (let (($x20 (= $x38 true)))
 (let (($x34 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x101 (= $x34 true)))
 (let (($x220 (= $x101 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x254 (= $x253 true)))
 (let (($x259 (= $x254 true)))
 (let (($x40 (= $x29 true)))
 (let (($x182 (= $x40 true)))
 (let (($x251 (and $x182 $x259)))
 (let (($x242 (and $x251 $x220)))
 (let (($x122 (and $x242 $x20)))
 (let (($x98 (and $x122 $x83)))
 (let (($x93 (and $x98 $x293)))
 (let (($x10 (and $x93 $x32)))
 (let (($x286 (and $x10 $x5)))
 (let (($x41 (and $x286 $x154)))
 (let (($x170 (and $x41 $x167)))
 (let (($x60 (and $x170 $x209)))
 (let (($x18 (and $x60 $x214)))
 (let (($x260 (and $x18 $x188)))
 (let (($x31 (and $x260 $x190)))
 (let (($x205 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x231 (and (not $x205) $x31)))
 (let (($x198 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x100 (and $x198 $x231)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x47 (and $x206 $x100)))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x175 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x175 (_ bv1 32))))
 (= $x107 false)))))
 ))
 (let (($x157 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x175 (_ bv0 32))))
 (=> $x166 $x141))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x175 (_ bv0 32))))
 (= $x166 true)))))
 ))
 (let (($x95 (and $x124 $x157)))
 (let (($x203 (and $x95 $x9)))
 (let (($x123 (and $x203 $x129)))
 (let (($x97 (and $x123 $x47)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x75 (and $x144 $x97)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x58 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x236 (and $x58 $x75)))
 (let (($x33 (=> $x236 $x112)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x76 (bvule ?x49 (_ bv399 32))))
 (let (($x92 (= $x76 true)))
 (let (($x112 (= $x92 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x59 (bvneg ?x19)))
 (let (($x152 (= ?x59 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x152 true)))
 (let (($x155 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x165 (= $x155 true)))
 (let (($x188 (= $x165 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x119 (= $x128 true)))
 (let (($x214 (= $x119 true)))
 (let (($x116 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x197 (= $x116 true)))
 (let (($x209 (= $x197 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x207)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x285 (= (_ bv0 32) ?x53)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x250 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x215 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x219 (= input.memlabel-mem--symbol.1_end ?x215)))
 (let (($x218 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x226 (and $x218 $x219)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x216 $x226)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x86 $x14)))
 (let (($x189 (not $x213)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x80 $x192)))
 (let (($x227 (and (not $x81) $x189)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x195 $x46)))
 (let (($x199 (not $x8)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x52 $x179)))
 (let (($x36 (and (not $x140) $x199)))
 (let (($x150 (and (and (and (and (and (and $x36 $x227) $x228) $x224) $x230) $x250) $x285)))
 (let (($x115 (and $x150 $x135)))
 (let (($x173 (= symbol.1 dst_symbol_addr.1)))
 (let (($x169 (and $x173 $x115)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x117 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x117) (or $x210 $x90)))))))
 (let (($x6 (and $x64 $x169)))
 (let (($x15 (= $x6 true)))
 (let (($x167 (= $x15 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x200 (bvsub ?x113 ?x63)))
 (let (($x191 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x200) (bvult ?x113 ?x200))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvmul (_ bv4 64) ?x131)))
 (let ((?x139 ((_ extract 63 32) ?x121)))
 (let (($x73 (= (_ bv0 32) ?x139)))
 (let (($x252 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x252) $x73) $x191)))
 (let (($x146 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x280 (and $x146 $x7)))
 (let (($x17 (= true $x280)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x29 $x17)))
 (let (($x24 (= $x130 true)))
 (let (($x154 (= $x24 true)))
 (let (($x50 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (= $x50 true)))
 (let (($x5 (= $x94 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x294 true)))
 (let (($x32 (= $x66 true)))
 (let (($x291 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x276 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x282 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x276))))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x276 (_ bv2 32))) ?x282)))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x276 (_ bv3 32))) ?x284)))
 (let ((?x248 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x184 (_ bv1 32))))
 (=> $x240 (= ?x248 ?x72)))))))))))
 ))
 (let (($x238 (forall ((Lambda25 (_ BitVec 32)) )(let (($x171 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x178 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x184 (_ bv1 32))))
 (= $x240 (bvuge ?x178 (_ bv1 32)))))))))
 ))
 (let (($x237 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x184 (_ bv0 32))))
 (=> $x222 $x141))))))
 ))
 (let (($x247 (forall ((Lambda25 (_ BitVec 32)) )(let (($x171 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x178 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x184 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x184 (_ bv0 32))))
 (= $x222 (= ?x178 (_ bv0 32)))))))))
 ))
 (let (($x245 (and $x247 $x237)))
 (let (($x241 (and $x245 $x238)))
 (let (($x292 (and $x241 $x291)))
 (let (($x109 (= $x292 true)))
 (let (($x293 (= $x109 true)))
 (let ((?x257 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x255 (bvneg ?x257)))
 (let (($x23 (= ?x255 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x83 (= $x23 true)))
 (let (($x38 (= ?x255 input.dst.llvm-%n)))
 (let (($x20 (= $x38 true)))
 (let (($x34 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x101 (= $x34 true)))
 (let (($x220 (= $x101 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x254 (= $x253 true)))
 (let (($x259 (= $x254 true)))
 (let (($x40 (= $x29 true)))
 (let (($x182 (= $x40 true)))
 (let (($x251 (and $x182 $x259)))
 (let (($x242 (and $x251 $x220)))
 (let (($x122 (and $x242 $x20)))
 (let (($x98 (and $x122 $x83)))
 (let (($x93 (and $x98 $x293)))
 (let (($x10 (and $x93 $x32)))
 (let (($x286 (and $x10 $x5)))
 (let (($x41 (and $x286 $x154)))
 (let (($x170 (and $x41 $x167)))
 (let (($x60 (and $x170 $x209)))
 (let (($x18 (and $x60 $x214)))
 (let (($x260 (and $x18 $x188)))
 (let (($x31 (and $x260 $x190)))
 (let (($x205 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x231 (and (not $x205) $x31)))
 (let (($x198 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x100 (and $x198 $x231)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x47 (and $x206 $x100)))
 (let (($x129 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x175 (_ bv1 32))))
 (=> $x107 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x175 (_ bv1 32))))
 (= $x107 false)))))
 ))
 (let (($x157 (forall ((Lambda25 (_ BitVec 32)) )(let (($x141 (= false false)))
 (let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x175 (_ bv0 32))))
 (=> $x166 $x141))))))
 ))
 (let (($x124 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x175 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x175 (_ bv0 32))))
 (= $x166 true)))))
 ))
 (let (($x95 (and $x124 $x157)))
 (let (($x203 (and $x95 $x9)))
 (let (($x123 (and $x203 $x129)))
 (let (($x97 (and $x123 $x47)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x75 (and $x144 $x97)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x58 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x236 (and $x58 $x75)))
 (let (($x33 (=> $x236 $x112)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x277 (bvsle ?x269 (_ bv399 32))))
 (let (($x271 (= $x277 true)))
 (let (($x278 (= $x271 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x244)))
 (let (($x239 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (= $x239 true)))
 (let (($x177 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x127 (= $x177 true)))
 (let (($x68 (= $x127 true)))
 (let (($x185 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x183 (= $x185 true)))
 (let (($x133 (= $x183 true)))
 (let (($x134 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x217 (= $x134 true)))
 (let (($x193 (= $x217 true)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x267)))
 (let ((?x69 (bvand symbol.1 (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x69)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x49 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x49)))
 (let (($x236 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x92 (and $x236 $x76)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x75 $x92)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x19 $x59)))
 (let (($x190 (not $x152)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x260 (and $x165 $x188)))
 (let (($x231 (and (not $x260) $x190)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x60 $x128)))
 (let (($x214 (not $x119)))
 (let (($x197 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x116 $x197)))
 (let (($x155 (and (not $x209) $x214)))
 (let (($x42 (and (and (and (and (and (and $x155 $x231) $x100) $x97) $x112) $x108) $x21)))
 (let (($x51 (and $x42 $x153)))
 (let (($x219 (= symbol.1 dst_symbol_addr.1)))
 (let (($x39 (and $x219 $x51)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x156 (or (bvugt input.memlabel-mem--symbol.1_begin ?x48) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x156) (or $x207 $x135)))))))
 (let (($x105 (and $x170 $x39)))
 (let (($x137 (= $x105 true)))
 (let (($x45 (= $x137 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x81 (bvsub ?x113 ?x63)))
 (let (($x213 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x81) (bvult ?x113 ?x81))))
 (let ((?x199 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvmul (_ bv4 64) ?x199)))
 (let ((?x80 ((_ extract 63 32) ?x36)))
 (let (($x192 (= (_ bv0 32) ?x80)))
 (let (($x46 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x159 (and (and (and true $x46) $x192) $x213)))
 (let (($x52 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x228 (and $x52 $x159)))
 (let (($x126 (= true $x228)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (=> $x43 $x126)))
 (let (($x224 (= $x225 true)))
 (let (($x148 (= $x224 true)))
 (let (($x158 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x132 (= $x158 true)))
 (let (($x172 (= $x132 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (= $x210 true)))
 (let (($x90 (= $x164 true)))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x143 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x143))))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x143 (_ bv2 32))) ?x17)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x143 (_ bv3 32))) ?x154)))
 (let ((?x5 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x56 (_ bv1 32))))
 (=> $x66 (= ?x5 ?x163)))))))))))
 ))
 (let (($x10 (forall ((Lambda25 (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x281 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x56 (_ bv1 32))))
 (= $x66 (bvuge ?x281 (_ bv1 32)))))))))
 ))
 (let (($x291 (forall ((Lambda25 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x56 (_ bv0 32))))
 (=> $x282 $x203))))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x281 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x56 (_ bv0 32))))
 (= $x282 (= ?x281 (_ bv0 32)))))))))
 ))
 (let (($x292 (and $x72 $x291)))
 (let (($x50 (and $x292 $x10)))
 (let (($x261 (and $x50 $x96)))
 (let (($x117 (= $x261 true)))
 (let (($x44 (= $x117 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x171)))
 (let (($x243 (= ?x178 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x237 (= $x243 true)))
 (let (($x181 (= ?x178 input.dst.llvm-%n)))
 (let (($x223 (= $x181 true)))
 (let (($x194 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x184 (= $x194 true)))
 (let (($x222 (= $x184 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x23 (= $x122 true)))
 (let (($x83 (= $x23 true)))
 (let (($x255 (= $x43 true)))
 (let (($x38 (= $x255 true)))
 (let (($x98 (and $x38 $x83)))
 (let (($x25 (and $x98 $x222)))
 (let (($x247 (and $x25 $x223)))
 (let (($x245 (and $x247 $x237)))
 (let (($x187 (and $x245 $x44)))
 (let (($x91 (and $x187 $x90)))
 (let (($x64 (and $x91 $x172)))
 (let (($x216 (and $x64 $x148)))
 (let (($x37 (and $x216 $x45)))
 (let (($x186 (and $x37 $x193)))
 (let (($x176 (and $x186 $x133)))
 (let (($x229 (and $x176 $x68)))
 (let (($x249 (and $x229 $x234)))
 (let (($x257 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (and (not $x257) $x249)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x279 (and $x242 $x272)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x268 (and $x34 $x279)))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x95 (_ bv1 32))))
 (=> $x206 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x202 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x95 (_ bv1 32))))
 (= $x206 false)))))
 ))
 (let (($x138 (forall ((Lambda25 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x95 (_ bv0 32))))
 (=> $x107 $x203))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x95 (_ bv0 32))))
 (= $x107 true)))))
 ))
 (let (($x129 (and $x9 $x138)))
 (let (($x198 (and $x129 $x202)))
 (let (($x259 (and $x198 $x254)))
 (let (($x270 (and $x259 $x268)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x151 $x270)))
 (let (($x74 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x144 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x74)))))
 (let (($x142 (=> (and $x43 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x74)))))
 (let (($x264 (and $x142 $x263)))
 (let (($x273 (=> $x264 $x278)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x277 (bvsle ?x269 (_ bv399 32))))
 (let (($x271 (= $x277 true)))
 (let (($x278 (= $x271 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x244)))
 (let (($x239 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (= $x239 true)))
 (let (($x177 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x127 (= $x177 true)))
 (let (($x68 (= $x127 true)))
 (let (($x185 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x183 (= $x185 true)))
 (let (($x133 (= $x183 true)))
 (let (($x134 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x217 (= $x134 true)))
 (let (($x193 (= $x217 true)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x267)))
 (let ((?x69 (bvand symbol.1 (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x69)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x49 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x49)))
 (let (($x236 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x92 (and $x236 $x76)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x75 $x92)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x19 $x59)))
 (let (($x190 (not $x152)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x260 (and $x165 $x188)))
 (let (($x231 (and (not $x260) $x190)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x60 $x128)))
 (let (($x214 (not $x119)))
 (let (($x197 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x116 $x197)))
 (let (($x155 (and (not $x209) $x214)))
 (let (($x42 (and (and (and (and (and (and $x155 $x231) $x100) $x97) $x112) $x108) $x21)))
 (let (($x51 (and $x42 $x153)))
 (let (($x219 (= symbol.1 dst_symbol_addr.1)))
 (let (($x39 (and $x219 $x51)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x156 (or (bvugt input.memlabel-mem--symbol.1_begin ?x48) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x156) (or $x207 $x135)))))))
 (let (($x105 (and $x170 $x39)))
 (let (($x137 (= $x105 true)))
 (let (($x45 (= $x137 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x81 (bvsub ?x113 ?x63)))
 (let (($x213 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x81) (bvult ?x113 ?x81))))
 (let ((?x199 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvmul (_ bv4 64) ?x199)))
 (let ((?x80 ((_ extract 63 32) ?x36)))
 (let (($x192 (= (_ bv0 32) ?x80)))
 (let (($x46 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x159 (and (and (and true $x46) $x192) $x213)))
 (let (($x52 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x228 (and $x52 $x159)))
 (let (($x126 (= true $x228)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (=> $x43 $x126)))
 (let (($x224 (= $x225 true)))
 (let (($x148 (= $x224 true)))
 (let (($x158 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x132 (= $x158 true)))
 (let (($x172 (= $x132 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (= $x210 true)))
 (let (($x90 (= $x164 true)))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x143 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x143))))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x143 (_ bv2 32))) ?x17)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x143 (_ bv3 32))) ?x154)))
 (let ((?x5 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x56 (_ bv1 32))))
 (=> $x66 (= ?x5 ?x163)))))))))))
 ))
 (let (($x10 (forall ((Lambda25 (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x281 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x56 (_ bv1 32))))
 (= $x66 (bvuge ?x281 (_ bv1 32)))))))))
 ))
 (let (($x291 (forall ((Lambda25 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x56 (_ bv0 32))))
 (=> $x282 $x203))))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x281 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x56 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x56 (_ bv0 32))))
 (= $x282 (= ?x281 (_ bv0 32)))))))))
 ))
 (let (($x292 (and $x72 $x291)))
 (let (($x50 (and $x292 $x10)))
 (let (($x261 (and $x50 $x96)))
 (let (($x117 (= $x261 true)))
 (let (($x44 (= $x117 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x171)))
 (let (($x243 (= ?x178 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x237 (= $x243 true)))
 (let (($x181 (= ?x178 input.dst.llvm-%n)))
 (let (($x223 (= $x181 true)))
 (let (($x194 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x184 (= $x194 true)))
 (let (($x222 (= $x184 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x23 (= $x122 true)))
 (let (($x83 (= $x23 true)))
 (let (($x255 (= $x43 true)))
 (let (($x38 (= $x255 true)))
 (let (($x98 (and $x38 $x83)))
 (let (($x25 (and $x98 $x222)))
 (let (($x247 (and $x25 $x223)))
 (let (($x245 (and $x247 $x237)))
 (let (($x187 (and $x245 $x44)))
 (let (($x91 (and $x187 $x90)))
 (let (($x64 (and $x91 $x172)))
 (let (($x216 (and $x64 $x148)))
 (let (($x37 (and $x216 $x45)))
 (let (($x186 (and $x37 $x193)))
 (let (($x176 (and $x186 $x133)))
 (let (($x229 (and $x176 $x68)))
 (let (($x249 (and $x229 $x234)))
 (let (($x257 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (and (not $x257) $x249)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x279 (and $x242 $x272)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x268 (and $x34 $x279)))
 (let (($x254 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x95 (_ bv1 32))))
 (=> $x206 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x202 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x95 (_ bv1 32))))
 (= $x206 false)))))
 ))
 (let (($x138 (forall ((Lambda25 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x95 (_ bv0 32))))
 (=> $x107 $x203))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x95 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x95 (_ bv0 32))))
 (= $x107 true)))))
 ))
 (let (($x129 (and $x9 $x138)))
 (let (($x198 (and $x129 $x202)))
 (let (($x259 (and $x198 $x254)))
 (let (($x270 (and $x259 $x268)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x151 $x270)))
 (let (($x74 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x144 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x74)))))
 (let (($x142 (=> (and $x43 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x74)))))
 (let (($x264 (and $x142 $x263)))
 (let (($x273 (=> $x264 $x278)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x160 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x252 (bvsge ?x160 (_ bv0 32))))
 (let (($x121 (= $x252 true)))
 (let (($x26 (= $x121 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x293 (bvneg ?x109)))
 (let (($x93 (= ?x293 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x288 (= $x276 true)))
 (let (($x289 (= $x288 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x248 (= $x241 true)))
 (let (($x221 (= $x248 true)))
 (let (($x266 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x286 (= $x266 true)))
 (let (($x240 (= $x286 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x147)))
 (let ((?x61 (bvand symbol.1 (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x61)))
 (let ((?x273 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x273)))
 (let ((?x269 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x277 (= input.memlabel-mem--symbol.1_end ?x269)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x271 (and $x264 $x277)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (and $x263 $x271)))
 (let (($x270 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x244 $x246)))
 (let (($x234 (not $x239)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x229 (and $x127 $x68)))
 (let (($x272 (and (not $x229) $x234)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x186 $x185)))
 (let (($x133 (not $x183)))
 (let (($x217 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x134 $x217)))
 (let (($x177 (and (not $x193) $x133)))
 (let (($x157 (and (and (and (and (and (and $x177 $x272) $x279) $x270) $x278) $x274) $x218)))
 (let (($x168 (and $x157 $x125)))
 (let (($x76 (= symbol.1 dst_symbol_addr.1)))
 (let (($x123 (and $x76 $x168)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x162) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x267 $x153)))))))
 (let (($x204 (and $x37 $x123)))
 (let (($x180 (= $x204 true)))
 (let (($x40 (= $x180 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x260 (bvsub ?x113 ?x63)))
 (let (($x152 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x260) (bvult ?x113 ?x260))))
 (let ((?x214 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvmul (_ bv4 64) ?x214)))
 (let ((?x165 ((_ extract 63 32) ?x155)))
 (let (($x188 (= (_ bv0 32) ?x165)))
 (let (($x128 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x161 (and (and (and true $x128) $x188) $x152)))
 (let (($x116 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x100 (and $x116 $x161)))
 (let (($x212 (= true $x100)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x70 $x212)))
 (let (($x97 (= $x47 true)))
 (let (($x27 (= $x97 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (= $x169 true)))
 (let (($x15 (= $x6 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x207 true)))
 (let (($x135 (= $x150 true)))
 (let (($x235 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x14 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x14))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv2 32))) ?x126)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv3 32))) ?x148)))
 (let ((?x172 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x191 (_ bv1 32))))
 (=> $x164 (= ?x172 ?x230)))))))))))
 ))
 (let (($x91 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x7 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x191 (_ bv1 32))))
 (= $x164 (bvuge ?x7 (_ bv1 32)))))))))
 ))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x191 (_ bv0 32))))
 (=> $x17 $x198))))))
 ))
 (let (($x163 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x7 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x191 (_ bv0 32))))
 (= $x17 (= ?x7 (_ bv0 32)))))))))
 ))
 (let (($x261 (and $x163 $x96)))
 (let (($x158 (and $x261 $x91)))
 (let (($x250 (and $x158 $x235)))
 (let (($x156 (= $x250 true)))
 (let (($x53 (= $x156 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x77)))
 (let (($x104 (= ?x281 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x291 (= $x104 true)))
 (let (($x16 (= ?x281 input.dst.llvm-%n)))
 (let (($x284 (= $x16 true)))
 (let (($x233 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x56 (= $x233 true)))
 (let (($x282 (= $x56 true)))
 (let (($x247 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x247 true)))
 (let (($x237 (= $x243 true)))
 (let (($x178 (= $x70 true)))
 (let (($x181 (= $x178 true)))
 (let (($x245 (and $x181 $x237)))
 (let (($x283 (and $x245 $x282)))
 (let (($x72 (and $x283 $x284)))
 (let (($x292 (and $x72 $x291)))
 (let (($x285 (and $x292 $x53)))
 (let (($x115 (and $x285 $x135)))
 (let (($x170 (and $x115 $x15)))
 (let (($x75 (and $x170 $x27)))
 (let (($x182 (and $x75 $x40)))
 (let (($x238 (and $x182 $x240)))
 (let (($x275 (and $x238 $x221)))
 (let (($x290 (and $x275 $x289)))
 (let (($x146 (and $x290 $x94)))
 (let (($x171 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x139 (and (not $x171) $x146)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x73 (and $x25 $x139)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x232 (and $x194 $x73)))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x129 (_ bv1 32))))
 (=> $x34 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x129 (_ bv1 32))))
 (= $x34 false)))))
 ))
 (let (($x253 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x129 (_ bv0 32))))
 (=> $x206 $x198))))))
 ))
 (let (($x202 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x129 (_ bv0 32))))
 (= $x206 true)))))
 ))
 (let (($x254 (and $x202 $x253)))
 (let (($x242 (and $x254 $x220)))
 (let (($x83 (and $x242 $x23)))
 (let (($x131 (and $x83 $x232)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x258 (and $x175 $x131)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x71 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x118 (and $x71 $x258)))
 (let (($x22 (=> $x118 $x26)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x160 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x252 (bvsge ?x160 (_ bv0 32))))
 (let (($x121 (= $x252 true)))
 (let (($x26 (= $x121 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x293 (bvneg ?x109)))
 (let (($x93 (= ?x293 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x93 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x288 (= $x276 true)))
 (let (($x289 (= $x288 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x248 (= $x241 true)))
 (let (($x221 (= $x248 true)))
 (let (($x266 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x286 (= $x266 true)))
 (let (($x240 (= $x286 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x147)))
 (let ((?x61 (bvand symbol.1 (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x61)))
 (let ((?x273 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x273)))
 (let ((?x269 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x277 (= input.memlabel-mem--symbol.1_end ?x269)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x271 (and $x264 $x277)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (and $x263 $x271)))
 (let (($x270 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x244 $x246)))
 (let (($x234 (not $x239)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x229 (and $x127 $x68)))
 (let (($x272 (and (not $x229) $x234)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x186 $x185)))
 (let (($x133 (not $x183)))
 (let (($x217 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x134 $x217)))
 (let (($x177 (and (not $x193) $x133)))
 (let (($x157 (and (and (and (and (and (and $x177 $x272) $x279) $x270) $x278) $x274) $x218)))
 (let (($x168 (and $x157 $x125)))
 (let (($x76 (= symbol.1 dst_symbol_addr.1)))
 (let (($x123 (and $x76 $x168)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x162) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x267 $x153)))))))
 (let (($x204 (and $x37 $x123)))
 (let (($x180 (= $x204 true)))
 (let (($x40 (= $x180 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x260 (bvsub ?x113 ?x63)))
 (let (($x152 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x260) (bvult ?x113 ?x260))))
 (let ((?x214 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvmul (_ bv4 64) ?x214)))
 (let ((?x165 ((_ extract 63 32) ?x155)))
 (let (($x188 (= (_ bv0 32) ?x165)))
 (let (($x128 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x161 (and (and (and true $x128) $x188) $x152)))
 (let (($x116 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x100 (and $x116 $x161)))
 (let (($x212 (= true $x100)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x70 $x212)))
 (let (($x97 (= $x47 true)))
 (let (($x27 (= $x97 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (= $x169 true)))
 (let (($x15 (= $x6 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x207 true)))
 (let (($x135 (= $x150 true)))
 (let (($x235 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x14 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x14))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv2 32))) ?x126)))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv3 32))) ?x148)))
 (let ((?x172 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x191 (_ bv1 32))))
 (=> $x164 (= ?x172 ?x230)))))))))))
 ))
 (let (($x91 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x7 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x191 (_ bv1 32))))
 (= $x164 (bvuge ?x7 (_ bv1 32)))))))))
 ))
 (let (($x96 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x191 (_ bv0 32))))
 (=> $x17 $x198))))))
 ))
 (let (($x163 (forall ((Lambda25 (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x7 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x191 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x191 (_ bv0 32))))
 (= $x17 (= ?x7 (_ bv0 32)))))))))
 ))
 (let (($x261 (and $x163 $x96)))
 (let (($x158 (and $x261 $x91)))
 (let (($x250 (and $x158 $x235)))
 (let (($x156 (= $x250 true)))
 (let (($x53 (= $x156 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x77)))
 (let (($x104 (= ?x281 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x291 (= $x104 true)))
 (let (($x16 (= ?x281 input.dst.llvm-%n)))
 (let (($x284 (= $x16 true)))
 (let (($x233 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x56 (= $x233 true)))
 (let (($x282 (= $x56 true)))
 (let (($x247 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x247 true)))
 (let (($x237 (= $x243 true)))
 (let (($x178 (= $x70 true)))
 (let (($x181 (= $x178 true)))
 (let (($x245 (and $x181 $x237)))
 (let (($x283 (and $x245 $x282)))
 (let (($x72 (and $x283 $x284)))
 (let (($x292 (and $x72 $x291)))
 (let (($x285 (and $x292 $x53)))
 (let (($x115 (and $x285 $x135)))
 (let (($x170 (and $x115 $x15)))
 (let (($x75 (and $x170 $x27)))
 (let (($x182 (and $x75 $x40)))
 (let (($x238 (and $x182 $x240)))
 (let (($x275 (and $x238 $x221)))
 (let (($x290 (and $x275 $x289)))
 (let (($x146 (and $x290 $x94)))
 (let (($x171 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x139 (and (not $x171) $x146)))
 (let (($x25 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x73 (and $x25 $x139)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x232 (and $x194 $x73)))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x129 (_ bv1 32))))
 (=> $x34 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x129 (_ bv1 32))))
 (= $x34 false)))))
 ))
 (let (($x253 (forall ((Lambda25 (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x129 (_ bv0 32))))
 (=> $x206 $x198))))))
 ))
 (let (($x202 (forall ((Lambda25 (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x129 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x129 (_ bv0 32))))
 (= $x206 true)))))
 ))
 (let (($x254 (and $x202 $x253)))
 (let (($x242 (and $x254 $x220)))
 (let (($x83 (and $x242 $x23)))
 (let (($x131 (and $x83 $x232)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x258 (and $x175 $x131)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x71 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x118 (and $x71 $x258)))
 (let (($x22 (=> $x118 $x26)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (bvule ?x179 (_ bv399 32))))
 (let (($x36 (= $x46 true)))
 (let (($x227 (= $x36 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x117)))
 (let (($x187 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x132 (= $x187 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x255 (bvsub ?x113 ?x63)))
 (let (($x66 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x255) (bvult ?x113 ?x255))))
 (let ((?x205 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x205)))
 (let ((?x251 ((_ extract 63 32) ?x259)))
 (let (($x256 (= (_ bv0 32) ?x251)))
 (let (($x55 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x5 (and (and (and true $x55) $x256) $x66)))
 (let (($x166 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x287 (and $x166 $x5)))
 (let (($x62 (= true $x287)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (=> $x29 $x62)))
 (let (($x41 (= $x143 true)))
 (let (($x99 (= $x41 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (= $x26 true)))
 (let (($x200 (= $x22 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x118 true)))
 (let (($x252 (= $x160 true)))
 (let (($x139 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x241 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x241))))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x241 (_ bv2 32))) ?x276)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x241 (_ bv3 32))) ?x290)))
 (let ((?x278 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x249 (_ bv1 32))))
 (=> $x263 (= ?x278 ?x93)))))))))))
 ))
 (let (($x269 (forall ((Lambda25 (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x68 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x249 (_ bv1 32))))
 (= $x263 (bvuge ?x68 (_ bv1 32)))))))))
 ))
 (let (($x35 (forall ((Lambda25 (_ BitVec 32)) )(let (($x242 (= false false)))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x249 (_ bv0 32))))
 (=> $x244 $x242))))))
 ))
 (let (($x239 (forall ((Lambda25 (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x68 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x249 (_ bv0 32))))
 (= $x244 (= ?x68 (_ bv0 32)))))))))
 ))
 (let (($x279 (and $x239 $x35)))
 (let (($x277 (and $x279 $x269)))
 (let (($x73 (and $x277 $x139)))
 (let (($x232 (= $x73 true)))
 (let (($x131 (= $x232 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x51 (= $x153 true)))
 (let (($x39 (= $x51 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x21 (= $x69 true)))
 (let (($x267 (= $x21 true)))
 (let (($x33 (= $x29 true)))
 (let (($x108 (= $x33 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x19)))
 (let ((?x31 (bvand symbol.1 (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x31)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x119 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x214 (= input.memlabel-mem--symbol.1_end ?x119)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x190 $x214)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x128 $x155)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (and $x15 $x170)))
 (let (($x219 (not $x215)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x115 $x169)))
 (let (($x209 (and (not $x6) $x219)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (and $x156 $x53)))
 (let (($x207 (not $x285)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x48 $x235)))
 (let (($x135 (and (not $x250) $x207)))
 (let (($x97 (and (and (and (and (and (and $x135 $x209) $x197) $x60) $x165) $x231) $x260)))
 (let (($x27 (and $x97 $x59)))
 (let (($x91 (= symbol.1 dst_symbol_addr.1)))
 (let (($x75 (and $x91 $x27)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x216 (or (bvugt input.memlabel-mem--symbol.1_begin ?x120) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x216) (or $x224 $x159)))))))
 (let (($x92 (and $x167 $x75)))
 (let (($x112 (= $x92 true)))
 (let (($x45 (= $x112 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x12 true)))
 (let (($x261 (= $x96 true)))
 (let ((?x17 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x17)))
 (let (($x280 (= ?x130 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (= $x280 true)))
 (let (($x196 (= ?x130 input.dst.llvm-%n)))
 (let (($x24 (= $x196 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x291 (= $x104 true)))
 (let (($x292 (= $x291 true)))
 (let (($x16 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x284 (= $x16 true)))
 (let (($x72 (= $x284 true)))
 (let (($x294 (and $x72 $x292)))
 (let (($x7 (and $x294 $x24)))
 (let (($x163 (and $x7 $x154)))
 (let (($x164 (and $x163 $x261)))
 (let (($x162 (and $x164 $x45)))
 (let (($x88 (and $x162 $x108)))
 (let (($x42 (and $x88 $x267)))
 (let (($x105 (and $x42 $x39)))
 (let (($x258 (and $x105 $x131)))
 (let (($x121 (and $x258 $x252)))
 (let (($x89 (and $x121 $x200)))
 (let (($x149 (and $x89 $x99)))
 (let (($x52 (and $x149 $x132)))
 (let (($x77 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and (not $x77) $x52)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x192 (and $x283 $x80)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x8 (and $x233 $x192)))
 (let (($x243 (forall ((Lambda25 (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x254 (_ bv1 32))))
 (=> $x194 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x222 (forall ((Lambda25 (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x254 (_ bv1 32))))
 (= $x194 false)))))
 ))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x242 (= false false)))
 (let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x254 (_ bv0 32))))
 (=> $x34 $x242))))))
 ))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x254 (_ bv0 32))))
 (= $x34 true)))))
 ))
 (let (($x23 (and $x220 $x122)))
 (let (($x25 (and $x23 $x222)))
 (let (($x237 (and $x25 $x243)))
 (let (($x199 (and $x237 $x8)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x201 (and $x95 $x199)))
 (let (($x142 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x142)))))
 (let (($x57 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x142)))))
 (let (($x195 (and $x57 $x201)))
 (let (($x211 (=> $x195 $x227)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (bvule ?x179 (_ bv399 32))))
 (let (($x36 (= $x46 true)))
 (let (($x227 (= $x36 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x117)))
 (let (($x187 (= ?x44 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x132 (= $x187 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x255 (bvsub ?x113 ?x63)))
 (let (($x66 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x255) (bvult ?x113 ?x255))))
 (let ((?x205 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x205)))
 (let ((?x251 ((_ extract 63 32) ?x259)))
 (let (($x256 (= (_ bv0 32) ?x251)))
 (let (($x55 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x5 (and (and (and true $x55) $x256) $x66)))
 (let (($x166 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x287 (and $x166 $x5)))
 (let (($x62 (= true $x287)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (=> $x29 $x62)))
 (let (($x41 (= $x143 true)))
 (let (($x99 (= $x41 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (= $x26 true)))
 (let (($x200 (= $x22 true)))
 (let (($x118 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x118 true)))
 (let (($x252 (= $x160 true)))
 (let (($x139 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x241 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x241))))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x241 (_ bv2 32))) ?x276)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x241 (_ bv3 32))) ?x290)))
 (let ((?x278 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x249 (_ bv1 32))))
 (=> $x263 (= ?x278 ?x93)))))))))))
 ))
 (let (($x269 (forall ((Lambda25 (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x68 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x249 (_ bv1 32))))
 (= $x263 (bvuge ?x68 (_ bv1 32)))))))))
 ))
 (let (($x35 (forall ((Lambda25 (_ BitVec 32)) )(let (($x242 (= false false)))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x249 (_ bv0 32))))
 (=> $x244 $x242))))))
 ))
 (let (($x239 (forall ((Lambda25 (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x68 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x249 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x249 (_ bv0 32))))
 (= $x244 (= ?x68 (_ bv0 32)))))))))
 ))
 (let (($x279 (and $x239 $x35)))
 (let (($x277 (and $x279 $x269)))
 (let (($x73 (and $x277 $x139)))
 (let (($x232 (= $x73 true)))
 (let (($x131 (= $x232 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x51 (= $x153 true)))
 (let (($x39 (= $x51 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x21 (= $x69 true)))
 (let (($x267 (= $x21 true)))
 (let (($x33 (= $x29 true)))
 (let (($x108 (= $x33 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x19)))
 (let ((?x31 (bvand symbol.1 (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x31)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x119 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x214 (= input.memlabel-mem--symbol.1_end ?x119)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x190 $x214)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x128 $x155)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (and $x15 $x170)))
 (let (($x219 (not $x215)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x115 $x169)))
 (let (($x209 (and (not $x6) $x219)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (and $x156 $x53)))
 (let (($x207 (not $x285)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x48 $x235)))
 (let (($x135 (and (not $x250) $x207)))
 (let (($x97 (and (and (and (and (and (and $x135 $x209) $x197) $x60) $x165) $x231) $x260)))
 (let (($x27 (and $x97 $x59)))
 (let (($x91 (= symbol.1 dst_symbol_addr.1)))
 (let (($x75 (and $x91 $x27)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x216 (or (bvugt input.memlabel-mem--symbol.1_begin ?x120) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x216) (or $x224 $x159)))))))
 (let (($x92 (and $x167 $x75)))
 (let (($x112 (= $x92 true)))
 (let (($x45 (= $x112 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x12 true)))
 (let (($x261 (= $x96 true)))
 (let ((?x17 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x17)))
 (let (($x280 (= ?x130 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (= $x280 true)))
 (let (($x196 (= ?x130 input.dst.llvm-%n)))
 (let (($x24 (= $x196 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x291 (= $x104 true)))
 (let (($x292 (= $x291 true)))
 (let (($x16 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x284 (= $x16 true)))
 (let (($x72 (= $x284 true)))
 (let (($x294 (and $x72 $x292)))
 (let (($x7 (and $x294 $x24)))
 (let (($x163 (and $x7 $x154)))
 (let (($x164 (and $x163 $x261)))
 (let (($x162 (and $x164 $x45)))
 (let (($x88 (and $x162 $x108)))
 (let (($x42 (and $x88 $x267)))
 (let (($x105 (and $x42 $x39)))
 (let (($x258 (and $x105 $x131)))
 (let (($x121 (and $x258 $x252)))
 (let (($x89 (and $x121 $x200)))
 (let (($x149 (and $x89 $x99)))
 (let (($x52 (and $x149 $x132)))
 (let (($x77 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x80 (and (not $x77) $x52)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x192 (and $x283 $x80)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x8 (and $x233 $x192)))
 (let (($x243 (forall ((Lambda25 (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x254 (_ bv1 32))))
 (=> $x194 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x222 (forall ((Lambda25 (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x254 (_ bv1 32))))
 (= $x194 false)))))
 ))
 (let (($x122 (forall ((Lambda25 (_ BitVec 32)) )(let (($x242 (= false false)))
 (let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x254 (_ bv0 32))))
 (=> $x34 $x242))))))
 ))
 (let (($x220 (forall ((Lambda25 (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x254 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x254 (_ bv0 32))))
 (= $x34 true)))))
 ))
 (let (($x23 (and $x220 $x122)))
 (let (($x25 (and $x23 $x222)))
 (let (($x237 (and $x25 $x243)))
 (let (($x199 (and $x237 $x8)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x201 (and $x95 $x199)))
 (let (($x142 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x142)))))
 (let (($x57 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x142)))))
 (let (($x195 (and $x57 $x201)))
 (let (($x211 (=> $x195 $x227)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 208 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x125 (bvsle ?x218 (_ bv399 32))))
 (let (($x180 (= $x125 true)))
 (let (($x266 (= $x180 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x174)))
 (let (($x270 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x270 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x178 (bvsub ?x113 ?x63)))
 (let (($x137 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x178) (bvult ?x113 ?x178))))
 (let ((?x257 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvmul (_ bv4 64) ?x257)))
 (let ((?x98 ((_ extract 63 32) ?x83)))
 (let (($x54 (= (_ bv0 32) ?x98)))
 (let (($x145 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x217 (and (and (and true $x145) $x54) $x137)))
 (let (($x107 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x193 (and $x107 $x217)))
 (let (($x176 (= true $x193)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x43 $x176)))
 (let (($x185 (= $x186 true)))
 (let (($x183 (= $x185 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x227 true)))
 (let (($x81 (= $x211 true)))
 (let (($x195 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x195 true)))
 (let (($x46 (= $x179 true)))
 (let (($x80 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x66 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x66))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv2 32))) ?x143)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv3 32))) ?x149)))
 (let ((?x89 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x276 (_ bv1 32))))
 (=> $x252 (= ?x89 ?x187)))))))))))
 ))
 (let (($x26 (forall ((Lambda25 (_ BitVec 32)) )(let (($x221 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x276 (_ bv1 32))))
 (= $x252 (bvuge ?x275 (_ bv1 32)))))))))
 ))
 (let (($x73 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x276 (_ bv0 32))))
 (=> $x290 $x25))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x221 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x276 (_ bv0 32))))
 (= $x290 (= ?x275 (_ bv0 32)))))))))
 ))
 (let (($x232 (and $x94 $x73)))
 (let (($x22 (and $x232 $x26)))
 (let (($x192 (and $x22 $x80)))
 (let (($x8 (= $x192 true)))
 (let (($x199 (= $x8 true)))
 (let (($x272 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x35 (= $x272 true)))
 (let (($x279 (= $x35 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x229 (= $x68 true)))
 (let (($x246 (= $x229 true)))
 (let (($x177 (= $x43 true)))
 (let (($x133 (= $x177 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x33)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x45)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x19 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x59 (= input.memlabel-mem--symbol.1_end ?x19)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x27 (and $x97 $x59)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x260 $x27)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x119 $x214)))
 (let (($x165 (not $x155)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x100 $x128)))
 (let (($x188 (and (not $x190) $x165)))
 (let (($x152 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x209 $x152)))
 (let (($x161 (not $x197)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x170 $x215)))
 (let (($x60 (and (not $x219) $x161)))
 (let (($x153 (and (and (and (and (and (and $x60 $x188) $x231) $x31) $x75) $x112) $x162)))
 (let (($x51 (and $x153 $x108)))
 (let (($x148 (= symbol.1 dst_symbol_addr.1)))
 (let (($x39 (and $x148 $x51)))
 (let (($x207 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x250 (or (bvugt input.memlabel-mem--symbol.1_begin ?x91) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x250) (or $x285 $x207)))))))
 (let (($x105 (and $x15 $x39)))
 (let (($x37 (= $x105 true)))
 (let (($x249 (= $x37 true)))
 (let (($x224 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x225 (= $x224 true)))
 (let (($x159 (= $x225 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x172)))
 (let (($x216 (= ?x230 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x226 (= $x216 true)))
 (let (($x120 (= ?x230 input.dst.llvm-%n)))
 (let (($x86 (= $x120 true)))
 (let (($x12 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x96 (= $x12 true)))
 (let (($x261 (= $x96 true)))
 (let (($x280 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x154 (= $x280 true)))
 (let (($x163 (= $x154 true)))
 (let (($x164 (and $x163 $x261)))
 (let (($x14 (and $x164 $x86)))
 (let (($x189 (and $x14 $x226)))
 (let (($x228 (and $x189 $x159)))
 (let (($x244 (and $x228 $x249)))
 (let (($x127 (and $x244 $x133)))
 (let (($x239 (and $x127 $x246)))
 (let (($x263 (and $x239 $x279)))
 (let (($x201 (and $x263 $x199)))
 (let (($x36 (and $x201 $x46)))
 (let (($x79 (and $x36 $x81)))
 (let (($x234 (and $x79 $x183)))
 (let (($x30 (and $x234 $x271)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x40 (and (not $x24) $x30)))
 (let (($x130 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x182 (and $x130 $x40)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x123 (and $x294 $x182)))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x23 (_ bv1 32))))
 (=> $x233 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x282 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x23 (_ bv1 32))))
 (= $x233 false)))))
 ))
 (let (($x247 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x23 (_ bv0 32))))
 (=> $x194 $x25))))))
 ))
 (let (($x222 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x23 (_ bv0 32))))
 (= $x194 true)))))
 ))
 (let (($x243 (and $x222 $x247)))
 (let (($x283 (and $x243 $x282)))
 (let (($x291 (and $x283 $x104)))
 (let (($x204 (and $x291 $x123)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x157 (and $x129 $x204)))
 (let (($x71 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x71)))))
 (let (($x85 (=> (and $x43 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x71)))))
 (let (($x147 (and $x85 $x157)))
 (let (($x286 (=> $x147 $x266)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x125 (bvsle ?x218 (_ bv399 32))))
 (let (($x180 (= $x125 true)))
 (let (($x266 (= $x180 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x174)))
 (let (($x270 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x270 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x178 (bvsub ?x113 ?x63)))
 (let (($x137 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x178) (bvult ?x113 ?x178))))
 (let ((?x257 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvmul (_ bv4 64) ?x257)))
 (let ((?x98 ((_ extract 63 32) ?x83)))
 (let (($x54 (= (_ bv0 32) ?x98)))
 (let (($x145 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x217 (and (and (and true $x145) $x54) $x137)))
 (let (($x107 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x193 (and $x107 $x217)))
 (let (($x176 (= true $x193)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x43 $x176)))
 (let (($x185 (= $x186 true)))
 (let (($x183 (= $x185 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x227 true)))
 (let (($x81 (= $x211 true)))
 (let (($x195 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x195 true)))
 (let (($x46 (= $x179 true)))
 (let (($x80 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x66 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x66))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv2 32))) ?x143)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x66 (_ bv3 32))) ?x149)))
 (let ((?x89 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x276 (_ bv1 32))))
 (=> $x252 (= ?x89 ?x187)))))))))))
 ))
 (let (($x26 (forall ((Lambda25 (_ BitVec 32)) )(let (($x221 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (bvuge ?x276 (_ bv1 32))))
 (= $x252 (bvuge ?x275 (_ bv1 32)))))))))
 ))
 (let (($x73 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x276 (_ bv0 32))))
 (=> $x290 $x25))))))
 ))
 (let (($x94 (forall ((Lambda25 (_ BitVec 32)) )(let (($x221 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x276 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x276 (_ bv0 32))))
 (= $x290 (= ?x275 (_ bv0 32)))))))))
 ))
 (let (($x232 (and $x94 $x73)))
 (let (($x22 (and $x232 $x26)))
 (let (($x192 (and $x22 $x80)))
 (let (($x8 (= $x192 true)))
 (let (($x199 (= $x8 true)))
 (let (($x272 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x35 (= $x272 true)))
 (let (($x279 (= $x35 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x229 (= $x68 true)))
 (let (($x246 (= $x229 true)))
 (let (($x177 (= $x43 true)))
 (let (($x133 (= $x177 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x33)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x45)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x19 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x59 (= input.memlabel-mem--symbol.1_end ?x19)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x27 (and $x97 $x59)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x260 $x27)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x119 $x214)))
 (let (($x165 (not $x155)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x100 $x128)))
 (let (($x188 (and (not $x190) $x165)))
 (let (($x152 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x209 $x152)))
 (let (($x161 (not $x197)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x170 $x215)))
 (let (($x60 (and (not $x219) $x161)))
 (let (($x153 (and (and (and (and (and (and $x60 $x188) $x231) $x31) $x75) $x112) $x162)))
 (let (($x51 (and $x153 $x108)))
 (let (($x148 (= symbol.1 dst_symbol_addr.1)))
 (let (($x39 (and $x148 $x51)))
 (let (($x207 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x250 (or (bvugt input.memlabel-mem--symbol.1_begin ?x91) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x250) (or $x285 $x207)))))))
 (let (($x105 (and $x15 $x39)))
 (let (($x37 (= $x105 true)))
 (let (($x249 (= $x37 true)))
 (let (($x224 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x225 (= $x224 true)))
 (let (($x159 (= $x225 true)))
 (let ((?x172 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x172)))
 (let (($x216 (= ?x230 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x226 (= $x216 true)))
 (let (($x120 (= ?x230 input.dst.llvm-%n)))
 (let (($x86 (= $x120 true)))
 (let (($x12 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x96 (= $x12 true)))
 (let (($x261 (= $x96 true)))
 (let (($x280 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x154 (= $x280 true)))
 (let (($x163 (= $x154 true)))
 (let (($x164 (and $x163 $x261)))
 (let (($x14 (and $x164 $x86)))
 (let (($x189 (and $x14 $x226)))
 (let (($x228 (and $x189 $x159)))
 (let (($x244 (and $x228 $x249)))
 (let (($x127 (and $x244 $x133)))
 (let (($x239 (and $x127 $x246)))
 (let (($x263 (and $x239 $x279)))
 (let (($x201 (and $x263 $x199)))
 (let (($x36 (and $x201 $x46)))
 (let (($x79 (and $x36 $x81)))
 (let (($x234 (and $x79 $x183)))
 (let (($x30 (and $x234 $x271)))
 (let (($x24 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x40 (and (not $x24) $x30)))
 (let (($x130 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x182 (and $x130 $x40)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x123 (and $x294 $x182)))
 (let (($x104 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x23 (_ bv1 32))))
 (=> $x233 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x282 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x23 (_ bv1 32))))
 (= $x233 false)))))
 ))
 (let (($x247 (forall ((Lambda25 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x23 (_ bv0 32))))
 (=> $x194 $x25))))))
 ))
 (let (($x222 (forall ((Lambda25 (_ BitVec 32)) )(let (($x34 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x23 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x23 (_ bv0 32))))
 (= $x194 true)))))
 ))
 (let (($x243 (and $x222 $x247)))
 (let (($x283 (and $x243 $x282)))
 (let (($x291 (and $x283 $x104)))
 (let (($x204 (and $x291 $x123)))
 (let (($x129 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x157 (and $x129 $x204)))
 (let (($x71 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x71)))))
 (let (($x85 (=> (and $x43 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x71)))))
 (let (($x147 (and $x85 $x157)))
 (let (($x286 (=> $x147 $x266)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 208 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x124 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (bvsge ?x124 (_ bv0 32))))
 (let (($x251 (= $x10 true)))
 (let (($x38 (= $x251 true)))
 (let ((?x131 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x131)))
 (let (($x118 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x118 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x281 (bvsub ?x113 ?x63)))
 (let (($x114 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x281) (bvult ?x113 ?x281))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x171)))
 (let ((?x245 ((_ extract 63 32) ?x237)))
 (let (($x265 (= (_ bv0 32) ?x245)))
 (let (($x20 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x273 (and (and (and true $x20) $x265) $x114)))
 (let (($x206 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x238 (and $x206 $x273)))
 (let (($x241 (= true $x238)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (=> $x70 $x241)))
 (let (($x293 (= $x109 true)))
 (let (($x168 (= $x293 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x266 true)))
 (let (($x240 (= $x286 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x147 true)))
 (let (($x125 (= $x218 true)))
 (let (($x40 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x137 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x137))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv2 32))) ?x186)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv3 32))) ?x234)))
 (let ((?x79 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x143 (_ bv1 32))))
 (=> $x46 (= ?x79 ?x270)))))))))))
 ))
 (let (($x227 (forall ((Lambda25 (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x62 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x143 (_ bv1 32))))
 (= $x46 (bvuge ?x62 (_ bv1 32)))))))))
 ))
 (let (($x192 (forall ((Lambda25 (_ BitVec 32)) )(let (($x283 (= false false)))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x143 (_ bv0 32))))
 (=> $x149 $x283))))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x62 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x143 (_ bv0 32))))
 (= $x149 (= ?x62 (_ bv0 32)))))))))
 ))
 (let (($x8 (and $x132 $x192)))
 (let (($x211 (and $x8 $x227)))
 (let (($x182 (and $x211 $x40)))
 (let (($x123 (= $x182 true)))
 (let (($x204 (= $x123 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x73 (= $x139 true)))
 (let (($x232 (= $x73 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x248 (= $x275 true)))
 (let (($x93 (= $x248 true)))
 (let (($x289 (= $x70 true)))
 (let (($x288 (= $x289 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x177)))
 (let ((?x249 (bvand symbol.1 (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x249)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x33 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x108 (= input.memlabel-mem--symbol.1_end ?x33)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x153 $x108)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x162 $x51)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x27 (and $x19 $x59)))
 (let (($x75 (not $x27)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x21 $x260)))
 (let (($x92 (and (not $x97) $x75)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x188 $x88)))
 (let (($x69 (not $x231)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x214 $x155)))
 (let (($x31 (and (not $x165) $x69)))
 (let (($x272 (and (and (and (and (and (and $x31 $x92) $x112) $x45) $x39) $x37) $x244)))
 (let (($x35 (and $x272 $x133)))
 (let (($x6 (= symbol.1 dst_symbol_addr.1)))
 (let (($x279 (and $x6 $x35)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x219 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x219) (or $x197 $x161)))))))
 (let (($x263 (and $x119 $x279)))
 (let (($x264 (= $x263 true)))
 (let (($x276 (= $x264 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x53 (= $x285 true)))
 (let (($x207 (= $x53 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x90)))
 (let (($x250 (= ?x116 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x150 (= $x250 true)))
 (let (($x91 (= ?x116 input.dst.llvm-%n)))
 (let (($x48 (= $x91 true)))
 (let (($x224 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x225 (= $x224 true)))
 (let (($x159 (= $x225 true)))
 (let (($x216 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x226 (= $x216 true)))
 (let (($x189 (= $x226 true)))
 (let (($x228 (and $x189 $x159)))
 (let (($x235 (and $x228 $x48)))
 (let (($x156 (and $x235 $x150)))
 (let (($x135 (and $x156 $x207)))
 (let (($x290 (and $x135 $x276)))
 (let (($x221 (and $x290 $x288)))
 (let (($x94 (and $x221 $x93)))
 (let (($x252 (and $x94 $x232)))
 (let (($x157 (and $x252 $x204)))
 (let (($x180 (and $x157 $x125)))
 (let (($x110 (and $x180 $x240)))
 (let (($x146 (and $x110 $x168)))
 (let (($x262 (and $x146 $x200)))
 (let (($x86 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x256 (and (not $x86) $x262)))
 (let (($x230 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and $x230 $x256)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x205 (and $x164 $x50)))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x243 (_ bv1 32))))
 (=> $x294 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x243 (_ bv1 32))))
 (= $x294 false)))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x283 (= false false)))
 (let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x243 (_ bv0 32))))
 (=> $x233 $x283))))))
 ))
 (let (($x282 (forall ((Lambda25 (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x243 (_ bv0 32))))
 (= $x233 true)))))
 ))
 (let (($x104 (and $x282 $x72)))
 (let (($x130 (and $x104 $x17)))
 (let (($x96 (and $x130 $x12)))
 (let (($x259 (and $x96 $x205)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x203 (and $x254 $x259)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x129 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x65 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x55 (and $x65 $x203)))
 (let (($x255 (=> $x55 $x38)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x124 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (bvsge ?x124 (_ bv0 32))))
 (let (($x251 (= $x10 true)))
 (let (($x38 (= $x251 true)))
 (let ((?x131 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x131)))
 (let (($x118 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x118 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x281 (bvsub ?x113 ?x63)))
 (let (($x114 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x281) (bvult ?x113 ?x281))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x171)))
 (let ((?x245 ((_ extract 63 32) ?x237)))
 (let (($x265 (= (_ bv0 32) ?x245)))
 (let (($x20 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x273 (and (and (and true $x20) $x265) $x114)))
 (let (($x206 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x238 (and $x206 $x273)))
 (let (($x241 (= true $x238)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (=> $x70 $x241)))
 (let (($x293 (= $x109 true)))
 (let (($x168 (= $x293 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x266 true)))
 (let (($x240 (= $x286 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x147 true)))
 (let (($x125 (= $x218 true)))
 (let (($x40 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x137 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x137))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv2 32))) ?x186)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv3 32))) ?x234)))
 (let ((?x79 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x143 (_ bv1 32))))
 (=> $x46 (= ?x79 ?x270)))))))))))
 ))
 (let (($x227 (forall ((Lambda25 (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x62 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x143 (_ bv1 32))))
 (= $x46 (bvuge ?x62 (_ bv1 32)))))))))
 ))
 (let (($x192 (forall ((Lambda25 (_ BitVec 32)) )(let (($x283 (= false false)))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x143 (_ bv0 32))))
 (=> $x149 $x283))))))
 ))
 (let (($x132 (forall ((Lambda25 (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x62 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x143 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x143 (_ bv0 32))))
 (= $x149 (= ?x62 (_ bv0 32)))))))))
 ))
 (let (($x8 (and $x132 $x192)))
 (let (($x211 (and $x8 $x227)))
 (let (($x182 (and $x211 $x40)))
 (let (($x123 (= $x182 true)))
 (let (($x204 (= $x123 true)))
 (let (($x139 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x73 (= $x139 true)))
 (let (($x232 (= $x73 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x248 (= $x275 true)))
 (let (($x93 (= $x248 true)))
 (let (($x289 (= $x70 true)))
 (let (($x288 (= $x289 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x177)))
 (let ((?x249 (bvand symbol.1 (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x249)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x33 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x108 (= input.memlabel-mem--symbol.1_end ?x33)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x153 $x108)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x162 $x51)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x27 (and $x19 $x59)))
 (let (($x75 (not $x27)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x21 $x260)))
 (let (($x92 (and (not $x97) $x75)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x188 $x88)))
 (let (($x69 (not $x231)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x214 $x155)))
 (let (($x31 (and (not $x165) $x69)))
 (let (($x272 (and (and (and (and (and (and $x31 $x92) $x112) $x45) $x39) $x37) $x244)))
 (let (($x35 (and $x272 $x133)))
 (let (($x6 (= symbol.1 dst_symbol_addr.1)))
 (let (($x279 (and $x6 $x35)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x219 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x219) (or $x197 $x161)))))))
 (let (($x263 (and $x119 $x279)))
 (let (($x264 (= $x263 true)))
 (let (($x276 (= $x264 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x53 (= $x285 true)))
 (let (($x207 (= $x53 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x90)))
 (let (($x250 (= ?x116 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x150 (= $x250 true)))
 (let (($x91 (= ?x116 input.dst.llvm-%n)))
 (let (($x48 (= $x91 true)))
 (let (($x224 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x225 (= $x224 true)))
 (let (($x159 (= $x225 true)))
 (let (($x216 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x226 (= $x216 true)))
 (let (($x189 (= $x226 true)))
 (let (($x228 (and $x189 $x159)))
 (let (($x235 (and $x228 $x48)))
 (let (($x156 (and $x235 $x150)))
 (let (($x135 (and $x156 $x207)))
 (let (($x290 (and $x135 $x276)))
 (let (($x221 (and $x290 $x288)))
 (let (($x94 (and $x221 $x93)))
 (let (($x252 (and $x94 $x232)))
 (let (($x157 (and $x252 $x204)))
 (let (($x180 (and $x157 $x125)))
 (let (($x110 (and $x180 $x240)))
 (let (($x146 (and $x110 $x168)))
 (let (($x262 (and $x146 $x200)))
 (let (($x86 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x256 (and (not $x86) $x262)))
 (let (($x230 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and $x230 $x256)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x205 (and $x164 $x50)))
 (let (($x12 (forall ((Lambda25 (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x243 (_ bv1 32))))
 (=> $x294 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x243 (_ bv1 32))))
 (= $x294 false)))))
 ))
 (let (($x72 (forall ((Lambda25 (_ BitVec 32)) )(let (($x283 (= false false)))
 (let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x243 (_ bv0 32))))
 (=> $x233 $x283))))))
 ))
 (let (($x282 (forall ((Lambda25 (_ BitVec 32)) )(let (($x194 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x243 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x243 (_ bv0 32))))
 (= $x233 true)))))
 ))
 (let (($x104 (and $x282 $x72)))
 (let (($x130 (and $x104 $x17)))
 (let (($x96 (and $x130 $x12)))
 (let (($x259 (and $x96 $x205)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x203 (and $x254 $x259)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x129 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x65 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x55 (and $x65 $x203)))
 (let (($x255 (=> $x55 $x38)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 208 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (bvule ?x9 input.dst.llvm-%n)))
 (let (($x98 (= $x76 true)))
 (let (($x181 (= $x98 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x199)))
 (let (($x195 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x195 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x126)))
 (let (($x44 (= ?x212 input.dst.llvm-%n)))
 (let (($x138 (= $x44 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x291 (bvsub ?x113 ?x63)))
 (let (($x280 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x291) (bvult ?x113 ?x291))))
 (let ((?x25 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x223 (bvmul (_ bv4 64) ?x25)))
 (let ((?x247 ((_ extract 63 32) ?x223)))
 (let (($x77 (= (_ bv0 32) ?x247)))
 (let (($x61 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x61) $x77) $x280)))
 (let (($x111 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x22 (and $x111 $x160)))
 (let (($x89 (= true $x22)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x29 $x89)))
 (let (($x64 (= $x173 true)))
 (let (($x66 (= $x64 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x10 (= $x124 true)))
 (let (($x251 (= $x10 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x205 true)))
 (let (($x203 (= $x259 true)))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x281 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x281))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv2 32))) ?x273)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv3 32))) ?x109)))
 (let ((?x266 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x193 (_ bv1 32))))
 (=> $x157 (= ?x266 ?x146)))))))))))
 ))
 (let (($x218 (forall ((Lambda25 (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x185 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x193 (_ bv1 32))))
 (= $x157 (bvuge ?x185 (_ bv1 32)))))))))
 ))
 (let (($x271 (forall ((Lambda25 (_ BitVec 32)) )(let (($x130 (= false false)))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x193 (_ bv0 32))))
 (=> $x176 $x130))))))
 ))
 (let (($x186 (forall ((Lambda25 (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x185 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x193 (_ bv0 32))))
 (= $x176 (= ?x185 (_ bv0 32)))))))))
 ))
 (let (($x30 (and $x186 $x271)))
 (let (($x125 (and $x30 $x218)))
 (let (($x200 (and $x125 $x118)))
 (let (($x262 (= $x200 true)))
 (let (($x256 (= $x262 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x187 (= $x5 true)))
 (let (($x132 (= $x187 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x99 true)))
 (let (($x287 (= $x41 true)))
 (let (($x121 (= $x29 true)))
 (let (($x143 (= $x121 true)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x264)))
 (let ((?x279 (bvand symbol.1 (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x279)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x249 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x244 (= input.memlabel-mem--symbol.1_end ?x249)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x272 (and $x239 $x244)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x37 $x272)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (and $x229 $x162)))
 (let (($x33 (not $x153)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x68 $x42)))
 (let (($x51 (and (not $x45) $x33)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x59 $x27)))
 (let (($x92 (not $x75)))
 (let (($x267 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x97 $x267)))
 (let (($x112 (and (not $x19) $x92)))
 (let (($x248 (and (and (and (and (and (and $x112 $x51) $x39) $x105) $x177) $x35) $x263)))
 (let (($x93 (and $x248 $x276)))
 (let (($x60 (= symbol.1 dst_symbol_addr.1)))
 (let (($x94 (and $x60 $x93)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x190) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x47 $x188)))))))
 (let (($x139 (and $x260 $x94)))
 (let (($x73 (= $x139 true)))
 (let (($x232 (= $x73 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x18 (= $x219 true)))
 (let (($x209 (= $x18 true)))
 (let (($x148 (= ?x212 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x170 (= $x148 true)))
 (let (($x285 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x53 (= $x285 true)))
 (let (($x207 (= $x53 true)))
 (let (($x250 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x150 (= $x250 true)))
 (let (($x156 (= $x150 true)))
 (let (($x135 (and $x156 $x207)))
 (let (($x215 (and $x135 $x170)))
 (let (($x197 (and $x215 $x209)))
 (let (($x252 (and $x197 $x232)))
 (let (($x149 (and $x252 $x143)))
 (let (($x62 (and $x149 $x287)))
 (let (($x80 (and $x62 $x132)))
 (let (($x50 (and $x80 $x256)))
 (let (($x55 (and $x50 $x203)))
 (let (($x38 (and $x55 $x251)))
 (let (($x117 (and $x38 $x66)))
 (let (($x52 (and $x117 $x138)))
 (let (($x87 (and $x52 $x81)))
 (let (($x48 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x54 (and (not $x48) $x87)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x134 (and $x116 $x54)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x257 (and $x228 $x134)))
 (let (($x224 (forall ((Lambda25 (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x104 (_ bv1 32))))
 (=> $x164 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x172 (forall ((Lambda25 (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x104 (_ bv1 32))))
 (= $x164 false)))))
 ))
 (let (($x163 (forall ((Lambda25 (_ BitVec 32)) )(let (($x130 (= false false)))
 (let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x104 (_ bv0 32))))
 (=> $x294 $x130))))))
 ))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x104 (_ bv0 32))))
 (= $x294 true)))))
 ))
 (let (($x12 (and $x17 $x163)))
 (let (($x230 (and $x12 $x172)))
 (let (($x225 (and $x230 $x224)))
 (let (($x83 (and $x225 $x257)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x198 (and $x23 $x83)))
 (let (($x85 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x254 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x85)))))
 (let (($x102 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x85)))))
 (let (($x145 (and $x102 $x198)))
 (let (($x178 (=> $x145 $x181)))
 (not $x178)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (bvule ?x9 input.dst.llvm-%n)))
 (let (($x98 (= $x76 true)))
 (let (($x181 (= $x98 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x199)))
 (let (($x195 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x81 (= $x195 true)))
 (let ((?x126 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x126)))
 (let (($x44 (= ?x212 input.dst.llvm-%n)))
 (let (($x138 (= $x44 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x291 (bvsub ?x113 ?x63)))
 (let (($x280 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x291) (bvult ?x113 ?x291))))
 (let ((?x25 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x223 (bvmul (_ bv4 64) ?x25)))
 (let ((?x247 ((_ extract 63 32) ?x223)))
 (let (($x77 (= (_ bv0 32) ?x247)))
 (let (($x61 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x61) $x77) $x280)))
 (let (($x111 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x22 (and $x111 $x160)))
 (let (($x89 (= true $x22)))
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x29 $x89)))
 (let (($x64 (= $x173 true)))
 (let (($x66 (= $x64 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x10 (= $x124 true)))
 (let (($x251 (= $x10 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x205 true)))
 (let (($x203 (= $x259 true)))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x281 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x281))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv2 32))) ?x273)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv3 32))) ?x109)))
 (let ((?x266 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x193 (_ bv1 32))))
 (=> $x157 (= ?x266 ?x146)))))))))))
 ))
 (let (($x218 (forall ((Lambda25 (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x185 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x193 (_ bv1 32))))
 (= $x157 (bvuge ?x185 (_ bv1 32)))))))))
 ))
 (let (($x271 (forall ((Lambda25 (_ BitVec 32)) )(let (($x130 (= false false)))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x193 (_ bv0 32))))
 (=> $x176 $x130))))))
 ))
 (let (($x186 (forall ((Lambda25 (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x185 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x193 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x193 (_ bv0 32))))
 (= $x176 (= ?x185 (_ bv0 32)))))))))
 ))
 (let (($x30 (and $x186 $x271)))
 (let (($x125 (and $x30 $x218)))
 (let (($x200 (and $x125 $x118)))
 (let (($x262 (= $x200 true)))
 (let (($x256 (= $x262 true)))
 (let (($x5 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x187 (= $x5 true)))
 (let (($x132 (= $x187 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x99 true)))
 (let (($x287 (= $x41 true)))
 (let (($x121 (= $x29 true)))
 (let (($x143 (= $x121 true)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x264)))
 (let ((?x279 (bvand symbol.1 (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x279)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x249 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x244 (= input.memlabel-mem--symbol.1_end ?x249)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x272 (and $x239 $x244)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x37 $x272)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (and $x229 $x162)))
 (let (($x33 (not $x153)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x68 $x42)))
 (let (($x51 (and (not $x45) $x33)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x59 $x27)))
 (let (($x92 (not $x75)))
 (let (($x267 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x97 $x267)))
 (let (($x112 (and (not $x19) $x92)))
 (let (($x248 (and (and (and (and (and (and $x112 $x51) $x39) $x105) $x177) $x35) $x263)))
 (let (($x93 (and $x248 $x276)))
 (let (($x60 (= symbol.1 dst_symbol_addr.1)))
 (let (($x94 (and $x60 $x93)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x190) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x47 $x188)))))))
 (let (($x139 (and $x260 $x94)))
 (let (($x73 (= $x139 true)))
 (let (($x232 (= $x73 true)))
 (let (($x219 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x18 (= $x219 true)))
 (let (($x209 (= $x18 true)))
 (let (($x148 (= ?x212 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x170 (= $x148 true)))
 (let (($x285 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x53 (= $x285 true)))
 (let (($x207 (= $x53 true)))
 (let (($x250 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x150 (= $x250 true)))
 (let (($x156 (= $x150 true)))
 (let (($x135 (and $x156 $x207)))
 (let (($x215 (and $x135 $x170)))
 (let (($x197 (and $x215 $x209)))
 (let (($x252 (and $x197 $x232)))
 (let (($x149 (and $x252 $x143)))
 (let (($x62 (and $x149 $x287)))
 (let (($x80 (and $x62 $x132)))
 (let (($x50 (and $x80 $x256)))
 (let (($x55 (and $x50 $x203)))
 (let (($x38 (and $x55 $x251)))
 (let (($x117 (and $x38 $x66)))
 (let (($x52 (and $x117 $x138)))
 (let (($x87 (and $x52 $x81)))
 (let (($x48 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x54 (and (not $x48) $x87)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x134 (and $x116 $x54)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x257 (and $x228 $x134)))
 (let (($x224 (forall ((Lambda25 (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x104 (_ bv1 32))))
 (=> $x164 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x172 (forall ((Lambda25 (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x104 (_ bv1 32))))
 (= $x164 false)))))
 ))
 (let (($x163 (forall ((Lambda25 (_ BitVec 32)) )(let (($x130 (= false false)))
 (let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x104 (_ bv0 32))))
 (=> $x294 $x130))))))
 ))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x104 (_ bv0 32))))
 (= $x294 true)))))
 ))
 (let (($x12 (and $x17 $x163)))
 (let (($x230 (and $x12 $x172)))
 (let (($x225 (and $x230 $x224)))
 (let (($x83 (and $x225 $x257)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x198 (and $x23 $x83)))
 (let (($x85 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x254 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x85)))))
 (let (($x102 (=> (and $x29 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x85)))))
 (let (($x145 (and $x102 $x198)))
 (let (($x178 (=> $x145 $x181)))
 (not $x178)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x350 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x193 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x85 (bvadd ?x113 (_ bv3 32))))
 (let ((?x322 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x113 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x325 (store ?x322 (bvadd ?x113 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x328 (store ?x325 (bvadd ?x113 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x330 (store ?x328 ?x85 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x344 (concat (select ?x330 (bvadd ?x193 (_ bv2 32))) (concat (select ?x330 (bvadd ?x193 (_ bv1 32))) (select ?x330 ?x193)))))
 (let ((?x264 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x348 (= (ite $x301 input.spec-%var-i-0.L2%7%bbentry ?x264) (concat (select ?x330 (bvadd ?x193 (_ bv3 32))) ?x344))))
 (let ((?x303 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25) $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x303 (_ bv1 32))))
 (=> $x315 $x348))))))))))))))))
 ))
 (let (($x317 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let (($x298 (and $x33 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x299 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x303 (ite (or $x27 $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x303 (_ bv1 32))))
 (= $x315 (bvuge ?x299 (_ bv1 32)))))))))))
 ))
 (let (($x309 (forall ((Lambda25 (_ BitVec 32)) )(let (($x230 (= false false)))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x303 (ite (or $x27 $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x303 (_ bv0 32))))
 (=> $x304 $x230)))))))
 ))
 (let (($x306 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let (($x298 (and $x33 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x299 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x303 (ite (or $x27 $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x303 (_ bv0 32))))
 (= $x304 (= ?x299 (_ bv0 32)))))))))))
 ))
 (let (($x310 (and $x306 $x309)))
 (let (($x318 (and $x310 $x317)))
 (let (($x351 (and $x318 $x350)))
 (let (($x352 (= $x351 true)))
 (let (($x353 (= $x352 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x40)))
 (let (($x123 (= ?x182 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x123 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x14)))
 (let ((?x261 (bvand symbol.1 (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x261)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x222 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x283 (= input.memlabel-mem--symbol.1_end ?x222)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x284 (and $x136 $x283)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x56 $x284)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x181 (and $x76 $x98)))
 (let (($x178 (not $x181)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x198 $x145)))
 (let (($x67 (and (not $x9) $x178)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x81 $x87)))
 (let (($x134 (not $x54)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x199 $x201)))
 (let (($x83 (and (not $x195) $x134)))
 (let (($x227 (and (and (and (and (and (and $x83 $x67) $x152) $x194) $x72) $x96) $x120)))
 (let (($x211 (and $x227 $x216)))
 (let (($x247 (= symbol.1 dst_symbol_addr.1)))
 (let (($x79 (and $x247 $x211)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x292 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x292)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x292) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x89 $x173)))))))
 (let (($x274 (and $x52 $x79)))
 (let (($x141 (= $x274 true)))
 (let (($x137 (= $x141 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x124 (bvsub ?x113 ?x63)))
 (let (($x255 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x124) (bvult ?x113 ?x124))))
 (let ((?x205 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x205)))
 (let ((?x203 ((_ extract 63 32) ?x259)))
 (let (($x55 (= (_ bv0 32) ?x203)))
 (let (($x256 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x107 (and (and (and true $x256) $x55) $x255)))
 (let (($x131 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x115 (and $x131 $x107)))
 (let (($x34 (= true $x115)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (=> $x70 $x34)))
 (let (($x61 (= $x184 true)))
 (let (($x26 (= $x61 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x114 (= $x236 true)))
 (let (($x269 (= $x114 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x242 (= $x168 true)))
 (let (($x238 (= $x242 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (= $x240 true)))
 (let (($x281 (= $x16 true)))
 (let (($x204 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x193 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x193))))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x193 (_ bv2 32))) ?x253)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x193 (_ bv3 32))) ?x217)))
 (let ((?x264 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x289 (_ bv1 32))))
 (=> $x35 (= ?x264 ?x271)))))))))))
 ))
 (let (($x279 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let ((?x290 (ite (and $x33 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x289 (_ bv1 32))))
 (= $x35 (bvuge ?x290 (_ bv1 32)))))))))
 ))
 (let (($x249 (forall ((Lambda25 (_ BitVec 32)) )(let (($x230 (= false false)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x289 (_ bv0 32))))
 (=> $x246 $x230))))))
 ))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let ((?x290 (ite (and $x33 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x289 (_ bv0 32))))
 (= $x246 (= ?x290 (_ bv0 32)))))))))
 ))
 (let (($x244 (and $x288 $x249)))
 (let (($x263 (and $x244 $x279)))
 (let (($x147 (and $x263 $x204)))
 (let (($x218 (= $x147 true)))
 (let (($x125 (= $x218 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x267 (= $x97 true)))
 (let (($x19 (= $x267 true)))
 (let (($x31 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x260 (= $x31 true)))
 (let (($x161 (= $x260 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x88 (= $x188 true)))
 (let (($x231 (= $x88 true)))
 (let (($x214 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x155 (= $x214 true)))
 (let (($x47 (= $x155 true)))
 (let (($x190 (= $x70 true)))
 (let (($x119 (= $x190 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x219)))
 (let (($x100 (= ?x18 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x128 (= $x100 true)))
 (let (($x209 (= ?x18 input.dst.llvm-%n)))
 (let (($x197 (= $x209 true)))
 (let (($x21 (and $x197 $x128)))
 (let (($x169 (and $x21 $x119)))
 (let (($x165 (and $x169 $x47)))
 (let (($x69 (and $x165 $x231)))
 (let (($x60 (and $x69 $x161)))
 (let (($x127 (and $x60 $x19)))
 (let (($x266 (and $x127 $x125)))
 (let (($x293 (and $x266 $x281)))
 (let (($x241 (and $x293 $x238)))
 (let (($x273 (and $x241 $x269)))
 (let (($x220 (and $x273 $x26)))
 (let (($x234 (and $x220 $x137)))
 (let (($x213 (and $x234 $x180)))
 (let (($x170 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x171 (and (not $x170) $x213)))
 (let (($x212 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x237 (and $x212 $x171)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x20 (and $x135 $x237)))
 (let (($x285 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x12 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x12 (_ bv1 32))))
 (= $x228 false)))))
 ))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x230 (= false false)))
 (let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x12 (_ bv0 32))))
 (=> $x164 $x230))))))
 ))
 (let (($x172 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x12 (_ bv0 32))))
 (= $x164 true)))))
 ))
 (let (($x224 (and $x172 $x189)))
 (let (($x116 (and $x224 $x90)))
 (let (($x53 (and $x116 $x285)))
 (let (($x277 (and $x53 $x20)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x140 (and $x243 $x277)))
 (let (($x65 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x65)))))
 (let (($x144 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x65)))))
 (let (($x101 (and $x144 $x140)))
 (let (($x354 (=> $x101 $x353)))
 (not $x354))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x350 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x193 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x85 (bvadd ?x113 (_ bv3 32))))
 (let ((?x322 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x113 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x325 (store ?x322 (bvadd ?x113 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x328 (store ?x325 (bvadd ?x113 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x330 (store ?x328 ?x85 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x344 (concat (select ?x330 (bvadd ?x193 (_ bv2 32))) (concat (select ?x330 (bvadd ?x193 (_ bv1 32))) (select ?x330 ?x193)))))
 (let ((?x264 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x348 (= (ite $x301 input.spec-%var-i-0.L2%7%bbentry ?x264) (concat (select ?x330 (bvadd ?x193 (_ bv3 32))) ?x344))))
 (let ((?x303 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25) $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x303 (_ bv1 32))))
 (=> $x315 $x348))))))))))))))))
 ))
 (let (($x317 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let (($x298 (and $x33 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x299 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x303 (ite (or $x27 $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x303 (_ bv1 32))))
 (= $x315 (bvuge ?x299 (_ bv1 32)))))))))))
 ))
 (let (($x309 (forall ((Lambda25 (_ BitVec 32)) )(let (($x230 (= false false)))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x303 (ite (or $x27 $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x303 (_ bv0 32))))
 (=> $x304 $x230)))))))
 ))
 (let (($x306 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let (($x298 (and $x33 (bvult Lambda25 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x299 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= Lambda25 input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x303 (ite (or $x27 $x301) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x303 (_ bv0 32))))
 (= $x304 (= ?x299 (_ bv0 32)))))))))))
 ))
 (let (($x310 (and $x306 $x309)))
 (let (($x318 (and $x310 $x317)))
 (let (($x351 (and $x318 $x350)))
 (let (($x352 (= $x351 true)))
 (let (($x353 (= $x352 true)))
 (let ((?x40 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x40)))
 (let (($x123 (= ?x182 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x123 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x14)))
 (let ((?x261 (bvand symbol.1 (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x261)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x222 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x283 (= input.memlabel-mem--symbol.1_end ?x222)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x284 (and $x136 $x283)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x56 $x284)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x181 (and $x76 $x98)))
 (let (($x178 (not $x181)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x198 $x145)))
 (let (($x67 (and (not $x9) $x178)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x81 $x87)))
 (let (($x134 (not $x54)))
 (let (($x201 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x199 $x201)))
 (let (($x83 (and (not $x195) $x134)))
 (let (($x227 (and (and (and (and (and (and $x83 $x67) $x152) $x194) $x72) $x96) $x120)))
 (let (($x211 (and $x227 $x216)))
 (let (($x247 (= symbol.1 dst_symbol_addr.1)))
 (let (($x79 (and $x247 $x211)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x292 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x292)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x292) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x89 $x173)))))))
 (let (($x274 (and $x52 $x79)))
 (let (($x141 (= $x274 true)))
 (let (($x137 (= $x141 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x113 (bvadd symbol.1 ?x63)))
 (let ((?x124 (bvsub ?x113 ?x63)))
 (let (($x255 (ite (bvsge ?x63 (_ bv0 32)) (bvuge ?x113 ?x124) (bvult ?x113 ?x124))))
 (let ((?x205 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x205)))
 (let ((?x203 ((_ extract 63 32) ?x259)))
 (let (($x55 (= (_ bv0 32) ?x203)))
 (let (($x256 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x107 (and (and (and true $x256) $x55) $x255)))
 (let (($x131 (= (bvand ?x113 (_ bv4294967292 32)) ?x113)))
 (let (($x115 (and $x131 $x107)))
 (let (($x34 (= true $x115)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (=> $x70 $x34)))
 (let (($x61 (= $x184 true)))
 (let (($x26 (= $x61 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x114 (= $x236 true)))
 (let (($x269 (= $x114 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x242 (= $x168 true)))
 (let (($x238 (= $x242 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (= $x240 true)))
 (let (($x281 (= $x16 true)))
 (let (($x204 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x193 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x193))))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x193 (_ bv2 32))) ?x253)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x193 (_ bv3 32))) ?x217)))
 (let ((?x264 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x289 (_ bv1 32))))
 (=> $x35 (= ?x264 ?x271)))))))))))
 ))
 (let (($x279 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let ((?x290 (ite (and $x33 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x289 (_ bv1 32))))
 (= $x35 (bvuge ?x290 (_ bv1 32)))))))))
 ))
 (let (($x249 (forall ((Lambda25 (_ BitVec 32)) )(let (($x230 (= false false)))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x289 (_ bv0 32))))
 (=> $x246 $x230))))))
 ))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (bvule (_ bv0 32) Lambda25)))
 (let ((?x290 (ite (and $x33 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x289 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x289 (_ bv0 32))))
 (= $x246 (= ?x290 (_ bv0 32)))))))))
 ))
 (let (($x244 (and $x288 $x249)))
 (let (($x263 (and $x244 $x279)))
 (let (($x147 (and $x263 $x204)))
 (let (($x218 (= $x147 true)))
 (let (($x125 (= $x218 true)))
 (let (($x97 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x267 (= $x97 true)))
 (let (($x19 (= $x267 true)))
 (let (($x31 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x260 (= $x31 true)))
 (let (($x161 (= $x260 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x88 (= $x188 true)))
 (let (($x231 (= $x88 true)))
 (let (($x214 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x155 (= $x214 true)))
 (let (($x47 (= $x155 true)))
 (let (($x190 (= $x70 true)))
 (let (($x119 (= $x190 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x219)))
 (let (($x100 (= ?x18 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x128 (= $x100 true)))
 (let (($x209 (= ?x18 input.dst.llvm-%n)))
 (let (($x197 (= $x209 true)))
 (let (($x21 (and $x197 $x128)))
 (let (($x169 (and $x21 $x119)))
 (let (($x165 (and $x169 $x47)))
 (let (($x69 (and $x165 $x231)))
 (let (($x60 (and $x69 $x161)))
 (let (($x127 (and $x60 $x19)))
 (let (($x266 (and $x127 $x125)))
 (let (($x293 (and $x266 $x281)))
 (let (($x241 (and $x293 $x238)))
 (let (($x273 (and $x241 $x269)))
 (let (($x220 (and $x273 $x26)))
 (let (($x234 (and $x220 $x137)))
 (let (($x213 (and $x234 $x180)))
 (let (($x170 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x171 (and (not $x170) $x213)))
 (let (($x212 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x237 (and $x212 $x171)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x20 (and $x135 $x237)))
 (let (($x285 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x12 (_ bv1 32))))
 (=> $x228 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x90 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x12 (_ bv1 32))))
 (= $x228 false)))))
 ))
 (let (($x189 (forall ((Lambda25 (_ BitVec 32)) )(let (($x230 (= false false)))
 (let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x12 (_ bv0 32))))
 (=> $x164 $x230))))))
 ))
 (let (($x172 (forall ((Lambda25 (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x12 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x12 (_ bv0 32))))
 (= $x164 true)))))
 ))
 (let (($x224 (and $x172 $x189)))
 (let (($x116 (and $x224 $x90)))
 (let (($x53 (and $x116 $x285)))
 (let (($x277 (and $x53 $x20)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x140 (and $x243 $x277)))
 (let (($x65 (and (bvule input.memlabel-mem--symbol.1_begin ?x113) (bvule (bvadd ?x113 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32))) (or false (or false $x65)))))
 (let (($x144 (=> (and $x70 (bvule ?x113 (bvsub (bvadd ?x113 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x65)))))
 (let (($x101 (and $x144 $x140)))
 (let (($x354 (=> $x101 $x353)))
 (not $x354))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x25 (bvmul (_ bv4294967295 32) ?x82)))
 (let ((?x94 (bvneg ?x25)))
 (let (($x191 (= ?x94 ?x233)))
 (let (($x208 (= $x191 true)))
 (let ((?x342 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x344 (bvneg ?x342)))
 (let (($x346 (= ?x344 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x346 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvadd symbol.1 ?x113)))
 (let ((?x320 (bvsub ?x84 ?x113)))
 (let (($x325 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x84 ?x320) (bvult ?x84 ?x320))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x318 (bvmul (_ bv4 64) ?x317)))
 (let ((?x347 ((_ extract 63 32) ?x318)))
 (let (($x321 (= (_ bv0 32) ?x347)))
 (let (($x314 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x328 (and (and (and true $x314) $x321) $x325)))
 (let (($x306 (= (bvand ?x84 (_ bv4294967292 32)) ?x84)))
 (let (($x329 (and $x306 $x328)))
 (let (($x330 (= true $x329)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x345 (=> $x70 $x330)))
 (let (($x343 (= $x345 true)))
 (let (($x341 (= $x343 true)))
 (let (($x265 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x297 (= $x265 true)))
 (let (($x298 (= $x297 true)))
 (let (($x301 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (= $x301 true)))
 (let (($x303 (= $x302 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x20 true)))
 (let (($x140 (= $x277 true)))
 (let (($x123 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x216)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x274)))
 (let ((?x98 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x52 (_ bv1 32))))
 (=> $x198 (= ?x98 ?x234)))))))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x117 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x52 (_ bv1 32))))
 (= $x198 (bvuge ?x117 (_ bv1 32)))))))))
 ))
 (let (($x257 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x52 (_ bv0 32))))
 (=> $x223 $x48))))))
 ))
 (let (($x199 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x117 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x52 (_ bv0 32))))
 (= $x223 (= ?x117 (_ bv0 32)))))))))
 ))
 (let (($x81 (and $x199 $x257)))
 (let (($x49 (and $x81 $x9)))
 (let (($x180 (and $x49 $x123)))
 (let (($x213 (= $x180 true)))
 (let (($x171 (= $x213 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x61 (= $x184 true)))
 (let (($x26 (= $x61 true)))
 (let (($x255 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x107 (= $x255 true)))
 (let (($x115 (= $x107 true)))
 (let (($x10 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x124 (= $x10 true)))
 (let (($x251 (= $x124 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x259 true)))
 (let (($x55 (= $x203 true)))
 (let (($x32 (= $x70 true)))
 (let (($x50 (= $x32 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x238)))
 (let ((?x168 (bvand symbol.1 (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x168)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let ((?x125 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x266 (= input.memlabel-mem--symbol.1_end ?x125)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x240 (and $x147 $x266)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x204 $x240)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x174 (and $x183 $x268)))
 (let (($x176 (not $x174)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x185 (and $x270 $x149)))
 (let (($x217 (and (not $x185) $x176)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x263 $x264)))
 (let (($x8 (not $x93)))
 (let (($x275 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x133 $x275)))
 (let (($x186 (and (not $x279) $x8)))
 (let (($x146 (and (and (and (and (and (and $x186 $x217) $x271) $x157) $x16) $x293) $x242)))
 (let (($x131 (and $x146 $x241)))
 (let (($x97 (= symbol.1 dst_symbol_addr.1)))
 (let (($x118 (and $x97 $x131)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x246 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x246) (or $x290 $x39)))))))
 (let (($x258 (and $x35 $x118)))
 (let (($x200 (= $x258 true)))
 (let (($x262 (= $x200 true)))
 (let ((?x165 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x165)))
 (let (($x69 (= ?x188 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x31 (= $x69 true)))
 (let (($x88 (= ?x188 input.dst.llvm-%n)))
 (let (($x231 (= $x88 true)))
 (let (($x260 (and $x231 $x31)))
 (let (($x256 (and $x260 $x262)))
 (let (($x205 (and $x256 $x50)))
 (let (($x111 (and $x205 $x55)))
 (let (($x38 (and $x111 $x251)))
 (let (($x34 (and $x38 $x115)))
 (let (($x220 (and $x34 $x26)))
 (let (($x237 (and $x220 $x171)))
 (let (($x101 (and $x237 $x140)))
 (let (($x304 (and $x101 $x303)))
 (let (($x299 (and $x304 $x298)))
 (let (($x340 (and $x299 $x341)))
 (let (($x349 (and $x340 $x348)))
 (let (($x155 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x351 (and (not $x155) $x349)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x352 (and $x6 $x351)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x353 (and $x190 $x352)))
 (let (($x100 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x228 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x212 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x228 (_ bv1 32))))
 (= $x15 false)))))
 ))
 (let (($x285 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x228 (_ bv0 32))))
 (=> $x167 $x48))))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x228 (_ bv0 32))))
 (= $x167 true)))))
 ))
 (let (($x53 (and $x116 $x285)))
 (let (($x148 (and $x53 $x212)))
 (let (($x128 (and $x148 $x100)))
 (let (($x354 (and $x128 $x353)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x355 (and $x294 $x354)))
 (let (($x23 (and (bvule input.memlabel-mem--symbol.1_begin ?x84) (bvule (bvadd ?x84 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (or false (or false $x23)))))
 (let (($x142 (=> (and $x70 (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x23)))))
 (let (($x43 (and $x142 $x355)))
 (let (($x282 (=> $x43 $x208)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x25 (bvmul (_ bv4294967295 32) ?x82)))
 (let ((?x94 (bvneg ?x25)))
 (let (($x191 (= ?x94 ?x233)))
 (let (($x208 (= $x191 true)))
 (let ((?x342 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x344 (bvneg ?x342)))
 (let (($x346 (= ?x344 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x346 true)))
 (let ((?x113 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvadd symbol.1 ?x113)))
 (let ((?x320 (bvsub ?x84 ?x113)))
 (let (($x325 (ite (bvsge ?x113 (_ bv0 32)) (bvuge ?x84 ?x320) (bvult ?x84 ?x320))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x318 (bvmul (_ bv4 64) ?x317)))
 (let ((?x347 ((_ extract 63 32) ?x318)))
 (let (($x321 (= (_ bv0 32) ?x347)))
 (let (($x314 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x328 (and (and (and true $x314) $x321) $x325)))
 (let (($x306 (= (bvand ?x84 (_ bv4294967292 32)) ?x84)))
 (let (($x329 (and $x306 $x328)))
 (let (($x330 (= true $x329)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x345 (=> $x70 $x330)))
 (let (($x343 (= $x345 true)))
 (let (($x341 (= $x343 true)))
 (let (($x265 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x297 (= $x265 true)))
 (let (($x298 (= $x297 true)))
 (let (($x301 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (= $x301 true)))
 (let (($x303 (= $x302 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x20 true)))
 (let (($x140 (= $x277 true)))
 (let (($x123 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x216)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x274)))
 (let ((?x98 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x52 (_ bv1 32))))
 (=> $x198 (= ?x98 ?x234)))))))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x117 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x52 (_ bv1 32))))
 (= $x198 (bvuge ?x117 (_ bv1 32)))))))))
 ))
 (let (($x257 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x52 (_ bv0 32))))
 (=> $x223 $x48))))))
 ))
 (let (($x199 (forall ((Lambda25 (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x117 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x52 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x52 (_ bv0 32))))
 (= $x223 (= ?x117 (_ bv0 32)))))))))
 ))
 (let (($x81 (and $x199 $x257)))
 (let (($x49 (and $x81 $x9)))
 (let (($x180 (and $x49 $x123)))
 (let (($x213 (= $x180 true)))
 (let (($x171 (= $x213 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x61 (= $x184 true)))
 (let (($x26 (= $x61 true)))
 (let (($x255 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x107 (= $x255 true)))
 (let (($x115 (= $x107 true)))
 (let (($x10 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x124 (= $x10 true)))
 (let (($x251 (= $x124 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x259 true)))
 (let (($x55 (= $x203 true)))
 (let (($x32 (= $x70 true)))
 (let (($x50 (= $x32 true)))
 (let ((?x238 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x238)))
 (let ((?x168 (bvand symbol.1 (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x168)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let ((?x125 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x266 (= input.memlabel-mem--symbol.1_end ?x125)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x240 (and $x147 $x266)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x204 $x240)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x174 (and $x183 $x268)))
 (let (($x176 (not $x174)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x185 (and $x270 $x149)))
 (let (($x217 (and (not $x185) $x176)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x263 $x264)))
 (let (($x8 (not $x93)))
 (let (($x275 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x133 $x275)))
 (let (($x186 (and (not $x279) $x8)))
 (let (($x146 (and (and (and (and (and (and $x186 $x217) $x271) $x157) $x16) $x293) $x242)))
 (let (($x131 (and $x146 $x241)))
 (let (($x97 (= symbol.1 dst_symbol_addr.1)))
 (let (($x118 (and $x97 $x131)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x246 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x246) (or $x290 $x39)))))))
 (let (($x258 (and $x35 $x118)))
 (let (($x200 (= $x258 true)))
 (let (($x262 (= $x200 true)))
 (let ((?x165 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x165)))
 (let (($x69 (= ?x188 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x31 (= $x69 true)))
 (let (($x88 (= ?x188 input.dst.llvm-%n)))
 (let (($x231 (= $x88 true)))
 (let (($x260 (and $x231 $x31)))
 (let (($x256 (and $x260 $x262)))
 (let (($x205 (and $x256 $x50)))
 (let (($x111 (and $x205 $x55)))
 (let (($x38 (and $x111 $x251)))
 (let (($x34 (and $x38 $x115)))
 (let (($x220 (and $x34 $x26)))
 (let (($x237 (and $x220 $x171)))
 (let (($x101 (and $x237 $x140)))
 (let (($x304 (and $x101 $x303)))
 (let (($x299 (and $x304 $x298)))
 (let (($x340 (and $x299 $x341)))
 (let (($x349 (and $x340 $x348)))
 (let (($x155 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x351 (and (not $x155) $x349)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x352 (and $x6 $x351)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x353 (and $x190 $x352)))
 (let (($x100 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x228 (_ bv1 32))))
 (=> $x15 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x212 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x228 (_ bv1 32))))
 (= $x15 false)))))
 ))
 (let (($x285 (forall ((Lambda25 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x228 (_ bv0 32))))
 (=> $x167 $x48))))))
 ))
 (let (($x116 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x228 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x228 (_ bv0 32))))
 (= $x167 true)))))
 ))
 (let (($x53 (and $x116 $x285)))
 (let (($x148 (and $x53 $x212)))
 (let (($x128 (and $x148 $x100)))
 (let (($x354 (and $x128 $x353)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x355 (and $x294 $x354)))
 (let (($x23 (and (bvule input.memlabel-mem--symbol.1_begin ?x84) (bvule (bvadd ?x84 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (or false (or false $x23)))))
 (let (($x142 (=> (and $x70 (bvule ?x84 (bvsub (bvadd ?x84 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x23)))))
 (let (($x43 (and $x142 $x355)))
 (let (($x282 (=> $x43 $x208)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (not $x70)))
 (let (($x215 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x12 (not $x215)))
 (let (($x189 (or $x12 $x226)))
 (let (($x224 (= $x189 true)))
 (let (($x150 (= $x224 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x191)))
 (let (($x282 (= ?x208 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x282 true)))
 (let ((?x353 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x353)))
 (let (($x25 (= ?x354 input.dst.llvm-%n)))
 (let (($x94 (= $x25 true)))
 (let (($x355 (= ?x354 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (= $x355 true)))
 (let (($x346 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x348 (= $x346 true)))
 (let (($x349 (= $x348 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x340 (= $x341 true)))
 (let (($x342 (= $x340 true)))
 (let (($x329 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x330 (= $x329 true)))
 (let (($x345 (= $x330 true)))
 (let (($x320 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x309 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x314)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x317)))
 (let ((?x123 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x98 (_ bv1 32))))
 (=> $x216 (= ?x123 ?x321)))))))))))
 ))
 (let (($x234 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x9 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x98 (_ bv1 32))))
 (= $x216 (bvuge ?x9 (_ bv1 32)))))))))
 ))
 (let (($x56 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (= false false)))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x98 (_ bv0 32))))
 (=> $x178 $x166))))))
 ))
 (let (($x261 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x9 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x98 (_ bv0 32))))
 (= $x178 (= ?x9 (_ bv0 32)))))))))
 ))
 (let (($x211 (and $x261 $x56)))
 (let (($x40 (and $x211 $x234)))
 (let (($x324 (and $x40 $x320)))
 (let (($x323 (= $x324 true)))
 (let (($x325 (= $x323 true)))
 (let (($x26 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x220 (= $x26 true)))
 (let (($x210 (= $x220 true)))
 (let (($x115 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x34 (= $x115 true)))
 (let (($x184 (= $x34 true)))
 (let (($x251 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x38 (= $x251 true)))
 (let (($x255 (= $x38 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x55 (= $x203 true)))
 (let (($x111 (= $x55 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x146)))
 (let ((?x168 (bvand symbol.1 (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x168)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x240 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x16 (= input.memlabel-mem--symbol.1_end ?x240)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x273 (and $x125 $x16)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x218 $x273)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x271 (and $x217 $x236)))
 (let (($x114 (not $x271)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (and $x268 $x174)))
 (let (($x157 (and (not $x176) $x114)))
 (let (($x270 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x186 $x270)))
 (let (($x185 (not $x149)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x264 $x93)))
 (let (($x183 (and (not $x8) $x185)))
 (let (($x262 (and (and (and (and (and (and $x183 $x157) $x269) $x147) $x281) $x109) $x242)))
 (let (($x256 (and $x262 $x238)))
 (let (($x246 (= symbol.1 dst_symbol_addr.1)))
 (let (($x32 (and $x246 $x256)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x290 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x290)))
 (let (($x105 (or (bvugt input.memlabel-mem--symbol.1_begin ?x290) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x263 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x105) (or $x35 $x60)))))))
 (let (($x50 (and $x263 $x32)))
 (let (($x205 (= $x50 true)))
 (let (($x259 (= $x205 true)))
 (let (($x10 (and $x259 $x111)))
 (let (($x107 (and $x10 $x255)))
 (let (($x61 (and $x107 $x184)))
 (let (($x52 (and $x61 $x210)))
 (let (($x328 (and $x52 $x325)))
 (let (($x343 (and $x328 $x345)))
 (let (($x344 (and $x343 $x342)))
 (let (($x351 (and $x344 $x349)))
 (let (($x82 (and $x351 $x43)))
 (let (($x233 (and $x82 $x94)))
 (let (($x78 (and $x233 $x130)))
 (let (($x127 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (and $x127 $x78)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x161 (and $x267 $x151)))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x15 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x6 (forall ((Lambda25 (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x15 (_ bv1 32))))
 (= $x119 false)))))
 ))
 (let (($x100 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (= false false)))
 (let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x15 (_ bv0 32))))
 (=> $x126 $x166))))))
 ))
 (let (($x148 (forall ((Lambda25 (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x15 (_ bv0 32))))
 (= $x126 true)))))
 ))
 (let (($x128 (and $x148 $x100)))
 (let (($x214 (and $x128 $x6)))
 (let (($x31 (and $x214 $x69)))
 (let (($x67 (and $x31 $x161)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x17 (and $x158 $x67)))
 (let ((?x84 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvadd symbol.1 ?x84)))
 (let (($x104 (and (bvule input.memlabel-mem--symbol.1_begin ?x175) (bvule (bvadd ?x175 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x164 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x95 (=> (and $x70 (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x104)))))
 (let (($x172 (and $x95 $x17)))
 (let (($x207 (=> $x172 $x150)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (not $x70)))
 (let (($x215 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x12 (not $x215)))
 (let (($x189 (or $x12 $x226)))
 (let (($x224 (= $x189 true)))
 (let (($x150 (= $x224 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x191)))
 (let (($x282 (= ?x208 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (= $x282 true)))
 (let ((?x353 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x353)))
 (let (($x25 (= ?x354 input.dst.llvm-%n)))
 (let (($x94 (= $x25 true)))
 (let (($x355 (= ?x354 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x43 (= $x355 true)))
 (let (($x346 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x348 (= $x346 true)))
 (let (($x349 (= $x348 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x340 (= $x341 true)))
 (let (($x342 (= $x340 true)))
 (let (($x329 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x330 (= $x329 true)))
 (let (($x345 (= $x330 true)))
 (let (($x320 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x309 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x309))))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv2 32))) ?x314)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x309 (_ bv3 32))) ?x317)))
 (let ((?x123 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x98 (_ bv1 32))))
 (=> $x216 (= ?x123 ?x321)))))))))))
 ))
 (let (($x234 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x9 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x98 (_ bv1 32))))
 (= $x216 (bvuge ?x9 (_ bv1 32)))))))))
 ))
 (let (($x56 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (= false false)))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x98 (_ bv0 32))))
 (=> $x178 $x166))))))
 ))
 (let (($x261 (forall ((Lambda25 (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x9 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x98 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x98 (_ bv0 32))))
 (= $x178 (= ?x9 (_ bv0 32)))))))))
 ))
 (let (($x211 (and $x261 $x56)))
 (let (($x40 (and $x211 $x234)))
 (let (($x324 (and $x40 $x320)))
 (let (($x323 (= $x324 true)))
 (let (($x325 (= $x323 true)))
 (let (($x26 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x220 (= $x26 true)))
 (let (($x210 (= $x220 true)))
 (let (($x115 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x34 (= $x115 true)))
 (let (($x184 (= $x34 true)))
 (let (($x251 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x38 (= $x251 true)))
 (let (($x255 (= $x38 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x55 (= $x203 true)))
 (let (($x111 (= $x55 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x146)))
 (let ((?x168 (bvand symbol.1 (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x168)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x240 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x16 (= input.memlabel-mem--symbol.1_end ?x240)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x273 (and $x125 $x16)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x218 $x273)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x271 (and $x217 $x236)))
 (let (($x114 (not $x271)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (and $x268 $x174)))
 (let (($x157 (and (not $x176) $x114)))
 (let (($x270 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x186 $x270)))
 (let (($x185 (not $x149)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x264 $x93)))
 (let (($x183 (and (not $x8) $x185)))
 (let (($x262 (and (and (and (and (and (and $x183 $x157) $x269) $x147) $x281) $x109) $x242)))
 (let (($x256 (and $x262 $x238)))
 (let (($x246 (= symbol.1 dst_symbol_addr.1)))
 (let (($x32 (and $x246 $x256)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x290 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x290)))
 (let (($x105 (or (bvugt input.memlabel-mem--symbol.1_begin ?x290) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x263 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x105) (or $x35 $x60)))))))
 (let (($x50 (and $x263 $x32)))
 (let (($x205 (= $x50 true)))
 (let (($x259 (= $x205 true)))
 (let (($x10 (and $x259 $x111)))
 (let (($x107 (and $x10 $x255)))
 (let (($x61 (and $x107 $x184)))
 (let (($x52 (and $x61 $x210)))
 (let (($x328 (and $x52 $x325)))
 (let (($x343 (and $x328 $x345)))
 (let (($x344 (and $x343 $x342)))
 (let (($x351 (and $x344 $x349)))
 (let (($x82 (and $x351 $x43)))
 (let (($x233 (and $x82 $x94)))
 (let (($x78 (and $x233 $x130)))
 (let (($x127 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x151 (and $x127 $x78)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x161 (and $x267 $x151)))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x15 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x6 (forall ((Lambda25 (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x15 (_ bv1 32))))
 (= $x119 false)))))
 ))
 (let (($x100 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (= false false)))
 (let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x15 (_ bv0 32))))
 (=> $x126 $x166))))))
 ))
 (let (($x148 (forall ((Lambda25 (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x15 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x15 (_ bv0 32))))
 (= $x126 true)))))
 ))
 (let (($x128 (and $x148 $x100)))
 (let (($x214 (and $x128 $x6)))
 (let (($x31 (and $x214 $x69)))
 (let (($x67 (and $x31 $x161)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x17 (and $x158 $x67)))
 (let ((?x84 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvadd symbol.1 ?x84)))
 (let (($x104 (and (bvule input.memlabel-mem--symbol.1_begin ?x175) (bvule (bvadd ?x175 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x164 (=> (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x95 (=> (and $x70 (bvule ?x175 (bvsub (bvadd ?x175 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x104)))))
 (let (($x172 (and $x95 $x17)))
 (let (($x207 (=> $x172 $x150)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (not $x70)))
 (let (($x101 (= $x140 false)))
 (let (($x277 (= $x101 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x79)))
 (let (($x14 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x182 (= $x14 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x149)))
 (let (($x257 (= ?x185 input.dst.llvm-%n)))
 (let (($x81 (= $x257 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x247 (= $x44 true)))
 (let (($x199 (= $x247 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (= $x180 true)))
 (let (($x66 (= $x223 true)))
 (let (($x190 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x230)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x228)))
 (let ((?x94 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x345 (_ bv1 32))))
 (=> $x354 (= ?x94 ?x53)))))))))))
 ))
 (let (($x43 (forall ((Lambda25 (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x345 (_ bv1 32))))
 (= $x354 (bvuge ?x329 (_ bv1 32)))))))))
 ))
 (let (($x346 (forall ((Lambda25 (_ BitVec 32)) )(let (($x350 (= false false)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x345 (_ bv0 32))))
 (=> $x343 $x350))))))
 ))
 (let (($x340 (forall ((Lambda25 (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x345 (_ bv0 32))))
 (= $x343 (= ?x329 (_ bv0 32)))))))))
 ))
 (let (($x348 (and $x340 $x346)))
 (let (($x82 (and $x348 $x43)))
 (let (($x155 (and $x82 $x190)))
 (let (($x165 (= $x155 true)))
 (let (($x188 (= $x165 true)))
 (let (($x318 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x347 (= $x318 true)))
 (let (($x302 (= $x347 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x213 (= $x123 true)))
 (let (($x306 (= $x213 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x198)))
 (let ((?x178 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x178)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x220 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x61 $x220)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x184 $x210)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x111 $x10)))
 (let (($x251 (not $x124)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x259 $x203)))
 (let (($x255 (and (not $x55) $x251)))
 (let (($x238 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x146 $x238)))
 (let (($x32 (not $x256)))
 (let (($x242 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (and $x168 $x242)))
 (let (($x205 (and (not $x262) $x32)))
 (let (($x56 (and (and (and (and (and (and $x205 $x255) $x107) $x34) $x52) $x98) $x83)))
 (let (($x211 (and $x56 $x145)))
 (let (($x157 (= symbol.1 dst_symbol_addr.1)))
 (let (($x216 (and $x157 $x211)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x118 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x118) (or $x240 $x16)))))))
 (let (($x120 (and $x200 $x216)))
 (let (($x274 (= $x120 true)))
 (let (($x234 (= $x274 true)))
 (let (($x176 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x30 (= $x176 true)))
 (let (($x217 (= $x30 true)))
 (let (($x183 (= ?x185 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x268 (= $x183 true)))
 (let (($x93 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x8 (= $x93 true)))
 (let (($x253 (= $x8 true)))
 (let (($x289 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x246 (= $x289 true)))
 (let (($x264 (= $x246 true)))
 (let (($x186 (and $x264 $x253)))
 (let (($x174 (and $x186 $x268)))
 (let (($x236 (and $x174 $x217)))
 (let (($x40 (and $x236 $x234)))
 (let (($x309 (and $x40 $x306)))
 (let (($x327 (and $x309 $x302)))
 (let (($x173 (and $x327 $x188)))
 (let (($x117 (and $x173 $x66)))
 (let (($x195 (and $x117 $x199)))
 (let (($x141 (and $x195 $x81)))
 (let (($x237 (and $x141 $x182)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x20 (and $x275 $x237)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x297 (and $x60 $x20)))
 (let (($x239 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x119 (_ bv1 32))))
 (=> $x19 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x127 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x119 (_ bv1 32))))
 (= $x19 false)))))
 ))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x350 (= false false)))
 (let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x119 (_ bv0 32))))
 (=> $x169 $x350))))))
 ))
 (let (($x214 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x119 (_ bv0 32))))
 (= $x169 true)))))
 ))
 (let (($x31 (and $x214 $x69)))
 (let (($x33 (and $x31 $x127)))
 (let (($x35 (and $x33 $x239)))
 (let (($x298 (and $x35 $x297)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x303 (and $x90 $x298)))
 (let ((?x175 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd symbol.1 ?x175)))
 (let (($x164 (and (bvule input.memlabel-mem--symbol.1_begin ?x85) (bvule (bvadd ?x85 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false $x164)))))
 (let (($x65 (=> (and $x70 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x164)))))
 (let (($x304 (and $x65 $x303)))
 (let (($x301 (=> $x304 $x277)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (not $x70)))
 (let (($x101 (= $x140 false)))
 (let (($x277 (= $x101 true)))
 (let ((?x79 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x79)))
 (let (($x14 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x182 (= $x14 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x149)))
 (let (($x257 (= ?x185 input.dst.llvm-%n)))
 (let (($x81 (= $x257 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x247 (= $x44 true)))
 (let (($x199 (= $x247 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (= $x180 true)))
 (let (($x66 (= $x223 true)))
 (let (($x190 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x230)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x228)))
 (let ((?x94 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x345 (_ bv1 32))))
 (=> $x354 (= ?x94 ?x53)))))))))))
 ))
 (let (($x43 (forall ((Lambda25 (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x345 (_ bv1 32))))
 (= $x354 (bvuge ?x329 (_ bv1 32)))))))))
 ))
 (let (($x346 (forall ((Lambda25 (_ BitVec 32)) )(let (($x350 (= false false)))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x345 (_ bv0 32))))
 (=> $x343 $x350))))))
 ))
 (let (($x340 (forall ((Lambda25 (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x345 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x345 (_ bv0 32))))
 (= $x343 (= ?x329 (_ bv0 32)))))))))
 ))
 (let (($x348 (and $x340 $x346)))
 (let (($x82 (and $x348 $x43)))
 (let (($x155 (and $x82 $x190)))
 (let (($x165 (= $x155 true)))
 (let (($x188 (= $x165 true)))
 (let (($x318 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x347 (= $x318 true)))
 (let (($x302 (= $x347 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x213 (= $x123 true)))
 (let (($x306 (= $x213 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x198)))
 (let ((?x178 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x178)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x220 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x61 $x220)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x184 $x210)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x111 $x10)))
 (let (($x251 (not $x124)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x259 $x203)))
 (let (($x255 (and (not $x55) $x251)))
 (let (($x238 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x146 $x238)))
 (let (($x32 (not $x256)))
 (let (($x242 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (and $x168 $x242)))
 (let (($x205 (and (not $x262) $x32)))
 (let (($x56 (and (and (and (and (and (and $x205 $x255) $x107) $x34) $x52) $x98) $x83)))
 (let (($x211 (and $x56 $x145)))
 (let (($x157 (= symbol.1 dst_symbol_addr.1)))
 (let (($x216 (and $x157 $x211)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x118 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x118) (or $x240 $x16)))))))
 (let (($x120 (and $x200 $x216)))
 (let (($x274 (= $x120 true)))
 (let (($x234 (= $x274 true)))
 (let (($x176 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x30 (= $x176 true)))
 (let (($x217 (= $x30 true)))
 (let (($x183 (= ?x185 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x268 (= $x183 true)))
 (let (($x93 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x8 (= $x93 true)))
 (let (($x253 (= $x8 true)))
 (let (($x289 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x246 (= $x289 true)))
 (let (($x264 (= $x246 true)))
 (let (($x186 (and $x264 $x253)))
 (let (($x174 (and $x186 $x268)))
 (let (($x236 (and $x174 $x217)))
 (let (($x40 (and $x236 $x234)))
 (let (($x309 (and $x40 $x306)))
 (let (($x327 (and $x309 $x302)))
 (let (($x173 (and $x327 $x188)))
 (let (($x117 (and $x173 $x66)))
 (let (($x195 (and $x117 $x199)))
 (let (($x141 (and $x195 $x81)))
 (let (($x237 (and $x141 $x182)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x20 (and $x275 $x237)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x297 (and $x60 $x20)))
 (let (($x239 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x119 (_ bv1 32))))
 (=> $x19 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x127 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x119 (_ bv1 32))))
 (= $x19 false)))))
 ))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(let (($x350 (= false false)))
 (let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x119 (_ bv0 32))))
 (=> $x169 $x350))))))
 ))
 (let (($x214 (forall ((Lambda25 (_ BitVec 32)) )(let (($x212 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x119 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x119 (_ bv0 32))))
 (= $x169 true)))))
 ))
 (let (($x31 (and $x214 $x69)))
 (let (($x33 (and $x31 $x127)))
 (let (($x35 (and $x33 $x239)))
 (let (($x298 (and $x35 $x297)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x303 (and $x90 $x298)))
 (let ((?x175 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd symbol.1 ?x175)))
 (let (($x164 (and (bvule input.memlabel-mem--symbol.1_begin ?x85) (bvule (bvadd ?x85 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false $x164)))))
 (let (($x65 (=> (and $x70 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x164)))))
 (let (($x304 (and $x65 $x303)))
 (let (($x301 (=> $x304 $x277)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000140)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000140)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x3e77d218)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa63cd434)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000140)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa63cd437)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x3e77d3a7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa63cd434)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x3e77d218)
  (define-fun symbol.1 () (_ BitVec 32)
    #x3e77d218)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000140)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x3e77d21b (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x3e77d21a (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x3e77d219 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x3e77d218 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000140 x!0)
         (ite (bvule #x00000141 x!0) #x00000141 #x00000140)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000f0048)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000036)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000036)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00040050)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000036)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000036)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000f004b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x000401df)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000f0048)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00040050)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00040050)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000036)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00040053 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00040052 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00040051 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00040050 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000036 x!0)
         (ite (bvule #x00000037 x!0) #x00000037 #x00000036)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x67 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x12 (or $x67 $x28)))
 (let (($x224 (= $x12 true)))
 (let (($x150 (= $x224 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x25)))
 (let (($x130 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x130 true)))
 (let ((?x326 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x322 (bvneg ?x326)))
 (let (($x349 (= ?x322 input.dst.llvm-%n)))
 (let (($x351 (= $x349 true)))
 (let (($x320 (= ?x322 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x324 (= $x320 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x308 (= $x316 true)))
 (let (($x314 (= $x308 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x39 (= $x51 true)))
 (let (($x315 (= $x39 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (= $x88 true)))
 (let (($x267 (= $x260 true)))
 (let (($x290 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x101)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x265)))
 (let ((?x188 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x13 (_ bv1 32))))
 (=> $x209 (= ?x188 ?x208)))))))))))
 ))
 (let (($x190 (forall ((Lambda25 (_ BitVec 32)) )(let (($x94 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x191 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x13 (_ bv1 32))))
 (= $x209 (bvuge ?x191 (_ bv1 32)))))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x13 (_ bv0 32))))
 (=> $x156 $x33))))))
 ))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x94 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x191 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x13 (_ bv0 32))))
 (= $x156 (= ?x191 (_ bv0 32)))))))))
 ))
 (let (($x171 (and $x17 $x27)))
 (let (($x155 (and $x171 $x190)))
 (let (($x15 (and $x155 $x290)))
 (let (($x197 (= $x15 true)))
 (let (($x100 (= $x197 true)))
 (let (($x345 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x343 (= $x345 true)))
 (let (($x325 (= $x343 true)))
 (let (($x347 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x302 (= $x347 true)))
 (let (($x327 (= $x302 true)))
 (let (($x213 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x306 (= $x213 true)))
 (let (($x309 (= $x306 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x274 (= $x120 true)))
 (let (($x234 (= $x274 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x210)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x26)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let ((?x49 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x115 (= input.memlabel-mem--symbol.1_end ?x49)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x9 $x115)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x255 $x34)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x205 $x259)))
 (let (($x55 (not $x203)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x238 $x256)))
 (let (($x111 (and (not $x32) $x55)))
 (let (($x168 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x157 $x168)))
 (let (($x262 (not $x242)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x293 $x200)))
 (let (($x146 (and (not $x114) $x262)))
 (let (($x83 (and (and (and (and (and (and $x146 $x111) $x10) $x251) $x36) $x61) $x220)))
 (let (($x56 (and $x83 $x52)))
 (let (($x30 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x30 $x56)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x241) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x258 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x218 $x125)))))))
 (let (($x145 (and $x258 $x198)))
 (let (($x211 (= $x145 true)))
 (let (($x216 (= $x211 true)))
 (let (($x40 (and $x216 $x234)))
 (let (($x318 (and $x40 $x309)))
 (let (($x310 (and $x318 $x327)))
 (let (($x323 (and $x310 $x325)))
 (let (($x128 (and $x323 $x100)))
 (let (($x153 (and $x128 $x267)))
 (let (($x233 (and $x153 $x315)))
 (let (($x317 (and $x233 $x314)))
 (let (($x342 (and $x317 $x324)))
 (let (($x352 (and $x342 $x351)))
 (let (($x189 (and $x352 $x226)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x172 (and $x268 $x189)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x215 (and $x149 $x172)))
 (let (($x253 (forall ((Lambda25 (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x31 (_ bv1 32))))
 (=> $x60 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x133 (forall ((Lambda25 (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x31 (_ bv1 32))))
 (= $x60 false)))))
 ))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x31 (_ bv0 32))))
 (=> $x19 $x33))))))
 ))
 (let (($x127 (forall ((Lambda25 (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x31 (_ bv0 32))))
 (= $x19 true)))))
 ))
 (let (($x239 (and $x127 $x288)))
 (let (($x275 (and $x239 $x133)))
 (let (($x186 (and $x275 $x253)))
 (let (($x151 (and $x186 $x215)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x161 (and $x126 $x151)))
 (let ((?x175 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd symbol.1 ?x175)))
 (let (($x243 (and (bvule input.memlabel-mem--symbol.1_begin ?x85) (bvule (bvadd ?x85 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x90 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false $x243)))))
 (let (($x102 (=> (and $x28 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x243)))))
 (let (($x78 (and $x102 $x161)))
 (let (($x207 (=> $x78 $x150)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x67 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x12 (or $x67 $x28)))
 (let (($x224 (= $x12 true)))
 (let (($x150 (= $x224 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x25)))
 (let (($x130 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x130 true)))
 (let ((?x326 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x322 (bvneg ?x326)))
 (let (($x349 (= ?x322 input.dst.llvm-%n)))
 (let (($x351 (= $x349 true)))
 (let (($x320 (= ?x322 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x324 (= $x320 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x308 (= $x316 true)))
 (let (($x314 (= $x308 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x39 (= $x51 true)))
 (let (($x315 (= $x39 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (= $x88 true)))
 (let (($x267 (= $x260 true)))
 (let (($x290 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x101)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x265)))
 (let ((?x188 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x13 (_ bv1 32))))
 (=> $x209 (= ?x188 ?x208)))))))))))
 ))
 (let (($x190 (forall ((Lambda25 (_ BitVec 32)) )(let (($x94 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x191 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x13 (_ bv1 32))))
 (= $x209 (bvuge ?x191 (_ bv1 32)))))))))
 ))
 (let (($x27 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x13 (_ bv0 32))))
 (=> $x156 $x33))))))
 ))
 (let (($x17 (forall ((Lambda25 (_ BitVec 32)) )(let (($x94 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x191 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x13 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x13 (_ bv0 32))))
 (= $x156 (= ?x191 (_ bv0 32)))))))))
 ))
 (let (($x171 (and $x17 $x27)))
 (let (($x155 (and $x171 $x190)))
 (let (($x15 (and $x155 $x290)))
 (let (($x197 (= $x15 true)))
 (let (($x100 (= $x197 true)))
 (let (($x345 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x343 (= $x345 true)))
 (let (($x325 (= $x343 true)))
 (let (($x347 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x302 (= $x347 true)))
 (let (($x327 (= $x302 true)))
 (let (($x213 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x306 (= $x213 true)))
 (let (($x309 (= $x306 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x274 (= $x120 true)))
 (let (($x234 (= $x274 true)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x210)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x26)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let ((?x49 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x115 (= input.memlabel-mem--symbol.1_end ?x49)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x9 $x115)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x255 $x34)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x205 $x259)))
 (let (($x55 (not $x203)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x238 $x256)))
 (let (($x111 (and (not $x32) $x55)))
 (let (($x168 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x157 $x168)))
 (let (($x262 (not $x242)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x293 $x200)))
 (let (($x146 (and (not $x114) $x262)))
 (let (($x83 (and (and (and (and (and (and $x146 $x111) $x10) $x251) $x36) $x61) $x220)))
 (let (($x56 (and $x83 $x52)))
 (let (($x30 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x30 $x56)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x241 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x241)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x241) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x258 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x218 $x125)))))))
 (let (($x145 (and $x258 $x198)))
 (let (($x211 (= $x145 true)))
 (let (($x216 (= $x211 true)))
 (let (($x40 (and $x216 $x234)))
 (let (($x318 (and $x40 $x309)))
 (let (($x310 (and $x318 $x327)))
 (let (($x323 (and $x310 $x325)))
 (let (($x128 (and $x323 $x100)))
 (let (($x153 (and $x128 $x267)))
 (let (($x233 (and $x153 $x315)))
 (let (($x317 (and $x233 $x314)))
 (let (($x342 (and $x317 $x324)))
 (let (($x352 (and $x342 $x351)))
 (let (($x189 (and $x352 $x226)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x172 (and $x268 $x189)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x215 (and $x149 $x172)))
 (let (($x253 (forall ((Lambda25 (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x31 (_ bv1 32))))
 (=> $x60 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x133 (forall ((Lambda25 (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x31 (_ bv1 32))))
 (= $x60 false)))))
 ))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x33 (= false false)))
 (let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x31 (_ bv0 32))))
 (=> $x19 $x33))))))
 ))
 (let (($x127 (forall ((Lambda25 (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x31 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x31 (_ bv0 32))))
 (= $x19 true)))))
 ))
 (let (($x239 (and $x127 $x288)))
 (let (($x275 (and $x239 $x133)))
 (let (($x186 (and $x275 $x253)))
 (let (($x151 (and $x186 $x215)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x161 (and $x126 $x151)))
 (let ((?x175 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd symbol.1 ?x175)))
 (let (($x243 (and (bvule input.memlabel-mem--symbol.1_begin ?x85) (bvule (bvadd ?x85 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x90 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false $x243)))))
 (let (($x102 (=> (and $x28 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x243)))))
 (let (($x78 (and $x102 $x161)))
 (let (($x207 (=> $x78 $x150)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x290 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x129 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x301 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x129))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x129 (_ bv2 32))) ?x301)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x129 (_ bv3 32))) ?x303)))
 (let ((?x323 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x216 (_ bv1 32))))
 (=> $x327 (= ?x323 ?x208)))))))))))
 ))
 (let (($x280 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x216 (_ bv1 32))))
 (= $x327 (bvuge ?x219 (_ bv1 32))))))))
 ))
 (let (($x213 (forall ((Lambda25 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x216 (_ bv0 32))))
 (=> $x120 $x142))))))
 ))
 (let (($x181 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x216 (_ bv0 32))))
 (= $x120 (= ?x219 (_ bv0 32))))))))
 ))
 (let (($x77 (and $x181 $x213)))
 (let (($x160 (and $x77 $x280)))
 (let (($x89 (and $x160 $x290)))
 (let (($x22 (= $x89 true)))
 (let (($x201 (= $x22 true)))
 (let ((?x258 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x258)))
 (let (($x227 (= ?x176 input.dst.llvm-%n)))
 (let (($x14 (= $x227 true)))
 (let ((?x340 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x344 (= (_ bv0 32) ?x340)))
 (let ((?x328 (bvand symbol.1 (_ bv3 32))))
 (let (($x341 (= (_ bv0 32) ?x328)))
 (let ((?x330 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x330)))
 (let ((?x249 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x279 (= input.memlabel-mem--symbol.1_end ?x249)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x246 (and $x35 $x279)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x193 $x246)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x174 $x223)))
 (let (($x6 (not $x212)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x254 (and $x207 $x299)))
 (let (($x166 (and (not $x254) $x6)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x161 $x78)))
 (let (($x12 (not $x67)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x172 $x215)))
 (let (($x150 (and (not $x151) $x12)))
 (let (($x116 (and (and (and (and (and (and $x150 $x166) $x350) $x69) $x264) $x173) $x341)))
 (let (($x71 (and $x116 $x344)))
 (let (($x315 (= symbol.1 dst_symbol_addr.1)))
 (let (($x230 (and $x315 $x71)))
 (let (($x351 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x317 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x349 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x317)))
 (let (($x322 (or (bvugt input.memlabel-mem--symbol.1_begin ?x317) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x322) (or $x349 $x351)))))))
 (let (($x228 (and $x189 $x230)))
 (let (($x165 (= $x228 true)))
 (let (($x66 (= $x165 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (= $x88 true)))
 (let (($x267 (= $x260 true)))
 (let (($x345 (forall ((Lambda25 (_ BitVec 32)) )(let (($x56 (bvule (_ bv0 32) Lambda25)))
 (let ((?x145 (ite (and $x56 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x216 (_ bv1 32))))
 (= $x327 (bvuge ?x145 (_ bv1 32)))))))))
 ))
 (let (($x234 (forall ((Lambda25 (_ BitVec 32)) )(let (($x56 (bvule (_ bv0 32) Lambda25)))
 (let ((?x145 (ite (and $x56 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x216 (_ bv0 32))))
 (= $x120 (= ?x145 (_ bv0 32)))))))))
 ))
 (let (($x306 (and $x234 $x213)))
 (let (($x343 (and $x306 $x345)))
 (let (($x15 (and $x343 $x290)))
 (let (($x197 (= $x15 true)))
 (let (($x100 (= $x197 true)))
 (let (($x32 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (not $x32)))
 (let (($x9 (= $x38 true)))
 (let (($x107 (= $x9 true)))
 (let (($x261 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x10 (and true $x261)))
 (let (($x64 (= true $x10)))
 (let (($x124 (=> $x38 $x64)))
 (let (($x251 (= $x124 true)))
 (let (($x98 (= $x251 true)))
 (let (($x242 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x262 (= $x242 true)))
 (let (($x146 (= $x262 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x114 true)))
 (let (($x157 (= $x50 true)))
 (let (($x30 (= ?x176 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x293 (= $x30 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x266 (= $x240 true)))
 (let (($x16 (= $x266 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x218 (= $x147 true)))
 (let (($x118 (= $x218 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x109 (= $x269 true)))
 (let (($x131 (= $x109 true)))
 (let ((?x268 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x268)))
 (let (($x236 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x236 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x270 true)))
 (let (($x185 (= $x149 true)))
 (let (($x241 (and $x185 $x281)))
 (let (($x204 (and $x241 $x131)))
 (let (($x125 (and $x204 $x118)))
 (let (($x273 (and $x125 $x16)))
 (let (($x200 (and $x273 $x293)))
 (let (($x168 (and $x200 $x157)))
 (let (($x238 (and $x168 $x146)))
 (let (($x255 (and $x238 $x98)))
 (let (($x49 (and $x255 $x107)))
 (let (($x128 (and $x49 $x100)))
 (let (($x153 (and $x128 $x267)))
 (let (($x117 (and $x153 $x66)))
 (let (($x81 (and $x117 $x14)))
 (let (($x8 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x141 (and $x8 $x81)))
 (let (($x263 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x247 (and $x263 $x141)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x199 (and $x97 $x247)))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x104 (_ bv1 32))))
 (=> $x23 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x119 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x104 (_ bv1 32))))
 (= $x23 false)))))
 ))
 (let (($x167 (forall ((Lambda25 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x104 (_ bv0 32))))
 (=> $x57 $x142))))))
 ))
 (let (($x164 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x104 (_ bv0 32))))
 (= $x57 true)))))
 ))
 (let (($x65 (and $x164 $x167)))
 (let (($x169 (and $x65 $x119)))
 (let (($x239 (and $x169 $x288)))
 (let (($x44 (and $x239 $x199)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x195 (and $x70 $x44)))
 (let (($x87 (=> $x195 $x201)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x290 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x129 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x301 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x129))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x129 (_ bv2 32))) ?x301)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x129 (_ bv3 32))) ?x303)))
 (let ((?x323 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x216 (_ bv1 32))))
 (=> $x327 (= ?x323 ?x208)))))))))))
 ))
 (let (($x280 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x216 (_ bv1 32))))
 (= $x327 (bvuge ?x219 (_ bv1 32))))))))
 ))
 (let (($x213 (forall ((Lambda25 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x216 (_ bv0 32))))
 (=> $x120 $x142))))))
 ))
 (let (($x181 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x216 (_ bv0 32))))
 (= $x120 (= ?x219 (_ bv0 32))))))))
 ))
 (let (($x77 (and $x181 $x213)))
 (let (($x160 (and $x77 $x280)))
 (let (($x89 (and $x160 $x290)))
 (let (($x22 (= $x89 true)))
 (let (($x201 (= $x22 true)))
 (let ((?x258 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x258)))
 (let (($x227 (= ?x176 input.dst.llvm-%n)))
 (let (($x14 (= $x227 true)))
 (let ((?x340 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x344 (= (_ bv0 32) ?x340)))
 (let ((?x328 (bvand symbol.1 (_ bv3 32))))
 (let (($x341 (= (_ bv0 32) ?x328)))
 (let ((?x330 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x330)))
 (let ((?x249 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x279 (= input.memlabel-mem--symbol.1_end ?x249)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x246 (and $x35 $x279)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x193 $x246)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x174 $x223)))
 (let (($x6 (not $x212)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x254 (and $x207 $x299)))
 (let (($x166 (and (not $x254) $x6)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x161 $x78)))
 (let (($x12 (not $x67)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x172 $x215)))
 (let (($x150 (and (not $x151) $x12)))
 (let (($x116 (and (and (and (and (and (and $x150 $x166) $x350) $x69) $x264) $x173) $x341)))
 (let (($x71 (and $x116 $x344)))
 (let (($x315 (= symbol.1 dst_symbol_addr.1)))
 (let (($x230 (and $x315 $x71)))
 (let (($x351 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x317 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x349 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x317)))
 (let (($x322 (or (bvugt input.memlabel-mem--symbol.1_begin ?x317) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x189 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x322) (or $x349 $x351)))))))
 (let (($x228 (and $x189 $x230)))
 (let (($x165 (= $x228 true)))
 (let (($x66 (= $x165 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (= $x88 true)))
 (let (($x267 (= $x260 true)))
 (let (($x345 (forall ((Lambda25 (_ BitVec 32)) )(let (($x56 (bvule (_ bv0 32) Lambda25)))
 (let ((?x145 (ite (and $x56 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x216 (_ bv1 32))))
 (= $x327 (bvuge ?x145 (_ bv1 32)))))))))
 ))
 (let (($x234 (forall ((Lambda25 (_ BitVec 32)) )(let (($x56 (bvule (_ bv0 32) Lambda25)))
 (let ((?x145 (ite (and $x56 (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x216 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x216 (_ bv0 32))))
 (= $x120 (= ?x145 (_ bv0 32)))))))))
 ))
 (let (($x306 (and $x234 $x213)))
 (let (($x343 (and $x306 $x345)))
 (let (($x15 (and $x343 $x290)))
 (let (($x197 (= $x15 true)))
 (let (($x100 (= $x197 true)))
 (let (($x32 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (not $x32)))
 (let (($x9 (= $x38 true)))
 (let (($x107 (= $x9 true)))
 (let (($x261 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x10 (and true $x261)))
 (let (($x64 (= true $x10)))
 (let (($x124 (=> $x38 $x64)))
 (let (($x251 (= $x124 true)))
 (let (($x98 (= $x251 true)))
 (let (($x242 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x262 (= $x242 true)))
 (let (($x146 (= $x262 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x114 true)))
 (let (($x157 (= $x50 true)))
 (let (($x30 (= ?x176 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x293 (= $x30 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x266 (= $x240 true)))
 (let (($x16 (= $x266 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x218 (= $x147 true)))
 (let (($x118 (= $x218 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x109 (= $x269 true)))
 (let (($x131 (= $x109 true)))
 (let ((?x268 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x268)))
 (let (($x236 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x236 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x270 true)))
 (let (($x185 (= $x149 true)))
 (let (($x241 (and $x185 $x281)))
 (let (($x204 (and $x241 $x131)))
 (let (($x125 (and $x204 $x118)))
 (let (($x273 (and $x125 $x16)))
 (let (($x200 (and $x273 $x293)))
 (let (($x168 (and $x200 $x157)))
 (let (($x238 (and $x168 $x146)))
 (let (($x255 (and $x238 $x98)))
 (let (($x49 (and $x255 $x107)))
 (let (($x128 (and $x49 $x100)))
 (let (($x153 (and $x128 $x267)))
 (let (($x117 (and $x153 $x66)))
 (let (($x81 (and $x117 $x14)))
 (let (($x8 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x141 (and $x8 $x81)))
 (let (($x263 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x247 (and $x263 $x141)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x199 (and $x97 $x247)))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x104 (_ bv1 32))))
 (=> $x23 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x119 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x104 (_ bv1 32))))
 (= $x23 false)))))
 ))
 (let (($x167 (forall ((Lambda25 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x104 (_ bv0 32))))
 (=> $x57 $x142))))))
 ))
 (let (($x164 (forall ((Lambda25 (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x104 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x104 (_ bv0 32))))
 (= $x57 true)))))
 ))
 (let (($x65 (and $x164 $x167)))
 (let (($x169 (and $x65 $x119)))
 (let (($x239 (and $x169 $x288)))
 (let (($x44 (and $x239 $x199)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x195 (and $x70 $x44)))
 (let (($x87 (=> $x195 $x201)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x309 (not $x29)))
 (let (($x318 (or $x29 $x309)))
 (let (($x347 (= $x318 true)))
 (let (($x325 (= $x347 true)))
 (let ((?x115 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x115)))
 (let (($x184 (= ?x137 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x184 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x111)))
 (let (($x127 (= ?x261 input.dst.llvm-%n)))
 (let (($x36 (= $x127 true)))
 (let (($x90 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x90 true)))
 (let (($x214 (= $x102 true)))
 (let (($x144 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x144 true)))
 (let (($x294 (= $x58 true)))
 (let (($x82 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x138 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x138))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x138 (_ bv2 32))) ?x7)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x138 (_ bv3 32))) ?x89)))
 (let ((?x340 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x348 (_ bv1 32))))
 (=> $x173 (= ?x340 ?x87)))))))))))
 ))
 (let (($x328 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x346 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x348 (_ bv1 32))))
 (= $x173 (bvuge ?x346 (_ bv1 32)))))))))
 ))
 (let (($x249 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (= false false)))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x348 (_ bv0 32))))
 (=> $x231 $x236))))))
 ))
 (let (($x354 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x346 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x348 (_ bv0 32))))
 (= $x231 (= ?x346 (_ bv0 32)))))))))
 ))
 (let (($x279 (and $x354 $x249)))
 (let (($x341 (and $x279 $x328)))
 (let (($x28 (and $x341 $x82)))
 (let (($x85 (= $x28 true)))
 (let (($x19 (= $x85 true)))
 (let (($x172 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x215 (= $x172 true)))
 (let (($x151 (= $x215 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x130 true)))
 (let (($x39 (= $x189 true)))
 (let ((?x308 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x308)))
 (let ((?x316 (bvand symbol.1 (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x316)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x88 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x260 (and $x100 $x88)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (and $x197 $x260)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x277 $x271)))
 (let (($x303 (not $x301)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (and $x304 $x140)))
 (let (($x48 (and (not $x257) $x303)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x298 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x298 $x129)))
 (let (($x101 (not $x21)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x323 $x13)))
 (let (($x27 (and (not $x43) $x101)))
 (let (($x324 (and (and (and (and (and (and $x27 $x48) $x148) $x15) $x267) $x233) $x226)))
 (let (($x349 (and $x324 $x317)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x342 (and $x34 $x349)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x343 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x123 $x213)))))))
 (let (($x351 (and $x343 $x342)))
 (let (($x352 (= $x351 true)))
 (let (($x25 (= $x352 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x98 (= $x251 true)))
 (let (($x255 (= $x98 true)))
 (let (($x10 (= ?x261 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (= $x10 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x203 (= $x38 true)))
 (let (($x205 (= $x203 true)))
 (let (($x238 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x256 (= $x238 true)))
 (let (($x32 (= $x256 true)))
 (let (($x259 (and $x32 $x205)))
 (let (($x124 (and $x259 $x64)))
 (let (($x9 (and $x124 $x255)))
 (let (($x282 (and $x9 $x25)))
 (let (($x315 (and $x282 $x39)))
 (let (($x224 (and $x315 $x151)))
 (let (($x113 (and $x224 $x19)))
 (let (($x95 (and $x113 $x294)))
 (let (($x244 (and $x95 $x214)))
 (let (($x329 (and $x244 $x36)))
 (let (($x178 (and $x329 $x61)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and $x242 $x178)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x220 (and $x50 $x26)))
 (let (($x293 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x185 (_ bv1 32))))
 (=> $x147 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x185 (_ bv1 32))))
 (= $x147 false)))))
 ))
 (let (($x269 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (= false false)))
 (let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x185 (_ bv0 32))))
 (=> $x183 $x236))))))
 ))
 (let (($x217 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x185 (_ bv0 32))))
 (= $x183 true)))))
 ))
 (let (($x109 (and $x217 $x269)))
 (let (($x125 (and $x109 $x118)))
 (let (($x200 (and $x125 $x293)))
 (let (($x83 (and $x200 $x220)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x210 (and $x97 $x83)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x104 (bvadd symbol.1 ?x158)))
 (let (($x33 (and (bvule input.memlabel-mem--symbol.1_begin ?x104) (bvule (bvadd ?x104 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false $x33)))))
 (let (($x74 (=> (and $x29 (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x33)))))
 (let (($x40 (and $x74 $x210)))
 (let (($x94 (=> $x40 $x325)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x309 (not $x29)))
 (let (($x318 (or $x29 $x309)))
 (let (($x347 (= $x318 true)))
 (let (($x325 (= $x347 true)))
 (let ((?x115 (bvmul input.spec-%var-i-0.L2%7%bbentry (_ bv4294967295 32))))
 (let ((?x137 (bvneg ?x115)))
 (let (($x184 (= ?x137 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x184 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x111)))
 (let (($x127 (= ?x261 input.dst.llvm-%n)))
 (let (($x36 (= $x127 true)))
 (let (($x90 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x90 true)))
 (let (($x214 (= $x102 true)))
 (let (($x144 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x144 true)))
 (let (($x294 (= $x58 true)))
 (let (($x82 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x138 (bvadd symbol.1 (bvmul Lambda25 (_ bv4 32)))))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x138))))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x138 (_ bv2 32))) ?x7)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x138 (_ bv3 32))) ?x89)))
 (let ((?x340 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25)))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x348 (_ bv1 32))))
 (=> $x173 (= ?x340 ?x87)))))))))))
 ))
 (let (($x328 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x346 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x348 (_ bv1 32))))
 (= $x173 (bvuge ?x346 (_ bv1 32)))))))))
 ))
 (let (($x249 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (= false false)))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x348 (_ bv0 32))))
 (=> $x231 $x236))))))
 ))
 (let (($x354 (forall ((Lambda25 (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x346 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x348 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x348 (_ bv0 32))))
 (= $x231 (= ?x346 (_ bv0 32)))))))))
 ))
 (let (($x279 (and $x354 $x249)))
 (let (($x341 (and $x279 $x328)))
 (let (($x28 (and $x341 $x82)))
 (let (($x85 (= $x28 true)))
 (let (($x19 (= $x85 true)))
 (let (($x172 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x215 (= $x172 true)))
 (let (($x151 (= $x215 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x130 true)))
 (let (($x39 (= $x189 true)))
 (let ((?x308 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x308)))
 (let ((?x316 (bvand symbol.1 (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x316)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x88 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x260 (and $x100 $x88)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (and $x197 $x260)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x277 $x271)))
 (let (($x303 (not $x301)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (and $x304 $x140)))
 (let (($x48 (and (not $x257) $x303)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x298 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x298 $x129)))
 (let (($x101 (not $x21)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x323 $x13)))
 (let (($x27 (and (not $x43) $x101)))
 (let (($x324 (and (and (and (and (and (and $x27 $x48) $x148) $x15) $x267) $x233) $x226)))
 (let (($x349 (and $x324 $x317)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x342 (and $x34 $x349)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x343 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x123 $x213)))))))
 (let (($x351 (and $x343 $x342)))
 (let (($x352 (= $x351 true)))
 (let (($x25 (= $x352 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x98 (= $x251 true)))
 (let (($x255 (= $x98 true)))
 (let (($x10 (= ?x261 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x64 (= $x10 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x203 (= $x38 true)))
 (let (($x205 (= $x203 true)))
 (let (($x238 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x256 (= $x238 true)))
 (let (($x32 (= $x256 true)))
 (let (($x259 (and $x32 $x205)))
 (let (($x124 (and $x259 $x64)))
 (let (($x9 (and $x124 $x255)))
 (let (($x282 (and $x9 $x25)))
 (let (($x315 (and $x282 $x39)))
 (let (($x224 (and $x315 $x151)))
 (let (($x113 (and $x224 $x19)))
 (let (($x95 (and $x113 $x294)))
 (let (($x244 (and $x95 $x214)))
 (let (($x329 (and $x244 $x36)))
 (let (($x178 (and $x329 $x61)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x26 (and $x242 $x178)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x220 (and $x50 $x26)))
 (let (($x293 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x185 (_ bv1 32))))
 (=> $x147 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x185 (_ bv1 32))))
 (= $x147 false)))))
 ))
 (let (($x269 (forall ((Lambda25 (_ BitVec 32)) )(let (($x236 (= false false)))
 (let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x185 (_ bv0 32))))
 (=> $x183 $x236))))))
 ))
 (let (($x217 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x185 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (= ?x185 (_ bv0 32))))
 (= $x183 true)))))
 ))
 (let (($x109 (and $x217 $x269)))
 (let (($x125 (and $x109 $x118)))
 (let (($x200 (and $x125 $x293)))
 (let (($x83 (and $x200 $x220)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x210 (and $x97 $x83)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x104 (bvadd symbol.1 ?x158)))
 (let (($x33 (and (bvule input.memlabel-mem--symbol.1_begin ?x104) (bvule (bvadd ?x104 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false $x33)))))
 (let (($x74 (=> (and $x29 (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x33)))))
 (let (($x40 (and $x74 $x210)))
 (let (($x94 (=> $x40 $x325)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x277)))
 (let ((?x257 (bvand symbol.1 (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x257)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x304)))
 (let ((?x298 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x298)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x21 (and $x43 $x129)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x13 $x21)))
 (let (($x323 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x327 (and $x213 $x306)))
 (let (($x302 (not $x327)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x234 (and $x274 $x123)))
 (let (($x343 (and (not $x234) $x302)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x345 $x56)))
 (let (($x198 (not $x52)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x9 $x216)))
 (let (($x211 (and (not $x120) $x198)))
 (let (($x314 (and (and (and (and (and (and $x211 $x343) $x49) $x323) $x101) $x140) $x208)))
 (let (($x290 (and $x314 $x271)))
 (let (($x255 (= symbol.1 dst_symbol_addr.1)))
 (let (($x15 (and $x255 $x290)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x256 (or (bvugt input.memlabel-mem--symbol.1_begin ?x262) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x256) (or $x205 $x259)))))))
 (let (($x172 (and $x124 $x15)))
 (let (($x215 (= $x172 true)))
 (let (($x151 (= $x215 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x316 (concat ?x153 (concat ?x88 ?x100)))))
 (let (($x352 (= ?x226 input.dst.llvm-%n)))
 (let (($x25 (= $x352 true)))
 (let (($x324 (= input.dst.llvm-%n ?x226)))
 (let (($x349 (and (and (and $x124 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x15) $x324)))
 (let (($x342 (= $x349 true)))
 (let (($x351 (= $x342 true)))
 (let (($x282 (and $x351 $x25)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x130 (and $x176 $x282)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x189 (and $x118 $x130)))
 (let (($x109 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x126 (_ bv1 32))))
 (=> $x97 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x126 (_ bv1 32))))
 (= $x97 false)))))
 ))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x126 (_ bv0 32))))
 (=> $x119 $x31))))))
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x126 (_ bv0 32))))
 (= $x119 true)))))
 ))
 (let (($x60 (and $x23 $x288)))
 (let (($x253 (and $x60 $x93)))
 (let (($x147 (and $x253 $x109)))
 (let (($x39 (and $x147 $x189)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x315 (and $x63 $x39)))
 (let (($x224 (=> $x315 $x151)))
 (not $x224)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x277)))
 (let ((?x257 (bvand symbol.1 (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x257)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x304)))
 (let ((?x298 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x298)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x21 (and $x43 $x129)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x13 $x21)))
 (let (($x323 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x327 (and $x213 $x306)))
 (let (($x302 (not $x327)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x234 (and $x274 $x123)))
 (let (($x343 (and (not $x234) $x302)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x345 $x56)))
 (let (($x198 (not $x52)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x9 $x216)))
 (let (($x211 (and (not $x120) $x198)))
 (let (($x314 (and (and (and (and (and (and $x211 $x343) $x49) $x323) $x101) $x140) $x208)))
 (let (($x290 (and $x314 $x271)))
 (let (($x255 (= symbol.1 dst_symbol_addr.1)))
 (let (($x15 (and $x255 $x290)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x256 (or (bvugt input.memlabel-mem--symbol.1_begin ?x262) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x256) (or $x205 $x259)))))))
 (let (($x172 (and $x124 $x15)))
 (let (($x215 (= $x172 true)))
 (let (($x151 (= $x215 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x316 (concat ?x153 (concat ?x88 ?x100)))))
 (let (($x352 (= ?x226 input.dst.llvm-%n)))
 (let (($x25 (= $x352 true)))
 (let (($x324 (= input.dst.llvm-%n ?x226)))
 (let (($x349 (and (and (and $x124 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x15) $x324)))
 (let (($x342 (= $x349 true)))
 (let (($x351 (= $x342 true)))
 (let (($x282 (and $x351 $x25)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x130 (and $x176 $x282)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x189 (and $x118 $x130)))
 (let (($x109 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x126 (_ bv1 32))))
 (=> $x97 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x93 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x126 (_ bv1 32))))
 (= $x97 false)))))
 ))
 (let (($x288 (forall ((Lambda25 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x126 (_ bv0 32))))
 (=> $x119 $x31))))))
 ))
 (let (($x23 (forall ((Lambda25 (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x126 (ite $x158 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x126 (_ bv0 32))))
 (= $x119 true)))))
 ))
 (let (($x60 (and $x23 $x288)))
 (let (($x253 (and $x60 $x93)))
 (let (($x147 (and $x253 $x109)))
 (let (($x39 (and $x147 $x189)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x315 (and $x63 $x39)))
 (let (($x224 (=> $x315 $x151)))
 (not $x224)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x164 (= $x74 true)))
 (let (($x185 (= $x164 true)))
 (let ((?x351 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x215 (concat ?x39 (concat ?x25 ?x351)))))
 (let (($x104 (= ?x151 input.dst.llvm-%n)))
 (let (($x268 (= $x104 true)))
 (let (($x224 (= input.dst.llvm-%n ?x151)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x322 (= (_ bv0 32) ?x267)))
 (let ((?x320 (bvand symbol.1 (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x320)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x326 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let ((?x314 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x277 (= input.memlabel-mem--symbol.1_end ?x314)))
 (let (($x257 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x271 (and $x257 $x277)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x148 $x271)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (and $x265 $x298)))
 (let (($x21 (not $x129)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (and $x48 $x13)))
 (let (($x321 (and (not $x43) $x21)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x343 $x301)))
 (let (($x303 (not $x49)))
 (let (($x327 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x306 $x327)))
 (let (($x323 (and (not $x302) $x303)))
 (let (($x233 (and (and (and (and (and (and $x323 $x321) $x27) $x140) $x290) $x326) $x316)))
 (let (($x226 (and $x233 $x322)))
 (let (($x213 (= symbol.1 dst_symbol_addr.1)))
 (let (($x324 (and $x213 $x226)))
 (let (($x261 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x345 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x308 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x308)))
 (let (($x255 (or (bvugt input.memlabel-mem--symbol.1_begin ?x308) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x255) (or $x145 $x345)))))))
 (let (($x293 (and (and (and $x123 $x261) $x324) $x224)))
 (let (($x197 (= $x293 true)))
 (let (($x29 (= $x197 true)))
 (let (($x84 (and $x29 $x268)))
 (let (($x203 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x167 (and $x203 $x84)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x239 (and $x32 $x167)))
 (let (($x242 (forall ((Lambda25 (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x288 (_ bv1 32))))
 (=> $x218 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x288 (_ bv1 32))))
 (= $x218 false)))))
 ))
 (let (($x241 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (= false false)))
 (let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x288 (_ bv0 32))))
 (=> $x60 $x93))))))
 ))
 (let (($x263 (forall ((Lambda25 (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x288 (_ bv0 32))))
 (= $x60 true)))))
 ))
 (let (($x269 (and $x263 $x241)))
 (let (($x266 (and $x269 $x125)))
 (let (($x238 (and $x266 $x242)))
 (let (($x65 (and $x238 $x239)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x33 (and $x63 $x65)))
 (let (($x217 (=> $x33 $x185)))
 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x164 (= $x74 true)))
 (let (($x185 (= $x164 true)))
 (let ((?x351 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x215 (concat ?x39 (concat ?x25 ?x351)))))
 (let (($x104 (= ?x151 input.dst.llvm-%n)))
 (let (($x268 (= $x104 true)))
 (let (($x224 (= input.dst.llvm-%n ?x151)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x322 (= (_ bv0 32) ?x267)))
 (let ((?x320 (bvand symbol.1 (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x320)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x326 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let ((?x314 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x277 (= input.memlabel-mem--symbol.1_end ?x314)))
 (let (($x257 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x271 (and $x257 $x277)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x148 $x271)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (and $x265 $x298)))
 (let (($x21 (not $x129)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (and $x48 $x13)))
 (let (($x321 (and (not $x43) $x21)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x343 $x301)))
 (let (($x303 (not $x49)))
 (let (($x327 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x306 $x327)))
 (let (($x323 (and (not $x302) $x303)))
 (let (($x233 (and (and (and (and (and (and $x323 $x321) $x27) $x140) $x290) $x326) $x316)))
 (let (($x226 (and $x233 $x322)))
 (let (($x213 (= symbol.1 dst_symbol_addr.1)))
 (let (($x324 (and $x213 $x226)))
 (let (($x261 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x345 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x308 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x308)))
 (let (($x255 (or (bvugt input.memlabel-mem--symbol.1_begin ?x308) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x255) (or $x145 $x345)))))))
 (let (($x293 (and (and (and $x123 $x261) $x324) $x224)))
 (let (($x197 (= $x293 true)))
 (let (($x29 (= $x197 true)))
 (let (($x84 (and $x29 $x268)))
 (let (($x203 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x167 (and $x203 $x84)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x239 (and $x32 $x167)))
 (let (($x242 (forall ((Lambda25 (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x288 (_ bv1 32))))
 (=> $x218 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x125 (forall ((Lambda25 (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x288 (_ bv1 32))))
 (= $x218 false)))))
 ))
 (let (($x241 (forall ((Lambda25 (_ BitVec 32)) )(let (($x93 (= false false)))
 (let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x288 (_ bv0 32))))
 (=> $x60 $x93))))))
 ))
 (let (($x263 (forall ((Lambda25 (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x288 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x288 (_ bv0 32))))
 (= $x60 true)))))
 ))
 (let (($x269 (and $x263 $x241)))
 (let (($x266 (and $x269 $x125)))
 (let (($x238 (and $x266 $x242)))
 (let (($x65 (and $x238 $x239)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x33 (and $x63 $x65)))
 (let (($x217 (=> $x33 $x185)))
 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x147)))
 (let (($x64 (= ?x176 input.dst.llvm-%n)))
 (let (($x168 (= $x64 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x164 (concat ?x65 (concat ?x268 ?x29)))))
 (let (($x119 (= ?x185 input.dst.llvm-%n)))
 (let (($x157 (= $x119 true)))
 (let (($x217 (= input.dst.llvm-%n ?x185)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x130)))
 (let ((?x172 (bvand symbol.1 (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x172)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x349 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x267 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x320 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x322 (and $x320 $x267)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x260 $x322)))
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x277 (and $x208 $x314)))
 (let (($x271 (not $x277)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (and $x88 $x148)))
 (let (($x100 (and (not $x257) $x271)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x321 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x321 $x153)))
 (let (($x128 (not $x27)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x298 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x298 $x129)))
 (let (($x140 (and (not $x21) $x128)))
 (let (($x315 (and (and (and (and (and (and $x140 $x100) $x15) $x326) $x226) $x349) $x215)))
 (let (($x151 (and $x315 $x189)))
 (let (($x265 (= symbol.1 dst_symbol_addr.1)))
 (let (($x224 (and $x265 $x151)))
 (let (($x198 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x343 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x213 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x213) (or $x34 $x343)))))))
 (let (($x55 (and (and (and $x13 $x198) $x224) $x217)))
 (let (($x342 (= $x55 true)))
 (let (($x175 (= $x342 true)))
 (let (($x158 (and $x175 $x157)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x23 (and $x120 $x158)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x31 (and $x9 $x23)))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x241 (_ bv1 32))))
 (=> $x256 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x38 (forall ((Lambda25 (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x241 (_ bv1 32))))
 (= $x256 false)))))
 ))
 (let (($x262 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (= false false)))
 (let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x241 (_ bv0 32))))
 (=> $x269 $x125))))))
 ))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x241 (_ bv0 32))))
 (= $x269 true)))))
 ))
 (let (($x146 (and $x118 $x262)))
 (let (($x205 (and $x146 $x38)))
 (let (($x98 (and $x205 $x114)))
 (let (($x105 (and $x98 $x31)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x253 (and $x63 $x105)))
 (let (($x348 (=> $x253 $x168)))
 (not $x348)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x147 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x147)))
 (let (($x64 (= ?x176 input.dst.llvm-%n)))
 (let (($x168 (= $x64 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x164 (concat ?x65 (concat ?x268 ?x29)))))
 (let (($x119 (= ?x185 input.dst.llvm-%n)))
 (let (($x157 (= $x119 true)))
 (let (($x217 (= input.dst.llvm-%n ?x185)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x130)))
 (let ((?x172 (bvand symbol.1 (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x172)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x349 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x267 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x320 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x322 (and $x320 $x267)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x260 $x322)))
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x277 (and $x208 $x314)))
 (let (($x271 (not $x277)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (and $x88 $x148)))
 (let (($x100 (and (not $x257) $x271)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x321 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x321 $x153)))
 (let (($x128 (not $x27)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x298 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x298 $x129)))
 (let (($x140 (and (not $x21) $x128)))
 (let (($x315 (and (and (and (and (and (and $x140 $x100) $x15) $x326) $x226) $x349) $x215)))
 (let (($x151 (and $x315 $x189)))
 (let (($x265 (= symbol.1 dst_symbol_addr.1)))
 (let (($x224 (and $x265 $x151)))
 (let (($x198 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x343 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x213 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x213) (or $x34 $x343)))))))
 (let (($x55 (and (and (and $x13 $x198) $x224) $x217)))
 (let (($x342 (= $x55 true)))
 (let (($x175 (= $x342 true)))
 (let (($x158 (and $x175 $x157)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x23 (and $x120 $x158)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x31 (and $x9 $x23)))
 (let (($x114 (forall ((Lambda25 (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x241 (_ bv1 32))))
 (=> $x256 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x38 (forall ((Lambda25 (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x241 (_ bv1 32))))
 (= $x256 false)))))
 ))
 (let (($x262 (forall ((Lambda25 (_ BitVec 32)) )(let (($x125 (= false false)))
 (let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x241 (_ bv0 32))))
 (=> $x269 $x125))))))
 ))
 (let (($x118 (forall ((Lambda25 (_ BitVec 32)) )(let (($x288 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x241 (ite $x288 (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x241 (_ bv0 32))))
 (= $x269 true)))))
 ))
 (let (($x146 (and $x118 $x262)))
 (let (($x205 (and $x146 $x38)))
 (let (($x98 (and $x205 $x114)))
 (let (($x105 (and $x98 $x31)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x253 (and $x63 $x105)))
 (let (($x348 (=> $x253 $x168)))
 (not $x348)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x266 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x266)))
 (let (($x238 (= ?x242 input.spec-%var-n-1)))
 (let (($x203 (= $x238 true)))
 (let ((?x323 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x21 (concat ?x101 (concat ?x52 ?x323)))))
 (let (($x348 (= input.dst.llvm-%n ?x304)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x158)))
 (let ((?x119 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x119)))
 (let ((?x342 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x342)))
 (let ((?x33 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x185 (= input.memlabel-mem--symbol.1_end ?x33)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x217 (and $x29 $x185)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x268 $x217)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (and $x259 $x293)))
 (let (($x164 (not $x74)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x224 (and $x189 $x151)))
 (let (($x239 (and (not $x224) $x164)))
 (let (($x282 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x349 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x349 $x282)))
 (let (($x215 (not $x172)))
 (let (($x324 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x351 $x324)))
 (let (($x130 (and (not $x30) $x215)))
 (let (($x176 (and (and (and (and (and (and $x130 $x239) $x65) $x104) $x55) $x175) $x157)))
 (let (($x64 (and $x176 $x23)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x168 (and $x226 $x64)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x326 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x100 (or (bvugt input.memlabel-mem--symbol.1_begin ?x314) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x267 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x100) (or $x317 $x326)))))))
 (let (($x56 (and (and (and $x267 $x140) $x168) $x348)))
 (let (($x197 (= $x56 true)))
 (let (($x142 (= $x197 true)))
 (let (($x153 (= ?x304 input.dst.llvm-%n)))
 (let (($x27 (= $x153 true)))
 (let (($x60 (and $x27 $x142)))
 (let (($x302 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x124 (and $x302 $x60)))
 (let (($x306 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x126 (and $x306 $x124)))
 (let (($x261 (forall ((Lambda25 (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x262 (_ bv1 32))))
 (=> $x255 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x216 (forall ((Lambda25 (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x262 (_ bv1 32))))
 (= $x255 false)))))
 ))
 (let (($x308 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x262 (_ bv0 32))))
 (=> $x146 $x38))))))
 ))
 (let (($x32 (forall ((Lambda25 (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x262 (_ bv0 32))))
 (= $x146 true)))))
 ))
 (let (($x251 (and $x32 $x308)))
 (let (($x145 (and $x251 $x216)))
 (let (($x310 (and $x145 $x261)))
 (let (($x263 (and $x310 $x126)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x93 (and $x63 $x263)))
 (let (($x274 (=> $x93 $x203)))
 (not $x274)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x266 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x266)))
 (let (($x238 (= ?x242 input.spec-%var-n-1)))
 (let (($x203 (= $x238 true)))
 (let ((?x323 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x21 (concat ?x101 (concat ?x52 ?x323)))))
 (let (($x348 (= input.dst.llvm-%n ?x304)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x158)))
 (let ((?x119 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x119)))
 (let ((?x342 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x342)))
 (let ((?x33 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x185 (= input.memlabel-mem--symbol.1_end ?x33)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x217 (and $x29 $x185)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x268 $x217)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (and $x259 $x293)))
 (let (($x164 (not $x74)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x224 (and $x189 $x151)))
 (let (($x239 (and (not $x224) $x164)))
 (let (($x282 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x349 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x349 $x282)))
 (let (($x215 (not $x172)))
 (let (($x324 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x351 $x324)))
 (let (($x130 (and (not $x30) $x215)))
 (let (($x176 (and (and (and (and (and (and $x130 $x239) $x65) $x104) $x55) $x175) $x157)))
 (let (($x64 (and $x176 $x23)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x168 (and $x226 $x64)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x326 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x100 (or (bvugt input.memlabel-mem--symbol.1_begin ?x314) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x267 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x100) (or $x317 $x326)))))))
 (let (($x56 (and (and (and $x267 $x140) $x168) $x348)))
 (let (($x197 (= $x56 true)))
 (let (($x142 (= $x197 true)))
 (let (($x153 (= ?x304 input.dst.llvm-%n)))
 (let (($x27 (= $x153 true)))
 (let (($x60 (and $x27 $x142)))
 (let (($x302 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x124 (and $x302 $x60)))
 (let (($x306 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x126 (and $x306 $x124)))
 (let (($x261 (forall ((Lambda25 (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x262 (_ bv1 32))))
 (=> $x255 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x216 (forall ((Lambda25 (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x262 (_ bv1 32))))
 (= $x255 false)))))
 ))
 (let (($x308 (forall ((Lambda25 (_ BitVec 32)) )(let (($x38 (= false false)))
 (let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x262 (_ bv0 32))))
 (=> $x146 $x38))))))
 ))
 (let (($x32 (forall ((Lambda25 (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x262 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x262 (_ bv0 32))))
 (= $x146 true)))))
 ))
 (let (($x251 (and $x32 $x308)))
 (let (($x145 (and $x251 $x216)))
 (let (($x310 (and $x145 $x261)))
 (let (($x263 (and $x310 $x126)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x93 (and $x63 $x263)))
 (let (($x274 (=> $x93 $x203)))
 (not $x274)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x354 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x355 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x166 (_ bv1 32)))))
 ))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x35 (and $x69 $x354)))
 (let (($x328 (and $x35 $x355)))
 (let (($x341 (and $x328 $x354)))
 (let (($x340 (= $x341 true)))
 (let (($x71 (= $x340 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x317 (concat ?x15 (concat ?x208 (concat ?x233 ?x148)))))
 (let (($x274 (= input.dst.llvm-%n ?x317)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x60)))
 (let ((?x197 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x197)))
 (let ((?x348 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x348)))
 (let ((?x23 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x64 (= input.memlabel-mem--symbol.1_end ?x23)))
 (let (($x176 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (and $x176 $x64)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (and $x157 $x168)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x185 $x217)))
 (let (($x109 (not $x55)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x29 $x84)))
 (let (($x175 (and (not $x33) $x109)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x31 $x65)))
 (let (($x104 (not $x105)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x74 $x164)))
 (let (($x268 (and (not $x239) $x104)))
 (let (($x242 (and (and (and (and (and (and $x268 $x175) $x147) $x119) $x345) $x56) $x142)))
 (let (($x238 (and $x242 $x124)))
 (let (($x293 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x293 $x238)))
 (let (($x320 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x322 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x322)))
 (let (($x324 (or (bvugt input.memlabel-mem--symbol.1_begin ?x322) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x324) (or $x282 $x172)))))))
 (let (($x128 (and (and (and $x167 $x320) $x203) $x274)))
 (let (($x49 (= $x128 true)))
 (let (($x169 (= $x49 true)))
 (let (($x326 (= ?x317 input.dst.llvm-%n)))
 (let (($x25 (= $x326 true)))
 (let (($x269 (and $x25 $x169)))
 (let (($x265 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x123 (and $x265 $x269)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x288 (and $x52 $x123)))
 (let (($x43 (forall ((Lambda25 (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x308 (_ bv1 32))))
 (=> $x213 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x327 (forall ((Lambda25 (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x308 (_ bv1 32))))
 (= $x213 false)))))
 ))
 (let (($x78 (forall ((Lambda25 (_ BitVec 32)) )(let (($x216 (= false false)))
 (let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x308 (_ bv0 32))))
 (=> $x251 $x216))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x308 (_ bv0 32))))
 (= $x251 true)))))
 ))
 (let (($x234 (and $x9 $x78)))
 (let (($x34 (and $x234 $x327)))
 (let (($x101 (and $x34 $x43)))
 (let (($x118 (and $x101 $x288)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x125 (and $x63 $x118)))
 (let (($x18 (=> $x125 $x71)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x354 (forall ((Lambda25 (_ BitVec 32)) )true)
 ))
 (let (($x355 (forall ((Lambda25 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (= false (bvuge ?x166 (_ bv1 32)))))
 ))
 (let (($x69 (forall ((Lambda25 (_ BitVec 32)) )(= true (= (ite (and (bvule (_ bv0 32) Lambda25) (bvult Lambda25 (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))
 ))
 (let (($x35 (and $x69 $x354)))
 (let (($x328 (and $x35 $x355)))
 (let (($x341 (and $x328 $x354)))
 (let (($x340 (= $x341 true)))
 (let (($x71 (= $x340 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x317 (concat ?x15 (concat ?x208 (concat ?x233 ?x148)))))
 (let (($x274 (= input.dst.llvm-%n ?x317)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x60)))
 (let ((?x197 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x197)))
 (let ((?x348 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x348)))
 (let ((?x23 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x64 (= input.memlabel-mem--symbol.1_end ?x23)))
 (let (($x176 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (and $x176 $x64)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (and $x157 $x168)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x185 $x217)))
 (let (($x109 (not $x55)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x29 $x84)))
 (let (($x175 (and (not $x33) $x109)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x31 $x65)))
 (let (($x104 (not $x105)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x74 $x164)))
 (let (($x268 (and (not $x239) $x104)))
 (let (($x242 (and (and (and (and (and (and $x268 $x175) $x147) $x119) $x345) $x56) $x142)))
 (let (($x238 (and $x242 $x124)))
 (let (($x293 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x293 $x238)))
 (let (($x320 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x322 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x322)))
 (let (($x324 (or (bvugt input.memlabel-mem--symbol.1_begin ?x322) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x324) (or $x282 $x172)))))))
 (let (($x128 (and (and (and $x167 $x320) $x203) $x274)))
 (let (($x49 (= $x128 true)))
 (let (($x169 (= $x49 true)))
 (let (($x326 (= ?x317 input.dst.llvm-%n)))
 (let (($x25 (= $x326 true)))
 (let (($x269 (and $x25 $x169)))
 (let (($x265 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x123 (and $x265 $x269)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x288 (and $x52 $x123)))
 (let (($x43 (forall ((Lambda25 (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x308 (_ bv1 32))))
 (=> $x213 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25) (_ bv0 32)))))))
 ))
 (let (($x327 (forall ((Lambda25 (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x308 (_ bv1 32))))
 (= $x213 false)))))
 ))
 (let (($x78 (forall ((Lambda25 (_ BitVec 32)) )(let (($x216 (= false false)))
 (let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x308 (_ bv0 32))))
 (=> $x251 $x216))))))
 ))
 (let (($x9 (forall ((Lambda25 (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25)))
 (let ((?x308 (ite $x262 (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x308 (_ bv0 32))))
 (= $x251 true)))))
 ))
 (let (($x234 (and $x9 $x78)))
 (let (($x34 (and $x234 $x327)))
 (let (($x101 (and $x34 $x43)))
 (let (($x118 (and $x101 $x288)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x125 (and $x63 $x118)))
 (let (($x18 (=> $x125 $x71)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460678/query
