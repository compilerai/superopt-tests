==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--symbol.1_end #b11001000000000000000000110010011)
(= input.memlabel-mem--symbol.1_begin #b11001000000000000000000000000100)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= dst_symbol_addr.1 #b11001000000000000000000000000100)
(= symbol.1 #b11001000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000001100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000001100000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000001100000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00800248)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x008003d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffe4f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00800248)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00800248)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32) (_ bv2147484047 32))
(define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun dst_symbol_addr.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun symbol.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147484051 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let (($x126 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x112 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x128 (= $x127 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x95 ?x93)))))
 (let (($x104 (= ?x103 input.dst.llvm-%n)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (= $x33 true)))
 (let (($x42 (= $x40 true)))
 (let (($x89 (= $x42 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x22)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x54 $x10)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x26 $x34)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x30 $x81)))
 (let (($x61 (not $x53)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x64 $x60)))
 (let (($x49 (and (not $x7) $x61)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x55 $x74)))
 (let (($x9 (not $x65)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x25 $x45)))
 (let (($x82 (and (not $x18) $x9)))
 (let (($x77 (and (and (and (and (and (and $x82 $x49) $x73) $x71) $x38) $x32) $x87)))
 (let (($x79 (and $x77 $x68)))
 (let (($x13 (= symbol.1 dst_symbol_addr.1)))
 (let (($x57 (and $x13 $x79)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x41 (or (bvugt input.memlabel-mem--symbol.1_begin ?x67) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x41) (or $x72 $x31)))))))
 (let (($x17 (and $x66 $x57)))
 (let (($x6 (= $x17 true)))
 (let (($x50 (= $x6 true)))
 (let (($x48 (= $x50 true)))
 (let (($x90 (and $x48 $x89)))
 (let (($x107 (and $x90 $x106)))
 (let (($x129 (and $x107 $x128)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x39 $x129)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x16 $x130)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x43 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let (($x126 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x112 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x128 (= $x127 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x95 ?x93)))))
 (let (($x104 (= ?x103 input.dst.llvm-%n)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (= $x33 true)))
 (let (($x42 (= $x40 true)))
 (let (($x89 (= $x42 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x22)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x54 $x10)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x26 $x34)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x30 $x81)))
 (let (($x61 (not $x53)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x64 $x60)))
 (let (($x49 (and (not $x7) $x61)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x55 $x74)))
 (let (($x9 (not $x65)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x25 $x45)))
 (let (($x82 (and (not $x18) $x9)))
 (let (($x77 (and (and (and (and (and (and $x82 $x49) $x73) $x71) $x38) $x32) $x87)))
 (let (($x79 (and $x77 $x68)))
 (let (($x13 (= symbol.1 dst_symbol_addr.1)))
 (let (($x57 (and $x13 $x79)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x41 (or (bvugt input.memlabel-mem--symbol.1_begin ?x67) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x41) (or $x72 $x31)))))))
 (let (($x17 (and $x66 $x57)))
 (let (($x6 (= $x17 true)))
 (let (($x50 (= $x6 true)))
 (let (($x48 (= $x50 true)))
 (let (($x90 (and $x48 $x89)))
 (let (($x107 (and $x90 $x106)))
 (let (($x129 (and $x107 $x128)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x39 $x129)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x16 $x130)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x43 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x75)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x86 $x89)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x68)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x88 (not $x36)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x88)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x31 (not $x56)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x31)))
 (let (($x84 (and (and (and (and (and (and $x97 $x79) $x51) $x83) $x54) $x40) $x37)))
 (let (($x81 (and $x84 $x41)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x30) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x72 $x55)))))))
 (let (($x121 (and $x66 $x91)))
 (let (($x119 (= $x121 true)))
 (let (($x108 (= $x119 true)))
 (let (($x133 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x111 false)))
 ))
 (let (($x128 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x134 (and $x128 $x133)))
 (let (($x135 (= $x134 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x102 (concat ?x22 (concat ?x34 ?x49)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let (($x96 (and (and (and $x66 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x91) $x94)))
 (let (($x100 (= $x96 true)))
 (let (($x103 (= $x100 true)))
 (let (($x104 (= $x103 true)))
 (let (($x136 (and $x104 $x135)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x29 $x136)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x35 $x8)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x58 $x92)))
 (let (($x110 (=> $x113 $x108)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x75)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x86 $x89)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x68)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x88 (not $x36)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x88)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x31 (not $x56)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x31)))
 (let (($x84 (and (and (and (and (and (and $x97 $x79) $x51) $x83) $x54) $x40) $x37)))
 (let (($x81 (and $x84 $x41)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x30) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x72 $x55)))))))
 (let (($x121 (and $x66 $x91)))
 (let (($x119 (= $x121 true)))
 (let (($x108 (= $x119 true)))
 (let (($x133 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x111 false)))
 ))
 (let (($x128 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x134 (and $x128 $x133)))
 (let (($x135 (= $x134 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x102 (concat ?x22 (concat ?x34 ?x49)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let (($x96 (and (and (and $x66 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x91) $x94)))
 (let (($x100 (= $x96 true)))
 (let (($x103 (= $x100 true)))
 (let (($x104 (= $x103 true)))
 (let (($x136 (and $x104 $x135)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x29 $x136)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x35 $x8)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x58 $x92)))
 (let (($x110 (=> $x113 $x108)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x124 (= $x131 true)))
 (let (($x39 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x128 false)))
 ))
 (let (($x38 (and $x135 $x39)))
 (let (($x112 (= $x38 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x6 (concat ?x34 (concat ?x18 ?x14)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x26)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x90)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x83 $x86)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x17)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x56)))
 (let (($x41 (and (and (and (and (and (and $x97 $x79) $x10) $x53) $x32) $x54) $x69)))
 (let (($x81 (and $x41 $x40)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x7 $x27)))))))
 (let (($x103 (and (and (and $x95 $x52) $x91) $x94)))
 (let (($x104 (= $x103 true)))
 (let (($x107 (= $x104 true)))
 (let (($x111 (= $x107 true)))
 (let (($x120 (and $x111 $x112)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x16 $x120)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x43 $x105)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x11 $x115)))
 (let (($x106 (=> $x130 $x124)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x124 (= $x131 true)))
 (let (($x39 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x128 false)))
 ))
 (let (($x38 (and $x135 $x39)))
 (let (($x112 (= $x38 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x6 (concat ?x34 (concat ?x18 ?x14)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x26)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x90)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x83 $x86)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x17)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x56)))
 (let (($x41 (and (and (and (and (and (and $x97 $x79) $x10) $x53) $x32) $x54) $x69)))
 (let (($x81 (and $x41 $x40)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x7 $x27)))))))
 (let (($x103 (and (and (and $x95 $x52) $x91) $x94)))
 (let (($x104 (= $x103 true)))
 (let (($x107 (= $x104 true)))
 (let (($x111 (= $x107 true)))
 (let (($x120 (and $x111 $x112)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x16 $x120)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x43 $x105)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x11 $x115)))
 (let (($x106 (=> $x130 $x124)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1a75018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1a74fffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x8)))
 (let (($x129 (= ?x108 input.dst.llvm-%n)))
 (let (($x117 (= $x129 true)))
 (let (($x87 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x114 false)))
 ))
 (let (($x132 (and $x120 $x87)))
 (let (($x121 (= $x132 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x14 (concat ?x12 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x54)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x37 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (and $x37 $x82)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x53 $x101)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x81 (and (and (and (and (and (and $x71 $x44) $x10) $x51) $x86) $x84) $x68)))
 (let (($x91 (and $x81 $x59)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x25 $x66)))))))
 (let (($x111 (and (and (and $x99 $x63) $x100) $x103)))
 (let (($x127 (= $x111 true)))
 (let (($x128 (= $x127 true)))
 (let (($x134 (= $x128 true)))
 (let (($x92 (and $x134 $x121)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (and $x16 $x92)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x20 $x116)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x47 $x126)))
 (let (($x122 (=> $x133 $x117)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x8)))
 (let (($x129 (= ?x108 input.dst.llvm-%n)))
 (let (($x117 (= $x129 true)))
 (let (($x87 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x114 false)))
 ))
 (let (($x132 (and $x120 $x87)))
 (let (($x121 (= $x132 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x14 (concat ?x12 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x54)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x37 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (and $x37 $x82)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x53 $x101)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x81 (and (and (and (and (and (and $x71 $x44) $x10) $x51) $x86) $x84) $x68)))
 (let (($x91 (and $x81 $x59)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x25 $x66)))))))
 (let (($x111 (and (and (and $x99 $x63) $x100) $x103)))
 (let (($x127 (= $x111 true)))
 (let (($x128 (= $x127 true)))
 (let (($x134 (= $x128 true)))
 (let (($x92 (and $x134 $x121)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (and $x16 $x92)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x20 $x116)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x47 $x126)))
 (let (($x122 (=> $x133 $x117)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x113)))
 (let (($x106 (= ?x38 input.spec-%var-n-1)))
 (let (($x115 (= $x106 true)))
 (let (($x122 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x29 false)))
 ))
 (let (($x118 (and $x121 $x122)))
 (let (($x30 (= $x118 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x12 (concat ?x102 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x26)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x53 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x53)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x57 (and $x51 $x37)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x75 $x57)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x59 (and (and (and (and (and (and $x71 $x44) $x90) $x69) $x83) $x86) $x17)))
 (let (($x91 (and $x59 $x84)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x23 $x95)))))))
 (let (($x128 (and (and (and $x104 $x96) $x100) $x103)))
 (let (($x134 (= $x128 true)))
 (let (($x110 (= $x134 true)))
 (let (($x114 (= $x110 true)))
 (let (($x50 (and $x114 $x30)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x15 $x50)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x11 $x39)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x58 $x124)))
 (let (($x125 (=> $x130 $x115)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x113)))
 (let (($x106 (= ?x38 input.spec-%var-n-1)))
 (let (($x115 (= $x106 true)))
 (let (($x122 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x29 false)))
 ))
 (let (($x118 (and $x121 $x122)))
 (let (($x30 (= $x118 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x12 (concat ?x102 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x26)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x53 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x53)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x57 (and $x51 $x37)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x75 $x57)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x59 (and (and (and (and (and (and $x71 $x44) $x90) $x69) $x83) $x86) $x17)))
 (let (($x91 (and $x59 $x84)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x23 $x95)))))))
 (let (($x128 (and (and (and $x104 $x96) $x100) $x103)))
 (let (($x134 (= $x128 true)))
 (let (($x110 (= $x134 true)))
 (let (($x114 (= $x110 true)))
 (let (($x50 (and $x114 $x30)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x15 $x50)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x11 $x39)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x58 $x124)))
 (let (($x125 (=> $x130 $x115)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x87 (= $x120 true)))
 (let (($x8 (= $x87 true)))
 (let (($x125 (forall ((input.ind-%var99X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var99X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var99X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var98X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var98X)))
 (= $x129 false)))
 ))
 (let (($x136 (and $x30 $x125)))
 (let (($x24 (= $x136 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x102 (concat ?x14 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x101)))
 (let ((?x81 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x75 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x75)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x69 $x51)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x10 $x41)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x84 (and (and (and (and (and (and $x71 $x44) $x40) $x89) $x53) $x83) $x82)))
 (let (($x91 (and $x84 $x86)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x46 $x52)))))))
 (let (($x110 (and (and (and $x111 $x63) $x100) $x103)))
 (let (($x114 (= $x110 true)))
 (let (($x131 (= $x114 true)))
 (let (($x29 (= $x131 true)))
 (let (($x93 (and $x29 $x24)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x43 $x93)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x60 $x80)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x16 $x119)))
 (let (($x116 (=> $x126 $x8)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x87 (= $x120 true)))
 (let (($x8 (= $x87 true)))
 (let (($x125 (forall ((input.ind-%var99X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var99X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var99X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var98X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var98X)))
 (= $x129 false)))
 ))
 (let (($x136 (and $x30 $x125)))
 (let (($x24 (= $x136 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x102 (concat ?x14 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x101)))
 (let ((?x81 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x75 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x75)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x69 $x51)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x10 $x41)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x84 (and (and (and (and (and (and $x71 $x44) $x40) $x89) $x53) $x83) $x82)))
 (let (($x91 (and $x84 $x86)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x46 $x52)))))))
 (let (($x110 (and (and (and $x111 $x63) $x100) $x103)))
 (let (($x114 (= $x110 true)))
 (let (($x131 (= $x114 true)))
 (let (($x29 (= $x131 true)))
 (let (($x93 (and $x29 $x24)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x43 $x93)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x60 $x80)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x16 $x119)))
 (let (($x116 (=> $x126 $x8)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x113 (= $x122 true)))
 (let (($x39 (= $x113 true)))
 (let (($x108 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x106 false)))
 ))
 (let (($x19 (and $x24 $x108)))
 (let (($x107 (= $x19 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x14 (concat ?x12 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x57)))
 (let ((?x59 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x59)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x69 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x89 $x69)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x90 $x68)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x86 (and (and (and (and (and (and $x71 $x44) $x54) $x26) $x75) $x53) $x37)))
 (let (($x91 (and $x86 $x83)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x99 $x5)))))))
 (let (($x131 (and (and (and $x128 $x96) $x100) $x103)))
 (let (($x29 (= $x131 true)))
 (let (($x133 (= $x29 true)))
 (let (($x129 (= $x133 true)))
 (let (($x117 (and $x129 $x107)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x20 $x117)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x135)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x15 $x124)))
 (let (($x38 (=> $x132 $x39)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x113 (= $x122 true)))
 (let (($x39 (= $x113 true)))
 (let (($x108 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x106 false)))
 ))
 (let (($x19 (and $x24 $x108)))
 (let (($x107 (= $x19 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x14 (concat ?x12 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x57)))
 (let ((?x59 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x59)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x69 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x89 $x69)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x90 $x68)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x86 (and (and (and (and (and (and $x71 $x44) $x54) $x26) $x75) $x53) $x37)))
 (let (($x91 (and $x86 $x83)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x99 $x5)))))))
 (let (($x131 (and (and (and $x128 $x96) $x100) $x103)))
 (let (($x29 (= $x131 true)))
 (let (($x133 (= $x29 true)))
 (let (($x129 (= $x133 true)))
 (let (($x117 (and $x129 $x107)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x20 $x117)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x135)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x15 $x124)))
 (let (($x38 (=> $x132 $x39)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x30 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x125 (= $x30 true)))
 (let (($x120 (= $x125 true)))
 (let (($x92 (forall ((input.ind-%var127X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var127X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var127X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var126X)))
 (= $x8 false)))
 ))
 (let (($x72 (and $x107 $x92)))
 (let (($x127 (= $x72 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x12 (concat ?x102 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x41)))
 (let ((?x84 (bvand symbol.1 (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x84)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x90 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x90)))
 (let (($x26 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x26 $x89)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x40 $x17)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x83 (and (and (and (and (and (and $x71 $x44) $x32) $x81) $x10) $x75) $x51)))
 (let (($x91 (and $x83 $x53)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x104 $x78)))))))
 (let (($x133 (and (and (and $x110 $x63) $x100) $x103)))
 (let (($x129 (= $x133 true)))
 (let (($x130 (= $x129 true)))
 (let (($x106 (= $x130 true)))
 (let (($x115 (and $x106 $x127)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x11 $x115)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x47 $x112)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x43 $x119)))
 (let (($x80 (=> $x118 $x120)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x30 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x125 (= $x30 true)))
 (let (($x120 (= $x125 true)))
 (let (($x92 (forall ((input.ind-%var127X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var127X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var127X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var126X)))
 (= $x8 false)))
 ))
 (let (($x72 (and $x107 $x92)))
 (let (($x127 (= $x72 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x12 (concat ?x102 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x41)))
 (let ((?x84 (bvand symbol.1 (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x84)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x90 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x90)))
 (let (($x26 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x26 $x89)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x40 $x17)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x83 (and (and (and (and (and (and $x71 $x44) $x32) $x81) $x10) $x75) $x51)))
 (let (($x91 (and $x83 $x53)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x104 $x78)))))))
 (let (($x133 (and (and (and $x110 $x63) $x100) $x103)))
 (let (($x129 (= $x133 true)))
 (let (($x130 (= $x129 true)))
 (let (($x106 (= $x130 true)))
 (let (($x115 (and $x106 $x127)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x11 $x115)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x47 $x112)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x43 $x119)))
 (let (($x80 (=> $x118 $x120)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (forall ((input.ind-%var141X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var141X))))
 ))
 (let (($x123 (forall ((input.ind-%var140X (_ BitVec 32)) )(let (($x113 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var140X)))
 (= false $x113)))
 ))
 (let (($x145 (and $x123 $x144)))
 (let (($x108 (= true true)))
 (let (($x146 (and $x108 $x145)))
 (let (($x147 (= $x146 true)))
 (let (($x7 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x39 false)))
 ))
 (let (($x134 (and $x127 $x7)))
 (let (($x116 (= $x134 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x102 (concat ?x14 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x68)))
 (let ((?x86 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x86)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x40 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x40)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (and $x81 $x26)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x54 $x82)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x53 (and (and (and (and (and (and $x71 $x44) $x101) $x59) $x90) $x10) $x69)))
 (let (($x91 (and $x53 $x75)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x46) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x111 $x9)))))))
 (let (($x130 (and (and (and $x131 $x96) $x100) $x103)))
 (let (($x106 (= $x130 true)))
 (let (($x126 (= $x106 true)))
 (let (($x8 (= $x126 true)))
 (let (($x121 (and $x8 $x116)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x60 $x121)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x58 $x124)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x15 $x136)))
 (let (($x148 (=> $x24 $x147)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (forall ((input.ind-%var141X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var141X))))
 ))
 (let (($x123 (forall ((input.ind-%var140X (_ BitVec 32)) )(let (($x113 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var140X)))
 (= false $x113)))
 ))
 (let (($x145 (and $x123 $x144)))
 (let (($x108 (= true true)))
 (let (($x146 (and $x108 $x145)))
 (let (($x147 (= $x146 true)))
 (let (($x7 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var133X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var133X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var132X)))
 (= $x39 false)))
 ))
 (let (($x134 (and $x127 $x7)))
 (let (($x116 (= $x134 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x102 (concat ?x14 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x68)))
 (let ((?x86 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x86)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x40 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x40)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (and $x81 $x26)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x54 $x82)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x53 (and (and (and (and (and (and $x71 $x44) $x101) $x59) $x90) $x10) $x69)))
 (let (($x91 (and $x53 $x75)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x46) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x111 $x9)))))))
 (let (($x130 (and (and (and $x131 $x96) $x100) $x103)))
 (let (($x106 (= $x130 true)))
 (let (($x126 (= $x106 true)))
 (let (($x8 (= $x126 true)))
 (let (($x121 (and $x8 $x116)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x60 $x121)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x58 $x124)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x15 $x136)))
 (let (($x148 (=> $x24 $x147)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00003e10)
  (define-fun input.ind-%var140X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00208404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00003e13)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x00208593)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00003e10)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00208404)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00208404)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03589754)
  (define-fun input.ind-%var140X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03589757)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x10000197)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03589754)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10000008)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (forall ((input.ind-%var171X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X))))
 ))
 (let (($x93 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x38 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= false $x38)))
 ))
 (let (($x112 (and $x93 $x50)))
 (let (($x149 (= true true)))
 (let (($x120 (and $x149 $x112)))
 (let (($x140 (= $x120 true)))
 (let (($x142 (forall ((input.ind-%var163X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var163X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var163X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var162X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var162X)))
 (= $x80 false)))
 ))
 (let (($x143 (and $x116 $x142)))
 (let (($x144 (= $x143 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x14 (concat ?x12 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x17)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x83)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x54 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x81 (= input.memlabel-mem--symbol.1_end ?x54)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x37 (and $x59 $x81)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x32 $x37)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x75 (and (and (and (and (and (and $x71 $x44) $x57) $x84) $x40) $x90) $x89)))
 (let (($x91 (and $x75 $x10)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x128 $x13)))))))
 (let (($x126 (and (and (and $x133 $x63) $x100) $x103)))
 (let (($x8 (= $x126 true)))
 (let (($x132 (= $x8 true)))
 (let (($x39 (= $x132 true)))
 (let (($x145 (and $x39 $x144)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x67 $x145)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x16 $x146)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x43 $x147)))
 (let (($x141 (=> $x148 $x140)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (forall ((input.ind-%var171X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X))))
 ))
 (let (($x93 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x38 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= false $x38)))
 ))
 (let (($x112 (and $x93 $x50)))
 (let (($x149 (= true true)))
 (let (($x120 (and $x149 $x112)))
 (let (($x140 (= $x120 true)))
 (let (($x142 (forall ((input.ind-%var163X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var163X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var163X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var162X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var162X)))
 (= $x80 false)))
 ))
 (let (($x143 (and $x116 $x142)))
 (let (($x144 (= $x143 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x14 (concat ?x12 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x17)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x83)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x54 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x81 (= input.memlabel-mem--symbol.1_end ?x54)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x37 (and $x59 $x81)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x32 $x37)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x75 (and (and (and (and (and (and $x71 $x44) $x57) $x84) $x40) $x90) $x89)))
 (let (($x91 (and $x75 $x10)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x128 $x13)))))))
 (let (($x126 (and (and (and $x133 $x63) $x100) $x103)))
 (let (($x8 (= $x126 true)))
 (let (($x132 (= $x8 true)))
 (let (($x39 (= $x132 true)))
 (let (($x145 (and $x39 $x144)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x67 $x145)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x16 $x146)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x43 $x147)))
 (let (($x141 (=> $x148 $x140)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00003e10)
  (define-fun input.ind-%var170X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00208404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00003e13)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x00208593)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00003e10)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00208404)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00208404)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var170X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03589754)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03589757)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x10000197)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03589754)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10000008)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var205X (_ BitVec 32)) )(let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x168 (concat ?x167 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32)))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x124 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var205X)))
 (let (($x87 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var205X)))
 (=> $x87 (= ?x124 (concat ?x173 (concat ?x170 ?x168)))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var204X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var204X)))
 (= $x87 (and (bvule (_ bv0 32) input.ind-%var204X) (bvult input.ind-%var204X input.dst.llvm-%n)))))
 ))
 (let (($x178 (and $x107 $x177)))
 (let (($x117 (= true true)))
 (let (($x179 (and $x117 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x92 (forall ((input.ind-%var197X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var197X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var197X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var196X)))
 (= $x123 false)))
 ))
 (let (($x125 (and $x144 $x92)))
 (let (($x50 (= $x125 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x12 (concat ?x102 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x82)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x53)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x59 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x84 $x59)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x51)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x10 (and (and (and (and (and (and $x71 $x44) $x41) $x86) $x54) $x40) $x26)))
 (let (($x91 (and $x10 $x90)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x110 $x55)))))))
 (let (($x132 (and (and (and $x130 $x96) $x100) $x103)))
 (let (($x39 (= $x132 true)))
 (let (($x118 (= $x39 true)))
 (let (($x80 (= $x118 true)))
 (let (($x112 (and $x80 $x50)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x47 $x112)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x20 $x120)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x60 $x140)))
 (let (($x181 (=> $x141 $x180)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var205X (_ BitVec 32)) )(let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x168 (concat ?x167 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32)))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x124 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var205X)))
 (let (($x87 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var205X)))
 (=> $x87 (= ?x124 (concat ?x173 (concat ?x170 ?x168)))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var204X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var204X)))
 (= $x87 (and (bvule (_ bv0 32) input.ind-%var204X) (bvult input.ind-%var204X input.dst.llvm-%n)))))
 ))
 (let (($x178 (and $x107 $x177)))
 (let (($x117 (= true true)))
 (let (($x179 (and $x117 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x92 (forall ((input.ind-%var197X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var197X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var197X) (_ bv0 32)))))
 ))
 (let (($x144 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var196X)))
 (= $x123 false)))
 ))
 (let (($x125 (and $x144 $x92)))
 (let (($x50 (= $x125 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x12 (concat ?x102 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x82)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x53)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x59 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x84 $x59)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x51)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x10 (and (and (and (and (and (and $x71 $x44) $x41) $x86) $x54) $x40) $x26)))
 (let (($x91 (and $x10 $x90)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x110 $x55)))))))
 (let (($x132 (and (and (and $x130 $x96) $x100) $x103)))
 (let (($x39 (= $x132 true)))
 (let (($x118 (= $x39 true)))
 (let (($x80 (= $x118 true)))
 (let (($x112 (and $x80 $x50)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x47 $x112)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x20 $x120)))
 (let (($x60 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x60 $x140)))
 (let (($x181 (=> $x141 $x180)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var205X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var204X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var205X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffe68) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x157 (forall ((input.ind-%var237X (_ BitVec 32)) )(let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x150 (concat ?x109 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32)))))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x152 (concat ?x159 ?x150)))))))))
 ))
 (let (($x176 (forall ((input.ind-%var236X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var236X) (bvult input.ind-%var236X (_ bv0 32)))))
 ))
 (let (($x160 (and $x176 $x157)))
 (let (($x173 (= true true)))
 (let (($x142 (and $x173 $x160)))
 (let (($x38 (= $x142 true)))
 (let (($x114 (forall ((input.ind-%var231X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var231X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= $x93 false)))
 ))
 (let (($x107 (and $x50 $x114)))
 (let (($x124 (= $x107 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x102 (concat ?x14 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x37)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x75)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x84 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (and $x86 $x84)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x69)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x90 (and (and (and (and (and (and $x71 $x44) $x68) $x83) $x32) $x54) $x81)))
 (let (($x91 (and $x90 $x40)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x131 $x25)))))))
 (let (($x118 (and (and (and $x126 $x63) $x100) $x103)))
 (let (($x80 (= $x118 true)))
 (let (($x24 (= $x80 true)))
 (let (($x123 (= $x24 true)))
 (let (($x137 (and $x123 $x124)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x58 $x137)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x11 $x163)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x43 $x164)))
 (let (($x29 (=> $x172 $x38)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x157 (forall ((input.ind-%var237X (_ BitVec 32)) )(let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x150 (concat ?x109 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32)))))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var237X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x152 (concat ?x159 ?x150)))))))))
 ))
 (let (($x176 (forall ((input.ind-%var236X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var236X) (bvult input.ind-%var236X (_ bv0 32)))))
 ))
 (let (($x160 (and $x176 $x157)))
 (let (($x173 (= true true)))
 (let (($x142 (and $x173 $x160)))
 (let (($x38 (= $x142 true)))
 (let (($x114 (forall ((input.ind-%var231X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var231X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X) (_ bv0 32)))))
 ))
 (let (($x50 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= $x93 false)))
 ))
 (let (($x107 (and $x50 $x114)))
 (let (($x124 (= $x107 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x102 (concat ?x14 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x37)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x75)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x84 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (and $x86 $x84)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x69)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x90 (and (and (and (and (and (and $x71 $x44) $x68) $x83) $x32) $x54) $x81)))
 (let (($x91 (and $x90 $x40)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x131 $x25)))))))
 (let (($x118 (and (and (and $x126 $x63) $x100) $x103)))
 (let (($x80 (= $x118 true)))
 (let (($x24 (= $x80 true)))
 (let (($x123 (= $x24 true)))
 (let (($x137 (and $x123 $x124)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x58 $x137)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x11 $x163)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x43 $x164)))
 (let (($x29 (=> $x172 $x38)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (forall ((input.ind-%var249X (_ BitVec 32)) )(let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x66 (concat ?x67 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32)))))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x92 (concat ?x129 ?x66)))))))))
 ))
 (let (($x160 (forall ((input.ind-%var248X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var248X) (bvult input.ind-%var248X input.dst.llvm-%n))))
 ))
 (let (($x120 (and $x160 $x165)))
 (let (($x159 (= true true)))
 (let (($x122 (and $x159 $x120)))
 (let (($x116 (= $x122 true)))
 (let (($x176 (forall ((input.ind-%var243X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var243X)))
 (=> $x127 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var243X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var242X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var242X)))
 (= $x127 false)))
 ))
 (let (($x179 (and $x124 $x176)))
 (let (($x115 (= $x179 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x14 (concat ?x12 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x51)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x10)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x57 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x57)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x89 (and $x83 $x86)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x41 $x89)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x40 (and (and (and (and (and (and $x71 $x44) $x17) $x53) $x101) $x32) $x59)))
 (let (($x91 (and $x40 $x54)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x13 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x13) (or $x133 $x23)))))))
 (let (($x24 (and (and (and $x132 $x96) $x100) $x103)))
 (let (($x123 (= $x24 true)))
 (let (($x148 (= $x123 true)))
 (let (($x93 (= $x148 true)))
 (let (($x33 (and $x93 $x115)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x16 $x33)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x15 $x156)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x35 $x152)))
 (let (($x105 (=> $x158 $x116)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (forall ((input.ind-%var249X (_ BitVec 32)) )(let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x66 (concat ?x67 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32)))))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var249X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x92 (concat ?x129 ?x66)))))))))
 ))
 (let (($x160 (forall ((input.ind-%var248X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var248X) (bvult input.ind-%var248X input.dst.llvm-%n))))
 ))
 (let (($x120 (and $x160 $x165)))
 (let (($x159 (= true true)))
 (let (($x122 (and $x159 $x120)))
 (let (($x116 (= $x122 true)))
 (let (($x176 (forall ((input.ind-%var243X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var243X)))
 (=> $x127 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var243X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var242X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var242X)))
 (= $x127 false)))
 ))
 (let (($x179 (and $x124 $x176)))
 (let (($x115 (= $x179 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x14 (concat ?x12 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x51)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x10)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x57 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x57)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x89 (and $x83 $x86)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x41 $x89)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x40 (and (and (and (and (and (and $x71 $x44) $x17) $x53) $x101) $x32) $x59)))
 (let (($x91 (and $x40 $x54)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x13 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x13) (or $x133 $x23)))))))
 (let (($x24 (and (and (and $x132 $x96) $x100) $x103)))
 (let (($x123 (= $x24 true)))
 (let (($x148 (= $x123 true)))
 (let (($x93 (= $x148 true)))
 (let (($x33 (and $x93 $x115)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x16 $x33)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x15 $x156)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x35 $x152)))
 (let (($x105 (=> $x158 $x116)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var248X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var248X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (= false true)))
 (let (($x149 (= $x129 true)))
 (let (($x160 (forall ((input.ind-%var263X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var263X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var263X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var262X)))
 (= $x174 false)))
 ))
 (let (($x29 (and $x115 $x160)))
 (let (($x147 (= $x29 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x12 (concat ?x102 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x69)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x90)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (and $x53 $x83)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x68 $x26)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x54 (and (and (and (and (and (and $x71 $x44) $x82) $x75) $x57) $x101) $x84)))
 (let (($x91 (and $x54 $x32)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x110) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x130 $x46)))))))
 (let (($x148 (and (and (and $x118 $x63) $x100) $x103)))
 (let (($x93 (= $x148 true)))
 (let (($x141 (= $x93 true)))
 (let (($x127 (= $x141 true)))
 (let (($x108 (and $x127 $x147)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x20 $x108)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x60 $x134)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x43 $x92)))
 (let (($x67 (=> $x182 $x149)))
 (not $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x129 (= false true)))
 (let (($x149 (= $x129 true)))
 (let (($x160 (forall ((input.ind-%var263X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var263X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var263X) (_ bv0 32)))))
 ))
 (let (($x115 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var262X)))
 (= $x174 false)))
 ))
 (let (($x29 (and $x115 $x160)))
 (let (($x147 (= $x29 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x12 (concat ?x102 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x69)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x90)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (and $x53 $x83)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x68 $x26)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x54 (and (and (and (and (and (and $x71 $x44) $x82) $x75) $x57) $x101) $x84)))
 (let (($x91 (and $x54 $x32)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x110) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x130 $x46)))))))
 (let (($x148 (and (and (and $x118 $x63) $x100) $x103)))
 (let (($x93 (= $x148 true)))
 (let (($x141 (= $x93 true)))
 (let (($x127 (= $x141 true)))
 (let (($x108 (and $x127 $x147)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x20 $x108)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x60 $x134)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x43 $x92)))
 (let (($x67 (=> $x182 $x149)))
 (not $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x89)))
 (let ((?x40 (bvand symbol.1 (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x40)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x68 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x68)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x75 $x53)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x17 $x81)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x32 (and (and (and (and (and (and $x71 $x44) $x37) $x10) $x41) $x57) $x86)))
 (let (($x91 (and $x32 $x101)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x25 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x25) (or $x126 $x99)))))))
 (let (($x151 (and $x24 $x100)))
 (let (($x156 (= $x151 true)))
 (let (($x153 (= $x156 true)))
 (let (($x39 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var277X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var276X)))
 (= $x154 false)))
 ))
 (let (($x175 (and $x147 $x39)))
 (let (($x159 (= $x175 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x102 (concat ?x14 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let (($x141 (and (and (and $x24 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x100) $x103)))
 (let (($x127 (= $x141 true)))
 (let (($x172 (= $x127 true)))
 (let (($x174 (= $x172 true)))
 (let (($x152 (and $x174 $x159)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x11 $x152)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x178 $x107)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x35 $x124)))
 (let (($x142 (=> $x176 $x153)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x89)))
 (let ((?x40 (bvand symbol.1 (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x40)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x68 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x68)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x75 $x53)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x17 $x81)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x32 (and (and (and (and (and (and $x71 $x44) $x37) $x10) $x41) $x57) $x86)))
 (let (($x91 (and $x32 $x101)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x25 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x25) (or $x126 $x99)))))))
 (let (($x151 (and $x24 $x100)))
 (let (($x156 (= $x151 true)))
 (let (($x153 (= $x156 true)))
 (let (($x39 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var277X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var277X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var276X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var276X)))
 (= $x154 false)))
 ))
 (let (($x175 (and $x147 $x39)))
 (let (($x159 (= $x175 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x102 (concat ?x14 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let (($x141 (and (and (and $x24 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x100) $x103)))
 (let (($x127 (= $x141 true)))
 (let (($x172 (= $x127 true)))
 (let (($x174 (= $x172 true)))
 (let (($x152 (and $x174 $x159)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x11 $x152)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x178 $x107)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x35 $x124)))
 (let (($x142 (=> $x176 $x153)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x149 (= $x160 true)))
 (let (($x78 (forall ((input.ind-%var283X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var283X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var283X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var282X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var282X)))
 (= $x138 false)))
 ))
 (let (($x80 (and $x159 $x78)))
 (let (($x157 (= $x80 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x14 (concat ?x12 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x54)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x75 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x10 $x75)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x82 $x59)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x101 (and (and (and (and (and (and $x71 $x44) $x51) $x90) $x68) $x41) $x83)))
 (let (($x91 (and $x101 $x57)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x133) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x132 $x104)))))))
 (let (($x172 (and (and (and $x148 $x63) $x100) $x103)))
 (let (($x174 (= $x172 true)))
 (let (($x158 (= $x174 true)))
 (let (($x154 (= $x158 true)))
 (let (($x129 (and $x154 $x157)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x15 $x129)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x38 $x92)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x115 (and $x43 $x179)))
 (let (($x134 (=> $x115 $x149)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x149 (= $x160 true)))
 (let (($x78 (forall ((input.ind-%var283X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var283X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var283X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var282X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var282X)))
 (= $x138 false)))
 ))
 (let (($x80 (and $x159 $x78)))
 (let (($x157 (= $x80 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x14 (concat ?x12 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x54)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x75 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x10 $x75)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x82 $x59)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x101 (and (and (and (and (and (and $x71 $x44) $x51) $x90) $x68) $x41) $x83)))
 (let (($x91 (and $x101 $x57)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x133) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x132 $x104)))))))
 (let (($x172 (and (and (and $x148 $x63) $x100) $x103)))
 (let (($x174 (= $x172 true)))
 (let (($x158 (= $x174 true)))
 (let (($x154 (= $x158 true)))
 (let (($x129 (and $x154 $x157)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x15 $x129)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x38 $x92)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x115 (and $x43 $x179)))
 (let (($x134 (=> $x115 $x149)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1a75018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1a74fffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x107)))
 (let (($x108 (= ?x153 input.dst.llvm-%n)))
 (let (($x33 (= $x108 true)))
 (let (($x123 (forall ((input.ind-%var297X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var297X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var297X) (_ bv0 32)))))
 ))
 (let (($x157 (forall ((input.ind-%var296X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var296X)))
 (= $x142 false)))
 ))
 (let (($x5 (and $x157 $x123)))
 (let (($x151 (= $x5 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x12 (concat ?x102 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x81)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x32)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (and $x90 $x10)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x37 $x84)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x57 (and (and (and (and (and (and $x71 $x44) $x69) $x40) $x17) $x68) $x53)))
 (let (($x91 (and $x57 $x41)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x46 (or (bvugt input.memlabel-mem--symbol.1_begin ?x130) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x46) (or $x118 $x111)))))))
 (let (($x158 (and (and (and $x141 $x96) $x100) $x103)))
 (let (($x154 (= $x158 true)))
 (let (($x182 (= $x154 true)))
 (let (($x138 (= $x182 true)))
 (let (($x124 (and $x138 $x151)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x60 $x124)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x16 $x29)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x35 $x147)))
 (let (($x145 (=> $x39 $x33)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x107)))
 (let (($x108 (= ?x153 input.dst.llvm-%n)))
 (let (($x33 (= $x108 true)))
 (let (($x123 (forall ((input.ind-%var297X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var297X)))
 (=> $x142 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var297X) (_ bv0 32)))))
 ))
 (let (($x157 (forall ((input.ind-%var296X (_ BitVec 32)) )(let (($x142 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var296X)))
 (= $x142 false)))
 ))
 (let (($x5 (and $x157 $x123)))
 (let (($x151 (= $x5 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x12 (concat ?x102 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x81)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x32)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (and $x90 $x10)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x37 $x84)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x57 (and (and (and (and (and (and $x71 $x44) $x69) $x40) $x17) $x68) $x53)))
 (let (($x91 (and $x57 $x41)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x46 (or (bvugt input.memlabel-mem--symbol.1_begin ?x130) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x46) (or $x118 $x111)))))))
 (let (($x158 (and (and (and $x141 $x96) $x100) $x103)))
 (let (($x154 (= $x158 true)))
 (let (($x182 (= $x154 true)))
 (let (($x138 (= $x182 true)))
 (let (($x124 (and $x138 $x151)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x60 $x124)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x16 $x29)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x35 $x147)))
 (let (($x145 (=> $x39 $x33)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x159 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x78 (= $x159 true)))
 (let (($x149 (= $x78 true)))
 (let (($x145 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x67 false)))
 ))
 (let (($x87 (and $x151 $x145)))
 (let (($x13 (= $x87 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x102 (concat ?x14 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x59)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x101)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x40 $x90)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x51 $x86)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x41 (and (and (and (and (and (and $x71 $x44) $x89) $x54) $x82) $x17) $x75)))
 (let (($x91 (and $x41 $x68)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x126) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x24 $x128)))))))
 (let (($x182 (and (and (and $x172 $x63) $x100) $x103)))
 (let (($x138 (= $x182 true)))
 (let (($x176 (= $x138 true)))
 (let (($x142 (= $x176 true)))
 (let (($x93 (and $x142 $x13)))
 (let (($x178 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x178 $x93)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x20 $x66)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x43 $x160)))
 (let (($x92 (=> $x179 $x149)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x159 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x78 (= $x159 true)))
 (let (($x149 (= $x78 true)))
 (let (($x145 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x67 false)))
 ))
 (let (($x87 (and $x151 $x145)))
 (let (($x13 (= $x87 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x102 (concat ?x14 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x59)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x101)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x40 $x90)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x51 $x86)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x41 (and (and (and (and (and (and $x71 $x44) $x89) $x54) $x82) $x17) $x75)))
 (let (($x91 (and $x41 $x68)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x126) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x24 $x128)))))))
 (let (($x182 (and (and (and $x172 $x63) $x100) $x103)))
 (let (($x138 (= $x182 true)))
 (let (($x176 (= $x138 true)))
 (let (($x142 (= $x176 true)))
 (let (($x93 (and $x142 $x13)))
 (let (($x178 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x66 (and $x178 $x93)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x20 $x66)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x43 $x160)))
 (let (($x92 (=> $x179 $x149)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x107 (= $x123 true)))
 (let (($x29 (= $x107 true)))
 (let (($x134 (forall ((input.ind-%var317X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var317X)))
 (=> $x108 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var317X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var316X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var316X)))
 (= $x108 false)))
 ))
 (let (($x55 (and $x13 $x134)))
 (let (($x127 (= $x55 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x14 (concat ?x12 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x84)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x57)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x51 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x51)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x83 (and $x54 $x40)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x69 $x83)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x68 (and (and (and (and (and (and $x71 $x44) $x26) $x32) $x37) $x82) $x10)))
 (let (($x91 (and $x68 $x17)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x148 $x110)))))))
 (let (($x176 (and (and (and $x158 $x96) $x100) $x103)))
 (let (($x142 (= $x176 true)))
 (let (($x115 (= $x142 true)))
 (let (($x67 (= $x115 true)))
 (let (($x9 (and $x67 $x127)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x38 $x9)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x11 $x156)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x35 $x147)))
 (let (($x153 (=> $x80 $x29)))
 (not $x153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x107 (= $x123 true)))
 (let (($x29 (= $x107 true)))
 (let (($x134 (forall ((input.ind-%var317X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var317X)))
 (=> $x108 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var317X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var316X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var316X)))
 (= $x108 false)))
 ))
 (let (($x55 (and $x13 $x134)))
 (let (($x127 (= $x55 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x14 (concat ?x12 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x84)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x57)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x51 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x51)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x83 (and $x54 $x40)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x69 $x83)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x68 (and (and (and (and (and (and $x71 $x44) $x26) $x32) $x37) $x82) $x10)))
 (let (($x91 (and $x68 $x17)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x148 $x110)))))))
 (let (($x176 (and (and (and $x158 $x96) $x100) $x103)))
 (let (($x142 (= $x176 true)))
 (let (($x115 (= $x142 true)))
 (let (($x67 (= $x115 true)))
 (let (($x9 (and $x67 $x127)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and $x38 $x9)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x11 $x156)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x35 $x147)))
 (let (($x153 (=> $x80 $x29)))
 (not $x153)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x145 (= $x151 true)))
 (let (($x159 (= $x145 true)))
 (let (($x129 (forall ((input.ind-%var331X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var331X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var331X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var330X)))
 (= $x149 false)))
 ))
 (let (($x25 (and $x127 $x129)))
 (let (($x174 (= $x25 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x12 (concat ?x102 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x86)))
 (let ((?x41 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x41)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x69 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x54 (= input.memlabel-mem--symbol.1_end ?x69)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x53 (and $x32 $x54)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x89 $x53)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x17 (and (and (and (and (and (and $x71 $x44) $x81) $x101) $x51) $x37) $x90)))
 (let (($x91 (and $x17 $x82)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x111 (or (bvugt input.memlabel-mem--symbol.1_begin ?x118) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x111) (or $x141 $x131)))))))
 (let (($x115 (and (and (and $x182 $x63) $x100) $x103)))
 (let (($x67 (= $x115 true)))
 (let (($x39 (= $x67 true)))
 (let (($x108 (= $x39 true)))
 (let (($x33 (and $x108 $x174)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x16 $x33)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x15 $x175)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x43 $x160)))
 (let (($x66 (=> $x5 $x159)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x145 (= $x151 true)))
 (let (($x159 (= $x145 true)))
 (let (($x129 (forall ((input.ind-%var331X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var331X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var331X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var330X)))
 (= $x149 false)))
 ))
 (let (($x25 (and $x127 $x129)))
 (let (($x174 (= $x25 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x12 (concat ?x102 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x86)))
 (let ((?x41 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x41)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x69 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x54 (= input.memlabel-mem--symbol.1_end ?x69)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x53 (and $x32 $x54)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x89 $x53)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x17 (and (and (and (and (and (and $x71 $x44) $x81) $x101) $x51) $x37) $x90)))
 (let (($x91 (and $x17 $x82)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x111 (or (bvugt input.memlabel-mem--symbol.1_begin ?x118) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x111) (or $x141 $x131)))))))
 (let (($x115 (and (and (and $x182 $x63) $x100) $x103)))
 (let (($x67 (= $x115 true)))
 (let (($x39 (= $x67 true)))
 (let (($x108 (= $x39 true)))
 (let (($x33 (and $x108 $x174)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (and $x16 $x33)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x15 $x175)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x43 $x160)))
 (let (($x66 (=> $x5 $x159)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (forall ((input.ind-%var343X (_ BitVec 32)) )(let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x121 (concat ?x171 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32)))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x8 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var343X)))
 (let (($x107 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var343X)))
 (=> $x107 (= ?x8 (concat ?x143 (concat ?x155 ?x121)))))))))))
 ))
 (let (($x105 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var342X)))
 (= $x107 (and (bvule (_ bv0 32) input.ind-%var342X) (bvult input.ind-%var342X input.dst.llvm-%n)))))
 ))
 (let (($x119 (and $x105 $x146)))
 (let (($x134 (= true true)))
 (let (($x161 (and $x134 $x119)))
 (let (($x113 (= $x161 true)))
 (let (($x23 (forall ((input.ind-%var337X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var337X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var337X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var336X)))
 (= $x29 false)))
 ))
 (let (($x154 (and $x174 $x23)))
 (let (($x92 (= $x154 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x102 (concat ?x14 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x83)))
 (let ((?x68 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x68)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x89 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x89)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (and $x101 $x32)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x26 $x75)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x82 (and (and (and (and (and (and $x71 $x44) $x59) $x57) $x69) $x51) $x40)))
 (let (($x91 (and $x82 $x37)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x128 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x128) (or $x172 $x133)))))))
 (let (($x39 (and (and (and $x176 $x96) $x100) $x103)))
 (let (($x108 (= $x39 true)))
 (let (($x179 (= $x108 true)))
 (let (($x149 (= $x179 true)))
 (let (($x157 (and $x149 $x92)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x147 (and $x20 $x157)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x60 $x147)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x35 $x87)))
 (let (($x162 (=> $x13 $x113)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (forall ((input.ind-%var343X (_ BitVec 32)) )(let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x121 (concat ?x171 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32)))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var343X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x8 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var343X)))
 (let (($x107 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var343X)))
 (=> $x107 (= ?x8 (concat ?x143 (concat ?x155 ?x121)))))))))))
 ))
 (let (($x105 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var342X)))
 (= $x107 (and (bvule (_ bv0 32) input.ind-%var342X) (bvult input.ind-%var342X input.dst.llvm-%n)))))
 ))
 (let (($x119 (and $x105 $x146)))
 (let (($x134 (= true true)))
 (let (($x161 (and $x134 $x119)))
 (let (($x113 (= $x161 true)))
 (let (($x23 (forall ((input.ind-%var337X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var337X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var337X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var336X)))
 (= $x29 false)))
 ))
 (let (($x154 (and $x174 $x23)))
 (let (($x92 (= $x154 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x102 (concat ?x14 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x83)))
 (let ((?x68 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x68)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x89 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x89)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (and $x101 $x32)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x26 $x75)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x82 (and (and (and (and (and (and $x71 $x44) $x59) $x57) $x69) $x51) $x40)))
 (let (($x91 (and $x82 $x37)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x128 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x128) (or $x172 $x133)))))))
 (let (($x39 (and (and (and $x176 $x96) $x100) $x103)))
 (let (($x108 (= $x39 true)))
 (let (($x179 (= $x108 true)))
 (let (($x149 (= $x179 true)))
 (let (($x157 (and $x149 $x92)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x147 (and $x20 $x157)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x60 $x147)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x35 $x87)))
 (let (($x162 (=> $x13 $x113)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var343X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.ind-%var342X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var343X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffe68) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= false true)))
 (let (($x150 (= $x143 true)))
 (let (($x116 (forall ((input.ind-%var365X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var365X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var365X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var364X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var364X)))
 (= $x66 false)))
 ))
 (let (($x105 (and $x92 $x116)))
 (let (($x8 (= $x105 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x14 (concat ?x12 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x53)))
 (let ((?x17 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x17)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (and $x57 $x101)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x10)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x37 (and (and (and (and (and (and $x71 $x44) $x84) $x41) $x89) $x69) $x54)))
 (let (($x91 (and $x37 $x51)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x110 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x110) (or $x158 $x130)))))))
 (let (($x179 (and (and (and $x115 $x63) $x100) $x103)))
 (let (($x149 (= $x179 true)))
 (let (($x80 (= $x149 true)))
 (let (($x29 (= $x80 true)))
 (let (($x137 (and $x29 $x8)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (and $x11 $x137)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x178 $x117)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x43 $x169)))
 (let (($x155 (=> $x168 $x150)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= false true)))
 (let (($x150 (= $x143 true)))
 (let (($x116 (forall ((input.ind-%var365X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var365X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var365X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var364X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var364X)))
 (= $x66 false)))
 ))
 (let (($x105 (and $x92 $x116)))
 (let (($x8 (= $x105 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x14 (concat ?x12 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x53)))
 (let ((?x17 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x17)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (and $x57 $x101)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x10)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x37 (and (and (and (and (and (and $x71 $x44) $x84) $x41) $x89) $x69) $x54)))
 (let (($x91 (and $x37 $x51)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x110 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x110) (or $x158 $x130)))))))
 (let (($x179 (and (and (and $x115 $x63) $x100) $x103)))
 (let (($x149 (= $x179 true)))
 (let (($x80 (= $x149 true)))
 (let (($x29 (= $x80 true)))
 (let (($x137 (and $x29 $x8)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (and $x11 $x137)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x178 $x117)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x43 $x169)))
 (let (($x155 (=> $x168 $x150)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x102 false)))
 (let (($x50 (= $x140 true)))
 (let (($x124 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var379X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var379X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var378X)))
 (= $x113 false)))
 ))
 (let (($x152 (and $x46 $x124)))
 (let (($x55 (= $x152 true)))
 (let ((?x181 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x181)))
 (let (($x163 (= ?x121 input.dst.llvm-%n)))
 (let (($x144 (= $x163 true)))
 (let (($x177 (= $x144 true)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x107 true)))
 (let (($x120 (= $x147 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x134 true)))
 (let (($x25 (= $x87 true)))
 (let (($x174 (= $x25 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x155 true)))
 (let (($x99 (= $x114 true)))
 (let (($x142 (= $x99 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x117 true)))
 (let (($x168 (= $x169 true)))
 (let (($x143 (= $x168 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x122 true)))
 (let (($x105 (= $x116 true)))
 (let (($x8 (= $x105 true)))
 (let ((?x14 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvadd symbol.1 ?x14)))
 (let (($x80 (and (bvule input.memlabel-mem--symbol.1_begin ?x49) (bvule (bvadd ?x49 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false $x80)))))
 (let (($x22 (=> (and $x102 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x80)))))
 (let (($x70 (= $x22 true)))
 (let (($x92 (= $x70 true)))
 (let (($x13 (= $x92 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x82)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x64 $x88)))
 (let (($x62 (not $x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x61 $x71)))
 (let (($x79 (and (not $x42) $x62)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x65 $x31)))
 (let (($x28 (not $x45)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x48 $x73)))
 (let (($x97 (and (not $x74) $x28)))
 (let (($x37 (and (and (and (and (and (and $x97 $x79) $x77) $x86) $x57) $x101) $x89)))
 (let (($x53 (and $x37 $x32)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x98 $x53)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x141) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x182 $x126)))))))
 (let (($x91 (and $x39 $x51)))
 (let (($x100 (= $x91 true)))
 (let (($x108 (= $x100 true)))
 (let (($x67 (= $x108 true)))
 (let (($x165 (and $x67 $x13)))
 (let (($x137 (and $x165 $x8)))
 (let (($x150 (and $x137 $x143)))
 (let (($x78 (and $x150 $x142)))
 (let (($x23 (and $x78 $x174)))
 (let (($x7 (and $x23 $x120)))
 (let (($x72 (and $x7 $x177)))
 (let (($x127 (and $x72 $x55)))
 (let (($x178 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x178 $x127)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x173 $x164)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x43 $x136)))
 (let (($x170 (=> $x112 $x50)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (= $x102 false)))
 (let (($x50 (= $x140 true)))
 (let (($x124 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var379X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var379X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var378X)))
 (= $x113 false)))
 ))
 (let (($x152 (and $x46 $x124)))
 (let (($x55 (= $x152 true)))
 (let ((?x181 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x181)))
 (let (($x163 (= ?x121 input.dst.llvm-%n)))
 (let (($x144 (= $x163 true)))
 (let (($x177 (= $x144 true)))
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x107 true)))
 (let (($x120 (= $x147 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x134 true)))
 (let (($x25 (= $x87 true)))
 (let (($x174 (= $x25 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x155 true)))
 (let (($x99 (= $x114 true)))
 (let (($x142 (= $x99 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x117 true)))
 (let (($x168 (= $x169 true)))
 (let (($x143 (= $x168 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x122 true)))
 (let (($x105 (= $x116 true)))
 (let (($x8 (= $x105 true)))
 (let ((?x14 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvadd symbol.1 ?x14)))
 (let (($x80 (and (bvule input.memlabel-mem--symbol.1_begin ?x49) (bvule (bvadd ?x49 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false $x80)))))
 (let (($x22 (=> (and $x102 (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x80)))))
 (let (($x70 (= $x22 true)))
 (let (($x92 (= $x70 true)))
 (let (($x13 (= $x92 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x82)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x64 $x88)))
 (let (($x62 (not $x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x61 $x71)))
 (let (($x79 (and (not $x42) $x62)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x65 $x31)))
 (let (($x28 (not $x45)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x48 $x73)))
 (let (($x97 (and (not $x74) $x28)))
 (let (($x37 (and (and (and (and (and (and $x97 $x79) $x77) $x86) $x57) $x101) $x89)))
 (let (($x53 (and $x37 $x32)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x98 $x53)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x141) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x182 $x126)))))))
 (let (($x91 (and $x39 $x51)))
 (let (($x100 (= $x91 true)))
 (let (($x108 (= $x100 true)))
 (let (($x67 (= $x108 true)))
 (let (($x165 (and $x67 $x13)))
 (let (($x137 (and $x165 $x8)))
 (let (($x150 (and $x137 $x143)))
 (let (($x78 (and $x150 $x142)))
 (let (($x23 (and $x78 $x174)))
 (let (($x7 (and $x23 $x120)))
 (let (($x72 (and $x7 $x177)))
 (let (($x127 (and $x72 $x55)))
 (let (($x178 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x178 $x127)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x173 $x164)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x112 (and $x43 $x136)))
 (let (($x170 (=> $x112 $x50)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x08f3c007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x08f3be78)
  (define-fun symbol.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x101)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x76 $x62)))
 (let (($x75 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x75)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x45 $x28)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x61)))
 (let (($x91 (and (and (and (and (and (and $x42 $x69) $x44) $x83) $x57) $x26) $x54)))
 (let (($x100 (and $x91 $x89)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x133 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x133) (or $x176 $x132)))))))
 (let (($x120 (and $x98 $x108)))
 (let (($x7 (= $x120 true)))
 (let (($x171 (= $x7 true)))
 (let (($x134 (forall ((input.ind-%var392X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var392X)))
 (= $x116 false)))
 ))
 (let (($x155 (forall ((input.ind-%var393X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var393X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var393X) (_ bv0 32)))))
 ))
 (let (($x87 (and $x155 $x134)))
 (let (($x25 (= $x87 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x179 (concat ?x94 (concat ?x6 ?x34)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let (($x154 (and (and (and $x98 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x108) $x80)))
 (let (($x22 (= $x154 true)))
 (let (($x70 (= $x22 true)))
 (let (($x92 (= $x70 true)))
 (let (($x174 (and $x92 $x25)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x38 $x174)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x35 $x23)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x11 $x107)))
 (let (($x181 (=> $x147 $x171)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x101)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x76 $x62)))
 (let (($x75 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x75)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x45 $x28)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x61)))
 (let (($x91 (and (and (and (and (and (and $x42 $x69) $x44) $x83) $x57) $x26) $x54)))
 (let (($x100 (and $x91 $x89)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x133 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x133) (or $x176 $x132)))))))
 (let (($x120 (and $x98 $x108)))
 (let (($x7 (= $x120 true)))
 (let (($x171 (= $x7 true)))
 (let (($x134 (forall ((input.ind-%var392X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var392X)))
 (= $x116 false)))
 ))
 (let (($x155 (forall ((input.ind-%var393X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var393X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var393X) (_ bv0 32)))))
 ))
 (let (($x87 (and $x155 $x134)))
 (let (($x25 (= $x87 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x179 (concat ?x94 (concat ?x6 ?x34)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let (($x154 (and (and (and $x98 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x108) $x80)))
 (let (($x22 (= $x154 true)))
 (let (($x70 (= $x22 true)))
 (let (($x92 (= $x70 true)))
 (let (($x174 (and $x92 $x25)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x38 $x174)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x35 $x23)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x11 $x107)))
 (let (($x181 (=> $x147 $x171)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x169)))
 (let (($x168 (= ?x165 input.dst.llvm-%n)))
 (let (($x138 (= $x168 true)))
 (let (($x111 (forall ((input.ind-%var398X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var398X)))
 (= $x155 false)))
 ))
 (let (($x120 (forall ((input.ind-%var399X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var399X)))
 (=> $x155 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var399X) (_ bv0 32)))))
 ))
 (let (($x85 (and $x120 $x111)))
 (let (($x105 (= $x85 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x66 (concat ?x6 (concat ?x49 ?x103)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x90)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x53)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x68 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x83 $x68)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x86 $x59)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x79 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x79)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x71 $x45)))
 (let (($x97 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x97)))
 (let (($x89 (and (and (and (and (and (and $x42 $x69) $x37) $x82) $x41) $x57) $x17)))
 (let (($x100 (and $x89 $x26)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x130 (or (bvugt input.memlabel-mem--symbol.1_begin ?x158) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x130) (or $x115 $x118)))))))
 (let (($x70 (and (and (and $x29 $x96) $x108) $x80)))
 (let (($x92 (= $x70 true)))
 (let (($x122 (= $x92 true)))
 (let (($x116 (= $x122 true)))
 (let (($x117 (and $x116 $x105)))
 (let (($x135 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x135 $x117)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x8 (and $x15 $x13)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x43 $x8)))
 (let (($x163 (=> $x99 $x138)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x169)))
 (let (($x168 (= ?x165 input.dst.llvm-%n)))
 (let (($x138 (= $x168 true)))
 (let (($x111 (forall ((input.ind-%var398X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var398X)))
 (= $x155 false)))
 ))
 (let (($x120 (forall ((input.ind-%var399X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var399X)))
 (=> $x155 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var399X) (_ bv0 32)))))
 ))
 (let (($x85 (and $x120 $x111)))
 (let (($x105 (= $x85 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x66 (concat ?x6 (concat ?x49 ?x103)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x90)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x53)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x68 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x83 $x68)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x86 $x59)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x79 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x79)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x71 $x45)))
 (let (($x97 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x97)))
 (let (($x89 (and (and (and (and (and (and $x42 $x69) $x37) $x82) $x41) $x57) $x17)))
 (let (($x100 (and $x89 $x26)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x130 (or (bvugt input.memlabel-mem--symbol.1_begin ?x158) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x130) (or $x115 $x118)))))))
 (let (($x70 (and (and (and $x29 $x96) $x108) $x80)))
 (let (($x92 (= $x70 true)))
 (let (($x122 (= $x92 true)))
 (let (($x116 (= $x122 true)))
 (let (($x117 (and $x116 $x105)))
 (let (($x135 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x135 $x117)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x8 (and $x15 $x13)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x43 $x8)))
 (let (($x163 (=> $x99 $x138)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x171)))
 (let (($x174 (= ?x181 input.spec-%var-n-1)))
 (let (($x143 (= $x174 true)))
 (let (($x163 (forall ((input.ind-%var405X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var405X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var405X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var404X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var404X)))
 (= $x120 false)))
 ))
 (let (($x144 (and $x105 $x163)))
 (let (($x128 (= $x144 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x34 (concat ?x49 (concat ?x94 ?x14)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x81)))
 (let ((?x91 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x91)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x86 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x86)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (and $x82 $x83)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x44 $x32)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x75 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x62)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x61 $x71)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x28)))
 (let (($x26 (and (and (and (and (and (and $x42 $x69) $x51) $x101) $x84) $x41) $x40)))
 (let (($x100 (and $x26 $x57)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x126 (or (bvugt input.memlabel-mem--symbol.1_begin ?x182) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x126) (or $x39 $x24)))))))
 (let (($x122 (and (and (and $x154 $x63) $x108) $x80)))
 (let (($x116 (= $x122 true)))
 (let (($x150 (= $x116 true)))
 (let (($x155 (= $x150 true)))
 (let (($x67 (and $x155 $x128)))
 (let (($x173 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x173 $x67)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x60 $x78)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x11 $x25)))
 (let (($x23 (=> $x137 $x143)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x171)))
 (let (($x174 (= ?x181 input.spec-%var-n-1)))
 (let (($x143 (= $x174 true)))
 (let (($x163 (forall ((input.ind-%var405X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var405X)))
 (=> $x120 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var405X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var404X (_ BitVec 32)) )(let (($x120 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var404X)))
 (= $x120 false)))
 ))
 (let (($x144 (and $x105 $x163)))
 (let (($x128 (= $x144 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x34 (concat ?x49 (concat ?x94 ?x14)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x81)))
 (let ((?x91 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x91)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x86 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x86)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (and $x82 $x83)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x44 $x32)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x75 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x62)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x61 $x71)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x28)))
 (let (($x26 (and (and (and (and (and (and $x42 $x69) $x51) $x101) $x84) $x41) $x40)))
 (let (($x100 (and $x26 $x57)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x126 (or (bvugt input.memlabel-mem--symbol.1_begin ?x182) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x126) (or $x39 $x24)))))))
 (let (($x122 (and (and (and $x154 $x63) $x108) $x80)))
 (let (($x116 (= $x122 true)))
 (let (($x150 (= $x116 true)))
 (let (($x155 (= $x150 true)))
 (let (($x67 (and $x155 $x128)))
 (let (($x173 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x173 $x67)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x60 $x78)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x11 $x25)))
 (let (($x23 (=> $x137 $x143)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x107 (= $x87 true)))
 (let (($x111 (= $x107 true)))
 (let (($x23 (forall ((input.ind-%var411X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var411X)))
 (=> $x168 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var411X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var410X)))
 (= $x168 false)))
 ))
 (let (($x114 (and $x128 $x23)))
 (let (($x110 (= $x114 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x103 (concat ?x94 (concat ?x6 ?x18)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x44 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x44)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x54 (and $x101 $x82)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x37 $x54)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x79 $x75)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x76)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x97 $x61)))
 (let (($x45 (not $x71)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x45)))
 (let (($x57 (and (and (and (and (and (and $x42 $x69) $x10) $x53) $x86) $x84) $x68)))
 (let (($x100 (and $x57 $x41)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x132 (or (bvugt input.memlabel-mem--symbol.1_begin ?x176) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x132) (or $x98 $x148)))))))
 (let (($x150 (and (and (and $x70 $x96) $x108) $x80)))
 (let (($x155 (= $x150 true)))
 (let (($x147 (= $x155 true)))
 (let (($x120 (= $x147 true)))
 (let (($x5 (and $x120 $x110)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x35 $x5)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x178 $x121)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x43 $x142)))
 (let (($x169 (=> $x8 $x111)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x107 (= $x87 true)))
 (let (($x111 (= $x107 true)))
 (let (($x23 (forall ((input.ind-%var411X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var411X)))
 (=> $x168 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var411X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var410X)))
 (= $x168 false)))
 ))
 (let (($x114 (and $x128 $x23)))
 (let (($x110 (= $x114 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x103 (concat ?x94 (concat ?x6 ?x18)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x44 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x44)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x54 (and $x101 $x82)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x37 $x54)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x79 $x75)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x76)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x97 $x61)))
 (let (($x45 (not $x71)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x45)))
 (let (($x57 (and (and (and (and (and (and $x42 $x69) $x10) $x53) $x86) $x84) $x68)))
 (let (($x100 (and $x57 $x41)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x132 (or (bvugt input.memlabel-mem--symbol.1_begin ?x176) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x132) (or $x98 $x148)))))))
 (let (($x150 (and (and (and $x70 $x96) $x108) $x80)))
 (let (($x155 (= $x150 true)))
 (let (($x147 (= $x155 true)))
 (let (($x120 (= $x147 true)))
 (let (($x5 (and $x120 $x110)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and $x35 $x5)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x178 $x121)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x43 $x142)))
 (let (($x169 (=> $x8 $x111)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (forall ((input.ind-%var423X (_ BitVec 32)) )(let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x119 (concat ?x146 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32)))))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x157 (concat ?x33 ?x119)))))))))
 ))
 (let (($x113 (forall ((input.ind-%var422X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var422X) (bvult input.ind-%var422X (_ bv0 32)))))
 ))
 (let (($x106 (and $x113 $x180)))
 (let (($x163 (= true true)))
 (let (($x129 (and $x163 $x106)))
 (let (($x145 (= $x129 true)))
 (let (($x131 (forall ((input.ind-%var417X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var417X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var417X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var416X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var416X)))
 (= $x174 false)))
 ))
 (let (($x22 (and $x110 $x131)))
 (let (($x138 (= $x22 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x14 (concat ?x6 (concat ?x49 ?x102)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x53 $x101)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x51 $x17)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x62 $x79)))
 (let (($x77 (not $x75)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x77)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x28 $x97)))
 (let (($x71 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x71)))
 (let (($x41 (and (and (and (and (and (and $x42 $x69) $x90) $x91) $x44) $x86) $x83)))
 (let (($x100 (and $x41 $x84)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x118 (or (bvugt input.memlabel-mem--symbol.1_begin ?x115) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x118) (or $x29 $x141)))))))
 (let (($x147 (and (and (and $x122 $x63) $x108) $x80)))
 (let (($x120 (= $x147 true)))
 (let (($x99 (= $x120 true)))
 (let (($x168 (= $x99 true)))
 (let (($x134 (and $x168 $x138)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and $x15 $x134)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x38 $x25)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x11 $x85)))
 (let (($x156 (=> $x105 $x145)))
 (not $x156))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (forall ((input.ind-%var423X (_ BitVec 32)) )(let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x119 (concat ?x146 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32)))))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var423X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x157 (concat ?x33 ?x119)))))))))
 ))
 (let (($x113 (forall ((input.ind-%var422X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var422X) (bvult input.ind-%var422X (_ bv0 32)))))
 ))
 (let (($x106 (and $x113 $x180)))
 (let (($x163 (= true true)))
 (let (($x129 (and $x163 $x106)))
 (let (($x145 (= $x129 true)))
 (let (($x131 (forall ((input.ind-%var417X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var417X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var417X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var416X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var416X)))
 (= $x174 false)))
 ))
 (let (($x22 (and $x110 $x131)))
 (let (($x138 (= $x22 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x14 (concat ?x6 (concat ?x49 ?x102)))))
 (let (($x80 (= input.dst.llvm-%n ?x149)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x53 $x101)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x51 $x17)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x62 $x79)))
 (let (($x77 (not $x75)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x77)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x28 $x97)))
 (let (($x71 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x71)))
 (let (($x41 (and (and (and (and (and (and $x42 $x69) $x90) $x91) $x44) $x86) $x83)))
 (let (($x100 (and $x41 $x84)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x118 (or (bvugt input.memlabel-mem--symbol.1_begin ?x115) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x118) (or $x29 $x141)))))))
 (let (($x147 (and (and (and $x122 $x63) $x108) $x80)))
 (let (($x120 (= $x147 true)))
 (let (($x99 (= $x120 true)))
 (let (($x168 (= $x99 true)))
 (let (($x134 (and $x168 $x138)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and $x15 $x134)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x38 $x25)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x11 $x85)))
 (let (($x156 (=> $x105 $x145)))
 (not $x156))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (= $x109 false)))
 (let (($x241 (= $x240 true)))
 (let (($x233 (forall ((input.ind-%var441X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var441X)))
 (=> $x219 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var441X) (_ bv0 32)))))
 ))
 (let (($x223 (forall ((input.ind-%var440X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var440X)))
 (= $x219 false)))
 ))
 (let (($x234 (and $x223 $x233)))
 (let (($x235 (= $x234 true)))
 (let (($x213 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x200 (bvadd symbol.1 (bvmul input.ind-%var435X (_ bv4 32)))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x200))))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv2 32))) ?x204)))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv3 32))) ?x207)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var435X)))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var435X)))
 (=> $x23 (= ?x58 ?x210)))))))))
 ))
 (let (($x167 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var434X)))
 (= $x23 $x12))))
 ))
 (let (($x214 (and $x167 $x213)))
 (let (($x215 (= $x214 true)))
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x130)))
 (let (($x136 (= ?x176 input.dst.llvm-%n)))
 (let (($x152 (= $x136 true)))
 (let (($x55 (= $x152 true)))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x128 true)))
 (let (($x50 (= $x140 true)))
 (let ((?x180 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x106 (bvadd symbol.1 ?x180)))
 (let (($x87 (and (bvule input.memlabel-mem--symbol.1_begin ?x106) (bvule (bvadd ?x106 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x78 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x145 (=> (and $x109 (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x87)))))
 (let (($x156 (= $x145 true)))
 (let (($x52 (= $x156 true)))
 (let (($x123 (= $x52 true)))
 (let (($x146 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x27 (= $x146 true)))
 (let (($x119 (= $x27 true)))
 (let (($x153 (= $x119 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x160 true)))
 (let (($x19 (= $x157 true)))
 (let (($x33 (= $x19 true)))
 (let (($x161 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (= $x161 true)))
 (let (($x93 (= $x113 true)))
 (let (($x104 (= $x93 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x105 true)))
 (let (($x177 (= $x163 true)))
 (let (($x7 (= $x177 true)))
 (let (($x131 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x22 (= $x131 true)))
 (let (($x138 (= $x22 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x66)))
 (let ((?x49 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x49)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x116 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x116)))
 (let (($x108 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x108 $x179)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x100 $x14)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x82 $x54)))
 (let (($x59 (not $x86)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x17 $x44)))
 (let (($x83 (and (not $x57) $x59)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x51)))
 (let (($x40 (not $x53)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x89 $x10)))
 (let (($x101 (and (not $x91) $x40)))
 (let (($x168 (and (and (and (and (and (and $x101 $x83) $x41) $x84) $x94) $x103) $x102)))
 (let (($x137 (and $x168 $x18)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x174 (and $x90 $x137)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x88 $x76)))))))
 (let (($x114 (and $x81 $x174)))
 (let (($x110 (= $x114 true)))
 (let (($x8 (= $x110 true)))
 (let (($x169 (= $x8 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x70 true)))
 (let (($x122 (= $x158 true)))
 (let (($x182 (= $x122 true)))
 (let (($x29 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x148 (= $x29 true)))
 (let (($x141 (= $x148 true)))
 (let (($x154 (= $x141 true)))
 (let (($x21 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x21 true)))
 (let (($x118 (= $x39 true)))
 (let (($x98 (= $x118 true)))
 (let (($x96 (= ?x176 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x96 true)))
 (let (($x115 (= $x126 true)))
 (let (($x24 (and $x115 $x98)))
 (let (($x172 (and $x24 $x154)))
 (let (($x63 (and $x172 $x182)))
 (let (($x13 (and $x63 $x169)))
 (let (($x134 (and $x13 $x138)))
 (let (($x72 (and $x134 $x7)))
 (let (($x162 (and $x72 $x104)))
 (let (($x151 (and $x162 $x33)))
 (let (($x47 (and $x151 $x153)))
 (let (($x144 (and $x47 $x123)))
 (let (($x164 (and $x144 $x50)))
 (let (($x124 (and $x164 $x55)))
 (let (($x216 (and $x124 $x215)))
 (let (($x236 (and $x216 $x235)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and $x38 $x236)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x60 $x237)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x239 (and $x43 $x238)))
 (let (($x242 (=> $x239 $x241)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (= $x109 false)))
 (let (($x241 (= $x240 true)))
 (let (($x233 (forall ((input.ind-%var441X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var441X)))
 (=> $x219 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var441X) (_ bv0 32)))))
 ))
 (let (($x223 (forall ((input.ind-%var440X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var440X)))
 (= $x219 false)))
 ))
 (let (($x234 (and $x223 $x233)))
 (let (($x235 (= $x234 true)))
 (let (($x213 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x200 (bvadd symbol.1 (bvmul input.ind-%var435X (_ bv4 32)))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x200))))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv2 32))) ?x204)))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x200 (_ bv3 32))) ?x207)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var435X)))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var435X)))
 (=> $x23 (= ?x58 ?x210)))))))))
 ))
 (let (($x167 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var434X)))
 (= $x23 $x12))))
 ))
 (let (($x214 (and $x167 $x213)))
 (let (($x215 (= $x214 true)))
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x130)))
 (let (($x136 (= ?x176 input.dst.llvm-%n)))
 (let (($x152 (= $x136 true)))
 (let (($x55 (= $x152 true)))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x128 true)))
 (let (($x50 (= $x140 true)))
 (let ((?x180 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x106 (bvadd symbol.1 ?x180)))
 (let (($x87 (and (bvule input.memlabel-mem--symbol.1_begin ?x106) (bvule (bvadd ?x106 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x78 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x145 (=> (and $x109 (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x87)))))
 (let (($x156 (= $x145 true)))
 (let (($x52 (= $x156 true)))
 (let (($x123 (= $x52 true)))
 (let (($x146 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x27 (= $x146 true)))
 (let (($x119 (= $x27 true)))
 (let (($x153 (= $x119 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x160 true)))
 (let (($x19 (= $x157 true)))
 (let (($x33 (= $x19 true)))
 (let (($x161 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (= $x161 true)))
 (let (($x93 (= $x113 true)))
 (let (($x104 (= $x93 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x105 true)))
 (let (($x177 (= $x163 true)))
 (let (($x7 (= $x177 true)))
 (let (($x131 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x22 (= $x131 true)))
 (let (($x138 (= $x22 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x66)))
 (let ((?x49 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x49)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x116 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x116)))
 (let (($x108 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x108 $x179)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x100 $x14)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x82 $x54)))
 (let (($x59 (not $x86)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x17 $x44)))
 (let (($x83 (and (not $x57) $x59)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x51)))
 (let (($x40 (not $x53)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x89 $x10)))
 (let (($x101 (and (not $x91) $x40)))
 (let (($x168 (and (and (and (and (and (and $x101 $x83) $x41) $x84) $x94) $x103) $x102)))
 (let (($x137 (and $x168 $x18)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x174 (and $x90 $x137)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x88 $x76)))))))
 (let (($x114 (and $x81 $x174)))
 (let (($x110 (= $x114 true)))
 (let (($x8 (= $x110 true)))
 (let (($x169 (= $x8 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x70 true)))
 (let (($x122 (= $x158 true)))
 (let (($x182 (= $x122 true)))
 (let (($x29 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x148 (= $x29 true)))
 (let (($x141 (= $x148 true)))
 (let (($x154 (= $x141 true)))
 (let (($x21 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x39 (= $x21 true)))
 (let (($x118 (= $x39 true)))
 (let (($x98 (= $x118 true)))
 (let (($x96 (= ?x176 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x96 true)))
 (let (($x115 (= $x126 true)))
 (let (($x24 (and $x115 $x98)))
 (let (($x172 (and $x24 $x154)))
 (let (($x63 (and $x172 $x182)))
 (let (($x13 (and $x63 $x169)))
 (let (($x134 (and $x13 $x138)))
 (let (($x72 (and $x134 $x7)))
 (let (($x162 (and $x72 $x104)))
 (let (($x151 (and $x162 $x33)))
 (let (($x47 (and $x151 $x153)))
 (let (($x144 (and $x47 $x123)))
 (let (($x164 (and $x144 $x50)))
 (let (($x124 (and $x164 $x55)))
 (let (($x216 (and $x124 $x215)))
 (let (($x236 (and $x216 $x235)))
 (let (($x38 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x237 (and $x38 $x236)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x238 (and $x60 $x237)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x239 (and $x43 $x238)))
 (let (($x242 (=> $x239 $x241)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x85000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05080084)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05080087)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8500018f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05080084)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x85000000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x85000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x85000003 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x85000002 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x85000001 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x85000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0bfffec0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0bfffec3)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0bfffec0)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x7ffffe83 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe82 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe81 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (not $x15)))
 (let (($x217 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (not $x217)))
 (let (($x159 (or $x218 $x221)))
 (let (($x198 (= $x159 true)))
 (let (($x229 (= $x198 true)))
 (let (($x189 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var549X)))
 (=> $x175 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var549X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var548X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var548X)))
 (= $x175 false)))
 ))
 (let (($x193 (and $x117 $x189)))
 (let (($x196 (= $x193 true)))
 (let (($x129 (forall ((input.ind-%var542X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var542X) (bvult input.ind-%var542X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var542X)))
 (= $x124 $x243))))
 ))
 (let (($x234 (forall ((input.ind-%var543X (_ BitVec 32)) )(let ((?x211 (bvadd symbol.1 (bvmul input.ind-%var543X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x211))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x211 (_ bv2 32))) ?x215)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x211 (_ bv3 32))) ?x222)))
 (let ((?x30 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var543X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var543X)))
 (=> $x124 (= ?x30 ?x231)))))))))
 ))
 (let (($x48 (and $x234 $x129)))
 (let (($x107 (= $x48 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x123)))
 (let (($x128 (= ?x144 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x128 true)))
 (let (($x50 (= $x140 true)))
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x133)))
 (let (($x78 (= ?x92 input.dst.llvm-%n)))
 (let (($x145 (= $x78 true)))
 (let (($x156 (= $x145 true)))
 (let (($x143 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (= $x143 true)))
 (let (($x5 (= $x87 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x180 (= $x125 true)))
 (let (($x106 (= $x180 true)))
 (let (($x166 (= $x106 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x27 true)))
 (let (($x153 (= $x119 true)))
 (let (($x47 (= $x153 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x157 true)))
 (let (($x33 (= $x19 true)))
 (let (($x151 (= $x33 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x113 true)))
 (let (($x104 (= $x93 true)))
 (let (($x162 (= $x104 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x177 (= $x163 true)))
 (let (($x7 (= $x177 true)))
 (let (($x72 (= $x7 true)))
 (let (($x138 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x134 (= $x138 true)))
 (let (($x25 (= $x134 true)))
 (let (($x85 (= $x25 true)))
 (let (($x8 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x169 (= $x8 true)))
 (let (($x13 (= $x169 true)))
 (let (($x131 (= $x13 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x94)))
 (let ((?x179 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x179)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x80 $x147)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x41 $x100)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x44 $x57)))
 (let (($x82 (not $x26)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (and $x40 $x101)))
 (let (($x86 (and (not $x17) $x82)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x10 $x91)))
 (let (($x68 (not $x37)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x74 $x90)))
 (let (($x53 (and (not $x89) $x68)))
 (let (($x102 (and (and (and (and (and (and $x53 $x86) $x59) $x149) $x108) $x116) $x14)))
 (let (($x168 (and $x102 $x120)))
 (let (($x69 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x69 $x168)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x64 $x76)))))))
 (let (($x18 (and $x73 $x66)))
 (let (($x137 (= $x18 true)))
 (let (($x174 (= $x137 true)))
 (let (($x114 (= $x174 true)))
 (let (($x22 (and $x114 $x131)))
 (let (($x105 (and $x22 $x85)))
 (let (($x161 (and $x105 $x72)))
 (let (($x160 (and $x161 $x162)))
 (let (($x146 (and $x160 $x151)))
 (let (($x109 (and $x146 $x47)))
 (let (($x35 (and $x109 $x166)))
 (let (($x142 (and $x35 $x5)))
 (let (($x52 (and $x142 $x156)))
 (let (($x164 (and $x52 $x50)))
 (let (($x95 (and $x164 $x107)))
 (let (($x226 (and $x95 $x196)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x63 $x226)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x165 (and $x158 $x112)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x154 $x165)))
 (let ((?x60 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvadd symbol.1 ?x60)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x46) (bvule (bvadd ?x46 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x173 (=> (and $x15 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x197 (and $x173 $x121)))
 (let (($x225 (=> $x197 $x229)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (not $x15)))
 (let (($x217 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (not $x217)))
 (let (($x159 (or $x218 $x221)))
 (let (($x198 (= $x159 true)))
 (let (($x229 (= $x198 true)))
 (let (($x189 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var549X)))
 (=> $x175 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var549X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var548X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var548X)))
 (= $x175 false)))
 ))
 (let (($x193 (and $x117 $x189)))
 (let (($x196 (= $x193 true)))
 (let (($x129 (forall ((input.ind-%var542X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var542X) (bvult input.ind-%var542X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var542X)))
 (= $x124 $x243))))
 ))
 (let (($x234 (forall ((input.ind-%var543X (_ BitVec 32)) )(let ((?x211 (bvadd symbol.1 (bvmul input.ind-%var543X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x211))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x211 (_ bv2 32))) ?x215)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x211 (_ bv3 32))) ?x222)))
 (let ((?x30 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var543X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var543X)))
 (=> $x124 (= ?x30 ?x231)))))))))
 ))
 (let (($x48 (and $x234 $x129)))
 (let (($x107 (= $x48 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x123)))
 (let (($x128 (= ?x144 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x128 true)))
 (let (($x50 (= $x140 true)))
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x133)))
 (let (($x78 (= ?x92 input.dst.llvm-%n)))
 (let (($x145 (= $x78 true)))
 (let (($x156 (= $x145 true)))
 (let (($x143 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x87 (= $x143 true)))
 (let (($x5 (= $x87 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x180 (= $x125 true)))
 (let (($x106 (= $x180 true)))
 (let (($x166 (= $x106 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x27 true)))
 (let (($x153 (= $x119 true)))
 (let (($x47 (= $x153 true)))
 (let (($x157 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x157 true)))
 (let (($x33 (= $x19 true)))
 (let (($x151 (= $x33 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x113 true)))
 (let (($x104 (= $x93 true)))
 (let (($x162 (= $x104 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x177 (= $x163 true)))
 (let (($x7 (= $x177 true)))
 (let (($x72 (= $x7 true)))
 (let (($x138 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x134 (= $x138 true)))
 (let (($x25 (= $x134 true)))
 (let (($x85 (= $x25 true)))
 (let (($x8 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x169 (= $x8 true)))
 (let (($x13 (= $x169 true)))
 (let (($x131 (= $x13 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x94)))
 (let ((?x179 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x179)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x80 $x147)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x41 $x100)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x44 $x57)))
 (let (($x82 (not $x26)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (and $x40 $x101)))
 (let (($x86 (and (not $x17) $x82)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x10 $x91)))
 (let (($x68 (not $x37)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x74 $x90)))
 (let (($x53 (and (not $x89) $x68)))
 (let (($x102 (and (and (and (and (and (and $x53 $x86) $x59) $x149) $x108) $x116) $x14)))
 (let (($x168 (and $x102 $x120)))
 (let (($x69 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x69 $x168)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x64 $x76)))))))
 (let (($x18 (and $x73 $x66)))
 (let (($x137 (= $x18 true)))
 (let (($x174 (= $x137 true)))
 (let (($x114 (= $x174 true)))
 (let (($x22 (and $x114 $x131)))
 (let (($x105 (and $x22 $x85)))
 (let (($x161 (and $x105 $x72)))
 (let (($x160 (and $x161 $x162)))
 (let (($x146 (and $x160 $x151)))
 (let (($x109 (and $x146 $x47)))
 (let (($x35 (and $x109 $x166)))
 (let (($x142 (and $x35 $x5)))
 (let (($x52 (and $x142 $x156)))
 (let (($x164 (and $x52 $x50)))
 (let (($x95 (and $x164 $x107)))
 (let (($x226 (and $x95 $x196)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x63 $x226)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x165 (and $x158 $x112)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x154 $x165)))
 (let ((?x60 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvadd symbol.1 ?x60)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x46) (bvule (bvadd ?x46 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x173 (=> (and $x15 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x197 (and $x173 $x121)))
 (let (($x225 (=> $x197 $x229)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x271 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x272 (bvneg ?x271)))
 (let (($x274 (= ?x272 ?x273)))
 (let (($x275 (= $x274 true)))
 (let (($x260 (forall ((input.ind-%var561X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var561X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var561X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var560X)))
 (= $x246 false)))
 ))
 (let (($x261 (and $x250 $x260)))
 (let (($x262 (= $x261 true)))
 (let (($x185 (forall ((input.ind-%var555X (_ BitVec 32)) )(let ((?x206 (bvadd symbol.1 (bvmul input.ind-%var555X (_ bv4 32)))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x206))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv2 32))) ?x239)))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv3 32))) ?x220)))
 (let ((?x56 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var555X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x165 (= ?x56 ?x152)))))))))
 ))
 (let (($x230 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var554X) (bvult input.ind-%var554X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x165 $x229))))
 ))
 (let (($x187 (and $x230 $x185)))
 (let (($x224 (= $x187 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x117)))
 (let (($x188 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x188 true)))
 (let (($x189 (= $x186 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (= $x219 true)))
 (let (($x214 (= $x213 true)))
 (let (($x212 (= $x214 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x223 (= $x211 true)))
 (let (($x227 (= $x223 true)))
 (let (($x209 (= $x227 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x124 (= $x55 true)))
 (let (($x30 (= $x124 true)))
 (let (($x12 (= $x30 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x92 (bvsub ?x183 ?x176)))
 (let (($x142 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x92) (bvult ?x183 ?x92))))
 (let ((?x166 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvmul (_ bv4 64) ?x166)))
 (let ((?x171 ((_ extract 63 32) ?x35)))
 (let (($x133 (= (_ bv0 32) ?x171)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x156 (and (and (and true $x180) $x133) $x142)))
 (let (($x119 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x52 (and $x119 $x156)))
 (let (($x123 (= true $x52)))
 (let (($x60 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (=> $x60 $x123)))
 (let (($x128 (= $x144 true)))
 (let (($x140 (= $x128 true)))
 (let (($x50 (= $x140 true)))
 (let (($x160 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x157 (= $x160 true)))
 (let (($x19 (= $x157 true)))
 (let (($x33 (= $x19 true)))
 (let (($x113 (= $x60 true)))
 (let (($x93 (= $x113 true)))
 (let (($x104 (= $x93 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x8)))
 (let ((?x114 (bvand symbol.1 (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x114)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (and $x102 $x168)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x14 $x66)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x84 $x147)))
 (let (($x108 (not $x100)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x41 $x80)))
 (let (($x155 (and (not $x32) $x108)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x34 $x59)))
 (let (($x83 (not $x6)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x26 $x82)))
 (let (($x103 (and (not $x86) $x83)))
 (let (($x25 (and (and (and (and (and (and $x103 $x155) $x116) $x179) $x18) $x174) $x110)))
 (let (($x85 (and $x25 $x169)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x105 (and $x73 $x85)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x74) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x68 $x53)))))))
 (let (($x163 (and $x57 $x105)))
 (let (($x177 (= $x163 true)))
 (let (($x7 (= $x177 true)))
 (let (($x72 (= $x7 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x161 (and $x79 $x72)))
 (let (($x162 (and $x161 $x104)))
 (let (($x151 (and $x162 $x33)))
 (let (($x164 (and $x151 $x50)))
 (let (($x210 (and $x164 $x12)))
 (let (($x216 (and $x210 $x209)))
 (let (($x215 (and $x216 $x212)))
 (let (($x234 (and $x215 $x233)))
 (let (($x129 (and $x234 $x150)))
 (let (($x181 (and $x129 $x175)))
 (let (($x193 (and $x181 $x189)))
 (let (($x16 (and $x193 $x224)))
 (let (($x263 (and $x16 $x262)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x265 (and (not $x97) $x263)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x28 $x265)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x182 $x266)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x70 $x267)))
 (let (($x141 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x96 (=> (and $x60 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x141)))))
 (let (($x269 (and $x96 $x268)))
 (let (($x276 (=> $x269 $x275)))
 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x271 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x272 (bvneg ?x271)))
 (let (($x274 (= ?x272 ?x273)))
 (let (($x275 (= $x274 true)))
 (let (($x260 (forall ((input.ind-%var561X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var561X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var561X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var560X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var560X)))
 (= $x246 false)))
 ))
 (let (($x261 (and $x250 $x260)))
 (let (($x262 (= $x261 true)))
 (let (($x185 (forall ((input.ind-%var555X (_ BitVec 32)) )(let ((?x206 (bvadd symbol.1 (bvmul input.ind-%var555X (_ bv4 32)))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x206))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv2 32))) ?x239)))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv3 32))) ?x220)))
 (let ((?x56 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var555X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x165 (= ?x56 ?x152)))))))))
 ))
 (let (($x230 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var554X) (bvult input.ind-%var554X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x165 $x229))))
 ))
 (let (($x187 (and $x230 $x185)))
 (let (($x224 (= $x187 true)))
 (let ((?x117 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x117)))
 (let (($x188 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x186 (= $x188 true)))
 (let (($x189 (= $x186 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let (($x222 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (= $x219 true)))
 (let (($x214 (= $x213 true)))
 (let (($x212 (= $x214 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x223 (= $x211 true)))
 (let (($x227 (= $x223 true)))
 (let (($x209 (= $x227 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x124 (= $x55 true)))
 (let (($x30 (= $x124 true)))
 (let (($x12 (= $x30 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x92 (bvsub ?x183 ?x176)))
 (let (($x142 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x92) (bvult ?x183 ?x92))))
 (let ((?x166 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvmul (_ bv4 64) ?x166)))
 (let ((?x171 ((_ extract 63 32) ?x35)))
 (let (($x133 (= (_ bv0 32) ?x171)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x156 (and (and (and true $x180) $x133) $x142)))
 (let (($x119 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x52 (and $x119 $x156)))
 (let (($x123 (= true $x52)))
 (let (($x60 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (=> $x60 $x123)))
 (let (($x128 (= $x144 true)))
 (let (($x140 (= $x128 true)))
 (let (($x50 (= $x140 true)))
 (let (($x160 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x157 (= $x160 true)))
 (let (($x19 (= $x157 true)))
 (let (($x33 (= $x19 true)))
 (let (($x113 (= $x60 true)))
 (let (($x93 (= $x113 true)))
 (let (($x104 (= $x93 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x8)))
 (let ((?x114 (bvand symbol.1 (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x114)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (and $x102 $x168)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x14 $x66)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x84 $x147)))
 (let (($x108 (not $x100)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x41 $x80)))
 (let (($x155 (and (not $x32) $x108)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x34 $x59)))
 (let (($x83 (not $x6)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x26 $x82)))
 (let (($x103 (and (not $x86) $x83)))
 (let (($x25 (and (and (and (and (and (and $x103 $x155) $x116) $x179) $x18) $x174) $x110)))
 (let (($x85 (and $x25 $x169)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x105 (and $x73 $x85)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x74) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x68 $x53)))))))
 (let (($x163 (and $x57 $x105)))
 (let (($x177 (= $x163 true)))
 (let (($x7 (= $x177 true)))
 (let (($x72 (= $x7 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x161 (and $x79 $x72)))
 (let (($x162 (and $x161 $x104)))
 (let (($x151 (and $x162 $x33)))
 (let (($x164 (and $x151 $x50)))
 (let (($x210 (and $x164 $x12)))
 (let (($x216 (and $x210 $x209)))
 (let (($x215 (and $x216 $x212)))
 (let (($x234 (and $x215 $x233)))
 (let (($x129 (and $x234 $x150)))
 (let (($x181 (and $x129 $x175)))
 (let (($x193 (and $x181 $x189)))
 (let (($x16 (and $x193 $x224)))
 (let (($x263 (and $x16 $x262)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x265 (and (not $x97) $x263)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x28 $x265)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x182 $x266)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x70 $x267)))
 (let (($x141 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x96 (=> (and $x60 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x141)))))
 (let (($x269 (and $x96 $x268)))
 (let (($x276 (=> $x269 $x275)))
 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x248 (bvule ?x245 (_ bv3 32))))
 (let (($x135 (= $x248 true)))
 (let (($x9 (= $x135 true)))
 (let (($x23 (forall ((input.ind-%var573X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var573X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var573X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var572X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var572X)))
 (= $x255 false)))
 ))
 (let (($x238 (and $x197 $x23)))
 (let (($x203 (= $x238 true)))
 (let (($x46 (forall ((input.ind-%var567X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var567X (_ bv4 32)))))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x269)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x272)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var567X)))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var567X)))
 (=> $x229 (= ?x201 ?x275)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var566X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var566X) (bvult input.ind-%var566X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var566X)))
 (= $x229 $x127))))
 ))
 (let (($x38 (and $x240 $x46)))
 (let (($x75 (= $x38 true)))
 (let ((?x195 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x195)))
 (let (($x186 (= ?x188 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let (($x231 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x124)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x164)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x52 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x123 (= input.memlabel-mem--symbol.1_end ?x52)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (and $x142 $x123)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x5 $x144)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (and $x106 $x166)))
 (let (($x171 (not $x35)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x125 $x180)))
 (let (($x145 (and (not $x78) $x171)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x146 $x27)))
 (let (($x47 (not $x119)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x19 $x33)))
 (let (($x109 (and (not $x151) $x47)))
 (let (($x209 (and (and (and (and (and (and $x109 $x145) $x143) $x87) $x128) $x50) $x55)))
 (let (($x216 (and $x209 $x30)))
 (let (($x114 (= symbol.1 dst_symbol_addr.1)))
 (let (($x219 (and $x114 $x216)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x105 (or (bvugt input.memlabel-mem--symbol.1_begin ?x8) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x105) (or $x72 $x161)))))))
 (let (($x213 (and $x157 $x219)))
 (let (($x214 (= $x213 true)))
 (let (($x212 (= $x214 true)))
 (let (($x215 (= $x212 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x66 (= $x168 true)))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (= $x22 true)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x13 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x13 true)))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x147 (= $x84 true)))
 (let (($x100 (= $x147 true)))
 (let (($x108 (= $x100 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x149)))
 (let (($x41 (= ?x34 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (= $x41 true)))
 (let (($x32 (= $x80 true)))
 (let (($x59 (= ?x34 input.dst.llvm-%n)))
 (let (($x6 (= $x59 true)))
 (let (($x83 (= $x6 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x51 (bvsub ?x183 ?x176)))
 (let (($x37 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x51) (bvult ?x183 ?x51))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x44)))
 (let ((?x90 ((_ extract 63 32) ?x74)))
 (let (($x89 (= (_ bv0 32) ?x90)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x65) $x89) $x37)))
 (let (($x64 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x17 (and $x64 $x101)))
 (let (($x54 (= true $x17)))
 (let (($x60 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (=> $x60 $x54)))
 (let (($x77 (= $x57 true)))
 (let (($x73 (= $x77 true)))
 (let (($x26 (= $x73 true)))
 (let (($x45 (= $x60 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x82 (and $x71 $x26)))
 (let (($x103 (and $x82 $x83)))
 (let (($x99 (and $x103 $x32)))
 (let (($x155 (and $x99 $x108)))
 (let (($x179 (and $x155 $x49)))
 (let (($x120 (and $x179 $x94)))
 (let (($x137 (and $x120 $x138)))
 (let (($x222 (and $x137 $x215)))
 (let (($x242 (and $x222 $x234)))
 (let (($x48 (and $x242 $x129)))
 (let (($x117 (and $x48 $x181)))
 (let (($x112 (and $x117 $x193)))
 (let (($x121 (and $x112 $x75)))
 (let (($x199 (and $x121 $x203)))
 (let (($x264 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (and (not $x264) $x199)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x81 $x226)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x63 $x218)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x158 $x221)))
 (let (($x178 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x178)))))
 (let (($x21 (=> (and $x60 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x178)))))
 (let (($x244 (and $x21 $x200)))
 (let (($x256 (=> $x244 $x9)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x248 (bvule ?x245 (_ bv3 32))))
 (let (($x135 (= $x248 true)))
 (let (($x9 (= $x135 true)))
 (let (($x23 (forall ((input.ind-%var573X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var573X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var573X) (_ bv0 32)))))
 ))
 (let (($x197 (forall ((input.ind-%var572X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var572X)))
 (= $x255 false)))
 ))
 (let (($x238 (and $x197 $x23)))
 (let (($x203 (= $x238 true)))
 (let (($x46 (forall ((input.ind-%var567X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var567X (_ bv4 32)))))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x269)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x272)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var567X)))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var567X)))
 (=> $x229 (= ?x201 ?x275)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var566X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var566X) (bvult input.ind-%var566X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var566X)))
 (= $x229 $x127))))
 ))
 (let (($x38 (and $x240 $x46)))
 (let (($x75 (= $x38 true)))
 (let ((?x195 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x195)))
 (let (($x186 (= ?x188 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x107 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let (($x231 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x124)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x164)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x52 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x123 (= input.memlabel-mem--symbol.1_end ?x52)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (and $x142 $x123)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x5 $x144)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (and $x106 $x166)))
 (let (($x171 (not $x35)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x125 $x180)))
 (let (($x145 (and (not $x78) $x171)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x146 $x27)))
 (let (($x47 (not $x119)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x19 $x33)))
 (let (($x109 (and (not $x151) $x47)))
 (let (($x209 (and (and (and (and (and (and $x109 $x145) $x143) $x87) $x128) $x50) $x55)))
 (let (($x216 (and $x209 $x30)))
 (let (($x114 (= symbol.1 dst_symbol_addr.1)))
 (let (($x219 (and $x114 $x216)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x105 (or (bvugt input.memlabel-mem--symbol.1_begin ?x8) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x105) (or $x72 $x161)))))))
 (let (($x213 (and $x157 $x219)))
 (let (($x214 (= $x213 true)))
 (let (($x212 (= $x214 true)))
 (let (($x215 (= $x212 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x66 (= $x168 true)))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (= $x22 true)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x13 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x13 true)))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x147 (= $x84 true)))
 (let (($x100 (= $x147 true)))
 (let (($x108 (= $x100 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x34 (bvneg ?x149)))
 (let (($x41 (= ?x34 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (= $x41 true)))
 (let (($x32 (= $x80 true)))
 (let (($x59 (= ?x34 input.dst.llvm-%n)))
 (let (($x6 (= $x59 true)))
 (let (($x83 (= $x6 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x51 (bvsub ?x183 ?x176)))
 (let (($x37 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x51) (bvult ?x183 ?x51))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x44)))
 (let ((?x90 ((_ extract 63 32) ?x74)))
 (let (($x89 (= (_ bv0 32) ?x90)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x65) $x89) $x37)))
 (let (($x64 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x17 (and $x64 $x101)))
 (let (($x54 (= true $x17)))
 (let (($x60 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (=> $x60 $x54)))
 (let (($x77 (= $x57 true)))
 (let (($x73 (= $x77 true)))
 (let (($x26 (= $x73 true)))
 (let (($x45 (= $x60 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x82 (and $x71 $x26)))
 (let (($x103 (and $x82 $x83)))
 (let (($x99 (and $x103 $x32)))
 (let (($x155 (and $x99 $x108)))
 (let (($x179 (and $x155 $x49)))
 (let (($x120 (and $x179 $x94)))
 (let (($x137 (and $x120 $x138)))
 (let (($x222 (and $x137 $x215)))
 (let (($x242 (and $x222 $x234)))
 (let (($x48 (and $x242 $x129)))
 (let (($x117 (and $x48 $x181)))
 (let (($x112 (and $x117 $x193)))
 (let (($x121 (and $x112 $x75)))
 (let (($x199 (and $x121 $x203)))
 (let (($x264 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (and (not $x264) $x199)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x81 $x226)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x63 $x218)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x200 (and $x158 $x221)))
 (let (($x178 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x178)))))
 (let (($x21 (=> (and $x60 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x178)))))
 (let (($x244 (and $x21 $x200)))
 (let (($x256 (=> $x244 $x9)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13c00efc)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x0ffffff8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x13c00eff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x10000187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13c00efc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x0ffffff8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x0ffffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x0ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x0abeddc4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x694ef11c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x694ef11f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x0abedf53)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x694ef11c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x0abeddc4)
  (define-fun symbol.1 () (_ BitVec 32)
    #x0abeddc4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x0abeddc7 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x0abeddc6 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x0abeddc5 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x0abeddc4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!8 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x262 (bvule ?x194 (_ bv4 32))))
 (let (($x58 (= $x262 true)))
 (let (($x191 (= $x58 true)))
 (let (($x254 (forall ((input.ind-%var621X (_ BitVec 32)) )(let (($x236 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var621X)))
 (=> $x236 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var621X) (_ bv0 32)))))
 ))
 (let (($x207 (forall ((input.ind-%var620X (_ BitVec 32)) )(let (($x236 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var620X)))
 (= $x236 false)))
 ))
 (let (($x260 (and $x207 $x254)))
 (let (($x136 (= $x260 true)))
 (let (($x174 (forall ((input.ind-%var614X (_ BitVec 32)) )(let (($x11 (and (bvule (_ bv0 32) input.ind-%var614X) (bvult input.ind-%var614X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x127 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var614X)))
 (= $x127 $x11))))
 ))
 (let (($x221 (forall ((input.ind-%var615X (_ BitVec 32)) )(let ((?x121 (bvadd symbol.1 (bvmul input.ind-%var615X (_ bv4 32)))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x121))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv2 32))) ?x190)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv3 32))) ?x23)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var615X)))
 (let (($x127 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var615X)))
 (=> $x127 (= ?x201 ?x199)))))))))
 ))
 (let (($x225 (and $x221 $x174)))
 (let (($x239 (= $x225 true)))
 (let ((?x188 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x189 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x95 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x243 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let (($x232 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x50)))
 (let ((?x223 (bvand symbol.1 (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x223)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x142 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x142)))
 (let (($x211 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x211 $x156)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x87 $x52)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (and $x106 $x166)))
 (let (($x171 (not $x35)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x180 $x78)))
 (let (($x12 (and (not $x133) $x171)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x146 $x27)))
 (let (($x47 (not $x119)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x33 $x151)))
 (let (($x125 (and (not $x153) $x47)))
 (let (($x216 (and (and (and (and (and (and $x125 $x12) $x143) $x92) $x123) $x128) $x140)))
 (let (($x219 (and $x216 $x227)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x213 (and $x160 $x219)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x177 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x177) (or $x113 $x93)))))))
 (let (($x214 (and $x19 $x213)))
 (let (($x212 (= $x214 true)))
 (let (($x215 (= $x212 true)))
 (let (($x222 (= $x215 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (= $x168 true)))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x22 true)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x84)))
 (let (($x116 (= ?x147 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x100 (= ?x147 input.dst.llvm-%n)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x57 (bvsub ?x183 ?x176)))
 (let (($x82 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x57) (bvult ?x183 ?x57))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x37)))
 (let ((?x17 ((_ extract 63 32) ?x101)))
 (let (($x54 (= (_ bv0 32) ?x17)))
 (let (($x91 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x34 (and (and (and true $x91) $x54) $x82)))
 (let (($x90 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x59 (and $x90 $x34)))
 (let (($x6 (= true $x59)))
 (let (($x130 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (=> $x130 $x6)))
 (let (($x103 (= $x83 true)))
 (let (($x41 (= $x103 true)))
 (let (($x80 (= $x41 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x53 (= $x65 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x45 (= $x130 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x88 (and $x71 $x76)))
 (let (($x69 (and $x88 $x53)))
 (let (($x32 (and $x69 $x80)))
 (let (($x13 (and $x32 $x155)))
 (let (($x179 (and $x13 $x49)))
 (let (($x120 (and $x179 $x94)))
 (let (($x137 (and $x120 $x138)))
 (let (($x231 (and $x137 $x222)))
 (let (($x241 (and $x231 $x242)))
 (let (($x107 (and $x241 $x48)))
 (let (($x195 (and $x107 $x117)))
 (let (($x159 (and $x195 $x112)))
 (let (($x67 (and $x159 $x239)))
 (let (($x198 (and $x67 $x136)))
 (let (($x253 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and (not $x253) $x198)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x97 $x208)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x31 $x261)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x247 (and $x122 $x170)))
 (let (($x96 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x96)))))
 (let (($x39 (=> (and $x130 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x96)))))
 (let (($x43 (and $x39 $x247)))
 (let (($x202 (=> $x43 $x191)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x262 (bvule ?x194 (_ bv4 32))))
 (let (($x58 (= $x262 true)))
 (let (($x191 (= $x58 true)))
 (let (($x254 (forall ((input.ind-%var621X (_ BitVec 32)) )(let (($x236 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var621X)))
 (=> $x236 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var621X) (_ bv0 32)))))
 ))
 (let (($x207 (forall ((input.ind-%var620X (_ BitVec 32)) )(let (($x236 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var620X)))
 (= $x236 false)))
 ))
 (let (($x260 (and $x207 $x254)))
 (let (($x136 (= $x260 true)))
 (let (($x174 (forall ((input.ind-%var614X (_ BitVec 32)) )(let (($x11 (and (bvule (_ bv0 32) input.ind-%var614X) (bvult input.ind-%var614X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x127 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var614X)))
 (= $x127 $x11))))
 ))
 (let (($x221 (forall ((input.ind-%var615X (_ BitVec 32)) )(let ((?x121 (bvadd symbol.1 (bvmul input.ind-%var615X (_ bv4 32)))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x121))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv2 32))) ?x190)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv3 32))) ?x23)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var615X)))
 (let (($x127 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var615X)))
 (=> $x127 (= ?x201 ?x199)))))))))
 ))
 (let (($x225 (and $x221 $x174)))
 (let (($x239 (= $x225 true)))
 (let ((?x188 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x188)))
 (let (($x189 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x95 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x243 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let (($x232 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x50)))
 (let ((?x223 (bvand symbol.1 (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x223)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x142 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x142)))
 (let (($x211 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x211 $x156)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x87 $x52)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (and $x106 $x166)))
 (let (($x171 (not $x35)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x180 $x78)))
 (let (($x12 (and (not $x133) $x171)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x146 $x27)))
 (let (($x47 (not $x119)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x33 $x151)))
 (let (($x125 (and (not $x153) $x47)))
 (let (($x216 (and (and (and (and (and (and $x125 $x12) $x143) $x92) $x123) $x128) $x140)))
 (let (($x219 (and $x216 $x227)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x213 (and $x160 $x219)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x177 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x177) (or $x113 $x93)))))))
 (let (($x214 (and $x19 $x213)))
 (let (($x212 (= $x214 true)))
 (let (($x215 (= $x212 true)))
 (let (($x222 (= $x215 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (= $x168 true)))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x22 true)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let ((?x84 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x84)))
 (let (($x116 (= ?x147 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x100 (= ?x147 input.dst.llvm-%n)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x57 (bvsub ?x183 ?x176)))
 (let (($x82 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x57) (bvult ?x183 ?x57))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x37)))
 (let ((?x17 ((_ extract 63 32) ?x101)))
 (let (($x54 (= (_ bv0 32) ?x17)))
 (let (($x91 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x34 (and (and (and true $x91) $x54) $x82)))
 (let (($x90 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x59 (and $x90 $x34)))
 (let (($x6 (= true $x59)))
 (let (($x130 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (=> $x130 $x6)))
 (let (($x103 (= $x83 true)))
 (let (($x41 (= $x103 true)))
 (let (($x80 (= $x41 true)))
 (let (($x62 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x53 (= $x65 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x45 (= $x130 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x88 (and $x71 $x76)))
 (let (($x69 (and $x88 $x53)))
 (let (($x32 (and $x69 $x80)))
 (let (($x13 (and $x32 $x155)))
 (let (($x179 (and $x13 $x49)))
 (let (($x120 (and $x179 $x94)))
 (let (($x137 (and $x120 $x138)))
 (let (($x231 (and $x137 $x222)))
 (let (($x241 (and $x231 $x242)))
 (let (($x107 (and $x241 $x48)))
 (let (($x195 (and $x107 $x117)))
 (let (($x159 (and $x195 $x112)))
 (let (($x67 (and $x159 $x239)))
 (let (($x198 (and $x67 $x136)))
 (let (($x253 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and (not $x253) $x198)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x97 $x208)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x31 $x261)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x247 (and $x122 $x170)))
 (let (($x96 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x96)))))
 (let (($x39 (=> (and $x130 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x96)))))
 (let (($x43 (and $x39 $x247)))
 (let (($x202 (=> $x43 $x191)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xee280000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xeffffff0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xee280003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xf000017f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xee280000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xeffffff0)
  (define-fun symbol.1 () (_ BitVec 32)
    #xeffffff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #xeffffff3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xeffffff2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xeffffff1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xeffffff0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x800000d4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000263)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x800000d4)
  (define-fun symbol.1 () (_ BitVec 32)
    #x800000d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x800000d7 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x800000d6 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x800000d5 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x800000d4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!8 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x228 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x38 (bvule ?x228 (_ bv399 32))))
 (let (($x187 (= $x38 true)))
 (let (($x258 (= $x187 true)))
 (let (($x272 (forall ((input.ind-%var679X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var679X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var679X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var678X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var678X)))
 (= $x240 false)))
 ))
 (let (($x277 (and $x273 $x272)))
 (let (($x259 (= $x277 true)))
 (let (($x110 (forall ((input.ind-%var672X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var672X) (bvult input.ind-%var672X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var672X)))
 (= $x75 $x20))))
 ))
 (let (($x170 (forall ((input.ind-%var673X (_ BitVec 32)) )(let ((?x67 (bvadd symbol.1 (bvmul input.ind-%var673X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x67))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x67 (_ bv2 32))) ?x249)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x67 (_ bv3 32))) ?x254)))
 (let ((?x203 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var673X)))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var673X)))
 (=> $x75 (= ?x203 ?x198)))))))))
 ))
 (let (($x167 (and $x170 $x110)))
 (let (($x220 (= $x167 true)))
 (let ((?x186 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x186)))
 (let (($x193 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x195 (= $x117 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let (($x107 (= $x48 true)))
 (let (($x233 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x241 (= $x242 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x128)))
 (let ((?x124 (bvand symbol.1 (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x124)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x87 $x5)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x209 $x142)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x166 $x35)))
 (let (($x12 (not $x171)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x133 $x145)))
 (let (($x143 (and (not $x106) $x12)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x27 $x119)))
 (let (($x125 (not $x47)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x153 $x109)))
 (let (($x78 (and (not $x146) $x125)))
 (let (($x219 (and (and (and (and (and (and $x78 $x143) $x55) $x92) $x156) $x123) $x144)))
 (let (($x213 (and $x219 $x30)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x214 (and $x85 $x213)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x113 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x113) (or $x162 $x157)))))))
 (let (($x212 (and $x151 $x214)))
 (let (($x215 (= $x212 true)))
 (let (($x222 (= $x215 true)))
 (let (($x231 (= $x222 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x137 (= $x138 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x120 (= $x94 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x41)))
 (let (($x100 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let (($x32 (= ?x80 input.dst.llvm-%n)))
 (let (($x99 (= $x32 true)))
 (let (($x84 (= $x99 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x68 (bvsub ?x183 ?x176)))
 (let (($x54 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x68) (bvult ?x183 ?x68))))
 (let ((?x10 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x10)))
 (let ((?x91 ((_ extract 63 32) ?x51)))
 (let (($x86 (= (_ bv0 32) ?x91)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x40) $x86) $x54)))
 (let (($x53 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x53 $x57)))
 (let (($x26 (= true $x73)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x15 $x26)))
 (let (($x34 (= $x82 true)))
 (let (($x59 (= $x34 true)))
 (let (($x6 (= $x59 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x15 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x83 (and $x62 $x6)))
 (let (($x147 (and $x83 $x84)))
 (let (($x13 (and $x147 $x155)))
 (let (($x22 (and $x13 $x179)))
 (let (($x168 (and $x22 $x120)))
 (let (($x8 (and $x168 $x137)))
 (let (($x232 (and $x8 $x231)))
 (let (($x243 (and $x232 $x241)))
 (let (($x95 (and $x243 $x107)))
 (let (($x188 (and $x95 $x195)))
 (let (($x206 (and $x188 $x159)))
 (let (($x165 (and $x206 $x220)))
 (let (($x244 (and $x165 $x259)))
 (let (($x111 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and (not $x111) $x244)))
 (let (($x264 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (and $x264 $x9)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x205 (and $x28 $x46)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x204 (and $x182 $x205)))
 (let (($x21 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x98 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x21)))))
 (let (($x230 (and $x98 $x204)))
 (let (($x224 (=> $x230 $x258)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x228 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x38 (bvule ?x228 (_ bv399 32))))
 (let (($x187 (= $x38 true)))
 (let (($x258 (= $x187 true)))
 (let (($x272 (forall ((input.ind-%var679X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var679X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var679X) (_ bv0 32)))))
 ))
 (let (($x273 (forall ((input.ind-%var678X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var678X)))
 (= $x240 false)))
 ))
 (let (($x277 (and $x273 $x272)))
 (let (($x259 (= $x277 true)))
 (let (($x110 (forall ((input.ind-%var672X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var672X) (bvult input.ind-%var672X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var672X)))
 (= $x75 $x20))))
 ))
 (let (($x170 (forall ((input.ind-%var673X (_ BitVec 32)) )(let ((?x67 (bvadd symbol.1 (bvmul input.ind-%var673X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x67))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x67 (_ bv2 32))) ?x249)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x67 (_ bv3 32))) ?x254)))
 (let ((?x203 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var673X)))
 (let (($x75 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var673X)))
 (=> $x75 (= ?x203 ?x198)))))))))
 ))
 (let (($x167 (and $x170 $x110)))
 (let (($x220 (= $x167 true)))
 (let ((?x186 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x186)))
 (let (($x193 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x175 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x195 (= $x117 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let (($x107 (= $x48 true)))
 (let (($x233 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x241 (= $x242 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x128)))
 (let ((?x124 (bvand symbol.1 (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x124)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x87 $x5)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x209 $x142)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x166 $x35)))
 (let (($x12 (not $x171)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x133 $x145)))
 (let (($x143 (and (not $x106) $x12)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x27 $x119)))
 (let (($x125 (not $x47)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x153 $x109)))
 (let (($x78 (and (not $x146) $x125)))
 (let (($x219 (and (and (and (and (and (and $x78 $x143) $x55) $x92) $x156) $x123) $x144)))
 (let (($x213 (and $x219 $x30)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x214 (and $x85 $x213)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x113 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x113) (or $x162 $x157)))))))
 (let (($x212 (and $x151 $x214)))
 (let (($x215 (= $x212 true)))
 (let (($x222 (= $x215 true)))
 (let (($x231 (= $x222 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x137 (= $x138 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x120 (= $x94 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x41)))
 (let (($x100 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let (($x32 (= ?x80 input.dst.llvm-%n)))
 (let (($x99 (= $x32 true)))
 (let (($x84 (= $x99 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x68 (bvsub ?x183 ?x176)))
 (let (($x54 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x68) (bvult ?x183 ?x68))))
 (let ((?x10 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x10)))
 (let ((?x91 ((_ extract 63 32) ?x51)))
 (let (($x86 (= (_ bv0 32) ?x91)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x40) $x86) $x54)))
 (let (($x53 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x53 $x57)))
 (let (($x26 (= true $x73)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x15 $x26)))
 (let (($x34 (= $x82 true)))
 (let (($x59 (= $x34 true)))
 (let (($x6 (= $x59 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x15 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x83 (and $x62 $x6)))
 (let (($x147 (and $x83 $x84)))
 (let (($x13 (and $x147 $x155)))
 (let (($x22 (and $x13 $x179)))
 (let (($x168 (and $x22 $x120)))
 (let (($x8 (and $x168 $x137)))
 (let (($x232 (and $x8 $x231)))
 (let (($x243 (and $x232 $x241)))
 (let (($x95 (and $x243 $x107)))
 (let (($x188 (and $x95 $x195)))
 (let (($x206 (and $x188 $x159)))
 (let (($x165 (and $x206 $x220)))
 (let (($x244 (and $x165 $x259)))
 (let (($x111 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and (not $x111) $x244)))
 (let (($x264 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x46 (and $x264 $x9)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x205 (and $x28 $x46)))
 (let (($x182 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x204 (and $x182 $x205)))
 (let (($x21 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x98 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x21)))))
 (let (($x230 (and $x98 $x204)))
 (let (($x224 (=> $x230 $x258)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (bvsle ?x201 (_ bv399 32))))
 (let (($x270 (= $x225 true)))
 (let (($x275 (= $x270 true)))
 (let (($x252 (forall ((input.ind-%var691X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var691X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var691X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var690X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var690X)))
 (= $x238 false)))
 ))
 (let (($x132 (and $x196 $x252)))
 (let (($x276 (= $x132 true)))
 (let (($x169 (forall ((input.ind-%var685X (_ BitVec 32)) )(let ((?x9 (bvadd symbol.1 (bvmul input.ind-%var685X (_ bv4 32)))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x9))))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv2 32))) ?x230)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv3 32))) ?x187)))
 (let ((?x261 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var685X)))
 (let (($x239 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var685X)))
 (=> $x239 (= ?x261 ?x217)))))))))
 ))
 (let (($x249 (forall ((input.ind-%var684X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var684X) (bvult input.ind-%var684X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x239 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var684X)))
 (= $x239 $x207))))
 ))
 (let (($x121 (and $x249 $x169)))
 (let (($x268 (= $x121 true)))
 (let ((?x189 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x189)))
 (let (($x112 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x117 (= $x181 true)))
 (let (($x195 (= $x117 true)))
 (let (($x188 (= $x195 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x48 (= $x129 true)))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x242 (= $x234 true)))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x123)))
 (let ((?x50 (bvand symbol.1 (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x50)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x209 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x209)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x216 $x87)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x92 $x211)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x166 $x35)))
 (let (($x12 (not $x171)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x164 (and $x145 $x106)))
 (let (($x223 (and (not $x164) $x12)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x27 $x119)))
 (let (($x125 (not $x47)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x109 $x146)))
 (let (($x133 (and (not $x180) $x125)))
 (let (($x213 (and (and (and (and (and (and $x133 $x223) $x55) $x210) $x5) $x156) $x52)))
 (let (($x214 (and $x213 $x227)))
 (let (($x33 (= symbol.1 dst_symbol_addr.1)))
 (let (($x212 (and $x33 $x214)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x93 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x93) (or $x134 $x19)))))))
 (let (($x215 (and $x153 $x212)))
 (let (($x222 (= $x215 true)))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x137 (= $x138 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x120 (= $x94 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x41)))
 (let (($x100 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let (($x32 (= ?x80 input.dst.llvm-%n)))
 (let (($x99 (= $x32 true)))
 (let (($x84 (= $x99 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x86 (bvsub ?x183 ?x176)))
 (let (($x101 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x86) (bvult ?x183 ?x86))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvmul (_ bv4 64) ?x89)))
 (let ((?x51 ((_ extract 63 32) ?x10)))
 (let (($x91 (= (_ bv0 32) ?x51)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x40) $x91) $x101)))
 (let (($x53 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x53 $x57)))
 (let (($x26 (= true $x73)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x15 $x26)))
 (let (($x34 (= $x82 true)))
 (let (($x59 (= $x34 true)))
 (let (($x6 (= $x59 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x15 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x83 (and $x62 $x6)))
 (let (($x147 (and $x83 $x84)))
 (let (($x13 (and $x147 $x155)))
 (let (($x22 (and $x13 $x179)))
 (let (($x168 (and $x22 $x120)))
 (let (($x8 (and $x168 $x137)))
 (let (($x233 (and $x8 $x232)))
 (let (($x150 (and $x233 $x243)))
 (let (($x175 (and $x150 $x95)))
 (let (($x186 (and $x175 $x188)))
 (let (($x263 (and $x186 $x206)))
 (let (($x200 (and $x263 $x268)))
 (let (($x43 (and $x200 $x276)))
 (let (($x135 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and (not $x135) $x43)))
 (let (($x253 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x253 $x191)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x81 $x174)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x229 (and $x63 $x250)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x182 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x29 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x245 (and $x29 $x229)))
 (let (($x271 (=> $x245 $x275)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x225 (bvsle ?x201 (_ bv399 32))))
 (let (($x270 (= $x225 true)))
 (let (($x275 (= $x270 true)))
 (let (($x252 (forall ((input.ind-%var691X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var691X)))
 (=> $x238 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var691X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var690X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var690X)))
 (= $x238 false)))
 ))
 (let (($x132 (and $x196 $x252)))
 (let (($x276 (= $x132 true)))
 (let (($x169 (forall ((input.ind-%var685X (_ BitVec 32)) )(let ((?x9 (bvadd symbol.1 (bvmul input.ind-%var685X (_ bv4 32)))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x9))))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv2 32))) ?x230)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv3 32))) ?x187)))
 (let ((?x261 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var685X)))
 (let (($x239 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var685X)))
 (=> $x239 (= ?x261 ?x217)))))))))
 ))
 (let (($x249 (forall ((input.ind-%var684X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var684X) (bvult input.ind-%var684X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x239 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var684X)))
 (= $x239 $x207))))
 ))
 (let (($x121 (and $x249 $x169)))
 (let (($x268 (= $x121 true)))
 (let ((?x189 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x189)))
 (let (($x112 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x117 (= $x181 true)))
 (let (($x195 (= $x117 true)))
 (let (($x188 (= $x195 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x48 (= $x129 true)))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x242 (= $x234 true)))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x123)))
 (let ((?x50 (bvand symbol.1 (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x50)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x209 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x209)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x216 $x87)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x92 $x211)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x166 $x35)))
 (let (($x12 (not $x171)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x164 (and $x145 $x106)))
 (let (($x223 (and (not $x164) $x12)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x27 $x119)))
 (let (($x125 (not $x47)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x109 $x146)))
 (let (($x133 (and (not $x180) $x125)))
 (let (($x213 (and (and (and (and (and (and $x133 $x223) $x55) $x210) $x5) $x156) $x52)))
 (let (($x214 (and $x213 $x227)))
 (let (($x33 (= symbol.1 dst_symbol_addr.1)))
 (let (($x212 (and $x33 $x214)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x93 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x153 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x93) (or $x134 $x19)))))))
 (let (($x215 (and $x153 $x212)))
 (let (($x222 (= $x215 true)))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x137 (= $x138 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x120 (= $x94 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x41)))
 (let (($x100 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let (($x32 (= ?x80 input.dst.llvm-%n)))
 (let (($x99 (= $x32 true)))
 (let (($x84 (= $x99 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x86 (bvsub ?x183 ?x176)))
 (let (($x101 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x86) (bvult ?x183 ?x86))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x10 (bvmul (_ bv4 64) ?x89)))
 (let ((?x51 ((_ extract 63 32) ?x10)))
 (let (($x91 (= (_ bv0 32) ?x51)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x40) $x91) $x101)))
 (let (($x53 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x53 $x57)))
 (let (($x26 (= true $x73)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x15 $x26)))
 (let (($x34 (= $x82 true)))
 (let (($x59 (= $x34 true)))
 (let (($x6 (= $x59 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x15 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x83 (and $x62 $x6)))
 (let (($x147 (and $x83 $x84)))
 (let (($x13 (and $x147 $x155)))
 (let (($x22 (and $x13 $x179)))
 (let (($x168 (and $x22 $x120)))
 (let (($x8 (and $x168 $x137)))
 (let (($x233 (and $x8 $x232)))
 (let (($x150 (and $x233 $x243)))
 (let (($x175 (and $x150 $x95)))
 (let (($x186 (and $x175 $x188)))
 (let (($x263 (and $x186 $x206)))
 (let (($x200 (and $x263 $x268)))
 (let (($x43 (and $x200 $x276)))
 (let (($x135 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and (not $x135) $x43)))
 (let (($x253 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x253 $x191)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x81 $x174)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x229 (and $x63 $x250)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x182 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x29 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x245 (and $x29 $x229)))
 (let (($x271 (=> $x245 $x275)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x259 (bvsge ?x198 (_ bv0 32))))
 (let (($x190 (= $x259 true)))
 (let (($x256 (= $x190 true)))
 (let (($x266 (forall ((input.ind-%var703X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var703X)))
 (=> $x208 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var703X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var702X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var702X)))
 (= $x208 false)))
 ))
 (let (($x272 (and $x20 $x266)))
 (let (($x11 (= $x272 true)))
 (let (($x105 (forall ((input.ind-%var697X (_ BitVec 32)) )(let ((?x191 (bvadd symbol.1 (bvmul input.ind-%var697X (_ bv4 32)))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x191))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv2 32))) ?x245)))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv3 32))) ?x270)))
 (let ((?x46 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var697X)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var697X)))
 (=> $x207 (= ?x46 ?x192)))))))))
 ))
 (let (($x228 (forall ((input.ind-%var696X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var696X) (bvult input.ind-%var696X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var696X)))
 (= $x207 $x224))))
 ))
 (let (($x67 (and $x228 $x105)))
 (let (($x170 (= $x67 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x193)))
 (let (($x159 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x117 true)))
 (let (($x188 (= $x195 true)))
 (let (($x186 (= $x188 true)))
 (let (($x48 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x242 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x156)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x128)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x216 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x209 (and $x219 $x216)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x210 $x209)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x166 $x35)))
 (let (($x12 (not $x171)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (and $x106 $x164)))
 (let (($x124 (and (not $x143) $x12)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x27 $x119)))
 (let (($x125 (not $x47)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x146 $x180)))
 (let (($x145 (and (not $x78) $x125)))
 (let (($x214 (and (and (and (and (and (and $x145 $x124) $x55) $x140) $x87) $x5) $x142)))
 (let (($x212 (and $x214 $x30)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x215 (and $x85 $x212)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x161) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x25 $x160)))))))
 (let (($x222 (and $x109 $x215)))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x137 (= $x138 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x120 (= $x94 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x41)))
 (let (($x100 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let (($x32 (= ?x80 input.dst.llvm-%n)))
 (let (($x99 (= $x32 true)))
 (let (($x84 (= $x99 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x91 (bvsub ?x183 ?x176)))
 (let (($x37 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x91) (bvult ?x183 ?x91))))
 (let ((?x149 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x149)))
 (let ((?x10 ((_ extract 63 32) ?x89)))
 (let (($x51 (= (_ bv0 32) ?x10)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x40) $x51) $x37)))
 (let (($x53 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x53 $x57)))
 (let (($x26 (= true $x73)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x15 $x26)))
 (let (($x34 (= $x82 true)))
 (let (($x59 (= $x34 true)))
 (let (($x6 (= $x59 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x15 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x83 (and $x62 $x6)))
 (let (($x147 (and $x83 $x84)))
 (let (($x13 (and $x147 $x155)))
 (let (($x22 (and $x13 $x179)))
 (let (($x168 (and $x22 $x120)))
 (let (($x8 (and $x168 $x137)))
 (let (($x234 (and $x8 $x233)))
 (let (($x129 (and $x234 $x150)))
 (let (($x181 (and $x129 $x175)))
 (let (($x189 (and $x181 $x186)))
 (let (($x235 (and $x189 $x263)))
 (let (($x247 (and $x235 $x170)))
 (let (($x203 (and $x247 $x11)))
 (let (($x58 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and (not $x58) $x203)))
 (let (($x111 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x111 $x185)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x97 $x277)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x31 $x269)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x63 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x173 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x194 (and $x173 $x127)))
 (let (($x23 (=> $x194 $x256)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x259 (bvsge ?x198 (_ bv0 32))))
 (let (($x190 (= $x259 true)))
 (let (($x256 (= $x190 true)))
 (let (($x266 (forall ((input.ind-%var703X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var703X)))
 (=> $x208 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var703X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var702X (_ BitVec 32)) )(let (($x208 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var702X)))
 (= $x208 false)))
 ))
 (let (($x272 (and $x20 $x266)))
 (let (($x11 (= $x272 true)))
 (let (($x105 (forall ((input.ind-%var697X (_ BitVec 32)) )(let ((?x191 (bvadd symbol.1 (bvmul input.ind-%var697X (_ bv4 32)))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x191))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv2 32))) ?x245)))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv3 32))) ?x270)))
 (let ((?x46 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var697X)))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var697X)))
 (=> $x207 (= ?x46 ?x192)))))))))
 ))
 (let (($x228 (forall ((input.ind-%var696X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var696X) (bvult input.ind-%var696X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x207 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var696X)))
 (= $x207 $x224))))
 ))
 (let (($x67 (and $x228 $x105)))
 (let (($x170 (= $x67 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x193)))
 (let (($x159 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x117 true)))
 (let (($x188 (= $x195 true)))
 (let (($x186 (= $x188 true)))
 (let (($x48 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x242 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x156)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x128)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x216 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x209 (and $x219 $x216)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x210 $x209)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x166 $x35)))
 (let (($x12 (not $x171)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (and $x106 $x164)))
 (let (($x124 (and (not $x143) $x12)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x27 $x119)))
 (let (($x125 (not $x47)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x146 $x180)))
 (let (($x145 (and (not $x78) $x125)))
 (let (($x214 (and (and (and (and (and (and $x145 $x124) $x55) $x140) $x87) $x5) $x142)))
 (let (($x212 (and $x214 $x30)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x215 (and $x85 $x212)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x161) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x25 $x160)))))))
 (let (($x222 (and $x109 $x215)))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x66 true)))
 (let (($x138 (= $x18 true)))
 (let (($x137 (= $x138 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x14 true)))
 (let (($x94 (= $x102 true)))
 (let (($x120 (= $x94 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x116 true)))
 (let (($x49 (= $x131 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x41)))
 (let (($x100 (= ?x80 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x100 true)))
 (let (($x155 (= $x108 true)))
 (let (($x32 (= ?x80 input.dst.llvm-%n)))
 (let (($x99 (= $x32 true)))
 (let (($x84 (= $x99 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x91 (bvsub ?x183 ?x176)))
 (let (($x37 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x91) (bvult ?x183 ?x91))))
 (let ((?x149 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x149)))
 (let ((?x10 ((_ extract 63 32) ?x89)))
 (let (($x51 (= (_ bv0 32) ?x10)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x40) $x51) $x37)))
 (let (($x53 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x53 $x57)))
 (let (($x26 (= true $x73)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x15 $x26)))
 (let (($x34 (= $x82 true)))
 (let (($x59 (= $x34 true)))
 (let (($x6 (= $x59 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x15 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x83 (and $x62 $x6)))
 (let (($x147 (and $x83 $x84)))
 (let (($x13 (and $x147 $x155)))
 (let (($x22 (and $x13 $x179)))
 (let (($x168 (and $x22 $x120)))
 (let (($x8 (and $x168 $x137)))
 (let (($x234 (and $x8 $x233)))
 (let (($x129 (and $x234 $x150)))
 (let (($x181 (and $x129 $x175)))
 (let (($x189 (and $x181 $x186)))
 (let (($x235 (and $x189 $x263)))
 (let (($x247 (and $x235 $x170)))
 (let (($x203 (and $x247 $x11)))
 (let (($x58 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and (not $x58) $x203)))
 (let (($x111 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x111 $x185)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x97 $x277)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x31 $x269)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x63 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x173 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x194 (and $x173 $x127)))
 (let (($x23 (=> $x194 $x256)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (bvule ?x205 (_ bv399 32))))
 (let (($x167 (= $x276 true)))
 (let (($x246 (= $x167 true)))
 (let (($x218 (forall ((input.ind-%var715X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var715X)))
 (=> $x204 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var715X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var714X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var714X)))
 (= $x204 false)))
 ))
 (let (($x252 (and $x139 $x218)))
 (let (($x267 (= $x252 true)))
 (let (($x177 (forall ((input.ind-%var709X (_ BitVec 32)) )(let ((?x185 (bvadd symbol.1 (bvmul input.ind-%var709X (_ bv4 32)))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x185))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv2 32))) ?x194)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv3 32))) ?x190)))
 (let ((?x174 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var709X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var709X)))
 (=> $x224 (= ?x174 ?x274)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var708X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var708X) (bvult input.ind-%var708X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var708X)))
 (= $x224 $x271))))
 ))
 (let (($x236 (and $x201 $x177)))
 (let (($x230 (= $x236 true)))
 (let ((?x112 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x112)))
 (let (($x206 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x195 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x195 true)))
 (let (($x186 (= $x188 true)))
 (let (($x189 (= $x186 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x5 (bvsub ?x183 ?x176)))
 (let (($x214 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x5) (bvult ?x183 ?x5))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x209)))
 (let ((?x123 ((_ extract 63 32) ?x87)))
 (let (($x211 (= (_ bv0 32) ?x123)))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x212 (and (and (and true $x92) $x211) $x214)))
 (let (($x144 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x215 (and $x144 $x212)))
 (let (($x222 (= true $x215)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x15 $x222)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x171 (= $x35 true)))
 (let (($x12 (= $x171 true)))
 (let (($x124 (= $x12 true)))
 (let (($x164 (= $x15 true)))
 (let (($x143 (= $x164 true)))
 (let (($x223 (= $x143 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x153)))
 (let ((?x151 (bvand symbol.1 (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x151)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x162 $x134)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x93 $x157)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x66 $x18)))
 (let (($x137 (not $x138)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (and $x94 $x120)))
 (let (($x7 (and (not $x168) $x137)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x131 $x49)))
 (let (($x22 (not $x179)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x155 $x13)))
 (let (($x102 (and (not $x116) $x22)))
 (let (($x78 (and (and (and (and (and (and $x102 $x7) $x113) $x161) $x25) $x160) $x114)))
 (let (($x133 (and $x78 $x163)))
 (let (($x37 (= symbol.1 dst_symbol_addr.1)))
 (let (($x27 (and $x37 $x133)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x59 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x59) (or $x41 $x80)))))))
 (let (($x119 (and $x108 $x27)))
 (let (($x47 (= $x119 true)))
 (let (($x125 (= $x47 true)))
 (let (($x145 (= $x125 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x10 true)))
 (let (($x101 (= $x51 true)))
 (let (($x54 (= $x101 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x44 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x90 (and $x53 $x74)))
 (let (($x89 (and $x90 $x149)))
 (let (($x91 (and $x89 $x54)))
 (let (($x106 (and $x91 $x145)))
 (let (($x166 (and $x106 $x223)))
 (let (($x50 (and $x166 $x124)))
 (let (($x242 (and $x50 $x234)))
 (let (($x48 (and $x242 $x129)))
 (let (($x117 (and $x48 $x181)))
 (let (($x193 (and $x117 $x189)))
 (let (($x16 (and $x193 $x235)))
 (let (($x75 (and $x16 $x230)))
 (let (($x56 (and $x75 $x267)))
 (let (($x226 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x226) $x56)))
 (let (($x135 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x135 $x244)))
 (let (($x264 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x264 $x132)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x254 (and $x28 $x221)))
 (let (($x29 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x29)))))
 (let (($x172 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x29)))))
 (let (($x260 (and $x172 $x254)))
 (let (($x220 (=> $x260 $x246)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (bvule ?x205 (_ bv399 32))))
 (let (($x167 (= $x276 true)))
 (let (($x246 (= $x167 true)))
 (let (($x218 (forall ((input.ind-%var715X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var715X)))
 (=> $x204 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var715X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var714X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var714X)))
 (= $x204 false)))
 ))
 (let (($x252 (and $x139 $x218)))
 (let (($x267 (= $x252 true)))
 (let (($x177 (forall ((input.ind-%var709X (_ BitVec 32)) )(let ((?x185 (bvadd symbol.1 (bvmul input.ind-%var709X (_ bv4 32)))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x185))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv2 32))) ?x194)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv3 32))) ?x190)))
 (let ((?x174 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var709X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var709X)))
 (=> $x224 (= ?x174 ?x274)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var708X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var708X) (bvult input.ind-%var708X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var708X)))
 (= $x224 $x271))))
 ))
 (let (($x236 (and $x201 $x177)))
 (let (($x230 (= $x236 true)))
 (let ((?x112 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x112)))
 (let (($x206 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x195 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x195 true)))
 (let (($x186 (= $x188 true)))
 (let (($x189 (= $x186 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x5 (bvsub ?x183 ?x176)))
 (let (($x214 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x5) (bvult ?x183 ?x5))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x209)))
 (let ((?x123 ((_ extract 63 32) ?x87)))
 (let (($x211 (= (_ bv0 32) ?x123)))
 (let (($x92 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x212 (and (and (and true $x92) $x211) $x214)))
 (let (($x144 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x215 (and $x144 $x212)))
 (let (($x222 (= true $x215)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x15 $x222)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x171 (= $x35 true)))
 (let (($x12 (= $x171 true)))
 (let (($x124 (= $x12 true)))
 (let (($x164 (= $x15 true)))
 (let (($x143 (= $x164 true)))
 (let (($x223 (= $x143 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x153)))
 (let ((?x151 (bvand symbol.1 (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x151)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x162 $x134)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x93 $x157)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x66 $x18)))
 (let (($x137 (not $x138)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (and $x94 $x120)))
 (let (($x7 (and (not $x168) $x137)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x131 $x49)))
 (let (($x22 (not $x179)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x155 $x13)))
 (let (($x102 (and (not $x116) $x22)))
 (let (($x78 (and (and (and (and (and (and $x102 $x7) $x113) $x161) $x25) $x160) $x114)))
 (let (($x133 (and $x78 $x163)))
 (let (($x37 (= symbol.1 dst_symbol_addr.1)))
 (let (($x27 (and $x37 $x133)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x59 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x59) (or $x41 $x80)))))))
 (let (($x119 (and $x108 $x27)))
 (let (($x47 (= $x119 true)))
 (let (($x125 (= $x47 true)))
 (let (($x145 (= $x125 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x10 true)))
 (let (($x101 (= $x51 true)))
 (let (($x54 (= $x101 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x44 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x90 (and $x53 $x74)))
 (let (($x89 (and $x90 $x149)))
 (let (($x91 (and $x89 $x54)))
 (let (($x106 (and $x91 $x145)))
 (let (($x166 (and $x106 $x223)))
 (let (($x50 (and $x166 $x124)))
 (let (($x242 (and $x50 $x234)))
 (let (($x48 (and $x242 $x129)))
 (let (($x117 (and $x48 $x181)))
 (let (($x193 (and $x117 $x189)))
 (let (($x16 (and $x193 $x235)))
 (let (($x75 (and $x16 $x230)))
 (let (($x56 (and $x75 $x267)))
 (let (($x226 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x226) $x56)))
 (let (($x135 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x135 $x244)))
 (let (($x264 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x264 $x132)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x254 (and $x28 $x221)))
 (let (($x29 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x29)))))
 (let (($x172 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x29)))))
 (let (($x260 (and $x172 $x254)))
 (let (($x220 (=> $x260 $x246)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (bvsle ?x250 (_ bv399 32))))
 (let (($x121 (= $x11 true)))
 (let (($x255 (= $x121 true)))
 (let (($x248 (forall ((input.ind-%var727X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var727X)))
 (=> $x229 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var727X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var726X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var726X)))
 (= $x229 false)))
 ))
 (let (($x266 (and $x130 $x248)))
 (let (($x199 (= $x266 true)))
 (let (($x77 (forall ((input.ind-%var721X (_ BitVec 32)) )(let ((?x244 (bvadd symbol.1 (bvmul input.ind-%var721X (_ bv4 32)))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x260)))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x167)))
 (let ((?x277 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var721X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var721X)))
 (=> $x271 (= ?x277 ?x197)))))))))
 ))
 (let (($x198 (forall ((input.ind-%var720X (_ BitVec 32)) )(let (($x23 (and (bvule (_ bv0 32) input.ind-%var720X) (bvult input.ind-%var720X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var720X)))
 (= $x271 $x23))))
 ))
 (let (($x240 (and $x198 $x77)))
 (let (($x245 (= $x240 true)))
 (let ((?x159 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x159)))
 (let (($x263 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x188 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x188 true)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x243 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x30 (bvsub ?x183 ?x176)))
 (let (($x142 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x30) (bvult ?x183 ?x30))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x209)))
 (let ((?x123 ((_ extract 63 32) ?x87)))
 (let (($x211 (= (_ bv0 32) ?x123)))
 (let (($x156 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x215 (and (and (and true $x156) $x211) $x142)))
 (let (($x213 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x222 (and $x213 $x215)))
 (let (($x231 (= true $x222)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (=> $x15 $x231)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x12 (= $x171 true)))
 (let (($x124 (= $x12 true)))
 (let (($x50 (= $x124 true)))
 (let (($x143 (= $x15 true)))
 (let (($x223 (= $x143 true)))
 (let (($x166 (= $x223 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x160)))
 (let ((?x146 (bvand symbol.1 (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x146)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x93 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x162 (= input.memlabel-mem--symbol.1_end ?x93)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x85 $x162)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x161 $x104)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x66 $x18)))
 (let (($x137 (not $x138)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x120 $x168)))
 (let (($x109 (and (not $x8) $x137)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x131 $x49)))
 (let (($x22 (not $x179)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x13 $x116)))
 (let (($x94 (and (not $x14) $x22)))
 (let (($x133 (and (and (and (and (and (and $x94 $x109) $x113) $x33) $x134) $x25) $x19)))
 (let (($x27 (and $x133 $x180)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x119 (and $x100 $x27)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x34) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x32 $x99)))))))
 (let (($x47 (and $x155 $x119)))
 (let (($x125 (= $x47 true)))
 (let (($x145 (= $x125 true)))
 (let (($x106 (= $x145 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x10 true)))
 (let (($x101 (= $x51 true)))
 (let (($x54 (= $x101 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x44 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x90 (and $x53 $x74)))
 (let (($x89 (and $x90 $x149)))
 (let (($x91 (and $x89 $x54)))
 (let (($x164 (and $x91 $x106)))
 (let (($x35 (and $x164 $x166)))
 (let (($x55 (and $x35 $x50)))
 (let (($x241 (and $x55 $x242)))
 (let (($x107 (and $x241 $x48)))
 (let (($x195 (and $x107 $x117)))
 (let (($x112 (and $x195 $x193)))
 (let (($x9 (and $x112 $x16)))
 (let (($x239 (and $x9 $x245)))
 (let (($x258 (and $x239 $x199)))
 (let (($x251 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and (not $x251) $x258)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and $x58 $x43)))
 (let (($x253 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x253 $x272)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x81 $x273)))
 (let (($x173 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x28 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x173)))))
 (let (($x70 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x173)))))
 (let (($x249 (and $x70 $x38)))
 (let (($x268 (=> $x249 $x255)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (bvsle ?x250 (_ bv399 32))))
 (let (($x121 (= $x11 true)))
 (let (($x255 (= $x121 true)))
 (let (($x248 (forall ((input.ind-%var727X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var727X)))
 (=> $x229 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var727X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var726X (_ BitVec 32)) )(let (($x229 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var726X)))
 (= $x229 false)))
 ))
 (let (($x266 (and $x130 $x248)))
 (let (($x199 (= $x266 true)))
 (let (($x77 (forall ((input.ind-%var721X (_ BitVec 32)) )(let ((?x244 (bvadd symbol.1 (bvmul input.ind-%var721X (_ bv4 32)))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x260)))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x167)))
 (let ((?x277 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var721X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var721X)))
 (=> $x271 (= ?x277 ?x197)))))))))
 ))
 (let (($x198 (forall ((input.ind-%var720X (_ BitVec 32)) )(let (($x23 (and (bvule (_ bv0 32) input.ind-%var720X) (bvult input.ind-%var720X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var720X)))
 (= $x271 $x23))))
 ))
 (let (($x240 (and $x198 $x77)))
 (let (($x245 (= $x240 true)))
 (let ((?x159 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x159)))
 (let (($x263 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x188 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x188 true)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x95 true)))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x243 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x150 (= $x243 true)))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x30 (bvsub ?x183 ?x176)))
 (let (($x142 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x30) (bvult ?x183 ?x30))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x209)))
 (let ((?x123 ((_ extract 63 32) ?x87)))
 (let (($x211 (= (_ bv0 32) ?x123)))
 (let (($x156 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x215 (and (and (and true $x156) $x211) $x142)))
 (let (($x213 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x222 (and $x213 $x215)))
 (let (($x231 (= true $x222)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (=> $x15 $x231)))
 (let (($x233 (= $x232 true)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x12 (= $x171 true)))
 (let (($x124 (= $x12 true)))
 (let (($x50 (= $x124 true)))
 (let (($x143 (= $x15 true)))
 (let (($x223 (= $x143 true)))
 (let (($x166 (= $x223 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x160)))
 (let ((?x146 (bvand symbol.1 (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x146)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x93 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x162 (= input.memlabel-mem--symbol.1_end ?x93)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x85 $x162)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x161 $x104)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x66 $x18)))
 (let (($x137 (not $x138)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x120 $x168)))
 (let (($x109 (and (not $x8) $x137)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x131 $x49)))
 (let (($x22 (not $x179)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x13 $x116)))
 (let (($x94 (and (not $x14) $x22)))
 (let (($x133 (and (and (and (and (and (and $x94 $x109) $x113) $x33) $x134) $x25) $x19)))
 (let (($x27 (and $x133 $x180)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x119 (and $x100 $x27)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x34) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x32 $x99)))))))
 (let (($x47 (and $x155 $x119)))
 (let (($x125 (= $x47 true)))
 (let (($x145 (= $x125 true)))
 (let (($x106 (= $x145 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x10 true)))
 (let (($x101 (= $x51 true)))
 (let (($x54 (= $x101 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x44 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x90 (and $x53 $x74)))
 (let (($x89 (and $x90 $x149)))
 (let (($x91 (and $x89 $x54)))
 (let (($x164 (and $x91 $x106)))
 (let (($x35 (and $x164 $x166)))
 (let (($x55 (and $x35 $x50)))
 (let (($x241 (and $x55 $x242)))
 (let (($x107 (and $x241 $x48)))
 (let (($x195 (and $x107 $x117)))
 (let (($x112 (and $x195 $x193)))
 (let (($x9 (and $x112 $x16)))
 (let (($x239 (and $x9 $x245)))
 (let (($x258 (and $x239 $x199)))
 (let (($x251 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and (not $x251) $x258)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and $x58 $x43)))
 (let (($x253 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x253 $x272)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x81 $x273)))
 (let (($x173 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x28 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x173)))))
 (let (($x70 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x173)))))
 (let (($x249 (and $x70 $x38)))
 (let (($x268 (=> $x249 $x255)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (bvsge ?x269 (_ bv0 32))))
 (let (($x67 (= $x267 true)))
 (let (($x110 (= $x67 true)))
 (let (($x262 (forall ((input.ind-%var739X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var739X)))
 (=> $x127 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var739X) (_ bv0 32)))))
 ))
 (let (($x265 (forall ((input.ind-%var738X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var738X)))
 (= $x127 false)))
 ))
 (let (($x218 (and $x265 $x262)))
 (let (($x165 (= $x218 true)))
 (let (($x57 (forall ((input.ind-%var733X (_ BitVec 32)) )(let ((?x43 (bvadd symbol.1 (bvmul input.ind-%var733X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x43))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv2 32))) ?x249)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv3 32))) ?x121)))
 (let ((?x132 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var733X)))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var733X)))
 (=> $x23 (= ?x132 ?x154)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var732X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var732X) (bvult input.ind-%var732X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var732X)))
 (= $x23 $x220))))
 ))
 (let (($x238 (and $x205 $x57)))
 (let (($x194 (= $x238 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x263 (bvneg ?x206)))
 (let (($x235 (= ?x263 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x195 (= $x117 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let (($x107 (= $x48 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x212 (bvsub ?x183 ?x176)))
 (let (($x128 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x212) (bvult ?x183 ?x212))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x209)))
 (let ((?x123 ((_ extract 63 32) ?x87)))
 (let (($x211 (= (_ bv0 32) ?x123)))
 (let (($x214 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x222 (and (and (and true $x214) $x211) $x128)))
 (let (($x210 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x231 (and $x210 $x222)))
 (let (($x232 (= true $x231)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x15 $x232)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x241 (= $x242 true)))
 (let (($x12 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x124 (= $x12 true)))
 (let (($x50 (= $x124 true)))
 (let (($x55 (= $x50 true)))
 (let (($x223 (= $x15 true)))
 (let (($x166 (= $x223 true)))
 (let (($x35 (= $x166 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x25)))
 (let ((?x153 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x153)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (and $x78 $x85)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x33 $x93)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x66 $x18)))
 (let (($x137 (not $x138)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x168 $x8)))
 (let (($x151 (and (not $x7) $x137)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x131 $x49)))
 (let (($x22 (not $x179)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x116 $x14)))
 (let (($x120 (and (not $x102) $x22)))
 (let (($x27 (and (and (and (and (and (and $x120 $x151) $x113) $x72) $x162) $x134) $x157)))
 (let (($x119 (and $x27 $x163)))
 (let (($x37 (= symbol.1 dst_symbol_addr.1)))
 (let (($x47 (and $x37 $x119)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x84 $x147)))))))
 (let (($x125 (and $x13 $x47)))
 (let (($x145 (= $x125 true)))
 (let (($x106 (= $x145 true)))
 (let (($x164 (= $x106 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x10 true)))
 (let (($x101 (= $x51 true)))
 (let (($x54 (= $x101 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x44 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x90 (and $x53 $x74)))
 (let (($x89 (and $x90 $x149)))
 (let (($x91 (and $x89 $x54)))
 (let (($x143 (and $x91 $x164)))
 (let (($x171 (and $x143 $x35)))
 (let (($x52 (and $x171 $x55)))
 (let (($x243 (and $x52 $x241)))
 (let (($x95 (and $x243 $x107)))
 (let (($x188 (and $x95 $x195)))
 (let (($x159 (and $x188 $x112)))
 (let (($x191 (and $x159 $x9)))
 (let (($x207 (and $x191 $x194)))
 (let (($x275 (and $x207 $x165)))
 (let (($x187 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and (not $x187) $x275)))
 (let (($x226 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and $x226 $x203)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x111 $x252)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x225 (and $x97 $x196)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x158 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x228 (and $x158 $x225)))
 (let (($x170 (=> $x228 $x110)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (bvsge ?x269 (_ bv0 32))))
 (let (($x67 (= $x267 true)))
 (let (($x110 (= $x67 true)))
 (let (($x262 (forall ((input.ind-%var739X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var739X)))
 (=> $x127 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var739X) (_ bv0 32)))))
 ))
 (let (($x265 (forall ((input.ind-%var738X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var738X)))
 (= $x127 false)))
 ))
 (let (($x218 (and $x265 $x262)))
 (let (($x165 (= $x218 true)))
 (let (($x57 (forall ((input.ind-%var733X (_ BitVec 32)) )(let ((?x43 (bvadd symbol.1 (bvmul input.ind-%var733X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x43))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv2 32))) ?x249)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv3 32))) ?x121)))
 (let ((?x132 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var733X)))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var733X)))
 (=> $x23 (= ?x132 ?x154)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var732X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var732X) (bvult input.ind-%var732X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x23 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var732X)))
 (= $x23 $x220))))
 ))
 (let (($x238 (and $x205 $x57)))
 (let (($x194 (= $x238 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x263 (bvneg ?x206)))
 (let (($x235 (= ?x263 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x175 true)))
 (let (($x117 (= $x181 true)))
 (let (($x195 (= $x117 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x129 (= $x150 true)))
 (let (($x48 (= $x129 true)))
 (let (($x107 (= $x48 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x212 (bvsub ?x183 ?x176)))
 (let (($x128 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x212) (bvult ?x183 ?x212))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x209)))
 (let ((?x123 ((_ extract 63 32) ?x87)))
 (let (($x211 (= (_ bv0 32) ?x123)))
 (let (($x214 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x222 (and (and (and true $x214) $x211) $x128)))
 (let (($x210 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x231 (and $x210 $x222)))
 (let (($x232 (= true $x231)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x15 $x232)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x241 (= $x242 true)))
 (let (($x12 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x124 (= $x12 true)))
 (let (($x50 (= $x124 true)))
 (let (($x55 (= $x50 true)))
 (let (($x223 (= $x15 true)))
 (let (($x166 (= $x223 true)))
 (let (($x35 (= $x166 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x25)))
 (let ((?x153 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x153)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (and $x78 $x85)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x33 $x93)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x66 $x18)))
 (let (($x137 (not $x138)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x168 $x8)))
 (let (($x151 (and (not $x7) $x137)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x131 $x49)))
 (let (($x22 (not $x179)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x116 $x14)))
 (let (($x120 (and (not $x102) $x22)))
 (let (($x27 (and (and (and (and (and (and $x120 $x151) $x113) $x72) $x162) $x134) $x157)))
 (let (($x119 (and $x27 $x163)))
 (let (($x37 (= symbol.1 dst_symbol_addr.1)))
 (let (($x47 (and $x37 $x119)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x84 $x147)))))))
 (let (($x125 (and $x13 $x47)))
 (let (($x145 (= $x125 true)))
 (let (($x106 (= $x145 true)))
 (let (($x164 (= $x106 true)))
 (let (($x10 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x10 true)))
 (let (($x101 (= $x51 true)))
 (let (($x54 (= $x101 true)))
 (let (($x40 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x44 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x90 (and $x53 $x74)))
 (let (($x89 (and $x90 $x149)))
 (let (($x91 (and $x89 $x54)))
 (let (($x143 (and $x91 $x164)))
 (let (($x171 (and $x143 $x35)))
 (let (($x52 (and $x171 $x55)))
 (let (($x243 (and $x52 $x241)))
 (let (($x95 (and $x243 $x107)))
 (let (($x188 (and $x95 $x195)))
 (let (($x159 (and $x188 $x112)))
 (let (($x191 (and $x159 $x9)))
 (let (($x207 (and $x191 $x194)))
 (let (($x275 (and $x207 $x165)))
 (let (($x187 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and (not $x187) $x275)))
 (let (($x226 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and $x226 $x203)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x111 $x252)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x225 (and $x97 $x196)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x158 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x228 (and $x158 $x225)))
 (let (($x170 (=> $x228 $x110)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x199 (bvule ?x221 input.dst.llvm-%n)))
 (let (($x236 (= $x199 true)))
 (let (($x169 (= $x236 true)))
 (let (($x136 (forall ((input.ind-%var751X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var751X)))
 (=> $x254 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var751X) (_ bv0 32)))))
 ))
 (let (($x237 (forall ((input.ind-%var750X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var750X)))
 (= $x254 false)))
 ))
 (let (($x248 (and $x237 $x136)))
 (let (($x200 (= $x248 true)))
 (let (($x26 (forall ((input.ind-%var745X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var745X (_ bv4 32)))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x228)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x67)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var745X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var745X)))
 (=> $x220 (= ?x272 ?x126)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var744X (_ BitVec 32)) )(let (($x268 (and (bvule (_ bv0 32) input.ind-%var744X) (bvult input.ind-%var744X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var744X)))
 (= $x220 $x268))))
 ))
 (let (($x208 (and $x250 $x26)))
 (let (($x260 (= $x208 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x263)))
 (let (($x16 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x16 true)))
 (let (($x191 (= $x9 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x193 (= ?x88 input.dst.llvm-%n)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x117 true)))
 (let (($x188 (= $x195 true)))
 (let (($x186 (= $x188 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x209 (bvsub ?x183 ?x176)))
 (let (($x215 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x209) (bvult ?x183 ?x209))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x214 (bvmul (_ bv4 64) ?x156)))
 (let ((?x142 ((_ extract 63 32) ?x214)))
 (let (($x216 (= (_ bv0 32) ?x142)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x30 (and (and (and true $x140) $x216) $x215)))
 (let (($x52 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x5 (and $x52 $x30)))
 (let (($x128 (= true $x5)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (=> $x15 $x128)))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x166 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x35 (= $x166 true)))
 (let (($x171 (= $x35 true)))
 (let (($x12 (= $x171 true)))
 (let (($x106 (= $x15 true)))
 (let (($x164 (= $x106 true)))
 (let (($x143 (= $x164 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x93)))
 (let ((?x161 (bvand symbol.1 (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x161)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x19 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x114 (= input.memlabel-mem--symbol.1_end ?x19)))
 (let (($x113 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x72 (and $x113 $x114)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x146 $x72)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x168 $x8)))
 (let (($x109 (not $x7)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x179 $x22)))
 (let (($x18 (and (not $x120) $x109)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x116 $x14)))
 (let (($x94 (not $x102)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x82)))
 (let (($x49 (and (not $x37) $x94)))
 (let (($x157 (and (and (and (and (and (and $x49 $x18) $x138) $x151) $x133) $x78) $x85)))
 (let (($x27 (and $x157 $x162)))
 (let (($x54 (= symbol.1 dst_symbol_addr.1)))
 (let (($x25 (and $x54 $x27)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x80 $x84)))))))
 (let (($x163 (and $x73 $x25)))
 (let (($x119 (= $x163 true)))
 (let (($x47 (= $x119 true)))
 (let (($x125 (= $x47 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let (($x89 (= $x149 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x90 (= $x74 true)))
 (let (($x62 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x40 (and $x53 $x90)))
 (let (($x10 (and $x40 $x89)))
 (let (($x145 (and $x10 $x125)))
 (let (($x223 (and $x145 $x143)))
 (let (($x124 (and $x223 $x12)))
 (let (($x234 (and $x124 $x233)))
 (let (($x129 (and $x234 $x150)))
 (let (($x181 (and $x129 $x175)))
 (let (($x189 (and $x181 $x186)))
 (let (($x206 (and $x189 $x159)))
 (let (($x185 (and $x206 $x191)))
 (let (($x224 (and $x185 $x260)))
 (let (($x256 (and $x224 $x200)))
 (let (($x270 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and (not $x270) $x256)))
 (let (($x251 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x251 $x56)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x20 (and $x135 $x266)))
 (let (($x264 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x264 $x20)))
 (let (($x70 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x122 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x70)))))
 (let (($x201 (and $x122 $x259)))
 (let (($x230 (=> $x201 $x169)))
 (not $x230))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x199 (bvule ?x221 input.dst.llvm-%n)))
 (let (($x236 (= $x199 true)))
 (let (($x169 (= $x236 true)))
 (let (($x136 (forall ((input.ind-%var751X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var751X)))
 (=> $x254 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var751X) (_ bv0 32)))))
 ))
 (let (($x237 (forall ((input.ind-%var750X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var750X)))
 (= $x254 false)))
 ))
 (let (($x248 (and $x237 $x136)))
 (let (($x200 (= $x248 true)))
 (let (($x26 (forall ((input.ind-%var745X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var745X (_ bv4 32)))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x228)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x67)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var745X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var745X)))
 (=> $x220 (= ?x272 ?x126)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var744X (_ BitVec 32)) )(let (($x268 (and (bvule (_ bv0 32) input.ind-%var744X) (bvult input.ind-%var744X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var744X)))
 (= $x220 $x268))))
 ))
 (let (($x208 (and $x250 $x26)))
 (let (($x260 (= $x208 true)))
 (let ((?x263 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x263)))
 (let (($x16 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x16 true)))
 (let (($x191 (= $x9 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x193 (= ?x88 input.dst.llvm-%n)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x117 true)))
 (let (($x188 (= $x195 true)))
 (let (($x186 (= $x188 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x48 true)))
 (let (($x95 (= $x107 true)))
 (let (($x175 (= $x95 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x241 (= $x242 true)))
 (let (($x243 (= $x241 true)))
 (let (($x150 (= $x243 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x209 (bvsub ?x183 ?x176)))
 (let (($x215 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x209) (bvult ?x183 ?x209))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x214 (bvmul (_ bv4 64) ?x156)))
 (let ((?x142 ((_ extract 63 32) ?x214)))
 (let (($x216 (= (_ bv0 32) ?x142)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x30 (and (and (and true $x140) $x216) $x215)))
 (let (($x52 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x5 (and $x52 $x30)))
 (let (($x128 (= true $x5)))
 (let (($x15 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (=> $x15 $x128)))
 (let (($x231 (= $x222 true)))
 (let (($x232 (= $x231 true)))
 (let (($x233 (= $x232 true)))
 (let (($x166 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x35 (= $x166 true)))
 (let (($x171 (= $x35 true)))
 (let (($x12 (= $x171 true)))
 (let (($x106 (= $x15 true)))
 (let (($x164 (= $x106 true)))
 (let (($x143 (= $x164 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x93)))
 (let ((?x161 (bvand symbol.1 (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x161)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x19 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x114 (= input.memlabel-mem--symbol.1_end ?x19)))
 (let (($x113 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x72 (and $x113 $x114)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x146 $x72)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x168 $x8)))
 (let (($x109 (not $x7)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x179 $x22)))
 (let (($x18 (and (not $x120) $x109)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x116 $x14)))
 (let (($x94 (not $x102)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x82)))
 (let (($x49 (and (not $x37) $x94)))
 (let (($x157 (and (and (and (and (and (and $x49 $x18) $x138) $x151) $x133) $x78) $x85)))
 (let (($x27 (and $x157 $x162)))
 (let (($x54 (= symbol.1 dst_symbol_addr.1)))
 (let (($x25 (and $x54 $x27)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x80 $x84)))))))
 (let (($x163 (and $x73 $x25)))
 (let (($x119 (= $x163 true)))
 (let (($x47 (= $x119 true)))
 (let (($x125 (= $x47 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x68 true)))
 (let (($x149 (= $x17 true)))
 (let (($x89 (= $x149 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x69 (= $x44 true)))
 (let (($x74 (= $x69 true)))
 (let (($x90 (= $x74 true)))
 (let (($x62 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x62 true)))
 (let (($x65 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x53 (and $x36 $x65)))
 (let (($x40 (and $x53 $x90)))
 (let (($x10 (and $x40 $x89)))
 (let (($x145 (and $x10 $x125)))
 (let (($x223 (and $x145 $x143)))
 (let (($x124 (and $x223 $x12)))
 (let (($x234 (and $x124 $x233)))
 (let (($x129 (and $x234 $x150)))
 (let (($x181 (and $x129 $x175)))
 (let (($x189 (and $x181 $x186)))
 (let (($x206 (and $x189 $x159)))
 (let (($x185 (and $x206 $x191)))
 (let (($x224 (and $x185 $x260)))
 (let (($x256 (and $x224 $x200)))
 (let (($x270 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and (not $x270) $x256)))
 (let (($x251 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x251 $x56)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x20 (and $x135 $x266)))
 (let (($x264 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x264 $x20)))
 (let (($x70 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x70)))))
 (let (($x122 (=> (and $x15 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x70)))))
 (let (($x201 (and $x122 $x259)))
 (let (($x230 (=> $x201 $x169)))
 (not $x230))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x327 (forall ((input.ind-%var775X (_ BitVec 32)) )(let ((?x56 (bvadd symbol.1 (bvmul input.ind-%var775X (_ bv4 32)))))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x70 (bvadd ?x183 (_ bv3 32))))
 (let ((?x294 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x183 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x297 (store ?x294 (bvadd ?x183 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x300 (store ?x297 (bvadd ?x183 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (store ?x300 ?x70 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x321 (concat (select ?x302 (bvadd ?x56 (_ bv2 32))) (concat (select ?x302 (bvadd ?x56 (_ bv1 32))) (select ?x302 ?x56)))))
 (let ((?x252 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var775X)))
 (let (($x282 (= input.ind-%var775X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (= (ite $x282 input.spec-%var-i-0.L3%6%bbentry ?x252) (concat (select ?x302 (bvadd ?x56 (_ bv3 32))) ?x321))))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var775X)))
 (let (($x283 (or $x268 $x282)))
 (=> $x283 $x325))))))))))))))))
 ))
 (let (($x285 (forall ((input.ind-%var774X (_ BitVec 32)) )(let (($x110 (bvule (_ bv0 32) input.ind-%var774X)))
 (let (($x281 (and $x110 (bvult input.ind-%var774X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x282 (= input.ind-%var774X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var774X)))
 (let (($x283 (or $x268 $x282)))
 (= $x283 $x281)))))))
 ))
 (let (($x328 (and $x285 $x327)))
 (let (($x273 (= true true)))
 (let (($x329 (and $x273 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x261 (forall ((input.ind-%var767X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var767X)))
 (=> $x38 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var767X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var766X)))
 (= $x38 false)))
 ))
 (let (($x262 (and $x202 $x261)))
 (let (($x247 (= $x262 true)))
 (let (($x51 (forall ((input.ind-%var761X (_ BitVec 32)) )(let ((?x56 (bvadd symbol.1 (bvmul input.ind-%var761X (_ bv4 32)))))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x56))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv2 32))) ?x201)))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv3 32))) ?x236)))
 (let ((?x252 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var761X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x268 (= ?x252 ?x148)))))))))
 ))
 (let (($x269 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x110 (bvule (_ bv0 32) input.ind-%var760X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x268 (and $x110 (bvult input.ind-%var760X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x204 (and $x269 $x51)))
 (let (($x249 (= $x204 true)))
 (let ((?x235 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x235)))
 (let (($x9 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x9 true)))
 (let (($x185 (= $x191 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x48)))
 (let ((?x150 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x150)))
 (let ((?x241 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x241)))
 (let ((?x232 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x233 (= input.memlabel-mem--symbol.1_end ?x232)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x234 (and $x231 $x233)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x222 $x234)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x209 (and $x212 $x87)))
 (let (($x123 (not $x209)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x216 (and $x214 $x142)))
 (let (($x215 (and (not $x216) $x123)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x210 $x219)))
 (let (($x227 (not $x140)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x52 $x213)))
 (let (($x156 (and (not $x144) $x227)))
 (let (($x188 (and (and (and (and (and (and $x156 $x215) $x30) $x128) $x242) $x243) $x129)))
 (let (($x186 (and $x188 $x107)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x27 $x186)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x119) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x223 $x166)))))))
 (let (($x193 (and $x55 $x189)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x78 true)))
 (let (($x161 (= $x153 true)))
 (let (($x85 (= $x161 true)))
 (let (($x114 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x72 (= $x114 true)))
 (let (($x133 (= $x72 true)))
 (let (($x180 (= $x133 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x151 true)))
 (let (($x146 (= $x134 true)))
 (let (($x113 (= $x146 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x18 true)))
 (let (($x138 (= $x160 true)))
 (let (($x104 (= $x138 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x168 (= $x66 true)))
 (let (($x8 (= $x168 true)))
 (let (($x7 (= $x8 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x73 (bvsub ?x183 ?x176)))
 (let (($x82 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x73) (bvult ?x183 ?x73))))
 (let ((?x99 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x99)))
 (let ((?x108 ((_ extract 63 32) ?x147)))
 (let (($x86 (= (_ bv0 32) ?x108)))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x116 (and (and (and true $x32) $x86) $x82)))
 (let (($x6 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x14 (and $x6 $x116)))
 (let (($x102 (= true $x14)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (=> $x197 $x102)))
 (let (($x49 (= $x94 true)))
 (let (($x179 (= $x49 true)))
 (let (($x22 (= $x179 true)))
 (let (($x89 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x89 true)))
 (let (($x91 (= $x10 true)))
 (let (($x34 (= $x91 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x40 (= $x90 true)))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x65 (= $x197 true)))
 (let (($x53 (= $x65 true)))
 (let (($x44 (= $x53 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x76 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x69 (and $x79 $x44)))
 (let (($x149 (and $x69 $x17)))
 (let (($x155 (and $x149 $x34)))
 (let (($x120 (and $x155 $x22)))
 (let (($x109 (and $x120 $x7)))
 (let (($x137 (and $x109 $x104)))
 (let (($x19 (and $x137 $x113)))
 (let (($x33 (and $x19 $x180)))
 (let (($x157 (and $x33 $x85)))
 (let (($x263 (and $x157 $x206)))
 (let (($x244 (and $x263 $x185)))
 (let (($x271 (and $x244 $x249)))
 (let (($x246 (and $x271 $x247)))
 (let (($x190 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and (not $x190) $x246)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x187 $x258)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x58 $x218)))
 (let (($x253 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x276 (and $x253 $x139)))
 (let (($x158 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x264 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x158)))))
 (let (($x182 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x158)))))
 (let (($x198 (and $x182 $x276)))
 (let (($x331 (=> $x198 $x330)))
 (not $x331))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x327 (forall ((input.ind-%var775X (_ BitVec 32)) )(let ((?x56 (bvadd symbol.1 (bvmul input.ind-%var775X (_ bv4 32)))))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x70 (bvadd ?x183 (_ bv3 32))))
 (let ((?x294 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x183 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x297 (store ?x294 (bvadd ?x183 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x300 (store ?x297 (bvadd ?x183 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (store ?x300 ?x70 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x321 (concat (select ?x302 (bvadd ?x56 (_ bv2 32))) (concat (select ?x302 (bvadd ?x56 (_ bv1 32))) (select ?x302 ?x56)))))
 (let ((?x252 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var775X)))
 (let (($x282 (= input.ind-%var775X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x325 (= (ite $x282 input.spec-%var-i-0.L3%6%bbentry ?x252) (concat (select ?x302 (bvadd ?x56 (_ bv3 32))) ?x321))))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var775X)))
 (let (($x283 (or $x268 $x282)))
 (=> $x283 $x325))))))))))))))))
 ))
 (let (($x285 (forall ((input.ind-%var774X (_ BitVec 32)) )(let (($x110 (bvule (_ bv0 32) input.ind-%var774X)))
 (let (($x281 (and $x110 (bvult input.ind-%var774X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x282 (= input.ind-%var774X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var774X)))
 (let (($x283 (or $x268 $x282)))
 (= $x283 $x281)))))))
 ))
 (let (($x328 (and $x285 $x327)))
 (let (($x273 (= true true)))
 (let (($x329 (and $x273 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x261 (forall ((input.ind-%var767X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var767X)))
 (=> $x38 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var767X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var766X)))
 (= $x38 false)))
 ))
 (let (($x262 (and $x202 $x261)))
 (let (($x247 (= $x262 true)))
 (let (($x51 (forall ((input.ind-%var761X (_ BitVec 32)) )(let ((?x56 (bvadd symbol.1 (bvmul input.ind-%var761X (_ bv4 32)))))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x56))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv2 32))) ?x201)))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv3 32))) ?x236)))
 (let ((?x252 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var761X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x268 (= ?x252 ?x148)))))))))
 ))
 (let (($x269 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x110 (bvule (_ bv0 32) input.ind-%var760X)))
 (let (($x268 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x268 (and $x110 (bvult input.ind-%var760X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x204 (and $x269 $x51)))
 (let (($x249 (= $x204 true)))
 (let ((?x235 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x235)))
 (let (($x9 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x191 (= $x9 true)))
 (let (($x185 (= $x191 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x48)))
 (let ((?x150 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x150)))
 (let ((?x241 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x241)))
 (let ((?x232 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x233 (= input.memlabel-mem--symbol.1_end ?x232)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x234 (and $x231 $x233)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x222 $x234)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x209 (and $x212 $x87)))
 (let (($x123 (not $x209)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x216 (and $x214 $x142)))
 (let (($x215 (and (not $x216) $x123)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x210 $x219)))
 (let (($x227 (not $x140)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x52 $x213)))
 (let (($x156 (and (not $x144) $x227)))
 (let (($x188 (and (and (and (and (and (and $x156 $x215) $x30) $x128) $x242) $x243) $x129)))
 (let (($x186 (and $x188 $x107)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x27 $x186)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x119) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x223 $x166)))))))
 (let (($x193 (and $x55 $x189)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x78 true)))
 (let (($x161 (= $x153 true)))
 (let (($x85 (= $x161 true)))
 (let (($x114 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x72 (= $x114 true)))
 (let (($x133 (= $x72 true)))
 (let (($x180 (= $x133 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x151 true)))
 (let (($x146 (= $x134 true)))
 (let (($x113 (= $x146 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x18 true)))
 (let (($x138 (= $x160 true)))
 (let (($x104 (= $x138 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x168 (= $x66 true)))
 (let (($x8 (= $x168 true)))
 (let (($x7 (= $x8 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x73 (bvsub ?x183 ?x176)))
 (let (($x82 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x73) (bvult ?x183 ?x73))))
 (let ((?x99 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x99)))
 (let ((?x108 ((_ extract 63 32) ?x147)))
 (let (($x86 (= (_ bv0 32) ?x108)))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x116 (and (and (and true $x32) $x86) $x82)))
 (let (($x6 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x14 (and $x6 $x116)))
 (let (($x102 (= true $x14)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (=> $x197 $x102)))
 (let (($x49 (= $x94 true)))
 (let (($x179 (= $x49 true)))
 (let (($x22 (= $x179 true)))
 (let (($x89 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x89 true)))
 (let (($x91 (= $x10 true)))
 (let (($x34 (= $x91 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x40 (= $x90 true)))
 (let (($x68 (= $x40 true)))
 (let (($x17 (= $x68 true)))
 (let (($x65 (= $x197 true)))
 (let (($x53 (= $x65 true)))
 (let (($x44 (= $x53 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x76 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x69 (and $x79 $x44)))
 (let (($x149 (and $x69 $x17)))
 (let (($x155 (and $x149 $x34)))
 (let (($x120 (and $x155 $x22)))
 (let (($x109 (and $x120 $x7)))
 (let (($x137 (and $x109 $x104)))
 (let (($x19 (and $x137 $x113)))
 (let (($x33 (and $x19 $x180)))
 (let (($x157 (and $x33 $x85)))
 (let (($x263 (and $x157 $x206)))
 (let (($x244 (and $x263 $x185)))
 (let (($x271 (and $x244 $x249)))
 (let (($x246 (and $x271 $x247)))
 (let (($x190 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and (not $x190) $x246)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and $x187 $x258)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x58 $x218)))
 (let (($x253 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x276 (and $x253 $x139)))
 (let (($x158 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x264 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x158)))))
 (let (($x182 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x158)))))
 (let (($x198 (and $x182 $x276)))
 (let (($x331 (=> $x198 $x330)))
 (not $x331))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x228 (bvmul (_ bv4294967295 32) ?x229)))
 (let ((?x23 (bvneg ?x228)))
 (let (($x24 (= ?x23 ?x265)))
 (let (($x267 (= $x24 true)))
 (let (($x326 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var787X)))
 (=> $x297 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var787X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var786X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var786X)))
 (= $x297 false)))
 ))
 (let (($x327 (and $x301 $x326)))
 (let (($x328 (= $x327 true)))
 (let (($x324 (forall ((input.ind-%var781X (_ BitVec 32)) )(let ((?x258 (bvadd symbol.1 (bvmul input.ind-%var781X (_ bv4 32)))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x198)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x283)))
 (let ((?x266 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var781X)))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var781X)))
 (=> $x170 (= ?x266 ?x281)))))))))
 ))
 (let (($x221 (forall ((input.ind-%var780X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var780X) (bvult input.ind-%var780X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var780X)))
 (= $x170 $x230))))
 ))
 (let (($x293 (and $x221 $x324)))
 (let (($x292 (= $x293 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x16)))
 (let (($x191 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x191 true)))
 (let (($x244 (= $x185 true)))
 (let (($x112 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x48 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x107 (= $x48 true)))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let (($x243 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x243 true)))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x117 (= $x242 true)))
 (let (($x128 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x181 (= $x128 true)))
 (let (($x222 (= $x181 true)))
 (let (($x231 (= $x222 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x227 (bvsub ?x183 ?x176)))
 (let (($x216 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x227) (bvult ?x183 ?x227))))
 (let ((?x92 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x92)))
 (let ((?x219 ((_ extract 63 32) ?x210)))
 (let (($x140 (= (_ bv0 32) ?x219)))
 (let (($x213 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x87 (and (and (and true $x213) $x140) $x216)))
 (let (($x124 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x209 (and $x124 $x87)))
 (let (($x123 (= true $x209)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (=> $x197 $x123)))
 (let (($x95 (= $x215 true)))
 (let (($x30 (= $x95 true)))
 (let (($x175 (= $x30 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x223 (= $x164 true)))
 (let (($x143 (= $x223 true)))
 (let (($x166 (= $x143 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x47 (= $x119 true)))
 (let (($x125 (= $x47 true)))
 (let (($x145 (= $x125 true)))
 (let (($x157 (= $x197 true)))
 (let (($x25 (= $x157 true)))
 (let (($x163 (= $x25 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x138 (bvand symbol.1 (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x138)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x168 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x8 (= input.memlabel-mem--symbol.1_end ?x168)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x7 (and $x120 $x8)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x22 $x7)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x54 $x13)))
 (let (($x116 (not $x82)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x131 $x101)))
 (let (($x102 (and (not $x73) $x116)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x37 $x84)))
 (let (($x147 (not $x99)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x103 $x80)))
 (let (($x86 (and (not $x32) $x147)))
 (let (($x72 (and (and (and (and (and (and $x86 $x102) $x94) $x179) $x109) $x160) $x104)))
 (let (($x133 (and $x72 $x151)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x180 (and $x44 $x133)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x17 (or (bvugt input.memlabel-mem--symbol.1_begin ?x90) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x17) (or $x91 $x34)))))))
 (let (($x33 (and $x83 $x180)))
 (let (($x78 (= $x33 true)))
 (let (($x153 (= $x78 true)))
 (let (($x161 (= $x153 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x76 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x85 (and $x79 $x161)))
 (let (($x50 (and $x85 $x163)))
 (let (($x106 (and $x50 $x145)))
 (let (($x35 (and $x106 $x166)))
 (let (($x5 (and $x35 $x175)))
 (let (($x232 (and $x5 $x231)))
 (let (($x241 (and $x232 $x117)))
 (let (($x188 (and $x241 $x129)))
 (let (($x193 (and $x188 $x189)))
 (let (($x235 (and $x193 $x263)))
 (let (($x43 (and $x235 $x244)))
 (let (($x294 (and $x43 $x292)))
 (let (($x329 (and $x294 $x328)))
 (let (($x167 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x331 (and (not $x167) $x329)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x332 (and $x270 $x331)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x226 $x332)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x111 $x274)))
 (let (($x122 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x253 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x122)))))
 (let (($x63 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x122)))))
 (let (($x93 (and $x63 $x96)))
 (let (($x225 (=> $x93 $x267)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x228 (bvmul (_ bv4294967295 32) ?x229)))
 (let ((?x23 (bvneg ?x228)))
 (let (($x24 (= ?x23 ?x265)))
 (let (($x267 (= $x24 true)))
 (let (($x326 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var787X)))
 (=> $x297 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var787X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var786X (_ BitVec 32)) )(let (($x297 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var786X)))
 (= $x297 false)))
 ))
 (let (($x327 (and $x301 $x326)))
 (let (($x328 (= $x327 true)))
 (let (($x324 (forall ((input.ind-%var781X (_ BitVec 32)) )(let ((?x258 (bvadd symbol.1 (bvmul input.ind-%var781X (_ bv4 32)))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x283 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x198)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x283)))
 (let ((?x266 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var781X)))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var781X)))
 (=> $x170 (= ?x266 ?x281)))))))))
 ))
 (let (($x221 (forall ((input.ind-%var780X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var780X) (bvult input.ind-%var780X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var780X)))
 (= $x170 $x230))))
 ))
 (let (($x293 (and $x221 $x324)))
 (let (($x292 (= $x293 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x16)))
 (let (($x191 (= ?x9 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x191 true)))
 (let (($x244 (= $x185 true)))
 (let (($x112 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x48 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x107 (= $x48 true)))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let (($x243 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x195 (= $x243 true)))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (= $x233 true)))
 (let (($x242 (= $x234 true)))
 (let (($x117 (= $x242 true)))
 (let (($x128 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x181 (= $x128 true)))
 (let (($x222 (= $x181 true)))
 (let (($x231 (= $x222 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x227 (bvsub ?x183 ?x176)))
 (let (($x216 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x227) (bvult ?x183 ?x227))))
 (let ((?x92 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x92)))
 (let ((?x219 ((_ extract 63 32) ?x210)))
 (let (($x140 (= (_ bv0 32) ?x219)))
 (let (($x213 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x87 (and (and (and true $x213) $x140) $x216)))
 (let (($x124 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x209 (and $x124 $x87)))
 (let (($x123 (= true $x209)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (=> $x197 $x123)))
 (let (($x95 (= $x215 true)))
 (let (($x30 (= $x95 true)))
 (let (($x175 (= $x30 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x223 (= $x164 true)))
 (let (($x143 (= $x223 true)))
 (let (($x166 (= $x143 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x47 (= $x119 true)))
 (let (($x125 (= $x47 true)))
 (let (($x145 (= $x125 true)))
 (let (($x157 (= $x197 true)))
 (let (($x25 (= $x157 true)))
 (let (($x163 (= $x25 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x137)))
 (let ((?x138 (bvand symbol.1 (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x138)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x168 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x8 (= input.memlabel-mem--symbol.1_end ?x168)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x7 (and $x120 $x8)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x22 $x7)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x82 (and $x54 $x13)))
 (let (($x116 (not $x82)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x131 $x101)))
 (let (($x102 (and (not $x73) $x116)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x37 $x84)))
 (let (($x147 (not $x99)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x103 $x80)))
 (let (($x86 (and (not $x32) $x147)))
 (let (($x72 (and (and (and (and (and (and $x86 $x102) $x94) $x179) $x109) $x160) $x104)))
 (let (($x133 (and $x72 $x151)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x180 (and $x44 $x133)))
 (let (($x34 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x17 (or (bvugt input.memlabel-mem--symbol.1_begin ?x90) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x17) (or $x91 $x34)))))))
 (let (($x33 (and $x83 $x180)))
 (let (($x78 (= $x33 true)))
 (let (($x153 (= $x78 true)))
 (let (($x161 (= $x153 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x76 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x85 (and $x79 $x161)))
 (let (($x50 (and $x85 $x163)))
 (let (($x106 (and $x50 $x145)))
 (let (($x35 (and $x106 $x166)))
 (let (($x5 (and $x35 $x175)))
 (let (($x232 (and $x5 $x231)))
 (let (($x241 (and $x232 $x117)))
 (let (($x188 (and $x241 $x129)))
 (let (($x193 (and $x188 $x189)))
 (let (($x235 (and $x193 $x263)))
 (let (($x43 (and $x235 $x244)))
 (let (($x294 (and $x43 $x292)))
 (let (($x329 (and $x294 $x328)))
 (let (($x167 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x331 (and (not $x167) $x329)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x332 (and $x270 $x331)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x226 $x332)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x96 (and $x111 $x274)))
 (let (($x122 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x253 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x122)))))
 (let (($x63 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x122)))))
 (let (($x93 (and $x63 $x96)))
 (let (($x225 (=> $x93 $x267)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x298 (bvule ?x295 (_ bv399 32))))
 (let (($x20 (= $x298 true)))
 (let (($x247 (= $x20 true)))
 (let (($x51 (forall ((input.ind-%var799X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var799X)))
 (=> $x317 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var799X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var798X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var798X)))
 (= $x317 false)))
 ))
 (let (($x271 (and $x269 $x51)))
 (let (($x174 (= $x271 true)))
 (let (($x154 (forall ((input.ind-%var793X (_ BitVec 32)) )(let ((?x331 (bvadd symbol.1 (bvmul input.ind-%var793X (_ bv4 32)))))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x331))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x331 (_ bv2 32))) ?x93)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x331 (_ bv3 32))) ?x23)))
 (let ((?x218 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var793X)))
 (let (($x230 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var793X)))
 (=> $x230 (= ?x218 ?x267)))))))))
 ))
 (let (($x273 (forall ((input.ind-%var792X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var792X) (bvult input.ind-%var792X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x230 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var792X)))
 (= $x230 $x280))))
 ))
 (let (($x21 (and $x273 $x154)))
 (let (($x65 (= $x21 true)))
 (let ((?x9 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x9)))
 (let (($x185 (= ?x191 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x185 true)))
 (let (($x43 (= $x244 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x107 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x195 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x188 (= $x129 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x95)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x123)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x227 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x214 (= input.memlabel-mem--symbol.1_end ?x227)))
 (let (($x156 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x156 $x214)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x212 $x142)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x124 $x162)))
 (let (($x92 (and (not $x55) $x211)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x223 $x143)))
 (let (($x35 (not $x166)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x145 $x106)))
 (let (($x12 (and (not $x164) $x35)))
 (let (($x231 (and (and (and (and (and (and $x12 $x92) $x210) $x140) $x216) $x209) $x215)))
 (let (($x232 (and $x231 $x30)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x233 (and $x104 $x232)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x151) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x85 $x157)))))))
 (let (($x234 (and $x125 $x233)))
 (let (($x242 (= $x234 true)))
 (let (($x117 (= $x242 true)))
 (let (($x241 (= $x117 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x7 true)))
 (let (($x19 (= $x109 true)))
 (let (($x18 (= $x19 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x22 true)))
 (let (($x66 (= $x120 true)))
 (let (($x168 (= $x66 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x94 true)))
 (let (($x49 (= $x146 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x131)))
 (let (($x82 (= ?x101 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x82 true)))
 (let (($x102 (= $x116 true)))
 (let (($x73 (= ?x101 input.dst.llvm-%n)))
 (let (($x14 (= $x73 true)))
 (let (($x54 (= $x14 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x155 (bvsub ?x183 ?x176)))
 (let (($x83 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x155) (bvult ?x183 ?x155))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvmul (_ bv4 64) ?x89)))
 (let ((?x10 ((_ extract 63 32) ?x91)))
 (let (($x34 (= (_ bv0 32) ?x10)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x17) $x34) $x83)))
 (let (($x74 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x80 (and $x74 $x103)))
 (let (($x32 (= true $x80)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x197 $x32)))
 (let (($x37 (= $x108 true)))
 (let (($x84 (= $x37 true)))
 (let (($x99 (= $x84 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x197 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x147 (and $x62 $x99)))
 (let (($x13 (and $x147 $x54)))
 (let (($x134 (and $x13 $x102)))
 (let (($x113 (and $x134 $x179)))
 (let (($x8 (and $x113 $x168)))
 (let (($x160 (and $x8 $x18)))
 (let (($x243 (and $x160 $x241)))
 (let (($x48 (and $x243 $x188)))
 (let (($x112 (and $x48 $x193)))
 (let (($x16 (and $x112 $x235)))
 (let (($x203 (and $x16 $x43)))
 (let (($x127 (and $x203 $x65)))
 (let (($x261 (and $x127 $x174)))
 (let (($x330 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and (not $x330) $x261)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and $x190 $x110)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x256 (and $x251 $x67)))
 (let (($x135 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x262 (and $x135 $x256)))
 (let (($x182 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x182)))))
 (let (($x31 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x182)))))
 (let (($x296 (and $x31 $x262)))
 (let (($x319 (=> $x296 $x247)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x298 (bvule ?x295 (_ bv399 32))))
 (let (($x20 (= $x298 true)))
 (let (($x247 (= $x20 true)))
 (let (($x51 (forall ((input.ind-%var799X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var799X)))
 (=> $x317 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var799X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var798X (_ BitVec 32)) )(let (($x317 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var798X)))
 (= $x317 false)))
 ))
 (let (($x271 (and $x269 $x51)))
 (let (($x174 (= $x271 true)))
 (let (($x154 (forall ((input.ind-%var793X (_ BitVec 32)) )(let ((?x331 (bvadd symbol.1 (bvmul input.ind-%var793X (_ bv4 32)))))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x331))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x331 (_ bv2 32))) ?x93)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x331 (_ bv3 32))) ?x23)))
 (let ((?x218 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var793X)))
 (let (($x230 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var793X)))
 (=> $x230 (= ?x218 ?x267)))))))))
 ))
 (let (($x273 (forall ((input.ind-%var792X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var792X) (bvult input.ind-%var792X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x230 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var792X)))
 (= $x230 $x280))))
 ))
 (let (($x21 (and $x273 $x154)))
 (let (($x65 (= $x21 true)))
 (let ((?x9 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x9)))
 (let (($x185 (= ?x191 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x185 true)))
 (let (($x43 (= $x244 true)))
 (let (($x159 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x107 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x195 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x188 (= $x129 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x95)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x123)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x227 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x214 (= input.memlabel-mem--symbol.1_end ?x227)))
 (let (($x156 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x156 $x214)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x212 $x142)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x124 $x162)))
 (let (($x92 (and (not $x55) $x211)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x223 $x143)))
 (let (($x35 (not $x166)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x145 $x106)))
 (let (($x12 (and (not $x164) $x35)))
 (let (($x231 (and (and (and (and (and (and $x12 $x92) $x210) $x140) $x216) $x209) $x215)))
 (let (($x232 (and $x231 $x30)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x233 (and $x104 $x232)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x151) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x85 $x157)))))))
 (let (($x234 (and $x125 $x233)))
 (let (($x242 (= $x234 true)))
 (let (($x117 (= $x242 true)))
 (let (($x241 (= $x117 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x7 true)))
 (let (($x19 (= $x109 true)))
 (let (($x18 (= $x19 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x22 true)))
 (let (($x66 (= $x120 true)))
 (let (($x168 (= $x66 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x94 true)))
 (let (($x49 (= $x146 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x131)))
 (let (($x82 (= ?x101 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x82 true)))
 (let (($x102 (= $x116 true)))
 (let (($x73 (= ?x101 input.dst.llvm-%n)))
 (let (($x14 (= $x73 true)))
 (let (($x54 (= $x14 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x155 (bvsub ?x183 ?x176)))
 (let (($x83 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x155) (bvult ?x183 ?x155))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x91 (bvmul (_ bv4 64) ?x89)))
 (let ((?x10 ((_ extract 63 32) ?x91)))
 (let (($x34 (= (_ bv0 32) ?x10)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x17) $x34) $x83)))
 (let (($x74 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x80 (and $x74 $x103)))
 (let (($x32 (= true $x80)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x197 $x32)))
 (let (($x37 (= $x108 true)))
 (let (($x84 (= $x37 true)))
 (let (($x99 (= $x84 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x197 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x147 (and $x62 $x99)))
 (let (($x13 (and $x147 $x54)))
 (let (($x134 (and $x13 $x102)))
 (let (($x113 (and $x134 $x179)))
 (let (($x8 (and $x113 $x168)))
 (let (($x160 (and $x8 $x18)))
 (let (($x243 (and $x160 $x241)))
 (let (($x48 (and $x243 $x188)))
 (let (($x112 (and $x48 $x193)))
 (let (($x16 (and $x112 $x235)))
 (let (($x203 (and $x16 $x43)))
 (let (($x127 (and $x203 $x65)))
 (let (($x261 (and $x127 $x174)))
 (let (($x330 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and (not $x330) $x261)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (and $x190 $x110)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x256 (and $x251 $x67)))
 (let (($x135 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x262 (and $x135 $x256)))
 (let (($x182 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x182)))))
 (let (($x31 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x182)))))
 (let (($x296 (and $x31 $x262)))
 (let (($x319 (=> $x296 $x247)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x328 (bvsle ?x139 (_ bv399 32))))
 (let (($x132 (= $x328 true)))
 (let (($x192 (= $x132 true)))
 (let (($x318 (forall ((input.ind-%var811X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var811X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var811X) (_ bv0 32)))))
 ))
 (let (($x284 (forall ((input.ind-%var810X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var810X)))
 (= $x276 false)))
 ))
 (let (($x326 (and $x284 $x318)))
 (let (($x178 (= $x326 true)))
 (let (($x114 (forall ((input.ind-%var805X (_ BitVec 32)) )(let ((?x110 (bvadd symbol.1 (bvmul input.ind-%var805X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x110))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x110 (_ bv2 32))) ?x296)))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x110 (_ bv3 32))) ?x20)))
 (let ((?x332 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var805X)))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var805X)))
 (=> $x280 (= ?x332 ?x322)))))))))
 ))
 (let (($x229 (forall ((input.ind-%var804X (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) input.ind-%var804X) (bvult input.ind-%var804X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var804X)))
 (= $x280 $x24))))
 ))
 (let (($x254 (and $x229 $x114)))
 (let (($x198 (= $x254 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x191)))
 (let (($x244 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x244 true)))
 (let (($x203 (= $x43 true)))
 (let (($x206 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x186 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x129 (= $x150 true)))
 (let (($x188 (= $x129 true)))
 (let (($x48 (= $x188 true)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x209)))
 (let ((?x181 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x181)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x212 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x212)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x227 (and $x128 $x156)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x140 $x227)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x162 $x55)))
 (let (($x175 (and (not $x144) $x211)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x223 $x143)))
 (let (($x35 (not $x166)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x106 $x164)))
 (let (($x124 (and (not $x171) $x35)))
 (let (($x232 (and (and (and (and (and (and $x124 $x175) $x210) $x219) $x214) $x216) $x87)))
 (let (($x233 (and $x232 $x222)))
 (let (($x47 (= symbol.1 dst_symbol_addr.1)))
 (let (($x234 (and $x47 $x233)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x153 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x153) (or $x25 $x163)))))))
 (let (($x242 (and $x145 $x234)))
 (let (($x117 (= $x242 true)))
 (let (($x241 (= $x117 true)))
 (let (($x243 (= $x241 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x7 true)))
 (let (($x19 (= $x109 true)))
 (let (($x18 (= $x19 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x22 true)))
 (let (($x66 (= $x120 true)))
 (let (($x168 (= $x66 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x94 true)))
 (let (($x49 (= $x146 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x131)))
 (let (($x82 (= ?x101 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x82 true)))
 (let (($x102 (= $x116 true)))
 (let (($x73 (= ?x101 input.dst.llvm-%n)))
 (let (($x14 (= $x73 true)))
 (let (($x54 (= $x14 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x34 (bvsub ?x183 ?x176)))
 (let (($x100 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x34) (bvult ?x183 ?x34))))
 (let ((?x149 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x149)))
 (let ((?x91 ((_ extract 63 32) ?x89)))
 (let (($x10 (= (_ bv0 32) ?x91)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x17) $x10) $x100)))
 (let (($x74 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x80 (and $x74 $x103)))
 (let (($x32 (= true $x80)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x197 $x32)))
 (let (($x37 (= $x108 true)))
 (let (($x84 (= $x37 true)))
 (let (($x99 (= $x84 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x197 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x147 (and $x62 $x99)))
 (let (($x13 (and $x147 $x54)))
 (let (($x134 (and $x13 $x102)))
 (let (($x113 (and $x134 $x179)))
 (let (($x8 (and $x113 $x168)))
 (let (($x160 (and $x8 $x18)))
 (let (($x195 (and $x160 $x243)))
 (let (($x107 (and $x195 $x48)))
 (let (($x159 (and $x107 $x112)))
 (let (($x9 (and $x159 $x16)))
 (let (($x56 (and $x9 $x203)))
 (let (($x199 (and $x56 $x198)))
 (let (($x169 (and $x199 $x178)))
 (let (($x320 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (and (not $x320) $x169)))
 (let (($x167 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x167 $x246)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x187 $x327)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x58 $x201)))
 (let (($x63 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x135 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x63)))))
 (let (($x28 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x63)))))
 (let (($x259 (and $x28 $x299)))
 (let (($x202 (=> $x259 $x192)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x328 (bvsle ?x139 (_ bv399 32))))
 (let (($x132 (= $x328 true)))
 (let (($x192 (= $x132 true)))
 (let (($x318 (forall ((input.ind-%var811X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var811X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var811X) (_ bv0 32)))))
 ))
 (let (($x284 (forall ((input.ind-%var810X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var810X)))
 (= $x276 false)))
 ))
 (let (($x326 (and $x284 $x318)))
 (let (($x178 (= $x326 true)))
 (let (($x114 (forall ((input.ind-%var805X (_ BitVec 32)) )(let ((?x110 (bvadd symbol.1 (bvmul input.ind-%var805X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x110))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x110 (_ bv2 32))) ?x296)))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x110 (_ bv3 32))) ?x20)))
 (let ((?x332 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var805X)))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var805X)))
 (=> $x280 (= ?x332 ?x322)))))))))
 ))
 (let (($x229 (forall ((input.ind-%var804X (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) input.ind-%var804X) (bvult input.ind-%var804X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var804X)))
 (= $x280 $x24))))
 ))
 (let (($x254 (and $x229 $x114)))
 (let (($x198 (= $x254 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x191)))
 (let (($x244 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x244 true)))
 (let (($x203 (= $x43 true)))
 (let (($x206 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x186 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x129 (= $x150 true)))
 (let (($x188 (= $x129 true)))
 (let (($x48 (= $x188 true)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x209)))
 (let ((?x181 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x181)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x212 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x156 (= input.memlabel-mem--symbol.1_end ?x212)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x227 (and $x128 $x156)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x140 $x227)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x162 $x55)))
 (let (($x175 (and (not $x144) $x211)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x223 $x143)))
 (let (($x35 (not $x166)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x106 $x164)))
 (let (($x124 (and (not $x171) $x35)))
 (let (($x232 (and (and (and (and (and (and $x124 $x175) $x210) $x219) $x214) $x216) $x87)))
 (let (($x233 (and $x232 $x222)))
 (let (($x47 (= symbol.1 dst_symbol_addr.1)))
 (let (($x234 (and $x47 $x233)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x153 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x153) (or $x25 $x163)))))))
 (let (($x242 (and $x145 $x234)))
 (let (($x117 (= $x242 true)))
 (let (($x241 (= $x117 true)))
 (let (($x243 (= $x241 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x7 true)))
 (let (($x19 (= $x109 true)))
 (let (($x18 (= $x19 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x22 true)))
 (let (($x66 (= $x120 true)))
 (let (($x168 (= $x66 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x94 true)))
 (let (($x49 (= $x146 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x131)))
 (let (($x82 (= ?x101 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x82 true)))
 (let (($x102 (= $x116 true)))
 (let (($x73 (= ?x101 input.dst.llvm-%n)))
 (let (($x14 (= $x73 true)))
 (let (($x54 (= $x14 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x34 (bvsub ?x183 ?x176)))
 (let (($x100 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x34) (bvult ?x183 ?x34))))
 (let ((?x149 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x149)))
 (let ((?x91 ((_ extract 63 32) ?x89)))
 (let (($x10 (= (_ bv0 32) ?x91)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x17) $x10) $x100)))
 (let (($x74 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x80 (and $x74 $x103)))
 (let (($x32 (= true $x80)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x197 $x32)))
 (let (($x37 (= $x108 true)))
 (let (($x84 (= $x37 true)))
 (let (($x99 (= $x84 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x197 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x147 (and $x62 $x99)))
 (let (($x13 (and $x147 $x54)))
 (let (($x134 (and $x13 $x102)))
 (let (($x113 (and $x134 $x179)))
 (let (($x8 (and $x113 $x168)))
 (let (($x160 (and $x8 $x18)))
 (let (($x195 (and $x160 $x243)))
 (let (($x107 (and $x195 $x48)))
 (let (($x159 (and $x107 $x112)))
 (let (($x9 (and $x159 $x16)))
 (let (($x56 (and $x9 $x203)))
 (let (($x199 (and $x56 $x198)))
 (let (($x169 (and $x199 $x178)))
 (let (($x320 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (and (not $x320) $x169)))
 (let (($x167 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x167 $x246)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x187 $x327)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x58 $x201)))
 (let (($x63 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x135 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x63)))))
 (let (($x28 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x63)))))
 (let (($x259 (and $x28 $x299)))
 (let (($x202 (=> $x259 $x192)))
 (not $x202))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x174 (bvsge ?x274 (_ bv0 32))))
 (let (($x293 (= $x174 true)))
 (let (($x323 (= $x293 true)))
 (let (($x57 (forall ((input.ind-%var823X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var823X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var823X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var822X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var822X)))
 (= $x96 false)))
 ))
 (let (($x51 (and $x225 $x57)))
 (let (($x325 (= $x51 true)))
 (let (($x72 (forall ((input.ind-%var817X (_ BitVec 32)) )(let ((?x246 (bvadd symbol.1 (bvmul input.ind-%var817X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x246))))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv2 32))) ?x259)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv3 32))) ?x132)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var817X)))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var817X)))
 (=> $x24 (= ?x67 ?x302)))))))))
 ))
 (let (($x295 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x319 (and (bvule (_ bv0 32) input.ind-%var816X) (bvult input.ind-%var816X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var816X)))
 (= $x24 $x319))))
 ))
 (let (($x38 (and $x295 $x72)))
 (let (($x93 (= $x38 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x185)))
 (let (($x43 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x43 true)))
 (let (($x56 (= $x203 true)))
 (let (($x263 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x189 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x129 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x188 (= $x129 true)))
 (let (($x48 (= $x188 true)))
 (let (($x107 (= $x48 true)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x216)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x95)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x128 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x212 (and $x231 $x128)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x219 $x212)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (and $x55 $x144)))
 (let (($x123 (and (not $x92) $x211)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x223 $x143)))
 (let (($x35 (not $x166)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x164 $x171)))
 (let (($x162 (and (not $x12) $x35)))
 (let (($x233 (and (and (and (and (and (and $x162 $x123) $x210) $x5) $x156) $x214) $x142)))
 (let (($x234 (and $x233 $x30)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x242 (and $x104 $x234)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x161 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x161) (or $x50 $x119)))))))
 (let (($x117 (and $x106 $x242)))
 (let (($x241 (= $x117 true)))
 (let (($x243 (= $x241 true)))
 (let (($x195 (= $x243 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x7 true)))
 (let (($x19 (= $x109 true)))
 (let (($x18 (= $x19 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x22 true)))
 (let (($x66 (= $x120 true)))
 (let (($x168 (= $x66 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x94 true)))
 (let (($x49 (= $x146 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x131)))
 (let (($x82 (= ?x101 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x82 true)))
 (let (($x102 (= $x116 true)))
 (let (($x73 (= ?x101 input.dst.llvm-%n)))
 (let (($x14 (= $x73 true)))
 (let (($x54 (= $x14 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x10 (bvsub ?x183 ?x176)))
 (let (($x59 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x10) (bvult ?x183 ?x10))))
 (let ((?x53 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x53)))
 (let ((?x89 ((_ extract 63 32) ?x149)))
 (let (($x91 (= (_ bv0 32) ?x89)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x17) $x91) $x59)))
 (let (($x74 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x80 (and $x74 $x103)))
 (let (($x32 (= true $x80)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x197 $x32)))
 (let (($x37 (= $x108 true)))
 (let (($x84 (= $x37 true)))
 (let (($x99 (= $x84 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x197 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x147 (and $x62 $x99)))
 (let (($x13 (and $x147 $x54)))
 (let (($x134 (and $x13 $x102)))
 (let (($x113 (and $x134 $x179)))
 (let (($x8 (and $x113 $x168)))
 (let (($x160 (and $x8 $x18)))
 (let (($x150 (and $x160 $x195)))
 (let (($x186 (and $x150 $x107)))
 (let (($x206 (and $x186 $x159)))
 (let (($x191 (and $x206 $x9)))
 (let (($x258 (and $x191 $x56)))
 (let (($x170 (and $x258 $x93)))
 (let (($x257 (and $x170 $x325)))
 (let (($x236 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x329 (and (not $x236) $x257)))
 (let (($x330 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x271 (and $x330 $x329)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x270 $x271)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x226 $x207)))
 (let (($x31 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x31)))))
 (let (($x81 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x31)))))
 (let (($x221 (and $x81 $x282)))
 (let (($x292 (=> $x221 $x323)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x174 (bvsge ?x274 (_ bv0 32))))
 (let (($x293 (= $x174 true)))
 (let (($x323 (= $x293 true)))
 (let (($x57 (forall ((input.ind-%var823X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var823X)))
 (=> $x96 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var823X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var822X (_ BitVec 32)) )(let (($x96 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var822X)))
 (= $x96 false)))
 ))
 (let (($x51 (and $x225 $x57)))
 (let (($x325 (= $x51 true)))
 (let (($x72 (forall ((input.ind-%var817X (_ BitVec 32)) )(let ((?x246 (bvadd symbol.1 (bvmul input.ind-%var817X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x246))))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv2 32))) ?x259)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv3 32))) ?x132)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var817X)))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var817X)))
 (=> $x24 (= ?x67 ?x302)))))))))
 ))
 (let (($x295 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x319 (and (bvule (_ bv0 32) input.ind-%var816X) (bvult input.ind-%var816X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var816X)))
 (= $x24 $x319))))
 ))
 (let (($x38 (and $x295 $x72)))
 (let (($x93 (= $x38 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x185)))
 (let (($x43 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x43 true)))
 (let (($x56 (= $x203 true)))
 (let (($x263 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x189 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x129 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x188 (= $x129 true)))
 (let (($x48 (= $x188 true)))
 (let (($x107 (= $x48 true)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x216)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x95)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x128 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x212 (and $x231 $x128)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (and $x219 $x212)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (and $x55 $x144)))
 (let (($x123 (and (not $x92) $x211)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x223 $x143)))
 (let (($x35 (not $x166)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x164 $x171)))
 (let (($x162 (and (not $x12) $x35)))
 (let (($x233 (and (and (and (and (and (and $x162 $x123) $x210) $x5) $x156) $x214) $x142)))
 (let (($x234 (and $x233 $x30)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x242 (and $x104 $x234)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x161 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x161) (or $x50 $x119)))))))
 (let (($x117 (and $x106 $x242)))
 (let (($x241 (= $x117 true)))
 (let (($x243 (= $x241 true)))
 (let (($x195 (= $x243 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x7 true)))
 (let (($x19 (= $x109 true)))
 (let (($x18 (= $x19 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (= $x22 true)))
 (let (($x66 (= $x120 true)))
 (let (($x168 (= $x66 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x94 true)))
 (let (($x49 (= $x146 true)))
 (let (($x179 (= $x49 true)))
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x131)))
 (let (($x82 (= ?x101 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (= $x82 true)))
 (let (($x102 (= $x116 true)))
 (let (($x73 (= ?x101 input.dst.llvm-%n)))
 (let (($x14 (= $x73 true)))
 (let (($x54 (= $x14 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x10 (bvsub ?x183 ?x176)))
 (let (($x59 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x10) (bvult ?x183 ?x10))))
 (let ((?x53 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x53)))
 (let ((?x89 ((_ extract 63 32) ?x149)))
 (let (($x91 (= (_ bv0 32) ?x89)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x103 (and (and (and true $x17) $x91) $x59)))
 (let (($x74 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x80 (and $x74 $x103)))
 (let (($x32 (= true $x80)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x197 $x32)))
 (let (($x37 (= $x108 true)))
 (let (($x84 (= $x37 true)))
 (let (($x99 (= $x84 true)))
 (let (($x36 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x45 (= $x197 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x88)))
 (let (($x147 (and $x62 $x99)))
 (let (($x13 (and $x147 $x54)))
 (let (($x134 (and $x13 $x102)))
 (let (($x113 (and $x134 $x179)))
 (let (($x8 (and $x113 $x168)))
 (let (($x160 (and $x8 $x18)))
 (let (($x150 (and $x160 $x195)))
 (let (($x186 (and $x150 $x107)))
 (let (($x206 (and $x186 $x159)))
 (let (($x191 (and $x206 $x9)))
 (let (($x258 (and $x191 $x56)))
 (let (($x170 (and $x258 $x93)))
 (let (($x257 (and $x170 $x325)))
 (let (($x236 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x329 (and (not $x236) $x257)))
 (let (($x330 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x271 (and $x330 $x329)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x270 $x271)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x226 $x207)))
 (let (($x31 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x31)))))
 (let (($x81 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x31)))))
 (let (($x221 (and $x81 $x282)))
 (let (($x292 (=> $x221 $x323)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x256 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (bvule ?x256 (_ bv399 32))))
 (let (($x21 (= $x178 true)))
 (let (($x204 (= $x21 true)))
 (let (($x300 (forall ((input.ind-%var835X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var835X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var835X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var834X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var834X)))
 (= $x262 false)))
 ))
 (let (($x318 (and $x15 $x300)))
 (let (($x249 (= $x318 true)))
 (let (($x151 (forall ((input.ind-%var829X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var829X (_ bv4 32)))))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x221)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x293)))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var829X)))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var829X)))
 (=> $x319 (= ?x327 ?x252)))))))))
 ))
 (let (($x139 (forall ((input.ind-%var828X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var828X) (bvult input.ind-%var828X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var828X)))
 (= $x319 $x202))))
 ))
 (let (($x297 (and $x139 $x151)))
 (let (($x296 (= $x297 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x244)))
 (let (($x203 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x203 true)))
 (let (($x258 (= $x56 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x191 (= $x9 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x188 true)))
 (let (($x107 (= $x48 true)))
 (let (($x186 (= $x107 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x214 (bvsub ?x183 ?x176)))
 (let (($x233 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x214) (bvult ?x183 ?x214))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x212)))
 (let ((?x209 ((_ extract 63 32) ?x156)))
 (let (($x227 (= (_ bv0 32) ?x209)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x234 (and (and (and true $x140) $x227) $x233)))
 (let (($x215 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x242 (and $x215 $x234)))
 (let (($x117 (= true $x242)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x241 (=> $x197 $x117)))
 (let (($x243 (= $x241 true)))
 (let (($x195 (= $x243 true)))
 (let (($x150 (= $x195 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x123 (= $x211 true)))
 (let (($x144 (= $x197 true)))
 (let (($x92 (= $x144 true)))
 (let (($x175 (= $x92 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x145)))
 (let ((?x125 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x125)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x25 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x85 $x25)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x153 $x157)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x7 $x109)))
 (let (($x18 (not $x19)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x66 $x168)))
 (let (($x180 (and (not $x8) $x18)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x146 $x49)))
 (let (($x113 (not $x179)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x102 $x134)))
 (let (($x120 (and (not $x94) $x113)))
 (let (($x12 (and (and (and (and (and (and $x120 $x180) $x33) $x78) $x50) $x119) $x138)))
 (let (($x124 (and $x12 $x137)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x223 (and $x59 $x124)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x84 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x84) (or $x131 $x101)))))))
 (let (($x143 (and $x116 $x223)))
 (let (($x166 (= $x143 true)))
 (let (($x35 (= $x166 true)))
 (let (($x162 (= $x35 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x89 true)))
 (let (($x100 (= $x91 true)))
 (let (($x83 (= $x100 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x90 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x68 (and $x74 $x40)))
 (let (($x149 (and $x68 $x53)))
 (let (($x10 (and $x149 $x83)))
 (let (($x55 (and $x10 $x162)))
 (let (($x27 (and $x55 $x175)))
 (let (($x181 (and $x27 $x123)))
 (let (($x129 (and $x181 $x150)))
 (let (($x189 (and $x129 $x186)))
 (let (($x263 (and $x189 $x206)))
 (let (($x185 (and $x263 $x191)))
 (let (($x331 (and $x185 $x258)))
 (let (($x230 (and $x331 $x296)))
 (let (($x265 (and $x230 $x249)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and (not $x283) $x265)))
 (let (($x320 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x326 (and $x320 $x261)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x301 (and $x190 $x326)))
 (let (($x251 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x251 $x301)))
 (let (($x28 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x226 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x97 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x28)))))
 (let (($x273 (and $x97 $x228)))
 (let (($x65 (=> $x273 $x204)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x256 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (bvule ?x256 (_ bv399 32))))
 (let (($x21 (= $x178 true)))
 (let (($x204 (= $x21 true)))
 (let (($x300 (forall ((input.ind-%var835X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var835X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var835X) (_ bv0 32)))))
 ))
 (let (($x15 (forall ((input.ind-%var834X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var834X)))
 (= $x262 false)))
 ))
 (let (($x318 (and $x15 $x300)))
 (let (($x249 (= $x318 true)))
 (let (($x151 (forall ((input.ind-%var829X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var829X (_ bv4 32)))))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x221)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x293)))
 (let ((?x327 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var829X)))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var829X)))
 (=> $x319 (= ?x327 ?x252)))))))))
 ))
 (let (($x139 (forall ((input.ind-%var828X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var828X) (bvult input.ind-%var828X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x319 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var828X)))
 (= $x319 $x202))))
 ))
 (let (($x297 (and $x139 $x151)))
 (let (($x296 (= $x297 true)))
 (let ((?x244 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x244)))
 (let (($x203 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (= $x203 true)))
 (let (($x258 (= $x56 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x191 (= $x9 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x188 true)))
 (let (($x107 (= $x48 true)))
 (let (($x186 (= $x107 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x214 (bvsub ?x183 ?x176)))
 (let (($x233 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x214) (bvult ?x183 ?x214))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x212)))
 (let ((?x209 ((_ extract 63 32) ?x156)))
 (let (($x227 (= (_ bv0 32) ?x209)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x234 (and (and (and true $x140) $x227) $x233)))
 (let (($x215 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x242 (and $x215 $x234)))
 (let (($x117 (= true $x242)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x241 (=> $x197 $x117)))
 (let (($x243 (= $x241 true)))
 (let (($x195 (= $x243 true)))
 (let (($x150 (= $x195 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x123 (= $x211 true)))
 (let (($x144 (= $x197 true)))
 (let (($x92 (= $x144 true)))
 (let (($x175 (= $x92 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x145)))
 (let ((?x125 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x125)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x25 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x85 $x25)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x153 $x157)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x7 $x109)))
 (let (($x18 (not $x19)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x66 $x168)))
 (let (($x180 (and (not $x8) $x18)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x146 $x49)))
 (let (($x113 (not $x179)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x102 $x134)))
 (let (($x120 (and (not $x94) $x113)))
 (let (($x12 (and (and (and (and (and (and $x120 $x180) $x33) $x78) $x50) $x119) $x138)))
 (let (($x124 (and $x12 $x137)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x223 (and $x59 $x124)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x84 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x84) (or $x131 $x101)))))))
 (let (($x143 (and $x116 $x223)))
 (let (($x166 (= $x143 true)))
 (let (($x35 (= $x166 true)))
 (let (($x162 (= $x35 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x89 true)))
 (let (($x100 (= $x91 true)))
 (let (($x83 (= $x100 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x90 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x68 (and $x74 $x40)))
 (let (($x149 (and $x68 $x53)))
 (let (($x10 (and $x149 $x83)))
 (let (($x55 (and $x10 $x162)))
 (let (($x27 (and $x55 $x175)))
 (let (($x181 (and $x27 $x123)))
 (let (($x129 (and $x181 $x150)))
 (let (($x189 (and $x129 $x186)))
 (let (($x263 (and $x189 $x206)))
 (let (($x185 (and $x263 $x191)))
 (let (($x331 (and $x185 $x258)))
 (let (($x230 (and $x331 $x296)))
 (let (($x265 (and $x230 $x249)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and (not $x283) $x265)))
 (let (($x320 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x326 (and $x320 $x261)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x301 (and $x190 $x326)))
 (let (($x251 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x251 $x301)))
 (let (($x28 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x226 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x97 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x28)))))
 (let (($x273 (and $x97 $x228)))
 (let (($x65 (=> $x273 $x204)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x325 (bvsle ?x201 (_ bv399 32))))
 (let (($x254 (= $x325 true)))
 (let (($x324 (= $x254 true)))
 (let (($x268 (forall ((input.ind-%var847X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var847X)))
 (=> $x299 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var847X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var846X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var846X)))
 (= $x299 false)))
 ))
 (let (($x57 (and $x60 $x268)))
 (let (($x294 (= $x57 true)))
 (let (($x44 (forall ((input.ind-%var841X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var841X (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x273)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x21)))
 (let ((?x271 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var841X)))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var841X)))
 (=> $x202 (= ?x271 ?x285)))))))))
 ))
 (let (($x274 (forall ((input.ind-%var840X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var840X) (bvult input.ind-%var840X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var840X)))
 (= $x202 $x292))))
 ))
 (let (($x317 (and $x274 $x44)))
 (let (($x259 (= $x317 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x43)))
 (let (($x56 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x56 true)))
 (let (($x331 (= $x258 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x9 (= $x16 true)))
 (let (($x191 (= $x9 true)))
 (let (($x185 (= $x191 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x48 true)))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x30 (bvsub ?x183 ?x176)))
 (let (($x142 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x30) (bvult ?x183 ?x30))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x212)))
 (let ((?x209 ((_ extract 63 32) ?x156)))
 (let (($x227 (= (_ bv0 32) ?x209)))
 (let (($x216 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x242 (and (and (and true $x216) $x227) $x142)))
 (let (($x232 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x117 (and $x232 $x242)))
 (let (($x241 (= true $x117)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x243 (=> $x197 $x241)))
 (let (($x195 (= $x243 true)))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x213 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x213 true)))
 (let (($x123 (= $x211 true)))
 (let (($x181 (= $x123 true)))
 (let (($x92 (= $x197 true)))
 (let (($x175 (= $x92 true)))
 (let (($x27 (= $x175 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x119)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x164)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x104 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (and $x104 $x85)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x78 $x161)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x7 $x109)))
 (let (($x18 (not $x19)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x168 $x8)))
 (let (($x106 (and (not $x160) $x18)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x146 $x49)))
 (let (($x113 (not $x179)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x134 $x94)))
 (let (($x66 (and (not $x22) $x113)))
 (let (($x124 (and (and (and (and (and (and $x66 $x106) $x33) $x47) $x25) $x50) $x163)))
 (let (($x223 (and $x124 $x171)))
 (let (($x82 (= symbol.1 dst_symbol_addr.1)))
 (let (($x143 (and $x82 $x223)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x37) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x73 $x14)))))))
 (let (($x166 (and $x102 $x143)))
 (let (($x35 (= $x166 true)))
 (let (($x162 (= $x35 true)))
 (let (($x55 (= $x162 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x89 true)))
 (let (($x100 (= $x91 true)))
 (let (($x83 (= $x100 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x90 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x68 (and $x74 $x40)))
 (let (($x149 (and $x68 $x53)))
 (let (($x10 (and $x149 $x83)))
 (let (($x144 (and $x10 $x55)))
 (let (($x52 (and $x144 $x27)))
 (let (($x210 (and $x52 $x181)))
 (let (($x188 (and $x210 $x129)))
 (let (($x193 (and $x188 $x189)))
 (let (($x235 (and $x193 $x263)))
 (let (($x244 (and $x235 $x185)))
 (let (($x110 (and $x244 $x331)))
 (let (($x280 (and $x110 $x259)))
 (let (($x247 (and $x280 $x294)))
 (let (($x23 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and (not $x23) $x247)))
 (let (($x236 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x236 $x169)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x167 $x51)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x298 (and $x187 $x269)))
 (let (($x81 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x251 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x264 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x81)))))
 (let (($x229 (and $x264 $x298)))
 (let (($x198 (=> $x229 $x324)))
 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x201 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x325 (bvsle ?x201 (_ bv399 32))))
 (let (($x254 (= $x325 true)))
 (let (($x324 (= $x254 true)))
 (let (($x268 (forall ((input.ind-%var847X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var847X)))
 (=> $x299 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var847X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var846X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var846X)))
 (= $x299 false)))
 ))
 (let (($x57 (and $x60 $x268)))
 (let (($x294 (= $x57 true)))
 (let (($x44 (forall ((input.ind-%var841X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var841X (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x273)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x21)))
 (let ((?x271 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var841X)))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var841X)))
 (=> $x202 (= ?x271 ?x285)))))))))
 ))
 (let (($x274 (forall ((input.ind-%var840X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var840X) (bvult input.ind-%var840X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x202 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var840X)))
 (= $x202 $x292))))
 ))
 (let (($x317 (and $x274 $x44)))
 (let (($x259 (= $x317 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x203 (bvneg ?x43)))
 (let (($x56 (= ?x203 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x56 true)))
 (let (($x331 (= $x258 true)))
 (let (($x16 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x9 (= $x16 true)))
 (let (($x191 (= $x9 true)))
 (let (($x185 (= $x191 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x112 true)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x48 true)))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x30 (bvsub ?x183 ?x176)))
 (let (($x142 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x30) (bvult ?x183 ?x30))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x212)))
 (let ((?x209 ((_ extract 63 32) ?x156)))
 (let (($x227 (= (_ bv0 32) ?x209)))
 (let (($x216 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x242 (and (and (and true $x216) $x227) $x142)))
 (let (($x232 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x117 (and $x232 $x242)))
 (let (($x241 (= true $x117)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x243 (=> $x197 $x241)))
 (let (($x195 (= $x243 true)))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x213 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x213 true)))
 (let (($x123 (= $x211 true)))
 (let (($x181 (= $x123 true)))
 (let (($x92 (= $x197 true)))
 (let (($x175 (= $x92 true)))
 (let (($x27 (= $x175 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x119)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x164)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x104 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (and $x104 $x85)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x78 $x161)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x7 $x109)))
 (let (($x18 (not $x19)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x168 $x8)))
 (let (($x106 (and (not $x160) $x18)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x146 $x49)))
 (let (($x113 (not $x179)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x134 $x94)))
 (let (($x66 (and (not $x22) $x113)))
 (let (($x124 (and (and (and (and (and (and $x66 $x106) $x33) $x47) $x25) $x50) $x163)))
 (let (($x223 (and $x124 $x171)))
 (let (($x82 (= symbol.1 dst_symbol_addr.1)))
 (let (($x143 (and $x82 $x223)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x37) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x73 $x14)))))))
 (let (($x166 (and $x102 $x143)))
 (let (($x35 (= $x166 true)))
 (let (($x162 (= $x35 true)))
 (let (($x55 (= $x162 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x89 true)))
 (let (($x100 (= $x91 true)))
 (let (($x83 (= $x100 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x90 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x68 (and $x74 $x40)))
 (let (($x149 (and $x68 $x53)))
 (let (($x10 (and $x149 $x83)))
 (let (($x144 (and $x10 $x55)))
 (let (($x52 (and $x144 $x27)))
 (let (($x210 (and $x52 $x181)))
 (let (($x188 (and $x210 $x129)))
 (let (($x193 (and $x188 $x189)))
 (let (($x235 (and $x193 $x263)))
 (let (($x244 (and $x235 $x185)))
 (let (($x110 (and $x244 $x331)))
 (let (($x280 (and $x110 $x259)))
 (let (($x247 (and $x280 $x294)))
 (let (($x23 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and (not $x23) $x247)))
 (let (($x236 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x236 $x169)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x167 $x51)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x298 (and $x187 $x269)))
 (let (($x81 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x251 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x264 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x81)))))
 (let (($x229 (and $x264 $x298)))
 (let (($x198 (=> $x229 $x324)))
 (not $x198))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (bvsge ?x207 (_ bv0 32))))
 (let (($x38 (= $x249 true)))
 (let (($x154 (= $x38 true)))
 (let (($x266 (forall ((input.ind-%var859X (_ BitVec 32)) )(let (($x282 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var859X)))
 (=> $x282 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var859X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var858X (_ BitVec 32)) )(let (($x282 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var858X)))
 (= $x282 false)))
 ))
 (let (($x300 (and $x152 $x266)))
 (let (($x127 (= $x300 true)))
 (let (($x103 (forall ((input.ind-%var853X (_ BitVec 32)) )(let ((?x169 (bvadd symbol.1 (bvmul input.ind-%var853X (_ bv4 32)))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x169))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x169 (_ bv2 32))) ?x229)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x169 (_ bv3 32))) ?x254)))
 (let ((?x326 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var853X)))
 (let (($x292 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var853X)))
 (=> $x292 (= ?x326 ?x220)))))))))
 ))
 (let (($x256 (forall ((input.ind-%var852X (_ BitVec 32)) )(let (($x65 (and (bvule (_ bv0 32) input.ind-%var852X) (bvult input.ind-%var852X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x292 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var852X)))
 (= $x292 $x65))))
 ))
 (let (($x276 (and $x256 $x103)))
 (let (($x221 (= $x276 true)))
 (let ((?x203 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x203)))
 (let (($x258 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x331 (= $x258 true)))
 (let (($x110 (= $x331 true)))
 (let (($x9 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (= $x9 true)))
 (let (($x185 (= $x191 true)))
 (let (($x244 (= $x185 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x234 (bvsub ?x183 ?x176)))
 (let (($x95 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x234) (bvult ?x183 ?x234))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x212)))
 (let ((?x209 ((_ extract 63 32) ?x156)))
 (let (($x227 (= (_ bv0 32) ?x209)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x233) $x227) $x95)))
 (let (($x219 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x241 (and $x219 $x117)))
 (let (($x243 (= true $x241)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (=> $x197 $x243)))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x188 (= $x129 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x123 (= $x211 true)))
 (let (($x181 (= $x123 true)))
 (let (($x210 (= $x181 true)))
 (let (($x175 (= $x197 true)))
 (let (($x27 (= $x175 true)))
 (let (($x52 (= $x27 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x50)))
 (let ((?x145 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x145)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (and $x12 $x104)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x47 $x153)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x7 $x109)))
 (let (($x18 (not $x19)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x8 $x160)))
 (let (($x125 (and (not $x180) $x18)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x146 $x49)))
 (let (($x113 (not $x179)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x94 $x22)))
 (let (($x168 (and (not $x120) $x113)))
 (let (($x223 (and (and (and (and (and (and $x168 $x125) $x33) $x133) $x85) $x25) $x157)))
 (let (($x143 (and $x223 $x137)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x166 (and $x59 $x143)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x86 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x86) (or $x54 $x13)))))))
 (let (($x35 (and $x134 $x166)))
 (let (($x162 (= $x35 true)))
 (let (($x55 (= $x162 true)))
 (let (($x144 (= $x55 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x89 true)))
 (let (($x100 (= $x91 true)))
 (let (($x83 (= $x100 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x90 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x68 (and $x74 $x40)))
 (let (($x149 (and $x68 $x53)))
 (let (($x10 (and $x149 $x83)))
 (let (($x92 (and $x10 $x144)))
 (let (($x213 (and $x92 $x52)))
 (let (($x87 (and $x213 $x210)))
 (let (($x48 (and $x87 $x188)))
 (let (($x112 (and $x48 $x193)))
 (let (($x16 (and $x112 $x235)))
 (let (($x43 (and $x16 $x244)))
 (let (($x246 (and $x43 $x110)))
 (let (($x24 (and $x246 $x221)))
 (let (($x192 (and $x24 $x127)))
 (let (($x20 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and (not $x20) $x192)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x318 (and $x283 $x257)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x330 $x318)))
 (let (($x270 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x328 (and $x270 $x284)))
 (let (($x97 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x187 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x97)))))
 (let (($x253 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x97)))))
 (let (($x295 (and $x253 $x328)))
 (let (($x93 (=> $x295 $x154)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (bvsge ?x207 (_ bv0 32))))
 (let (($x38 (= $x249 true)))
 (let (($x154 (= $x38 true)))
 (let (($x266 (forall ((input.ind-%var859X (_ BitVec 32)) )(let (($x282 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var859X)))
 (=> $x282 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var859X) (_ bv0 32)))))
 ))
 (let (($x152 (forall ((input.ind-%var858X (_ BitVec 32)) )(let (($x282 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var858X)))
 (= $x282 false)))
 ))
 (let (($x300 (and $x152 $x266)))
 (let (($x127 (= $x300 true)))
 (let (($x103 (forall ((input.ind-%var853X (_ BitVec 32)) )(let ((?x169 (bvadd symbol.1 (bvmul input.ind-%var853X (_ bv4 32)))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x169))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x169 (_ bv2 32))) ?x229)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x169 (_ bv3 32))) ?x254)))
 (let ((?x326 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var853X)))
 (let (($x292 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var853X)))
 (=> $x292 (= ?x326 ?x220)))))))))
 ))
 (let (($x256 (forall ((input.ind-%var852X (_ BitVec 32)) )(let (($x65 (and (bvule (_ bv0 32) input.ind-%var852X) (bvult input.ind-%var852X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x292 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var852X)))
 (= $x292 $x65))))
 ))
 (let (($x276 (and $x256 $x103)))
 (let (($x221 (= $x276 true)))
 (let ((?x203 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x56 (bvneg ?x203)))
 (let (($x258 (= ?x56 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x331 (= $x258 true)))
 (let (($x110 (= $x331 true)))
 (let (($x9 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (= $x9 true)))
 (let (($x185 (= $x191 true)))
 (let (($x244 (= $x185 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (= $x159 true)))
 (let (($x263 (= $x206 true)))
 (let (($x235 (= $x263 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x107 true)))
 (let (($x189 (= $x186 true)))
 (let (($x193 (= $x189 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x234 (bvsub ?x183 ?x176)))
 (let (($x95 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x234) (bvult ?x183 ?x234))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x212)))
 (let ((?x209 ((_ extract 63 32) ?x156)))
 (let (($x227 (= (_ bv0 32) ?x209)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x233) $x227) $x95)))
 (let (($x219 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x241 (and $x219 $x117)))
 (let (($x243 (= true $x241)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (=> $x197 $x243)))
 (let (($x150 (= $x195 true)))
 (let (($x129 (= $x150 true)))
 (let (($x188 (= $x129 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x123 (= $x211 true)))
 (let (($x181 (= $x123 true)))
 (let (($x210 (= $x181 true)))
 (let (($x175 (= $x197 true)))
 (let (($x27 (= $x175 true)))
 (let (($x52 (= $x27 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x50)))
 (let ((?x145 (bvand symbol.1 (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x145)))
 (let ((?x161 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x161)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (and $x12 $x104)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x47 $x153)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x7 $x109)))
 (let (($x18 (not $x19)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x8 $x160)))
 (let (($x125 (and (not $x180) $x18)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x146 $x49)))
 (let (($x113 (not $x179)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x94 $x22)))
 (let (($x168 (and (not $x120) $x113)))
 (let (($x223 (and (and (and (and (and (and $x168 $x125) $x33) $x133) $x85) $x25) $x157)))
 (let (($x143 (and $x223 $x137)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x166 (and $x59 $x143)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x86 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x86) (or $x54 $x13)))))))
 (let (($x35 (and $x134 $x166)))
 (let (($x162 (= $x35 true)))
 (let (($x55 (= $x162 true)))
 (let (($x144 (= $x55 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x89 true)))
 (let (($x100 (= $x91 true)))
 (let (($x83 (= $x100 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x90 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x62 (= ?x88 input.dst.llvm-%n)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x68 (and $x74 $x40)))
 (let (($x149 (and $x68 $x53)))
 (let (($x10 (and $x149 $x83)))
 (let (($x92 (and $x10 $x144)))
 (let (($x213 (and $x92 $x52)))
 (let (($x87 (and $x213 $x210)))
 (let (($x48 (and $x87 $x188)))
 (let (($x112 (and $x48 $x193)))
 (let (($x16 (and $x112 $x235)))
 (let (($x43 (and $x16 $x244)))
 (let (($x246 (and $x43 $x110)))
 (let (($x24 (and $x246 $x221)))
 (let (($x192 (and $x24 $x127)))
 (let (($x20 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and (not $x20) $x192)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x318 (and $x283 $x257)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x284 (and $x330 $x318)))
 (let (($x270 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x328 (and $x270 $x284)))
 (let (($x97 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x187 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x97)))))
 (let (($x253 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x97)))))
 (let (($x295 (and $x253 $x328)))
 (let (($x93 (=> $x295 $x154)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (bvule ?x301 input.dst.llvm-%n)))
 (let (($x297 (= $x294 true)))
 (let (($x114 (= $x297 true)))
 (let (($x218 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var871X)))
 (=> $x228 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var871X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var870X)))
 (= $x228 false)))
 ))
 (let (($x268 (and $x126 $x218)))
 (let (($x199 (= $x268 true)))
 (let (($x32 (forall ((input.ind-%var865X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var865X (_ bv4 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x295)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x38)))
 (let ((?x51 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var865X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var865X)))
 (=> $x65 (= ?x51 ?x39)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var864X (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) input.ind-%var864X) (bvult input.ind-%var864X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var864X)))
 (= $x65 $x198))))
 ))
 (let (($x96 (and $x201 $x32)))
 (let (($x273 (= $x96 true)))
 (let ((?x56 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x56)))
 (let (($x331 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x331 true)))
 (let (($x246 (= $x110 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x185 (= ?x88 input.dst.llvm-%n)))
 (let (($x244 (= $x185 true)))
 (let (($x43 (= $x244 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x189 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x188 (= $x129 true)))
 (let (($x48 (= $x188 true)))
 (let (($x107 (= $x48 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x212 (bvsub ?x183 ?x176)))
 (let (($x242 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x212) (bvult ?x183 ?x212))))
 (let ((?x216 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x216)))
 (let ((?x142 ((_ extract 63 32) ?x233)))
 (let (($x128 (= (_ bv0 32) ?x142)))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x30 (and (and (and true $x5) $x128) $x242)))
 (let (($x87 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x214 (and $x87 $x30)))
 (let (($x95 (= true $x214)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (=> $x197 $x95)))
 (let (($x241 (= $x117 true)))
 (let (($x243 (= $x241 true)))
 (let (($x195 (= $x243 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x52 (= $x27 true)))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x55 (= $x197 true)))
 (let (($x144 (= $x55 true)))
 (let (($x92 (= $x144 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x153)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x78)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x163 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x138 (= input.memlabel-mem--symbol.1_end ?x163)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (and $x33 $x138)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x164 $x133)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x8 $x160)))
 (let (($x106 (not $x180)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (and $x179 $x113)))
 (let (($x109 (and (not $x168) $x106)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x94 $x22)))
 (let (($x66 (not $x120)))
 (let (($x108 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x134 $x108)))
 (let (($x49 (and (not $x59) $x66)))
 (let (($x157 (and (and (and (and (and (and $x49 $x109) $x19) $x125) $x124) $x12) $x104)))
 (let (($x223 (and $x157 $x85)))
 (let (($x83 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x83 $x223)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x84) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x101 $x54)))))))
 (let (($x137 (and $x80 $x50)))
 (let (($x143 (= $x137 true)))
 (let (($x166 (= $x143 true)))
 (let (($x35 (= $x166 true)))
 (let (($x155 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let (($x149 (= $x53 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x68 (= $x40 true)))
 (let (($x62 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x17 (and $x74 $x68)))
 (let (($x89 (and $x17 $x149)))
 (let (($x162 (and $x89 $x35)))
 (let (($x175 (and $x162 $x92)))
 (let (($x123 (and $x175 $x211)))
 (let (($x150 (and $x123 $x195)))
 (let (($x186 (and $x150 $x107)))
 (let (($x206 (and $x186 $x159)))
 (let (($x191 (and $x206 $x9)))
 (let (($x203 (and $x191 $x43)))
 (let (($x329 (and $x203 $x246)))
 (let (($x319 (and $x329 $x273)))
 (let (($x323 (and $x319 $x199)))
 (let (($x132 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x265 (and (not $x132) $x323)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and $x23 $x265)))
 (let (($x320 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x320 $x57)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x190 $x225)))
 (let (($x264 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x270 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x264)))))
 (let (($x111 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x264)))))
 (let (($x139 (and $x111 $x174)))
 (let (($x296 (=> $x139 $x114)))
 (not $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (bvule ?x301 input.dst.llvm-%n)))
 (let (($x297 (= $x294 true)))
 (let (($x114 (= $x297 true)))
 (let (($x218 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var871X)))
 (=> $x228 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var871X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var870X)))
 (= $x228 false)))
 ))
 (let (($x268 (and $x126 $x218)))
 (let (($x199 (= $x268 true)))
 (let (($x32 (forall ((input.ind-%var865X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var865X (_ bv4 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x295)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x38)))
 (let ((?x51 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var865X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var865X)))
 (=> $x65 (= ?x51 ?x39)))))))))
 ))
 (let (($x201 (forall ((input.ind-%var864X (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) input.ind-%var864X) (bvult input.ind-%var864X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var864X)))
 (= $x65 $x198))))
 ))
 (let (($x96 (and $x201 $x32)))
 (let (($x273 (= $x96 true)))
 (let ((?x56 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x56)))
 (let (($x331 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x331 true)))
 (let (($x246 (= $x110 true)))
 (let ((?x76 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x76)))
 (let (($x185 (= ?x88 input.dst.llvm-%n)))
 (let (($x244 (= $x185 true)))
 (let (($x43 (= $x244 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x235 (= $x263 true)))
 (let (($x16 (= $x235 true)))
 (let (($x9 (= $x16 true)))
 (let (($x189 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x189 true)))
 (let (($x112 (= $x193 true)))
 (let (($x159 (= $x112 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x188 (= $x129 true)))
 (let (($x48 (= $x188 true)))
 (let (($x107 (= $x48 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x212 (bvsub ?x183 ?x176)))
 (let (($x242 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x212) (bvult ?x183 ?x212))))
 (let ((?x216 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x216)))
 (let ((?x142 ((_ extract 63 32) ?x233)))
 (let (($x128 (= (_ bv0 32) ?x142)))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x30 (and (and (and true $x5) $x128) $x242)))
 (let (($x87 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x214 (and $x87 $x30)))
 (let (($x95 (= true $x214)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (=> $x197 $x95)))
 (let (($x241 (= $x117 true)))
 (let (($x243 (= $x241 true)))
 (let (($x195 (= $x243 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x52 (= $x27 true)))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x55 (= $x197 true)))
 (let (($x144 (= $x55 true)))
 (let (($x92 (= $x144 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x153)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x78)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x163 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x138 (= input.memlabel-mem--symbol.1_end ?x163)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (and $x33 $x138)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x164 $x133)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x8 $x160)))
 (let (($x106 (not $x180)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (and $x179 $x113)))
 (let (($x109 (and (not $x168) $x106)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x94 $x22)))
 (let (($x66 (not $x120)))
 (let (($x108 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x134 $x108)))
 (let (($x49 (and (not $x59) $x66)))
 (let (($x157 (and (and (and (and (and (and $x49 $x109) $x19) $x125) $x124) $x12) $x104)))
 (let (($x223 (and $x157 $x85)))
 (let (($x83 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x83 $x223)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x147 (or (bvugt input.memlabel-mem--symbol.1_begin ?x84) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x147) (or $x101 $x54)))))))
 (let (($x137 (and $x80 $x50)))
 (let (($x143 (= $x137 true)))
 (let (($x166 (= $x143 true)))
 (let (($x35 (= $x166 true)))
 (let (($x155 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x6 (= $x155 true)))
 (let (($x53 (= $x6 true)))
 (let (($x149 (= $x53 true)))
 (let (($x90 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x41 (= $x90 true)))
 (let (($x40 (= $x41 true)))
 (let (($x68 (= $x40 true)))
 (let (($x62 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x62 true)))
 (let (($x69 (= $x79 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x74 (and $x36 $x69)))
 (let (($x17 (and $x74 $x68)))
 (let (($x89 (and $x17 $x149)))
 (let (($x162 (and $x89 $x35)))
 (let (($x175 (and $x162 $x92)))
 (let (($x123 (and $x175 $x211)))
 (let (($x150 (and $x123 $x195)))
 (let (($x186 (and $x150 $x107)))
 (let (($x206 (and $x186 $x159)))
 (let (($x191 (and $x206 $x9)))
 (let (($x203 (and $x191 $x43)))
 (let (($x329 (and $x203 $x246)))
 (let (($x319 (and $x329 $x273)))
 (let (($x323 (and $x319 $x199)))
 (let (($x132 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x265 (and (not $x132) $x323)))
 (let (($x23 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and $x23 $x265)))
 (let (($x320 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x320 $x57)))
 (let (($x190 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x190 $x225)))
 (let (($x264 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x270 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x264)))))
 (let (($x111 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x264)))))
 (let (($x139 (and $x111 $x174)))
 (let (($x296 (=> $x139 $x114)))
 (not $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x291 (forall ((input.ind-%var891X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var891X (_ bv4 32)))))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x264 (bvadd ?x183 (_ bv3 32))))
 (let ((?x165 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x183 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (store ?x165 (bvadd ?x183 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x184 (store ?x121 (bvadd ?x183 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x278 (store ?x184 ?x264 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x240 (concat (select ?x278 (bvadd ?x265 (_ bv2 32))) (concat (select ?x278 (bvadd ?x265 (_ bv1 32))) (select ?x278 ?x265)))))
 (let ((?x318 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var891X)))
 (let (($x77 (= input.ind-%var891X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x279 (= (ite $x77 input.spec-%var-i-0.L3%6%bbentry ?x318) (concat (select ?x278 (bvadd ?x265 (_ bv3 32))) ?x240))))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var891X)))
 (let (($x239 (or $x198 $x77)))
 (=> $x239 $x279))))))))))))))))
 ))
 (let (($x237 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x154 (bvule (_ bv0 32) input.ind-%var890X)))
 (let (($x141 (and $x154 (bvult input.ind-%var890X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x77 (= input.ind-%var890X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var890X)))
 (let (($x239 (or $x198 $x77)))
 (= $x239 $x141)))))))
 ))
 (let (($x315 (and $x237 $x291)))
 (let (($x269 (= true true)))
 (let (($x287 (and $x269 $x315)))
 (let (($x289 (= $x287 true)))
 (let (($x332 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var883X)))
 (=> $x298 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var883X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var882X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var882X)))
 (= $x298 false)))
 ))
 (let (($x266 (and $x148 $x332)))
 (let (($x170 (= $x266 true)))
 (let (($x91 (forall ((input.ind-%var877X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var877X (_ bv4 32)))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x139)))
 (let ((?x98 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x297)))
 (let ((?x318 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var877X)))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (=> $x198 (= ?x318 ?x98)))))))))
 ))
 (let (($x207 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x154 (bvule (_ bv0 32) input.ind-%var876X)))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var876X)))
 (= $x198 (and $x154 (bvult input.ind-%var876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x262 (and $x207 $x91)))
 (let (($x229 (= $x262 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x331 (bvneg ?x258)))
 (let (($x110 (= ?x331 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x110 true)))
 (let (($x329 (= $x246 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x189)))
 (let ((?x107 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x107)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x243 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x195 (= input.memlabel-mem--symbol.1_end ?x243)))
 (let (($x241 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x150 (and $x241 $x195)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x117 $x150)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x234 $x156)))
 (let (($x209 (not $x212)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x233 $x142)))
 (let (($x242 (and (not $x128) $x209)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x219 $x231)))
 (let (($x222 (not $x5)))
 (let (($x232 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x87 $x232)))
 (let (($x216 (and (not $x215) $x222)))
 (let (($x16 (and (and (and (and (and (and $x216 $x242) $x30) $x95) $x129) $x48) $x186)))
 (let (($x9 (and $x16 $x193)))
 (let (($x223 (= symbol.1 dst_symbol_addr.1)))
 (let (($x191 (and $x223 $x9)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x162 (or (bvugt input.memlabel-mem--symbol.1_begin ?x143) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x162) (or $x175 $x27)))))))
 (let (($x185 (and $x210 $x191)))
 (let (($x244 (= $x185 true)))
 (let (($x43 (= $x244 true)))
 (let (($x203 (= $x43 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x145 (= $x12 true)))
 (let (($x78 (= $x145 true)))
 (let (($x104 (= $x78 true)))
 (let (($x138 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x133 (= $x138 true)))
 (let (($x124 (= $x133 true)))
 (let (($x171 (= $x124 true)))
 (let (($x125 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x25 (= $x125 true)))
 (let (($x164 (= $x25 true)))
 (let (($x33 (= $x164 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x109 true)))
 (let (($x19 (= $x119 true)))
 (let (($x161 (= $x19 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x8 (= $x7 true)))
 (let (($x160 (= $x8 true)))
 (let (($x180 (= $x160 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x80 (bvsub ?x183 ?x176)))
 (let (($x108 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x80) (bvult ?x183 ?x80))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x14)))
 (let ((?x116 ((_ extract 63 32) ?x13)))
 (let (($x34 (= (_ bv0 32) ?x116)))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x94 (and (and (and true $x73) $x34) $x108)))
 (let (($x99 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x22 (and $x99 $x94)))
 (let (($x120 (= true $x22)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x197 $x120)))
 (let (($x49 (= $x66 true)))
 (let (($x179 (= $x49 true)))
 (let (($x113 (= $x179 true)))
 (let (($x149 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x149 true)))
 (let (($x10 (= $x89 true)))
 (let (($x37 (= $x10 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x68 true)))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x69 (= $x197 true)))
 (let (($x74 (= $x69 true)))
 (let (($x90 (= $x74 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x76 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x41 (and $x79 $x90)))
 (let (($x53 (and $x41 $x6)))
 (let (($x102 (and $x53 $x37)))
 (let (($x168 (and $x102 $x113)))
 (let (($x106 (and $x168 $x180)))
 (let (($x18 (and $x106 $x161)))
 (let (($x163 (and $x18 $x33)))
 (let (($x47 (and $x163 $x171)))
 (let (($x157 (and $x47 $x104)))
 (let (($x56 (and $x157 $x203)))
 (let (($x261 (and $x56 $x329)))
 (let (($x202 (and $x261 $x229)))
 (let (($x204 (and $x202 $x170)))
 (let (($x293 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and (not $x293) $x204)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and $x20 $x247)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x236 $x300)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x167 $x15)))
 (let (($x253 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x190 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x253)))))
 (let (($x135 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x253)))))
 (let (($x274 (and $x135 $x178)))
 (let (($x316 (=> $x274 $x289)))
 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x291 (forall ((input.ind-%var891X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var891X (_ bv4 32)))))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x264 (bvadd ?x183 (_ bv3 32))))
 (let ((?x165 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x183 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x121 (store ?x165 (bvadd ?x183 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x184 (store ?x121 (bvadd ?x183 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x278 (store ?x184 ?x264 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x240 (concat (select ?x278 (bvadd ?x265 (_ bv2 32))) (concat (select ?x278 (bvadd ?x265 (_ bv1 32))) (select ?x278 ?x265)))))
 (let ((?x318 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var891X)))
 (let (($x77 (= input.ind-%var891X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x279 (= (ite $x77 input.spec-%var-i-0.L3%6%bbentry ?x318) (concat (select ?x278 (bvadd ?x265 (_ bv3 32))) ?x240))))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var891X)))
 (let (($x239 (or $x198 $x77)))
 (=> $x239 $x279))))))))))))))))
 ))
 (let (($x237 (forall ((input.ind-%var890X (_ BitVec 32)) )(let (($x154 (bvule (_ bv0 32) input.ind-%var890X)))
 (let (($x141 (and $x154 (bvult input.ind-%var890X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x77 (= input.ind-%var890X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var890X)))
 (let (($x239 (or $x198 $x77)))
 (= $x239 $x141)))))))
 ))
 (let (($x315 (and $x237 $x291)))
 (let (($x269 (= true true)))
 (let (($x287 (and $x269 $x315)))
 (let (($x289 (= $x287 true)))
 (let (($x332 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var883X)))
 (=> $x298 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var883X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var882X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var882X)))
 (= $x298 false)))
 ))
 (let (($x266 (and $x148 $x332)))
 (let (($x170 (= $x266 true)))
 (let (($x91 (forall ((input.ind-%var877X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var877X (_ bv4 32)))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x139)))
 (let ((?x98 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x297)))
 (let ((?x318 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var877X)))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (=> $x198 (= ?x318 ?x98)))))))))
 ))
 (let (($x207 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x154 (bvule (_ bv0 32) input.ind-%var876X)))
 (let (($x198 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var876X)))
 (= $x198 (and $x154 (bvult input.ind-%var876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x262 (and $x207 $x91)))
 (let (($x229 (= $x262 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x331 (bvneg ?x258)))
 (let (($x110 (= ?x331 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x110 true)))
 (let (($x329 (= $x246 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x189)))
 (let ((?x107 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x107)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x243 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x195 (= input.memlabel-mem--symbol.1_end ?x243)))
 (let (($x241 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x150 (and $x241 $x195)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x117 $x150)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x234 $x156)))
 (let (($x209 (not $x212)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x233 $x142)))
 (let (($x242 (and (not $x128) $x209)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x219 $x231)))
 (let (($x222 (not $x5)))
 (let (($x232 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x87 $x232)))
 (let (($x216 (and (not $x215) $x222)))
 (let (($x16 (and (and (and (and (and (and $x216 $x242) $x30) $x95) $x129) $x48) $x186)))
 (let (($x9 (and $x16 $x193)))
 (let (($x223 (= symbol.1 dst_symbol_addr.1)))
 (let (($x191 (and $x223 $x9)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x162 (or (bvugt input.memlabel-mem--symbol.1_begin ?x143) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x162) (or $x175 $x27)))))))
 (let (($x185 (and $x210 $x191)))
 (let (($x244 (= $x185 true)))
 (let (($x43 (= $x244 true)))
 (let (($x203 (= $x43 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x145 (= $x12 true)))
 (let (($x78 (= $x145 true)))
 (let (($x104 (= $x78 true)))
 (let (($x138 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x133 (= $x138 true)))
 (let (($x124 (= $x133 true)))
 (let (($x171 (= $x124 true)))
 (let (($x125 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x25 (= $x125 true)))
 (let (($x164 (= $x25 true)))
 (let (($x33 (= $x164 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (= $x109 true)))
 (let (($x19 (= $x119 true)))
 (let (($x161 (= $x19 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x8 (= $x7 true)))
 (let (($x160 (= $x8 true)))
 (let (($x180 (= $x160 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x80 (bvsub ?x183 ?x176)))
 (let (($x108 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x80) (bvult ?x183 ?x80))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x14)))
 (let ((?x116 ((_ extract 63 32) ?x13)))
 (let (($x34 (= (_ bv0 32) ?x116)))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x94 (and (and (and true $x73) $x34) $x108)))
 (let (($x99 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x22 (and $x99 $x94)))
 (let (($x120 (= true $x22)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x197 $x120)))
 (let (($x49 (= $x66 true)))
 (let (($x179 (= $x49 true)))
 (let (($x113 (= $x179 true)))
 (let (($x149 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x149 true)))
 (let (($x10 (= $x89 true)))
 (let (($x37 (= $x10 true)))
 (let (($x68 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x68 true)))
 (let (($x155 (= $x17 true)))
 (let (($x6 (= $x155 true)))
 (let (($x69 (= $x197 true)))
 (let (($x74 (= $x69 true)))
 (let (($x90 (= $x74 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x76 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x41 (and $x79 $x90)))
 (let (($x53 (and $x41 $x6)))
 (let (($x102 (and $x53 $x37)))
 (let (($x168 (and $x102 $x113)))
 (let (($x106 (and $x168 $x180)))
 (let (($x18 (and $x106 $x161)))
 (let (($x163 (and $x18 $x33)))
 (let (($x47 (and $x163 $x171)))
 (let (($x157 (and $x47 $x104)))
 (let (($x56 (and $x157 $x203)))
 (let (($x261 (and $x56 $x329)))
 (let (($x202 (and $x261 $x229)))
 (let (($x204 (and $x202 $x170)))
 (let (($x293 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x247 (and (not $x293) $x204)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and $x20 $x247)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x236 $x300)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x167 $x15)))
 (let (($x253 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x190 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x253)))))
 (let (($x135 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x253)))))
 (let (($x274 (and $x135 $x178)))
 (let (($x316 (=> $x274 $x289)))
 (not $x316))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (not $x197)))
 (let (($x321 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x217 (not $x321)))
 (let (($x277 (or $x217 $x141)))
 (let (($x237 (= $x277 true)))
 (let (($x245 (= $x237 true)))
 (let (($x247 (forall ((input.ind-%var903X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var903X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x91 false)))
 ))
 (let (($x300 (and $x298 $x247)))
 (let (($x15 (= $x300 true)))
 (let (($x57 (forall ((input.ind-%var897X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var897X (_ bv4 32)))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x323)))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x296)))
 (let ((?x189 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var897X)))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x206 (= ?x189 ?x294)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x188 (and (bvule (_ bv0 32) input.ind-%var896X) (bvult input.ind-%var896X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x206 $x188))))
 ))
 (let (($x139 (and $x235 $x57)))
 (let (($x297 (= $x139 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x156)))
 (let (($x209 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x209 true)))
 (let (($x112 (= $x242 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x219)))
 (let (($x142 (= ?x231 input.dst.llvm-%n)))
 (let (($x128 (= $x142 true)))
 (let (($x227 (= $x128 true)))
 (let (($x5 (= ?x231 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x222 (= $x5 true)))
 (let (($x216 (= $x222 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x223 (= $x85 true)))
 (let (($x87 (= $x223 true)))
 (let (($x232 (= $x87 true)))
 (let (($x52 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x123 (= $x211 true)))
 (let (($x55 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x55 true)))
 (let (($x175 (= $x144 true)))
 (let (($x92 (= $x175 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x181 true)))
 (let (($x166 (= $x143 true)))
 (let (($x35 (= $x166 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x104 (= $x78 true)))
 (let (($x157 (= $x104 true)))
 (let (($x50 (= $x157 true)))
 (let (($x124 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x124 true)))
 (let (($x47 (= $x171 true)))
 (let (($x12 (= $x47 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x164 (= $x25 true)))
 (let (($x33 (= $x164 true)))
 (let (($x163 (= $x33 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x179)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x66)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x108 (and $x100 $x134)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x146 $x108)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x86 $x101)))
 (let (($x59 (not $x73)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (and $x99 $x131)))
 (let (($x14 (and (not $x147) $x59)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x89 $x10)))
 (let (($x102 (not $x37)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x6 $x53)))
 (let (($x82 (and (not $x149) $x102)))
 (let (($x106 (and (and (and (and (and (and $x82 $x14) $x13) $x34) $x94) $x120) $x49)))
 (let (($x109 (and $x106 $x113)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x119 (and $x45 $x109)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x69 $x74)))))))
 (let (($x19 (and $x155 $x119)))
 (let (($x161 (= $x19 true)))
 (let (($x18 (= $x161 true)))
 (let (($x125 (= $x18 true)))
 (let (($x138 (and $x125 $x163)))
 (let (($x145 (and $x138 $x12)))
 (let (($x137 (and $x145 $x50)))
 (let (($x162 (and $x137 $x35)))
 (let (($x27 (and $x162 $x92)))
 (let (($x210 (and $x27 $x123)))
 (let (($x215 (and $x210 $x232)))
 (let (($x233 (and $x215 $x216)))
 (let (($x234 (and $x233 $x227)))
 (let (($x30 (and $x234 $x112)))
 (let (($x98 (and $x30 $x297)))
 (let (($x178 (and $x98 $x15)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x274 (and $x132 $x178)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x283 $x274)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x330 $x269)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x58 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x239 (and $x58 $x77)))
 (let (($x288 (=> $x239 $x245)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (not $x197)))
 (let (($x321 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x217 (not $x321)))
 (let (($x277 (or $x217 $x141)))
 (let (($x237 (= $x277 true)))
 (let (($x245 (= $x237 true)))
 (let (($x247 (forall ((input.ind-%var903X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var903X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var903X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var902X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var902X)))
 (= $x91 false)))
 ))
 (let (($x300 (and $x298 $x247)))
 (let (($x15 (= $x300 true)))
 (let (($x57 (forall ((input.ind-%var897X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var897X (_ bv4 32)))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x323)))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x296)))
 (let ((?x189 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var897X)))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var897X)))
 (=> $x206 (= ?x189 ?x294)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var896X (_ BitVec 32)) )(let (($x188 (and (bvule (_ bv0 32) input.ind-%var896X) (bvult input.ind-%var896X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var896X)))
 (= $x206 $x188))))
 ))
 (let (($x139 (and $x235 $x57)))
 (let (($x297 (= $x139 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x156)))
 (let (($x209 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x209 true)))
 (let (($x112 (= $x242 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x219)))
 (let (($x142 (= ?x231 input.dst.llvm-%n)))
 (let (($x128 (= $x142 true)))
 (let (($x227 (= $x128 true)))
 (let (($x5 (= ?x231 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x222 (= $x5 true)))
 (let (($x216 (= $x222 true)))
 (let (($x85 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x223 (= $x85 true)))
 (let (($x87 (= $x223 true)))
 (let (($x232 (= $x87 true)))
 (let (($x52 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x123 (= $x211 true)))
 (let (($x55 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x55 true)))
 (let (($x175 (= $x144 true)))
 (let (($x92 (= $x175 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x181 true)))
 (let (($x166 (= $x143 true)))
 (let (($x35 (= $x166 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x104 (= $x78 true)))
 (let (($x157 (= $x104 true)))
 (let (($x50 (= $x157 true)))
 (let (($x124 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x124 true)))
 (let (($x47 (= $x171 true)))
 (let (($x12 (= $x47 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x164 (= $x25 true)))
 (let (($x33 (= $x164 true)))
 (let (($x163 (= $x33 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x179)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x66)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x108 (and $x100 $x134)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x146 $x108)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x86 $x101)))
 (let (($x59 (not $x73)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (and $x99 $x131)))
 (let (($x14 (and (not $x147) $x59)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x89 $x10)))
 (let (($x102 (not $x37)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x6 $x53)))
 (let (($x82 (and (not $x149) $x102)))
 (let (($x106 (and (and (and (and (and (and $x82 $x14) $x13) $x34) $x94) $x120) $x49)))
 (let (($x109 (and $x106 $x113)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x119 (and $x45 $x109)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x69 $x74)))))))
 (let (($x19 (and $x155 $x119)))
 (let (($x161 (= $x19 true)))
 (let (($x18 (= $x161 true)))
 (let (($x125 (= $x18 true)))
 (let (($x138 (and $x125 $x163)))
 (let (($x145 (and $x138 $x12)))
 (let (($x137 (and $x145 $x50)))
 (let (($x162 (and $x137 $x35)))
 (let (($x27 (and $x162 $x92)))
 (let (($x210 (and $x27 $x123)))
 (let (($x215 (and $x210 $x232)))
 (let (($x233 (and $x215 $x216)))
 (let (($x234 (and $x233 $x227)))
 (let (($x30 (and $x234 $x112)))
 (let (($x98 (and $x30 $x297)))
 (let (($x178 (and $x98 $x15)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x274 (and $x132 $x178)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x283 $x274)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x330 $x269)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x58 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x239 (and $x58 $x77)))
 (let (($x288 (=> $x239 $x245)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x299 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x295 (bvmul (_ bv4294967295 32) ?x299)))
 (let ((?x292 (bvneg ?x295)))
 (let (($x172 (= ?x292 ?x152)))
 (let (($x249 (= $x172 true)))
 (let (($x290 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var915X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var915X) (_ bv0 32)))))
 ))
 (let (($x303 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var914X)))
 (= $x121 false)))
 ))
 (let (($x291 (and $x303 $x290)))
 (let (($x315 (= $x291 true)))
 (let (($x148 (forall ((input.ind-%var909X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var909X (_ bv4 32)))))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x195)))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x267)))
 (let ((?x293 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var909X)))
 (let (($x274 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x274 (= ?x293 ?x186)))))))))
 ))
 (let (($x288 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var908X) (bvult input.ind-%var908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x274 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x274 $x237))))
 ))
 (let (($x266 (and $x288 $x148)))
 (let (($x208 (= $x266 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x202)))
 (let (($x103 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x103 true)))
 (let (($x204 (= $x170 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x139 (= $x57 true)))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x323 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x296 (= $x323 true)))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x265 true)))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (= $x93 true)))
 (let (($x228 (= $x282 true)))
 (let (($x301 (= $x228 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x188 true)))
 (let (($x235 (= $x48 true)))
 (let (($x189 (= $x235 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x233 (bvsub ?x183 ?x176)))
 (let (($x234 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x233) (bvult ?x183 ?x233))))
 (let ((?x231 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvmul (_ bv4 64) ?x231)))
 (let ((?x222 ((_ extract 63 32) ?x5)))
 (let (($x216 (= (_ bv0 32) ?x222)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x209 (and (and (and true $x140) $x216) $x234)))
 (let (($x85 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x242 (and $x85 $x209)))
 (let (($x112 (= true $x242)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x30 (=> $x197 $x112)))
 (let (($x95 (= $x30 true)))
 (let (($x206 (= $x95 true)))
 (let (($x263 (= $x206 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x27 (= $x92 true)))
 (let (($x52 (= $x27 true)))
 (let (($x213 (= $x52 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x162 (= $x35 true)))
 (let (($x55 (= $x162 true)))
 (let (($x144 (= $x55 true)))
 (let (($x137 (= $x197 true)))
 (let (($x181 (= $x137 true)))
 (let (($x143 (= $x181 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x25)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x18)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x179 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x113 (= input.memlabel-mem--symbol.1_end ?x179)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (and $x49 $x113)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x66 $x109)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x80 $x83)))
 (let (($x108 (not $x134)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x8 $x146)))
 (let (($x160 (and (not $x100) $x108)))
 (let (($x168 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x14 $x168)))
 (let (($x7 (not $x13)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x101 $x73)))
 (let (($x34 (and (not $x59) $x7)))
 (let (($x171 (and (and (and (and (and (and $x34 $x160) $x22) $x180) $x119) $x161) $x125)))
 (let (($x47 (and $x171 $x164)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x12 (and $x68 $x47)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x149 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x149) (or $x37 $x102)))))))
 (let (($x145 (and $x86 $x12)))
 (let (($x78 (= $x145 true)))
 (let (($x104 (= $x78 true)))
 (let (($x157 (= $x104 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x69 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x69 true)))
 (let (($x74 (= $x79 true)))
 (let (($x76 (= ?x64 input.dst.llvm-%n)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x90 (and $x62 $x74)))
 (let (($x50 (and $x90 $x157)))
 (let (($x166 (and $x50 $x143)))
 (let (($x175 (and $x166 $x144)))
 (let (($x211 (and $x175 $x213)))
 (let (($x129 (and $x211 $x263)))
 (let (($x9 (and $x129 $x189)))
 (let (($x331 (and $x9 $x301)))
 (let (($x207 (and $x331 $x38)))
 (let (($x174 (and $x207 $x225)))
 (let (($x91 (and $x174 $x98)))
 (let (($x247 (and $x91 $x204)))
 (let (($x165 (and $x247 $x208)))
 (let (($x287 (and $x165 $x315)))
 (let (($x17 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x316 (and (not $x17) $x287)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x61 $x316)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x322 (and $x23 $x115)))
 (let (($x320 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x122 (and $x320 $x322)))
 (let (($x135 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x330 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x135)))))
 (let (($x226 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x135)))))
 (let (($x153 (and $x226 $x122)))
 (let (($x328 (=> $x153 $x249)))
 (not $x328))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x299 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x295 (bvmul (_ bv4294967295 32) ?x299)))
 (let ((?x292 (bvneg ?x295)))
 (let (($x172 (= ?x292 ?x152)))
 (let (($x249 (= $x172 true)))
 (let (($x290 (forall ((input.ind-%var915X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var915X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var915X) (_ bv0 32)))))
 ))
 (let (($x303 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var914X)))
 (= $x121 false)))
 ))
 (let (($x291 (and $x303 $x290)))
 (let (($x315 (= $x291 true)))
 (let (($x148 (forall ((input.ind-%var909X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var909X (_ bv4 32)))))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x195)))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x267)))
 (let ((?x293 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var909X)))
 (let (($x274 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var909X)))
 (=> $x274 (= ?x293 ?x186)))))))))
 ))
 (let (($x288 (forall ((input.ind-%var908X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var908X) (bvult input.ind-%var908X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x274 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var908X)))
 (= $x274 $x237))))
 ))
 (let (($x266 (and $x288 $x148)))
 (let (($x208 (= $x266 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x202)))
 (let (($x103 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x170 (= $x103 true)))
 (let (($x204 (= $x170 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x139 (= $x57 true)))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x323 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x296 (= $x323 true)))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x265 true)))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (= $x93 true)))
 (let (($x228 (= $x282 true)))
 (let (($x301 (= $x228 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x188 true)))
 (let (($x235 (= $x48 true)))
 (let (($x189 (= $x235 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x233 (bvsub ?x183 ?x176)))
 (let (($x234 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x233) (bvult ?x183 ?x233))))
 (let ((?x231 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvmul (_ bv4 64) ?x231)))
 (let ((?x222 ((_ extract 63 32) ?x5)))
 (let (($x216 (= (_ bv0 32) ?x222)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x209 (and (and (and true $x140) $x216) $x234)))
 (let (($x85 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x242 (and $x85 $x209)))
 (let (($x112 (= true $x242)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x30 (=> $x197 $x112)))
 (let (($x95 (= $x30 true)))
 (let (($x206 (= $x95 true)))
 (let (($x263 (= $x206 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x27 (= $x92 true)))
 (let (($x52 (= $x27 true)))
 (let (($x213 (= $x52 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x162 (= $x35 true)))
 (let (($x55 (= $x162 true)))
 (let (($x144 (= $x55 true)))
 (let (($x137 (= $x197 true)))
 (let (($x181 (= $x137 true)))
 (let (($x143 (= $x181 true)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x25)))
 (let ((?x18 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x18)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x179 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x113 (= input.memlabel-mem--symbol.1_end ?x179)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (and $x49 $x113)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x66 $x109)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x80 $x83)))
 (let (($x108 (not $x134)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x8 $x146)))
 (let (($x160 (and (not $x100) $x108)))
 (let (($x168 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x14 $x168)))
 (let (($x7 (not $x13)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x101 $x73)))
 (let (($x34 (and (not $x59) $x7)))
 (let (($x171 (and (and (and (and (and (and $x34 $x160) $x22) $x180) $x119) $x161) $x125)))
 (let (($x47 (and $x171 $x164)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x12 (and $x68 $x47)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x149 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x149) (or $x37 $x102)))))))
 (let (($x145 (and $x86 $x12)))
 (let (($x78 (= $x145 true)))
 (let (($x104 (= $x78 true)))
 (let (($x157 (= $x104 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x69 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x69 true)))
 (let (($x74 (= $x79 true)))
 (let (($x76 (= ?x64 input.dst.llvm-%n)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x90 (and $x62 $x74)))
 (let (($x50 (and $x90 $x157)))
 (let (($x166 (and $x50 $x143)))
 (let (($x175 (and $x166 $x144)))
 (let (($x211 (and $x175 $x213)))
 (let (($x129 (and $x211 $x263)))
 (let (($x9 (and $x129 $x189)))
 (let (($x331 (and $x9 $x301)))
 (let (($x207 (and $x331 $x38)))
 (let (($x174 (and $x207 $x225)))
 (let (($x91 (and $x174 $x98)))
 (let (($x247 (and $x91 $x204)))
 (let (($x165 (and $x247 $x208)))
 (let (($x287 (and $x165 $x315)))
 (let (($x17 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x316 (and (not $x17) $x287)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x61 $x316)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x322 (and $x23 $x115)))
 (let (($x320 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x122 (and $x320 $x322)))
 (let (($x135 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x330 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x135)))))
 (let (($x226 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x135)))))
 (let (($x153 (and $x226 $x122)))
 (let (($x328 (=> $x153 $x249)))
 (not $x328))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x130 (bvule ?x118 (_ bv399 32))))
 (let (($x302 (= $x130 true)))
 (let (($x43 (= $x302 true)))
 (let (($x16 (forall ((input.ind-%var927X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var927X)))
 (=> $x105 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var927X) (_ bv0 32)))))
 ))
 (let (($x77 (forall ((input.ind-%var926X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var926X)))
 (= $x105 false)))
 ))
 (let (($x243 (and $x77 $x16)))
 (let (($x169 (= $x243 true)))
 (let (($x252 (forall ((input.ind-%var921X (_ BitVec 32)) )(let ((?x316 (bvadd symbol.1 (bvmul input.ind-%var921X (_ bv4 32)))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x316))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x316 (_ bv2 32))) ?x153)))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x316 (_ bv3 32))) ?x292)))
 (let ((?x198 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var921X)))
 (let (($x237 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var921X)))
 (=> $x237 (= ?x198 ?x249)))))))))
 ))
 (let (($x150 (forall ((input.ind-%var920X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var920X) (bvult input.ind-%var920X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x237 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var920X)))
 (= $x237 $x229))))
 ))
 (let (($x63 (and $x150 $x252)))
 (let (($x41 (= $x63 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x298)))
 (let (($x170 (= ?x103 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x170 true)))
 (let (($x247 (= $x204 true)))
 (let (($x139 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x91 (= $x98 true)))
 (let (($x296 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let (($x174 (= $x225 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x207 (= $x38 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x95)))
 (let ((?x112 (bvand symbol.1 (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x112)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x128 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x227 (and $x142 $x128)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (and $x212 $x227)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x232 $x215)))
 (let (($x156 (not $x140)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x85 $x87)))
 (let (($x231 (and (not $x223) $x156)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x144 $x175)))
 (let (($x210 (and (not $x92) $x211)))
 (let (($x189 (and (and (and (and (and (and $x210 $x231) $x5) $x216) $x234) $x242) $x30)))
 (let (($x9 (and $x189 $x206)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x93 (and $x125 $x9)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x164) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x50 $x137)))))))
 (let (($x282 (and $x55 $x93)))
 (let (($x228 (= $x282 true)))
 (let (($x301 (= $x228 true)))
 (let (($x331 (= $x301 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x109 true)))
 (let (($x133 (= $x119 true)))
 (let (($x19 (= $x133 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x66 true)))
 (let (($x106 (= $x49 true)))
 (let (($x179 (= $x106 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x22 true)))
 (let (($x120 (= $x163 true)))
 (let (($x180 (= $x120 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x8)))
 (let (($x134 (= ?x146 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x134 true)))
 (let (($x160 (= $x108 true)))
 (let (($x100 (= ?x146 input.dst.llvm-%n)))
 (let (($x94 (= $x100 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x82 (bvsub ?x183 ?x176)))
 (let (($x86 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x82) (bvult ?x183 ?x82))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x37 (bvmul (_ bv4 64) ?x89)))
 (let ((?x10 ((_ extract 63 32) ?x37)))
 (let (($x102 (= (_ bv0 32) ?x10)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x149) $x102) $x86)))
 (let (($x21 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x21 $x101)))
 (let (($x59 (= true $x73)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x197 $x59)))
 (let (($x14 (= $x116 true)))
 (let (($x168 (= $x14 true)))
 (let (($x13 (= $x168 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x42 (= $x197 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x74 (and $x64 $x79)))
 (let (($x7 (and $x74 $x13)))
 (let (($x83 (and $x7 $x80)))
 (let (($x33 (and $x83 $x160)))
 (let (($x138 (and $x33 $x180)))
 (let (($x113 (and $x138 $x179)))
 (let (($x161 (and $x113 $x19)))
 (let (($x265 (and $x161 $x331)))
 (let (($x323 (and $x265 $x207)))
 (let (($x57 (and $x323 $x174)))
 (let (($x202 (and $x57 $x91)))
 (let (($x178 (and $x202 $x247)))
 (let (($x269 (and $x178 $x41)))
 (let (($x203 (and $x269 $x169)))
 (let (($x289 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (and (not $x289) $x203)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and $x71 $x15)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x20 $x321)))
 (let (($x236 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x56 (and $x236 $x217)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x320 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x251 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x255 (and $x251 $x56)))
 (let (($x200 (=> $x255 $x43)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x130 (bvule ?x118 (_ bv399 32))))
 (let (($x302 (= $x130 true)))
 (let (($x43 (= $x302 true)))
 (let (($x16 (forall ((input.ind-%var927X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var927X)))
 (=> $x105 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var927X) (_ bv0 32)))))
 ))
 (let (($x77 (forall ((input.ind-%var926X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var926X)))
 (= $x105 false)))
 ))
 (let (($x243 (and $x77 $x16)))
 (let (($x169 (= $x243 true)))
 (let (($x252 (forall ((input.ind-%var921X (_ BitVec 32)) )(let ((?x316 (bvadd symbol.1 (bvmul input.ind-%var921X (_ bv4 32)))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x316))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x316 (_ bv2 32))) ?x153)))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x316 (_ bv3 32))) ?x292)))
 (let ((?x198 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var921X)))
 (let (($x237 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var921X)))
 (=> $x237 (= ?x198 ?x249)))))))))
 ))
 (let (($x150 (forall ((input.ind-%var920X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var920X) (bvult input.ind-%var920X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x237 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var920X)))
 (= $x237 $x229))))
 ))
 (let (($x63 (and $x150 $x252)))
 (let (($x41 (= $x63 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x298)))
 (let (($x170 (= ?x103 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x204 (= $x170 true)))
 (let (($x247 (= $x204 true)))
 (let (($x139 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x91 (= $x98 true)))
 (let (($x296 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let (($x174 (= $x225 true)))
 (let (($x114 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x207 (= $x38 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x95)))
 (let ((?x112 (bvand symbol.1 (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x112)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x128 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x227 (and $x142 $x128)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (and $x212 $x227)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x232 $x215)))
 (let (($x156 (not $x140)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x85 $x87)))
 (let (($x231 (and (not $x223) $x156)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x144 $x175)))
 (let (($x210 (and (not $x92) $x211)))
 (let (($x189 (and (and (and (and (and (and $x210 $x231) $x5) $x216) $x234) $x242) $x30)))
 (let (($x9 (and $x189 $x206)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x93 (and $x125 $x9)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x164) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x50 $x137)))))))
 (let (($x282 (and $x55 $x93)))
 (let (($x228 (= $x282 true)))
 (let (($x301 (= $x228 true)))
 (let (($x331 (= $x301 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x109 true)))
 (let (($x133 (= $x119 true)))
 (let (($x19 (= $x133 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x66 true)))
 (let (($x106 (= $x49 true)))
 (let (($x179 (= $x106 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x22 true)))
 (let (($x120 (= $x163 true)))
 (let (($x180 (= $x120 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x8)))
 (let (($x134 (= ?x146 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x134 true)))
 (let (($x160 (= $x108 true)))
 (let (($x100 (= ?x146 input.dst.llvm-%n)))
 (let (($x94 (= $x100 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x82 (bvsub ?x183 ?x176)))
 (let (($x86 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x82) (bvult ?x183 ?x82))))
 (let ((?x89 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x37 (bvmul (_ bv4 64) ?x89)))
 (let ((?x10 ((_ extract 63 32) ?x37)))
 (let (($x102 (= (_ bv0 32) ?x10)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x149) $x102) $x86)))
 (let (($x21 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x21 $x101)))
 (let (($x59 (= true $x73)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x197 $x59)))
 (let (($x14 (= $x116 true)))
 (let (($x168 (= $x14 true)))
 (let (($x13 (= $x168 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x42 (= $x197 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x74 (and $x64 $x79)))
 (let (($x7 (and $x74 $x13)))
 (let (($x83 (and $x7 $x80)))
 (let (($x33 (and $x83 $x160)))
 (let (($x138 (and $x33 $x180)))
 (let (($x113 (and $x138 $x179)))
 (let (($x161 (and $x113 $x19)))
 (let (($x265 (and $x161 $x331)))
 (let (($x323 (and $x265 $x207)))
 (let (($x57 (and $x323 $x174)))
 (let (($x202 (and $x57 $x91)))
 (let (($x178 (and $x202 $x247)))
 (let (($x269 (and $x178 $x41)))
 (let (($x203 (and $x269 $x169)))
 (let (($x289 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (and (not $x289) $x203)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and $x71 $x15)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x20 $x321)))
 (let (($x236 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x56 (and $x236 $x217)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x320 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x251 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x255 (and $x251 $x56)))
 (let (($x200 (=> $x255 $x43)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x327 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x315 (bvsle ?x327 (_ bv399 32))))
 (let (($x244 (= $x315 true)))
 (let (($x24 (= $x244 true)))
 (let (($x196 (forall ((input.ind-%var939X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var939X)))
 (=> $x214 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var939X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var938X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var938X)))
 (= $x214 false)))
 ))
 (let (($x290 (and $x257 $x196)))
 (let (($x107 (= $x290 true)))
 (let (($x124 (forall ((input.ind-%var933X (_ BitVec 32)) )(let ((?x15 (bvadd symbol.1 (bvmul input.ind-%var933X (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x15))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x15 (_ bv2 32))) ?x255)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x15 (_ bv3 32))) ?x302)))
 (let ((?x115 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var933X)))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var933X)))
 (=> $x229 (= ?x115 ?x177)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var932X) (bvult input.ind-%var932X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var932X)))
 (= $x229 $x172))))
 ))
 (let (($x245 (and $x299 $x124)))
 (let (($x195 (= $x245 true)))
 (let ((?x103 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x103)))
 (let (($x204 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x204 true)))
 (let (($x178 (= $x247 true)))
 (let (($x297 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x297 true)))
 (let (($x91 (= $x98 true)))
 (let (($x202 (= $x91 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x225 (= $x294 true)))
 (let (($x174 (= $x225 true)))
 (let (($x57 (= $x174 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x38 (= $x318 true)))
 (let (($x207 (= $x38 true)))
 (let (($x323 (= $x207 true)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x242)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x48)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x212 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x142 (= input.memlabel-mem--symbol.1_end ?x212)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x233 (and $x188 $x142)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x216 $x233)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x232 $x215)))
 (let (($x156 (not $x140)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x219 (and $x87 $x223)))
 (let (($x263 (and (not $x219) $x156)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x175 $x92)))
 (let (($x85 (and (not $x123) $x211)))
 (let (($x9 (and (and (and (and (and (and $x85 $x263) $x5) $x222) $x128) $x234) $x209)))
 (let (($x93 (and $x9 $x235)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x282 (and $x162 $x93)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x181 $x143)))))))
 (let (($x228 (and $x144 $x282)))
 (let (($x301 (= $x228 true)))
 (let (($x331 (= $x301 true)))
 (let (($x265 (= $x331 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x109 true)))
 (let (($x133 (= $x119 true)))
 (let (($x19 (= $x133 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x66 true)))
 (let (($x106 (= $x49 true)))
 (let (($x179 (= $x106 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x22 true)))
 (let (($x120 (= $x163 true)))
 (let (($x180 (= $x120 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x8)))
 (let (($x134 (= ?x146 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x134 true)))
 (let (($x160 (= $x108 true)))
 (let (($x100 (= ?x146 input.dst.llvm-%n)))
 (let (($x94 (= $x100 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x102 (bvsub ?x183 ?x176)))
 (let (($x131 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x102) (bvult ?x183 ?x102))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x84)))
 (let ((?x37 ((_ extract 63 32) ?x89)))
 (let (($x10 (= (_ bv0 32) ?x37)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x149) $x10) $x131)))
 (let (($x21 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x21 $x101)))
 (let (($x59 (= true $x73)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x197 $x59)))
 (let (($x14 (= $x116 true)))
 (let (($x168 (= $x14 true)))
 (let (($x13 (= $x168 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x42 (= $x197 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x74 (and $x64 $x79)))
 (let (($x7 (and $x74 $x13)))
 (let (($x83 (and $x7 $x80)))
 (let (($x33 (and $x83 $x160)))
 (let (($x138 (and $x33 $x180)))
 (let (($x113 (and $x138 $x179)))
 (let (($x161 (and $x113 $x19)))
 (let (($x114 (and $x161 $x265)))
 (let (($x296 (and $x114 $x323)))
 (let (($x139 (and $x296 $x57)))
 (let (($x298 (and $x139 $x202)))
 (let (($x141 (and $x298 $x178)))
 (let (($x75 (and $x141 $x195)))
 (let (($x277 (and $x75 $x107)))
 (let (($x238 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and (not $x238) $x277)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x17 $x258)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x117 (and $x132 $x291)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x283 $x117)))
 (let (($x226 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x236 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x226)))))
 (let (($x187 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x226)))))
 (let (($x182 (and $x187 $x11)))
 (let (($x261 (=> $x182 $x24)))
 (not $x261))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x327 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x315 (bvsle ?x327 (_ bv399 32))))
 (let (($x244 (= $x315 true)))
 (let (($x24 (= $x244 true)))
 (let (($x196 (forall ((input.ind-%var939X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var939X)))
 (=> $x214 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var939X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var938X (_ BitVec 32)) )(let (($x214 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var938X)))
 (= $x214 false)))
 ))
 (let (($x290 (and $x257 $x196)))
 (let (($x107 (= $x290 true)))
 (let (($x124 (forall ((input.ind-%var933X (_ BitVec 32)) )(let ((?x15 (bvadd symbol.1 (bvmul input.ind-%var933X (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x15))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x15 (_ bv2 32))) ?x255)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x15 (_ bv3 32))) ?x302)))
 (let ((?x115 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var933X)))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var933X)))
 (=> $x229 (= ?x115 ?x177)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var932X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var932X) (bvult input.ind-%var932X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x229 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var932X)))
 (= $x229 $x172))))
 ))
 (let (($x245 (and $x299 $x124)))
 (let (($x195 (= $x245 true)))
 (let ((?x103 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x103)))
 (let (($x204 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x204 true)))
 (let (($x178 (= $x247 true)))
 (let (($x297 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x98 (= $x297 true)))
 (let (($x91 (= $x98 true)))
 (let (($x202 (= $x91 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x225 (= $x294 true)))
 (let (($x174 (= $x225 true)))
 (let (($x57 (= $x174 true)))
 (let (($x318 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x38 (= $x318 true)))
 (let (($x207 (= $x38 true)))
 (let (($x323 (= $x207 true)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x242)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x48)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x212 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x142 (= input.memlabel-mem--symbol.1_end ?x212)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x233 (and $x188 $x142)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x216 $x233)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x232 $x215)))
 (let (($x156 (not $x140)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x219 (and $x87 $x223)))
 (let (($x263 (and (not $x219) $x156)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x175 $x92)))
 (let (($x85 (and (not $x123) $x211)))
 (let (($x9 (and (and (and (and (and (and $x85 $x263) $x5) $x222) $x128) $x234) $x209)))
 (let (($x93 (and $x9 $x235)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x282 (and $x162 $x93)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x181 $x143)))))))
 (let (($x228 (and $x144 $x282)))
 (let (($x301 (= $x228 true)))
 (let (($x331 (= $x301 true)))
 (let (($x265 (= $x331 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x109 true)))
 (let (($x133 (= $x119 true)))
 (let (($x19 (= $x133 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x66 true)))
 (let (($x106 (= $x49 true)))
 (let (($x179 (= $x106 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x22 true)))
 (let (($x120 (= $x163 true)))
 (let (($x180 (= $x120 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x8)))
 (let (($x134 (= ?x146 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x134 true)))
 (let (($x160 (= $x108 true)))
 (let (($x100 (= ?x146 input.dst.llvm-%n)))
 (let (($x94 (= $x100 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x102 (bvsub ?x183 ?x176)))
 (let (($x131 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x102) (bvult ?x183 ?x102))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x89 (bvmul (_ bv4 64) ?x84)))
 (let ((?x37 ((_ extract 63 32) ?x89)))
 (let (($x10 (= (_ bv0 32) ?x37)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x149) $x10) $x131)))
 (let (($x21 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x21 $x101)))
 (let (($x59 (= true $x73)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x197 $x59)))
 (let (($x14 (= $x116 true)))
 (let (($x168 (= $x14 true)))
 (let (($x13 (= $x168 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x42 (= $x197 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x74 (and $x64 $x79)))
 (let (($x7 (and $x74 $x13)))
 (let (($x83 (and $x7 $x80)))
 (let (($x33 (and $x83 $x160)))
 (let (($x138 (and $x33 $x180)))
 (let (($x113 (and $x138 $x179)))
 (let (($x161 (and $x113 $x19)))
 (let (($x114 (and $x161 $x265)))
 (let (($x296 (and $x114 $x323)))
 (let (($x139 (and $x296 $x57)))
 (let (($x298 (and $x139 $x202)))
 (let (($x141 (and $x298 $x178)))
 (let (($x75 (and $x141 $x195)))
 (let (($x277 (and $x75 $x107)))
 (let (($x238 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and (not $x238) $x277)))
 (let (($x17 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x17 $x258)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x117 (and $x132 $x291)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x283 $x117)))
 (let (($x226 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x236 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x226)))))
 (let (($x187 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x226)))))
 (let (($x182 (and $x187 $x11)))
 (let (($x261 (=> $x182 $x24)))
 (not $x261))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x322 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x169 (bvsge ?x322 (_ bv0 32))))
 (let (($x266 (= $x169 true)))
 (let (($x194 (= $x266 true)))
 (let (($x110 (forall ((input.ind-%var951X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var951X)))
 (=> $x122 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var951X) (_ bv0 32)))))
 ))
 (let (($x328 (forall ((input.ind-%var950X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var950X)))
 (= $x122 false)))
 ))
 (let (($x16 (and $x328 $x110)))
 (let (($x279 (= $x16 true)))
 (let (($x171 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x258 (bvadd symbol.1 (bvmul input.ind-%var945X (_ bv4 32)))))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x182)))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x244)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var945X)))
 (let (($x172 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var945X)))
 (=> $x172 (= ?x321 ?x278)))))))))
 ))
 (let (($x118 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) input.ind-%var944X) (bvult input.ind-%var944X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x172 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (= $x172 $x200))))
 ))
 (let (($x185 (and $x118 $x171)))
 (let (($x153 (= $x185 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x170)))
 (let (($x247 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x247 true)))
 (let (($x141 (= $x178 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x98 true)))
 (let (($x202 (= $x91 true)))
 (let (($x298 (= $x202 true)))
 (let (($x225 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x174 (= $x225 true)))
 (let (($x57 (= $x174 true)))
 (let (($x139 (= $x57 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x207 (= $x38 true)))
 (let (($x323 (= $x207 true)))
 (let (($x296 (= $x323 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x234)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x95)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x233)))
 (let ((?x216 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x188 (= input.memlabel-mem--symbol.1_end ?x216)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x212 (and $x189 $x188)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x222 $x212)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x232 $x215)))
 (let (($x156 (not $x140)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x231 (and $x223 $x219)))
 (let (($x112 (and (not $x231) $x156)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x92 $x123)))
 (let (($x87 (and (not $x210) $x211)))
 (let (($x93 (and (and (and (and (and (and $x87 $x112) $x5) $x129) $x142) $x128) $x227)))
 (let (($x282 (and $x93 $x206)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x228 (and $x125 $x282)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x157 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x157) (or $x166 $x35)))))))
 (let (($x301 (and $x175 $x228)))
 (let (($x331 (= $x301 true)))
 (let (($x265 (= $x331 true)))
 (let (($x114 (= $x265 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x109 true)))
 (let (($x133 (= $x119 true)))
 (let (($x19 (= $x133 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x66 true)))
 (let (($x106 (= $x49 true)))
 (let (($x179 (= $x106 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x22 true)))
 (let (($x120 (= $x163 true)))
 (let (($x180 (= $x120 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x8)))
 (let (($x134 (= ?x146 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x134 true)))
 (let (($x160 (= $x108 true)))
 (let (($x100 (= ?x146 input.dst.llvm-%n)))
 (let (($x94 (= $x100 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x10 (bvsub ?x183 ?x176)))
 (let (($x99 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x10) (bvult ?x183 ?x10))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvmul (_ bv4 64) ?x40)))
 (let ((?x89 ((_ extract 63 32) ?x84)))
 (let (($x37 (= (_ bv0 32) ?x89)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x149) $x37) $x99)))
 (let (($x21 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x21 $x101)))
 (let (($x59 (= true $x73)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x197 $x59)))
 (let (($x14 (= $x116 true)))
 (let (($x168 (= $x14 true)))
 (let (($x13 (= $x168 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x42 (= $x197 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x74 (and $x64 $x79)))
 (let (($x7 (and $x74 $x13)))
 (let (($x83 (and $x7 $x80)))
 (let (($x33 (and $x83 $x160)))
 (let (($x138 (and $x33 $x180)))
 (let (($x113 (and $x138 $x179)))
 (let (($x161 (and $x113 $x19)))
 (let (($x318 (and $x161 $x114)))
 (let (($x294 (and $x318 $x296)))
 (let (($x297 (and $x294 $x139)))
 (let (($x103 (and $x297 $x298)))
 (let (($x329 (and $x103 $x141)))
 (let (($x274 (and $x329 $x153)))
 (let (($x158 (and $x274 $x279)))
 (let (($x193 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x193) $x158)))
 (let (($x289 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and $x289 $x287)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x246 (and $x61 $x243)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x23 $x246)))
 (let (($x251 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x283 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x251)))))
 (let (($x270 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x251)))))
 (let (($x288 (and $x270 $x154)))
 (let (($x208 (=> $x288 $x194)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x322 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x169 (bvsge ?x322 (_ bv0 32))))
 (let (($x266 (= $x169 true)))
 (let (($x194 (= $x266 true)))
 (let (($x110 (forall ((input.ind-%var951X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var951X)))
 (=> $x122 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var951X) (_ bv0 32)))))
 ))
 (let (($x328 (forall ((input.ind-%var950X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var950X)))
 (= $x122 false)))
 ))
 (let (($x16 (and $x328 $x110)))
 (let (($x279 (= $x16 true)))
 (let (($x171 (forall ((input.ind-%var945X (_ BitVec 32)) )(let ((?x258 (bvadd symbol.1 (bvmul input.ind-%var945X (_ bv4 32)))))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x182)))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x244)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var945X)))
 (let (($x172 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var945X)))
 (=> $x172 (= ?x321 ?x278)))))))))
 ))
 (let (($x118 (forall ((input.ind-%var944X (_ BitVec 32)) )(let (($x200 (and (bvule (_ bv0 32) input.ind-%var944X) (bvult input.ind-%var944X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x172 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var944X)))
 (= $x172 $x200))))
 ))
 (let (($x185 (and $x118 $x171)))
 (let (($x153 (= $x185 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x204 (bvneg ?x170)))
 (let (($x247 (= ?x204 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x247 true)))
 (let (($x141 (= $x178 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x98 true)))
 (let (($x202 (= $x91 true)))
 (let (($x298 (= $x202 true)))
 (let (($x225 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x174 (= $x225 true)))
 (let (($x57 (= $x174 true)))
 (let (($x139 (= $x57 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x207 (= $x38 true)))
 (let (($x323 (= $x207 true)))
 (let (($x296 (= $x323 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x234)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x95)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x233)))
 (let ((?x216 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x188 (= input.memlabel-mem--symbol.1_end ?x216)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x212 (and $x189 $x188)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x222 $x212)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x232 $x215)))
 (let (($x156 (not $x140)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x231 (and $x223 $x219)))
 (let (($x112 (and (not $x231) $x156)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x27 $x52)))
 (let (($x211 (not $x213)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x92 $x123)))
 (let (($x87 (and (not $x210) $x211)))
 (let (($x93 (and (and (and (and (and (and $x87 $x112) $x5) $x129) $x142) $x128) $x227)))
 (let (($x282 (and $x93 $x206)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x228 (and $x125 $x282)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x157 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x157) (or $x166 $x35)))))))
 (let (($x301 (and $x175 $x228)))
 (let (($x331 (= $x301 true)))
 (let (($x265 (= $x331 true)))
 (let (($x114 (= $x265 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x119 (= $x109 true)))
 (let (($x133 (= $x119 true)))
 (let (($x19 (= $x133 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x66 true)))
 (let (($x106 (= $x49 true)))
 (let (($x179 (= $x106 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x22 true)))
 (let (($x120 (= $x163 true)))
 (let (($x180 (= $x120 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x146 (bvneg ?x8)))
 (let (($x134 (= ?x146 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (= $x134 true)))
 (let (($x160 (= $x108 true)))
 (let (($x100 (= ?x146 input.dst.llvm-%n)))
 (let (($x94 (= $x100 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x10 (bvsub ?x183 ?x176)))
 (let (($x99 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x10) (bvult ?x183 ?x10))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvmul (_ bv4 64) ?x40)))
 (let ((?x89 ((_ extract 63 32) ?x84)))
 (let (($x37 (= (_ bv0 32) ?x89)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x101 (and (and (and true $x149) $x37) $x99)))
 (let (($x21 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x73 (and $x21 $x101)))
 (let (($x59 (= true $x73)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (=> $x197 $x59)))
 (let (($x14 (= $x116 true)))
 (let (($x168 (= $x14 true)))
 (let (($x13 (= $x168 true)))
 (let (($x88 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x42 (= $x197 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x74 (and $x64 $x79)))
 (let (($x7 (and $x74 $x13)))
 (let (($x83 (and $x7 $x80)))
 (let (($x33 (and $x83 $x160)))
 (let (($x138 (and $x33 $x180)))
 (let (($x113 (and $x138 $x179)))
 (let (($x161 (and $x113 $x19)))
 (let (($x318 (and $x161 $x114)))
 (let (($x294 (and $x318 $x296)))
 (let (($x297 (and $x294 $x139)))
 (let (($x103 (and $x297 $x298)))
 (let (($x329 (and $x103 $x141)))
 (let (($x274 (and $x329 $x153)))
 (let (($x158 (and $x274 $x279)))
 (let (($x193 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x193) $x158)))
 (let (($x289 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (and $x289 $x287)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x246 (and $x61 $x243)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x23 $x246)))
 (let (($x251 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x283 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x251)))))
 (let (($x270 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x251)))))
 (let (($x288 (and $x270 $x154)))
 (let (($x208 (=> $x288 $x194)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (bvule ?x217 (_ bv399 32))))
 (let (($x63 (= $x107 true)))
 (let (($x159 (= $x63 true)))
 (let (($x184 (forall ((input.ind-%var963X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var963X)))
 (=> $x56 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var963X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var962X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var962X)))
 (= $x56 false)))
 ))
 (let (($x196 (and $x285 $x184)))
 (let (($x241 (= $x196 true)))
 (let (($x164 (forall ((input.ind-%var957X (_ BitVec 32)) )(let ((?x287 (bvadd symbol.1 (bvmul input.ind-%var957X (_ bv4 32)))))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x287))))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x287 (_ bv2 32))) ?x288)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x287 (_ bv3 32))) ?x266)))
 (let ((?x291 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var957X)))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var957X)))
 (=> $x200 (= ?x291 ?x239)))))))))
 ))
 (let (($x327 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x261 (and (bvule (_ bv0 32) input.ind-%var956X) (bvult input.ind-%var956X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var956X)))
 (= $x200 $x261))))
 ))
 (let (($x121 (and $x327 $x164)))
 (let (($x255 (= $x121 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x204)))
 (let (($x178 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x178 true)))
 (let (($x329 (= $x141 true)))
 (let (($x91 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x202 (= $x91 true)))
 (let (($x298 (= $x202 true)))
 (let (($x103 (= $x298 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x174 true)))
 (let (($x139 (= $x57 true)))
 (let (($x297 (= $x139 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x323 (= $x207 true)))
 (let (($x296 (= $x323 true)))
 (let (($x294 (= $x296 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x128 (bvsub ?x183 ?x176)))
 (let (($x93 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x128) (bvult ?x183 ?x128))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvmul (_ bv4 64) ?x212)))
 (let ((?x242 ((_ extract 63 32) ?x142)))
 (let (($x233 (= (_ bv0 32) ?x242)))
 (let (($x216 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x282 (and (and (and true $x216) $x233) $x93)))
 (let (($x30 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x228 (and $x30 $x282)))
 (let (($x301 (= true $x228)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x331 (=> $x197 $x301)))
 (let (($x265 (= $x331 true)))
 (let (($x114 (= $x265 true)))
 (let (($x318 (= $x114 true)))
 (let (($x215 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x140 (= $x215 true)))
 (let (($x156 (= $x140 true)))
 (let (($x112 (= $x156 true)))
 (let (($x219 (= $x197 true)))
 (let (($x231 (= $x219 true)))
 (let (($x263 (= $x231 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x144)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x55)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x181 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (and $x50 $x181)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x104 $x137)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x119)))
 (let (($x19 (not $x133)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x106 $x179)))
 (let (($x12 (and (not $x113) $x19)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x163 $x120)))
 (let (($x138 (not $x180)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x160 $x33)))
 (let (($x49 (and (not $x22) $x138)))
 (let (($x210 (and (and (and (and (and (and $x49 $x12) $x145) $x78) $x166) $x35) $x18)))
 (let (($x85 (and $x210 $x25)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x27 (and $x99 $x85)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x168 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x168) (or $x8 $x146)))))))
 (let (($x52 (and $x108 $x27)))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x89 true)))
 (let (($x131 (= $x37 true)))
 (let (($x86 (= $x131 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x45 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x74 (= ?x79 input.dst.llvm-%n)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x53 (and $x21 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x10 (and $x84 $x86)))
 (let (($x223 (and $x10 $x87)))
 (let (($x232 (and $x223 $x263)))
 (let (($x48 (and $x232 $x112)))
 (let (($x38 (and $x48 $x318)))
 (let (($x225 (and $x38 $x294)))
 (let (($x98 (and $x225 $x297)))
 (let (($x170 (and $x98 $x103)))
 (let (($x316 (and $x170 $x329)))
 (let (($x237 (and $x316 $x255)))
 (let (($x152 (and $x237 $x241)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and (not $x267) $x152)))
 (let (($x238 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x238 $x203)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x71 $x290)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x295 (and $x20 $x303)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x190 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x150 (and $x190 $x295)))
 (let (($x41 (=> $x150 $x159)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (bvule ?x217 (_ bv399 32))))
 (let (($x63 (= $x107 true)))
 (let (($x159 (= $x63 true)))
 (let (($x184 (forall ((input.ind-%var963X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var963X)))
 (=> $x56 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var963X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var962X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var962X)))
 (= $x56 false)))
 ))
 (let (($x196 (and $x285 $x184)))
 (let (($x241 (= $x196 true)))
 (let (($x164 (forall ((input.ind-%var957X (_ BitVec 32)) )(let ((?x287 (bvadd symbol.1 (bvmul input.ind-%var957X (_ bv4 32)))))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x287))))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x287 (_ bv2 32))) ?x288)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x287 (_ bv3 32))) ?x266)))
 (let ((?x291 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var957X)))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var957X)))
 (=> $x200 (= ?x291 ?x239)))))))))
 ))
 (let (($x327 (forall ((input.ind-%var956X (_ BitVec 32)) )(let (($x261 (and (bvule (_ bv0 32) input.ind-%var956X) (bvult input.ind-%var956X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x200 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var956X)))
 (= $x200 $x261))))
 ))
 (let (($x121 (and $x327 $x164)))
 (let (($x255 (= $x121 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x204)))
 (let (($x178 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x178 true)))
 (let (($x329 (= $x141 true)))
 (let (($x91 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x202 (= $x91 true)))
 (let (($x298 (= $x202 true)))
 (let (($x103 (= $x298 true)))
 (let (($x174 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x174 true)))
 (let (($x139 (= $x57 true)))
 (let (($x297 (= $x139 true)))
 (let (($x207 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x323 (= $x207 true)))
 (let (($x296 (= $x323 true)))
 (let (($x294 (= $x296 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x128 (bvsub ?x183 ?x176)))
 (let (($x93 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x128) (bvult ?x183 ?x128))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvmul (_ bv4 64) ?x212)))
 (let ((?x242 ((_ extract 63 32) ?x142)))
 (let (($x233 (= (_ bv0 32) ?x242)))
 (let (($x216 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x282 (and (and (and true $x216) $x233) $x93)))
 (let (($x30 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x228 (and $x30 $x282)))
 (let (($x301 (= true $x228)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x331 (=> $x197 $x301)))
 (let (($x265 (= $x331 true)))
 (let (($x114 (= $x265 true)))
 (let (($x318 (= $x114 true)))
 (let (($x215 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x140 (= $x215 true)))
 (let (($x156 (= $x140 true)))
 (let (($x112 (= $x156 true)))
 (let (($x219 (= $x197 true)))
 (let (($x231 (= $x219 true)))
 (let (($x263 (= $x231 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x144)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x55)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x181 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (and $x50 $x181)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x104 $x137)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x119)))
 (let (($x19 (not $x133)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x106 $x179)))
 (let (($x12 (and (not $x113) $x19)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x163 $x120)))
 (let (($x138 (not $x180)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x160 $x33)))
 (let (($x49 (and (not $x22) $x138)))
 (let (($x210 (and (and (and (and (and (and $x49 $x12) $x145) $x78) $x166) $x35) $x18)))
 (let (($x85 (and $x210 $x25)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x27 (and $x99 $x85)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x168 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x168) (or $x8 $x146)))))))
 (let (($x52 (and $x108 $x27)))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x89 true)))
 (let (($x131 (= $x37 true)))
 (let (($x86 (= $x131 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x45 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x74 (= ?x79 input.dst.llvm-%n)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x53 (and $x21 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x10 (and $x84 $x86)))
 (let (($x223 (and $x10 $x87)))
 (let (($x232 (and $x223 $x263)))
 (let (($x48 (and $x232 $x112)))
 (let (($x38 (and $x48 $x318)))
 (let (($x225 (and $x38 $x294)))
 (let (($x98 (and $x225 $x297)))
 (let (($x170 (and $x98 $x103)))
 (let (($x316 (and $x170 $x329)))
 (let (($x237 (and $x316 $x255)))
 (let (($x152 (and $x237 $x241)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x203 (and (not $x267) $x152)))
 (let (($x238 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x238 $x203)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x71 $x290)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x295 (and $x20 $x303)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x190 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x150 (and $x190 $x295)))
 (let (($x41 (=> $x150 $x159)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (bvsle ?x117 (_ bv399 32))))
 (let (($x245 (= $x279 true)))
 (let (($x148 (= $x245 true)))
 (let (($x300 (forall ((input.ind-%var975X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var975X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var975X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var974X)))
 (= $x11 false)))
 ))
 (let (($x110 (and $x220 $x300)))
 (let (($x165 (= $x110 true)))
 (let (($x68 (forall ((input.ind-%var969X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var969X (_ bv4 32)))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x150)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x63)))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var969X)))
 (let (($x261 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var969X)))
 (=> $x261 (= ?x243 ?x332)))))))))
 ))
 (let (($x322 (forall ((input.ind-%var968X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var968X) (bvult input.ind-%var968X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x261 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var968X)))
 (= $x261 $x208))))
 ))
 (let (($x105 (and $x322 $x68)))
 (let (($x182 (= $x105 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x247)))
 (let (($x141 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x329 (= $x141 true)))
 (let (($x316 (= $x329 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x202 true)))
 (let (($x103 (= $x298 true)))
 (let (($x170 (= $x103 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x57 true)))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x323 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x296 (= $x323 true)))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x206 (bvsub ?x183 ?x176)))
 (let (($x227 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x206) (bvult ?x183 ?x206))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvmul (_ bv4 64) ?x212)))
 (let ((?x242 ((_ extract 63 32) ?x142)))
 (let (($x233 (= (_ bv0 32) ?x242)))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x228 (and (and (and true $x234) $x233) $x227)))
 (let (($x9 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x301 (and $x9 $x228)))
 (let (($x331 (= true $x301)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x265 (=> $x197 $x331)))
 (let (($x114 (= $x265 true)))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x156 (= $x140 true)))
 (let (($x112 (= $x156 true)))
 (let (($x48 (= $x112 true)))
 (let (($x231 (= $x197 true)))
 (let (($x263 (= $x231 true)))
 (let (($x232 (= $x263 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x35)))
 (let ((?x92 (bvand symbol.1 (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x92)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x50 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x125 $x50)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x78 $x157)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x119)))
 (let (($x19 (not $x133)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x179 $x113)))
 (let (($x175 (and (not $x161) $x19)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x163 $x120)))
 (let (($x138 (not $x180)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x33 $x22)))
 (let (($x106 (and (not $x66) $x138)))
 (let (($x85 (and (and (and (and (and (and $x106 $x175) $x145) $x162) $x181) $x166) $x143)))
 (let (($x27 (and $x85 $x123)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x134 $x27)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x14) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x100 $x94)))))))
 (let (($x213 (and $x160 $x52)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x89 true)))
 (let (($x131 (= $x37 true)))
 (let (($x86 (= $x131 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x45 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x74 (= ?x79 input.dst.llvm-%n)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x53 (and $x21 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x10 (and $x84 $x86)))
 (let (($x219 (and $x10 $x223)))
 (let (($x215 (and $x219 $x232)))
 (let (($x5 (and $x215 $x48)))
 (let (($x207 (and $x5 $x38)))
 (let (($x174 (and $x207 $x225)))
 (let (($x91 (and $x174 $x98)))
 (let (($x204 (and $x91 $x170)))
 (let (($x15 (and $x204 $x316)))
 (let (($x229 (and $x15 $x182)))
 (let (($x43 (and $x229 $x165)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and (not $x292) $x43)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and $x193 $x277)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x17 $x16)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x132 $x77)))
 (let (($x270 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x20 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x270)))))
 (let (($x167 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x270)))))
 (let (($x299 (and $x167 $x130)))
 (let (($x195 (=> $x299 $x148)))
 (not $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (bvsle ?x117 (_ bv399 32))))
 (let (($x245 (= $x279 true)))
 (let (($x148 (= $x245 true)))
 (let (($x300 (forall ((input.ind-%var975X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var975X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var975X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var974X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var974X)))
 (= $x11 false)))
 ))
 (let (($x110 (and $x220 $x300)))
 (let (($x165 (= $x110 true)))
 (let (($x68 (forall ((input.ind-%var969X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var969X (_ bv4 32)))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x150)))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x63)))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var969X)))
 (let (($x261 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var969X)))
 (=> $x261 (= ?x243 ?x332)))))))))
 ))
 (let (($x322 (forall ((input.ind-%var968X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var968X) (bvult input.ind-%var968X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x261 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var968X)))
 (= $x261 $x208))))
 ))
 (let (($x105 (and $x322 $x68)))
 (let (($x182 (= $x105 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x247)))
 (let (($x141 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x329 (= $x141 true)))
 (let (($x316 (= $x329 true)))
 (let (($x202 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x202 true)))
 (let (($x103 (= $x298 true)))
 (let (($x170 (= $x103 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x57 true)))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x323 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x296 (= $x323 true)))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x206 (bvsub ?x183 ?x176)))
 (let (($x227 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x206) (bvult ?x183 ?x206))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvmul (_ bv4 64) ?x212)))
 (let ((?x242 ((_ extract 63 32) ?x142)))
 (let (($x233 (= (_ bv0 32) ?x242)))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x228 (and (and (and true $x234) $x233) $x227)))
 (let (($x9 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x301 (and $x9 $x228)))
 (let (($x331 (= true $x301)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x265 (=> $x197 $x331)))
 (let (($x114 (= $x265 true)))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x156 (= $x140 true)))
 (let (($x112 (= $x156 true)))
 (let (($x48 (= $x112 true)))
 (let (($x231 (= $x197 true)))
 (let (($x263 (= $x231 true)))
 (let (($x232 (= $x263 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x35)))
 (let ((?x92 (bvand symbol.1 (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x92)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x50 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (and $x125 $x50)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x78 $x157)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x119)))
 (let (($x19 (not $x133)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x179 $x113)))
 (let (($x175 (and (not $x161) $x19)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x163 $x120)))
 (let (($x138 (not $x180)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x33 $x22)))
 (let (($x106 (and (not $x66) $x138)))
 (let (($x85 (and (and (and (and (and (and $x106 $x175) $x145) $x162) $x181) $x166) $x143)))
 (let (($x27 (and $x85 $x123)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x134 $x27)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x14) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x100 $x94)))))))
 (let (($x213 (and $x160 $x52)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x89 true)))
 (let (($x131 (= $x37 true)))
 (let (($x86 (= $x131 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x45 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x74 (= ?x79 input.dst.llvm-%n)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x53 (and $x21 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x10 (and $x84 $x86)))
 (let (($x219 (and $x10 $x223)))
 (let (($x215 (and $x219 $x232)))
 (let (($x5 (and $x215 $x48)))
 (let (($x207 (and $x5 $x38)))
 (let (($x174 (and $x207 $x225)))
 (let (($x91 (and $x174 $x98)))
 (let (($x204 (and $x91 $x170)))
 (let (($x15 (and $x204 $x316)))
 (let (($x229 (and $x15 $x182)))
 (let (($x43 (and $x229 $x165)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and (not $x292) $x43)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and $x193 $x277)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x17 $x16)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x132 $x77)))
 (let (($x270 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x20 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x270)))))
 (let (($x167 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x270)))))
 (let (($x299 (and $x167 $x130)))
 (let (($x195 (=> $x299 $x148)))
 (not $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x246 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x241 (bvsge ?x246 (_ bv0 32))))
 (let (($x185 (= $x241 true)))
 (let (($x252 (= $x185 true)))
 (let (($x293 (forall ((input.ind-%var987X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var987X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var987X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var986X)))
 (= $x154 false)))
 ))
 (let (($x184 (and $x39 $x293)))
 (let (($x269 (= $x184 true)))
 (let (($x101 (forall ((input.ind-%var981X (_ BitVec 32)) )(let ((?x277 (bvadd symbol.1 (bvmul input.ind-%var981X (_ bv4 32)))))
 (let ((?x299 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x277))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x277 (_ bv2 32))) ?x299)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x277 (_ bv3 32))) ?x245)))
 (let ((?x290 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var981X)))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var981X)))
 (=> $x208 (= ?x290 ?x65)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var980X (_ BitVec 32)) )(let (($x41 (and (bvule (_ bv0 32) input.ind-%var980X) (bvult input.ind-%var980X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var980X)))
 (= $x208 $x41))))
 ))
 (let (($x214 (and $x217 $x101)))
 (let (($x288 (= $x214 true)))
 (let ((?x178 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x178)))
 (let (($x329 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x329 true)))
 (let (($x15 (= $x316 true)))
 (let (($x298 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x298 true)))
 (let (($x170 (= $x103 true)))
 (let (($x204 (= $x170 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x91 (= $x98 true)))
 (let (($x296 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let (($x174 (= $x225 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x282 (bvsub ?x183 ?x176)))
 (let (($x95 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x282) (bvult ?x183 ?x282))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvmul (_ bv4 64) ?x212)))
 (let ((?x242 ((_ extract 63 32) ?x142)))
 (let (($x233 (= (_ bv0 32) ?x242)))
 (let (($x93 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x301 (and (and (and true $x93) $x233) $x95)))
 (let (($x222 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x331 (and $x222 $x301)))
 (let (($x265 (= true $x331)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x197 $x265)))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x207 (= $x38 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x112 (= $x156 true)))
 (let (($x48 (= $x112 true)))
 (let (($x5 (= $x48 true)))
 (let (($x263 (= $x197 true)))
 (let (($x232 (= $x263 true)))
 (let (($x215 (= $x232 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x166)))
 (let ((?x144 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x144)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x210 $x125)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x162 $x104)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x119)))
 (let (($x19 (not $x133)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x113 $x161)))
 (let (($x55 (and (not $x12) $x19)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x163 $x120)))
 (let (($x138 (not $x180)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x22 $x66)))
 (let (($x179 (and (not $x49) $x138)))
 (let (($x27 (and (and (and (and (and (and $x179 $x55) $x145) $x47) $x50) $x181) $x137)))
 (let (($x52 (and $x27 $x25)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x213 (and $x99 $x52)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x80 $x83)))))))
 (let (($x211 (and $x33 $x213)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x219 (= $x223 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x89 true)))
 (let (($x131 (= $x37 true)))
 (let (($x86 (= $x131 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x45 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x74 (= ?x79 input.dst.llvm-%n)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x53 (and $x21 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x10 (and $x84 $x86)))
 (let (($x231 (and $x10 $x219)))
 (let (($x140 (and $x231 $x215)))
 (let (($x209 (and $x140 $x5)))
 (let (($x323 (and $x209 $x207)))
 (let (($x57 (and $x323 $x174)))
 (let (($x202 (and $x57 $x91)))
 (let (($x247 (and $x202 $x204)))
 (let (($x258 (and $x247 $x15)))
 (let (($x172 (and $x258 $x288)))
 (let (($x24 (and $x172 $x269)))
 (let (($x302 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and (not $x302) $x24)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (and $x267 $x158)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x289 $x196)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x315 (and $x61 $x257)))
 (let (($x190 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x190)))))
 (let (($x330 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x190)))))
 (let (($x118 (and $x330 $x315)))
 (let (($x153 (=> $x118 $x252)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x246 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x241 (bvsge ?x246 (_ bv0 32))))
 (let (($x185 (= $x241 true)))
 (let (($x252 (= $x185 true)))
 (let (($x293 (forall ((input.ind-%var987X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var987X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var987X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var986X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var986X)))
 (= $x154 false)))
 ))
 (let (($x184 (and $x39 $x293)))
 (let (($x269 (= $x184 true)))
 (let (($x101 (forall ((input.ind-%var981X (_ BitVec 32)) )(let ((?x277 (bvadd symbol.1 (bvmul input.ind-%var981X (_ bv4 32)))))
 (let ((?x299 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x277))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x277 (_ bv2 32))) ?x299)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x277 (_ bv3 32))) ?x245)))
 (let ((?x290 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var981X)))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var981X)))
 (=> $x208 (= ?x290 ?x65)))))))))
 ))
 (let (($x217 (forall ((input.ind-%var980X (_ BitVec 32)) )(let (($x41 (and (bvule (_ bv0 32) input.ind-%var980X) (bvult input.ind-%var980X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var980X)))
 (= $x208 $x41))))
 ))
 (let (($x214 (and $x217 $x101)))
 (let (($x288 (= $x214 true)))
 (let ((?x178 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x178)))
 (let (($x329 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x316 (= $x329 true)))
 (let (($x15 (= $x316 true)))
 (let (($x298 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x298 true)))
 (let (($x170 (= $x103 true)))
 (let (($x204 (= $x170 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x139 true)))
 (let (($x98 (= $x297 true)))
 (let (($x91 (= $x98 true)))
 (let (($x296 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x296 true)))
 (let (($x225 (= $x294 true)))
 (let (($x174 (= $x225 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x282 (bvsub ?x183 ?x176)))
 (let (($x95 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x282) (bvult ?x183 ?x282))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x142 (bvmul (_ bv4 64) ?x212)))
 (let ((?x242 ((_ extract 63 32) ?x142)))
 (let (($x233 (= (_ bv0 32) ?x242)))
 (let (($x93 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x301 (and (and (and true $x93) $x233) $x95)))
 (let (($x222 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x331 (and $x222 $x301)))
 (let (($x265 (= true $x331)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x114 (=> $x197 $x265)))
 (let (($x318 (= $x114 true)))
 (let (($x38 (= $x318 true)))
 (let (($x207 (= $x38 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x112 (= $x156 true)))
 (let (($x48 (= $x112 true)))
 (let (($x5 (= $x48 true)))
 (let (($x263 (= $x197 true)))
 (let (($x232 (= $x263 true)))
 (let (($x215 (= $x232 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x166)))
 (let ((?x144 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x144)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x125 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x210 $x125)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x162 $x104)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x109 $x119)))
 (let (($x19 (not $x133)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x113 $x161)))
 (let (($x55 (and (not $x12) $x19)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x163 $x120)))
 (let (($x138 (not $x180)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x22 $x66)))
 (let (($x179 (and (not $x49) $x138)))
 (let (($x27 (and (and (and (and (and (and $x179 $x55) $x145) $x47) $x50) $x181) $x137)))
 (let (($x52 (and $x27 $x25)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x213 (and $x99 $x52)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x80 $x83)))))))
 (let (($x211 (and $x33 $x213)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x219 (= $x223 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x89 true)))
 (let (($x131 (= $x37 true)))
 (let (($x86 (= $x131 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x45 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x74 (= ?x79 input.dst.llvm-%n)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x53 (and $x21 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x10 (and $x84 $x86)))
 (let (($x231 (and $x10 $x219)))
 (let (($x140 (and $x231 $x215)))
 (let (($x209 (and $x140 $x5)))
 (let (($x323 (and $x209 $x207)))
 (let (($x57 (and $x323 $x174)))
 (let (($x202 (and $x57 $x91)))
 (let (($x247 (and $x202 $x204)))
 (let (($x258 (and $x247 $x15)))
 (let (($x172 (and $x258 $x288)))
 (let (($x24 (and $x172 $x269)))
 (let (($x302 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x158 (and (not $x302) $x24)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (and $x267 $x158)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x289 $x196)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x315 (and $x61 $x257)))
 (let (($x190 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x190)))))
 (let (($x330 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x190)))))
 (let (($x118 (and $x330 $x315)))
 (let (($x153 (=> $x118 $x252)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x165 (bvule ?x303 input.dst.llvm-%n)))
 (let (($x121 (= $x165 true)))
 (let (($x124 (= $x121 true)))
 (let (($x198 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x295 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var999X)))
 (=> $x295 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var999X) (_ bv0 32)))))
 ))
 (let (($x191 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x295 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var998X)))
 (= $x295 false)))
 ))
 (let (($x300 (and $x191 $x198)))
 (let (($x75 (= $x300 true)))
 (let (($x59 (forall ((input.ind-%var993X (_ BitVec 32)) )(let ((?x158 (bvadd symbol.1 (bvmul input.ind-%var993X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x158))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv2 32))) ?x118)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv3 32))) ?x185)))
 (let ((?x16 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var993X)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var993X)))
 (=> $x41 (= ?x16 ?x31)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var992X (_ BitVec 32)) )(let (($x195 (and (bvule (_ bv0 32) input.ind-%var992X) (bvult input.ind-%var992X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var992X)))
 (= $x41 $x195))))
 ))
 (let (($x122 (and $x117 $x59)))
 (let (($x150 (= $x122 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x141)))
 (let (($x316 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x316 true)))
 (let (($x258 (= $x15 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x170 (= ?x79 input.dst.llvm-%n)))
 (let (($x204 (= $x170 true)))
 (let (($x247 (= $x204 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x98 true)))
 (let (($x202 (= $x91 true)))
 (let (($x298 (= $x202 true)))
 (let (($x225 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x225 true)))
 (let (($x57 (= $x174 true)))
 (let (($x139 (= $x57 true)))
 (let (($x38 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x207 (= $x38 true)))
 (let (($x323 (= $x207 true)))
 (let (($x296 (= $x323 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x212 (bvsub ?x183 ?x176)))
 (let (($x228 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x212) (bvult ?x183 ?x212))))
 (let ((?x234 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvmul (_ bv4 64) ?x234)))
 (let ((?x227 ((_ extract 63 32) ?x93)))
 (let (($x188 (= (_ bv0 32) ?x227)))
 (let (($x129 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x206 (and (and (and true $x129) $x188) $x228)))
 (let (($x209 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x128 (and $x209 $x206)))
 (let (($x95 (= true $x128)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x197 $x95)))
 (let (($x331 (= $x301 true)))
 (let (($x265 (= $x331 true)))
 (let (($x114 (= $x265 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x215 (= $x232 true)))
 (let (($x140 (= $x215 true)))
 (let (($x156 (= $x140 true)))
 (let (($x223 (= $x197 true)))
 (let (($x219 (= $x223 true)))
 (let (($x231 (= $x219 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x104)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x78)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x143 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x18 (= input.memlabel-mem--symbol.1_end ?x143)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x145 $x18)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x92 $x47)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x113 $x161)))
 (let (($x175 (not $x12)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x180 $x138)))
 (let (($x119 (and (not $x179) $x175)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x22 $x66)))
 (let (($x106 (not $x49)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x33 $x116)))
 (let (($x120 (and (not $x99) $x106)))
 (let (($x137 (and (and (and (and (and (and $x120 $x119) $x133) $x55) $x85) $x210) $x125)))
 (let (($x27 (and $x137 $x50)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x166 (and $x86 $x27)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x168) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x146 $x80)))))))
 (let (($x25 (and $x73 $x166)))
 (let (($x52 (= $x25 true)))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x82 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let (($x84 (= $x40 true)))
 (let (($x45 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x53 (= $x6 true)))
 (let (($x74 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x149 (and $x21 $x53)))
 (let (($x89 (and $x149 $x84)))
 (let (($x87 (and $x89 $x211)))
 (let (($x263 (and $x87 $x231)))
 (let (($x112 (and $x263 $x156)))
 (let (($x318 (and $x112 $x114)))
 (let (($x294 (and $x318 $x296)))
 (let (($x297 (and $x294 $x139)))
 (let (($x103 (and $x297 $x298)))
 (let (($x178 (and $x103 $x247)))
 (let (($x287 (and $x178 $x258)))
 (let (($x200 (and $x287 $x150)))
 (let (($x194 (and $x200 $x75)))
 (let (($x244 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and (not $x244) $x194)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x292 $x152)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x238 $x110)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x71 $x328)))
 (let (($x167 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x61 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x167)))))
 (let (($x320 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x167)))))
 (let (($x327 (and $x320 $x169)))
 (let (($x255 (=> $x327 $x124)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x165 (bvule ?x303 input.dst.llvm-%n)))
 (let (($x121 (= $x165 true)))
 (let (($x124 (= $x121 true)))
 (let (($x198 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x295 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var999X)))
 (=> $x295 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var999X) (_ bv0 32)))))
 ))
 (let (($x191 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x295 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var998X)))
 (= $x295 false)))
 ))
 (let (($x300 (and $x191 $x198)))
 (let (($x75 (= $x300 true)))
 (let (($x59 (forall ((input.ind-%var993X (_ BitVec 32)) )(let ((?x158 (bvadd symbol.1 (bvmul input.ind-%var993X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x158))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv2 32))) ?x118)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv3 32))) ?x185)))
 (let ((?x16 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var993X)))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var993X)))
 (=> $x41 (= ?x16 ?x31)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var992X (_ BitVec 32)) )(let (($x195 (and (bvule (_ bv0 32) input.ind-%var992X) (bvult input.ind-%var992X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x41 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var992X)))
 (= $x41 $x195))))
 ))
 (let (($x122 (and $x117 $x59)))
 (let (($x150 (= $x122 true)))
 (let ((?x141 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x329 (bvneg ?x141)))
 (let (($x316 (= ?x329 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x316 true)))
 (let (($x258 (= $x15 true)))
 (let ((?x69 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x69)))
 (let (($x170 (= ?x79 input.dst.llvm-%n)))
 (let (($x204 (= $x170 true)))
 (let (($x247 (= $x204 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x91 (= $x98 true)))
 (let (($x202 (= $x91 true)))
 (let (($x298 (= $x202 true)))
 (let (($x225 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x225 true)))
 (let (($x57 (= $x174 true)))
 (let (($x139 (= $x57 true)))
 (let (($x38 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x207 (= $x38 true)))
 (let (($x323 (= $x207 true)))
 (let (($x296 (= $x323 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x212 (bvsub ?x183 ?x176)))
 (let (($x228 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x212) (bvult ?x183 ?x212))))
 (let ((?x234 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvmul (_ bv4 64) ?x234)))
 (let ((?x227 ((_ extract 63 32) ?x93)))
 (let (($x188 (= (_ bv0 32) ?x227)))
 (let (($x129 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x206 (and (and (and true $x129) $x188) $x228)))
 (let (($x209 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x128 (and $x209 $x206)))
 (let (($x95 (= true $x128)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (=> $x197 $x95)))
 (let (($x331 (= $x301 true)))
 (let (($x265 (= $x331 true)))
 (let (($x114 (= $x265 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x215 (= $x232 true)))
 (let (($x140 (= $x215 true)))
 (let (($x156 (= $x140 true)))
 (let (($x223 (= $x197 true)))
 (let (($x219 (= $x223 true)))
 (let (($x231 (= $x219 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x104)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x78)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x143 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x18 (= input.memlabel-mem--symbol.1_end ?x143)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x145 $x18)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x92 $x47)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x113 $x161)))
 (let (($x175 (not $x12)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x180 $x138)))
 (let (($x119 (and (not $x179) $x175)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x22 $x66)))
 (let (($x106 (not $x49)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x33 $x116)))
 (let (($x120 (and (not $x99) $x106)))
 (let (($x137 (and (and (and (and (and (and $x120 $x119) $x133) $x55) $x85) $x210) $x125)))
 (let (($x27 (and $x137 $x50)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x166 (and $x86 $x27)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x168) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x146 $x80)))))))
 (let (($x25 (and $x73 $x166)))
 (let (($x52 (= $x25 true)))
 (let (($x213 (= $x52 true)))
 (let (($x211 (= $x213 true)))
 (let (($x82 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let (($x84 (= $x40 true)))
 (let (($x45 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x53 (= $x6 true)))
 (let (($x74 (= ?x79 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (= $x74 true)))
 (let (($x155 (= $x90 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x88 (= $x76 true)))
 (let (($x21 (and $x88 $x155)))
 (let (($x149 (and $x21 $x53)))
 (let (($x89 (and $x149 $x84)))
 (let (($x87 (and $x89 $x211)))
 (let (($x263 (and $x87 $x231)))
 (let (($x112 (and $x263 $x156)))
 (let (($x318 (and $x112 $x114)))
 (let (($x294 (and $x318 $x296)))
 (let (($x297 (and $x294 $x139)))
 (let (($x103 (and $x297 $x298)))
 (let (($x178 (and $x103 $x247)))
 (let (($x287 (and $x178 $x258)))
 (let (($x200 (and $x287 $x150)))
 (let (($x194 (and $x200 $x75)))
 (let (($x244 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and (not $x244) $x194)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and $x292 $x152)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x238 $x110)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x71 $x328)))
 (let (($x167 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x61 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x167)))))
 (let (($x320 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x167)))))
 (let (($x327 (and $x320 $x169)))
 (let (($x255 (=> $x327 $x124)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let ((?x152 (bvadd symbol.1 (bvmul input.ind-%var1019X (_ bv4 32)))))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x167 (bvadd ?x183 (_ bv3 32))))
 (let ((?x127 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x183 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x254 (store ?x127 (bvadd ?x183 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x286 (store ?x254 (bvadd ?x183 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x250 (store ?x286 ?x167 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x317 (concat (select ?x250 (bvadd ?x152 (_ bv2 32))) (concat (select ?x250 (bvadd ?x152 (_ bv1 32))) (select ?x250 ?x152)))))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1019X)))
 (let (($x44 (= input.ind-%var1019X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x272 (= (ite $x44 input.spec-%var-i-0.L3%6%bbentry ?x196) (concat (select ?x250 (bvadd ?x152 (_ bv3 32))) ?x317))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1019X)))
 (let (($x280 (or $x195 $x44)))
 (=> $x280 $x272))))))))))))))))
 ))
 (let (($x126 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x252 (bvule (_ bv0 32) input.ind-%var1018X)))
 (let (($x70 (and $x252 (bvult input.ind-%var1018X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x44 (= input.ind-%var1018X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1018X)))
 (let (($x280 (or $x195 $x44)))
 (= $x280 $x70)))))))
 ))
 (let (($x248 (and $x126 $x136)))
 (let (($x77 (= true true)))
 (let (($x260 (and $x77 $x248)))
 (let (($x224 (= $x260 true)))
 (let (($x115 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1011X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1011X) (_ bv0 32)))))
 ))
 (let (($x262 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1010X)))
 (= $x130 false)))
 ))
 (let (($x293 (and $x262 $x115)))
 (let (($x274 (= $x293 true)))
 (let (($x37 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let ((?x152 (bvadd symbol.1 (bvmul input.ind-%var1005X (_ bv4 32)))))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x152))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv2 32))) ?x327)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv3 32))) ?x121)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1005X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1005X)))
 (=> $x195 (= ?x196 ?x28)))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1004X (_ BitVec 32)) )(let (($x252 (bvule (_ bv0 32) input.ind-%var1004X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1004X)))
 (= $x195 (and $x252 (bvult input.ind-%var1004X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x56 (and $x246 $x37)))
 (let (($x299 (= $x56 true)))
 (let ((?x329 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x316 (bvneg ?x329)))
 (let (($x15 (= ?x316 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x15 true)))
 (let (($x287 (= $x258 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x225)))
 (let ((?x296 (bvand symbol.1 (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x296)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x265 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x114 (= input.memlabel-mem--symbol.1_end ?x265)))
 (let (($x331 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x318 (and $x331 $x114)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x301 $x318)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x282 $x142)))
 (let (($x242 (not $x212)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x188 (and $x93 $x227)))
 (let (($x228 (and (not $x188) $x242)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x222 $x189)))
 (let (($x235 (not $x129)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x209 $x9)))
 (let (($x234 (and (not $x30) $x235)))
 (let (($x202 (and (and (and (and (and (and $x234 $x228) $x206) $x95) $x38) $x323) $x294)))
 (let (($x298 (and $x202 $x174)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x103 (and $x27 $x298)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x263 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x87 (or (bvugt input.memlabel-mem--symbol.1_begin ?x52) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x87) (or $x263 $x232)))))))
 (let (($x170 (and $x5 $x103)))
 (let (($x204 (= $x170 true)))
 (let (($x247 (= $x204 true)))
 (let (($x178 (= $x247 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x144 (= $x210 true)))
 (let (($x78 (= $x144 true)))
 (let (($x125 (= $x78 true)))
 (let (($x18 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x47 (= $x18 true)))
 (let (($x85 (= $x47 true)))
 (let (($x123 (= $x85 true)))
 (let (($x55 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x181 (= $x55 true)))
 (let (($x92 (= $x181 true)))
 (let (($x145 (= $x92 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x119 true)))
 (let (($x133 (= $x35 true)))
 (let (($x157 (= $x133 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x113 (= $x109 true)))
 (let (($x161 (= $x113 true)))
 (let (($x12 (= $x161 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x73 (bvsub ?x183 ?x176)))
 (let (($x116 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x73) (bvult ?x183 ?x73))))
 (let ((?x94 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvmul (_ bv4 64) ?x94)))
 (let ((?x108 ((_ extract 63 32) ?x83)))
 (let (($x102 (= (_ bv0 32) ?x108)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x22 (and (and (and true $x100) $x102) $x116)))
 (let (($x13 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x66 (and $x13 $x22)))
 (let (($x49 (= true $x66)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (=> $x197 $x49)))
 (let (($x120 (= $x106 true)))
 (let (($x180 (= $x120 true)))
 (let (($x138 (= $x180 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x84 true)))
 (let (($x10 (= $x89 true)))
 (let (($x14 (= $x10 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x53 true)))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x155 (= $x197 true)))
 (let (($x21 (= $x155 true)))
 (let (($x45 (= $x21 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x69 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x69 true)))
 (let (($x74 (= $x79 true)))
 (let (($x76 (= ?x64 input.dst.llvm-%n)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x90 (and $x62 $x74)))
 (let (($x54 (and $x90 $x45)))
 (let (($x40 (and $x54 $x147)))
 (let (($x160 (and $x40 $x14)))
 (let (($x179 (and $x160 $x138)))
 (let (($x175 (and $x179 $x12)))
 (let (($x19 (and $x175 $x157)))
 (let (($x143 (and $x19 $x145)))
 (let (($x162 (and $x143 $x123)))
 (let (($x137 (and $x162 $x125)))
 (let (($x141 (and $x137 $x178)))
 (let (($x203 (and $x141 $x287)))
 (let (($x261 (and $x203 $x299)))
 (let (($x159 (and $x261 $x274)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and (not $x266) $x159)))
 (let (($x302 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x302 $x43)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x285 (and $x193 $x184)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x17 $x285)))
 (let (($x330 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x330)))))
 (let (($x236 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x330)))))
 (let (($x322 (and $x236 $x107)))
 (let (($x205 (=> $x322 $x224)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let ((?x152 (bvadd symbol.1 (bvmul input.ind-%var1019X (_ bv4 32)))))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x167 (bvadd ?x183 (_ bv3 32))))
 (let ((?x127 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x183 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x254 (store ?x127 (bvadd ?x183 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x286 (store ?x254 (bvadd ?x183 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x250 (store ?x286 ?x167 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x317 (concat (select ?x250 (bvadd ?x152 (_ bv2 32))) (concat (select ?x250 (bvadd ?x152 (_ bv1 32))) (select ?x250 ?x152)))))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1019X)))
 (let (($x44 (= input.ind-%var1019X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x272 (= (ite $x44 input.spec-%var-i-0.L3%6%bbentry ?x196) (concat (select ?x250 (bvadd ?x152 (_ bv3 32))) ?x317))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1019X)))
 (let (($x280 (or $x195 $x44)))
 (=> $x280 $x272))))))))))))))))
 ))
 (let (($x126 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x252 (bvule (_ bv0 32) input.ind-%var1018X)))
 (let (($x70 (and $x252 (bvult input.ind-%var1018X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x44 (= input.ind-%var1018X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1018X)))
 (let (($x280 (or $x195 $x44)))
 (= $x280 $x70)))))))
 ))
 (let (($x248 (and $x126 $x136)))
 (let (($x77 (= true true)))
 (let (($x260 (and $x77 $x248)))
 (let (($x224 (= $x260 true)))
 (let (($x115 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1011X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1011X) (_ bv0 32)))))
 ))
 (let (($x262 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1010X)))
 (= $x130 false)))
 ))
 (let (($x293 (and $x262 $x115)))
 (let (($x274 (= $x293 true)))
 (let (($x37 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let ((?x152 (bvadd symbol.1 (bvmul input.ind-%var1005X (_ bv4 32)))))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x152))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv2 32))) ?x327)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x152 (_ bv3 32))) ?x121)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1005X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1005X)))
 (=> $x195 (= ?x196 ?x28)))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1004X (_ BitVec 32)) )(let (($x252 (bvule (_ bv0 32) input.ind-%var1004X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1004X)))
 (= $x195 (and $x252 (bvult input.ind-%var1004X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x56 (and $x246 $x37)))
 (let (($x299 (= $x56 true)))
 (let ((?x329 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x316 (bvneg ?x329)))
 (let (($x15 (= ?x316 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x15 true)))
 (let (($x287 (= $x258 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x225)))
 (let ((?x296 (bvand symbol.1 (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x296)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x207)))
 (let ((?x265 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x114 (= input.memlabel-mem--symbol.1_end ?x265)))
 (let (($x331 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x318 (and $x331 $x114)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x301 $x318)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x282 $x142)))
 (let (($x242 (not $x212)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x188 (and $x93 $x227)))
 (let (($x228 (and (not $x188) $x242)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x222 $x189)))
 (let (($x235 (not $x129)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x209 $x9)))
 (let (($x234 (and (not $x30) $x235)))
 (let (($x202 (and (and (and (and (and (and $x234 $x228) $x206) $x95) $x38) $x323) $x294)))
 (let (($x298 (and $x202 $x174)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x103 (and $x27 $x298)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x263 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x87 (or (bvugt input.memlabel-mem--symbol.1_begin ?x52) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x87) (or $x263 $x232)))))))
 (let (($x170 (and $x5 $x103)))
 (let (($x204 (= $x170 true)))
 (let (($x247 (= $x204 true)))
 (let (($x178 (= $x247 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x144 (= $x210 true)))
 (let (($x78 (= $x144 true)))
 (let (($x125 (= $x78 true)))
 (let (($x18 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x47 (= $x18 true)))
 (let (($x85 (= $x47 true)))
 (let (($x123 (= $x85 true)))
 (let (($x55 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x181 (= $x55 true)))
 (let (($x92 (= $x181 true)))
 (let (($x145 (= $x92 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x119 true)))
 (let (($x133 (= $x35 true)))
 (let (($x157 (= $x133 true)))
 (let (($x109 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x113 (= $x109 true)))
 (let (($x161 (= $x113 true)))
 (let (($x12 (= $x161 true)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let ((?x73 (bvsub ?x183 ?x176)))
 (let (($x116 (ite (bvsge ?x176 (_ bv0 32)) (bvuge ?x183 ?x73) (bvult ?x183 ?x73))))
 (let ((?x94 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x83 (bvmul (_ bv4 64) ?x94)))
 (let ((?x108 ((_ extract 63 32) ?x83)))
 (let (($x102 (= (_ bv0 32) ?x108)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x22 (and (and (and true $x100) $x102) $x116)))
 (let (($x13 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x66 (and $x13 $x22)))
 (let (($x49 (= true $x66)))
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (=> $x197 $x49)))
 (let (($x120 (= $x106 true)))
 (let (($x180 (= $x120 true)))
 (let (($x138 (= $x180 true)))
 (let (($x84 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x84 true)))
 (let (($x10 (= $x89 true)))
 (let (($x14 (= $x10 true)))
 (let (($x53 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x53 true)))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x155 (= $x197 true)))
 (let (($x21 (= $x155 true)))
 (let (($x45 (= $x21 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x69 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x69 true)))
 (let (($x74 (= $x79 true)))
 (let (($x76 (= ?x64 input.dst.llvm-%n)))
 (let (($x88 (= $x76 true)))
 (let (($x62 (= $x88 true)))
 (let (($x90 (and $x62 $x74)))
 (let (($x54 (and $x90 $x45)))
 (let (($x40 (and $x54 $x147)))
 (let (($x160 (and $x40 $x14)))
 (let (($x179 (and $x160 $x138)))
 (let (($x175 (and $x179 $x12)))
 (let (($x19 (and $x175 $x157)))
 (let (($x143 (and $x19 $x145)))
 (let (($x162 (and $x143 $x123)))
 (let (($x137 (and $x162 $x125)))
 (let (($x141 (and $x137 $x178)))
 (let (($x203 (and $x141 $x287)))
 (let (($x261 (and $x203 $x299)))
 (let (($x159 (and $x261 $x274)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and (not $x266) $x159)))
 (let (($x302 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and $x302 $x43)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x285 (and $x193 $x184)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x17 $x285)))
 (let (($x330 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x330)))))
 (let (($x236 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x330)))))
 (let (($x322 (and $x236 $x107)))
 (let (($x205 (=> $x322 $x224)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (not $x197)))
 (let (($x281 (= $x240 false)))
 (let (($x70 (= $x281 true)))
 (let (($x43 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1031X)))
 (=> $x37 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1030X)))
 (= $x37 false)))
 ))
 (let (($x184 (and $x130 $x43)))
 (let (($x285 (= $x184 true)))
 (let (($x110 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x154 (bvadd symbol.1 (bvmul input.ind-%var1025X (_ bv4 32)))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x154))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x154 (_ bv2 32))) ?x194)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x154 (_ bv3 32))) ?x255)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1025X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1025X)))
 (=> $x297 (= ?x225 ?x165)))))))))
 ))
 (let (($x91 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1024X) (bvult input.ind-%var1024X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1024X)))
 (= $x297 $x207))))
 ))
 (let (($x327 (and $x91 $x110)))
 (let (($x121 (= $x327 true)))
 (let ((?x142 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x142)))
 (let (($x242 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (= $x242 true)))
 (let (($x57 (= $x228 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x62)))
 (let (($x227 (= ?x69 input.dst.llvm-%n)))
 (let (($x188 (= $x227 true)))
 (let (($x233 (= $x188 true)))
 (let (($x189 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x189 true)))
 (let (($x235 (= $x129 true)))
 (let (($x234 (= $x235 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (= $x209 true)))
 (let (($x30 (= $x9 true)))
 (let (($x216 (= $x30 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x112 (= $x156 true)))
 (let (($x5 (= $x112 true)))
 (let (($x50 (= $x5 true)))
 (let (($x263 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x231 (= $x263 true)))
 (let (($x232 (= $x231 true)))
 (let (($x215 (= $x232 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x162)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x85)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x181 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x92 (= input.memlabel-mem--symbol.1_end ?x181)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x55 $x92)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x19 $x145)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x109 $x113)))
 (let (($x12 (not $x161)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x180 $x138)))
 (let (($x119 (and (not $x179) $x12)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x116 $x22)))
 (let (($x49 (not $x66)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x73 $x86)))
 (let (($x120 (and (not $x33) $x49)))
 (let (($x25 (and (and (and (and (and (and $x120 $x119) $x35) $x157) $x143) $x47) $x123)))
 (let (($x48 (and $x25 $x210)))
 (let (($x14 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x14 $x48)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x134) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x99 $x80)))))))
 (let (($x213 (and $x131 $x52)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let (($x21 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x45 (= $x21 true)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x79 (= ?x69 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x155 (and $x76 $x90)))
 (let (($x53 (and $x155 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x219 (and $x84 $x223)))
 (let (($x140 (and $x219 $x215)))
 (let (($x27 (and $x140 $x50)))
 (let (($x222 (and $x27 $x216)))
 (let (($x93 (and $x222 $x234)))
 (let (($x282 (and $x93 $x233)))
 (let (($x206 (and $x282 $x57)))
 (let (($x28 (and $x206 $x121)))
 (let (($x107 (and $x28 $x285)))
 (let (($x244 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x322 (and $x244 $x107)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x267 $x322)))
 (let (($x289 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x44 (and $x289 $x77)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let (($x320 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x17 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x320)))))
 (let (($x283 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x320)))))
 (let (($x280 (and $x283 $x44)))
 (let (($x271 (=> $x280 $x70)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (not $x197)))
 (let (($x281 (= $x240 false)))
 (let (($x70 (= $x281 true)))
 (let (($x43 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1031X)))
 (=> $x37 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1031X) (_ bv0 32)))))
 ))
 (let (($x130 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x37 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1030X)))
 (= $x37 false)))
 ))
 (let (($x184 (and $x130 $x43)))
 (let (($x285 (= $x184 true)))
 (let (($x110 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let ((?x154 (bvadd symbol.1 (bvmul input.ind-%var1025X (_ bv4 32)))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x154))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x154 (_ bv2 32))) ?x194)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x154 (_ bv3 32))) ?x255)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1025X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1025X)))
 (=> $x297 (= ?x225 ?x165)))))))))
 ))
 (let (($x91 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1024X) (bvult input.ind-%var1024X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1024X)))
 (= $x297 $x207))))
 ))
 (let (($x327 (and $x91 $x110)))
 (let (($x121 (= $x327 true)))
 (let ((?x142 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x142)))
 (let (($x242 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x228 (= $x242 true)))
 (let (($x57 (= $x228 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x62)))
 (let (($x227 (= ?x69 input.dst.llvm-%n)))
 (let (($x188 (= $x227 true)))
 (let (($x233 (= $x188 true)))
 (let (($x189 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x189 true)))
 (let (($x235 (= $x129 true)))
 (let (($x234 (= $x235 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (= $x209 true)))
 (let (($x30 (= $x9 true)))
 (let (($x216 (= $x30 true)))
 (let (($x156 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x112 (= $x156 true)))
 (let (($x5 (= $x112 true)))
 (let (($x50 (= $x5 true)))
 (let (($x263 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x231 (= $x263 true)))
 (let (($x232 (= $x231 true)))
 (let (($x215 (= $x232 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x162)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x85)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x181 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x92 (= input.memlabel-mem--symbol.1_end ?x181)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x55 $x92)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x19 $x145)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x109 $x113)))
 (let (($x12 (not $x161)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (and $x180 $x138)))
 (let (($x119 (and (not $x179) $x12)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x116 $x22)))
 (let (($x49 (not $x66)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x73 $x86)))
 (let (($x120 (and (not $x33) $x49)))
 (let (($x25 (and (and (and (and (and (and $x120 $x119) $x35) $x157) $x143) $x47) $x123)))
 (let (($x48 (and $x25 $x210)))
 (let (($x14 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x14 $x48)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x134) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x99 $x80)))))))
 (let (($x213 (and $x131 $x52)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x149 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x82 (= $x149 true)))
 (let (($x147 (= $x82 true)))
 (let (($x40 (= $x147 true)))
 (let (($x21 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x45 (= $x21 true)))
 (let (($x54 (= $x45 true)))
 (let (($x6 (= $x54 true)))
 (let (($x79 (= ?x69 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x76 (= $x64 true)))
 (let (($x155 (and $x76 $x90)))
 (let (($x53 (and $x155 $x6)))
 (let (($x84 (and $x53 $x40)))
 (let (($x219 (and $x84 $x223)))
 (let (($x140 (and $x219 $x215)))
 (let (($x27 (and $x140 $x50)))
 (let (($x222 (and $x27 $x216)))
 (let (($x93 (and $x222 $x234)))
 (let (($x282 (and $x93 $x233)))
 (let (($x206 (and $x282 $x57)))
 (let (($x28 (and $x206 $x121)))
 (let (($x107 (and $x28 $x285)))
 (let (($x244 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x322 (and $x244 $x107)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x267 $x322)))
 (let (($x289 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x44 (and $x289 $x77)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let (($x320 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x17 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x320)))))
 (let (($x283 (=> (and $x197 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x320)))))
 (let (($x280 (and $x283 $x44)))
 (let (($x271 (=> $x280 $x70)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x0000013c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000013c)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x03fffea0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000013c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0000013c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x0400002f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x03fffea0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x03fffea0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0000013c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x03fffea3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x03fffea2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x03fffea1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x03fffea0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x0000013c x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x000000c0)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x000000c0)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xf7ff7cd8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9ffbbfe8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x000000c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000c0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9ffbbfeb)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xf7ff7e67)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9ffbbfe8)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xf7ff7cd8)
  (define-fun symbol.1 () (_ BitVec 32)
    #xf7ff7cd8)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #xf7ff7cdb (bvmul #x00000004 x!0)))
              (k!7 (bvadd #xf7ff7cda (bvmul #x00000004 x!0)))
              (k!7 (bvadd #xf7ff7cd9 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #xf7ff7cd8 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x000000c0 x!0)
         (ite (bvule #x000000c1 x!0) #x000000c1 #x000000c0)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!8 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x332 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (or $x158 $x332)))
 (let (($x262 (= $x115 true)))
 (let (($x293 (= $x262 true)))
 (let (($x128 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let (($x265 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1075X)))
 (=> $x265 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1075X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x265 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1074X)))
 (= $x265 false)))
 ))
 (let (($x114 (and $x277 $x128)))
 (let (($x318 (= $x114 true)))
 (let (($x56 (forall ((input.ind-%var1069X (_ BitVec 32)) )(let ((?x77 (bvadd symbol.1 (bvmul input.ind-%var1069X (_ bv4 32)))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x77))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv2 32))) ?x281)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv3 32))) ?x126)))
 (let ((?x194 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1069X)))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1069X)))
 (=> $x323 (= ?x194 ?x89)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1068X (_ BitVec 32)) )(let (($x316 (and (bvule (_ bv0 32) input.ind-%var1068X) (bvult input.ind-%var1068X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1068X)))
 (= $x323 $x316))))
 ))
 (let (($x172 (and $x124 $x56)))
 (let (($x296 (= $x172 true)))
 (let ((?x242 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x242)))
 (let (($x57 (= ?x228 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x57 true)))
 (let (($x95 (= $x206 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x129)))
 (let (($x233 (= ?x235 input.dst.llvm-%n)))
 (let (($x282 (= $x233 true)))
 (let (($x142 (= $x282 true)))
 (let (($x234 (= ?x235 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x93 (= $x234 true)))
 (let (($x227 (= $x93 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x209 true)))
 (let (($x30 (= $x9 true)))
 (let (($x216 (= $x30 true)))
 (let (($x156 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x156 true)))
 (let (($x5 (= $x112 true)))
 (let (($x50 (= $x5 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x263 true)))
 (let (($x232 (= $x231 true)))
 (let (($x215 (= $x232 true)))
 (let (($x213 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x162 (= $x25 true)))
 (let (($x210 (= $x162 true)))
 (let (($x48 (= $x210 true)))
 (let (($x18 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x47 (= $x18 true)))
 (let (($x166 (= $x47 true)))
 (let (($x85 (= $x166 true)))
 (let (($x55 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x181 (= $x55 true)))
 (let (($x92 (= $x181 true)))
 (let (($x145 (= $x92 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x180 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x180)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x116 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (and $x86 $x116)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x73 $x22)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (and $x100 $x80)))
 (let (($x83 (not $x94)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (and $x34 $x146)))
 (let (($x102 (and (not $x99) $x83)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x168 $x163)))
 (let (($x13 (not $x134)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x40 $x84)))
 (let (($x7 (and (not $x160) $x13)))
 (let (($x144 (and (and (and (and (and (and $x7 $x102) $x131) $x14) $x66) $x120) $x138)))
 (let (($x35 (and $x144 $x175)))
 (let (($x36 (= symbol.1 dst_symbol_addr.1)))
 (let (($x78 (and $x36 $x35)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x79 (or (bvugt input.memlabel-mem--symbol.1_begin ?x88) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x79) (or $x21 $x45)))))))
 (let (($x133 (and $x147 $x78)))
 (let (($x157 (= $x133 true)))
 (let (($x125 (= $x157 true)))
 (let (($x19 (= $x125 true)))
 (let (($x143 (and $x19 $x145)))
 (let (($x123 (and $x143 $x85)))
 (let (($x52 (and $x123 $x48)))
 (let (($x219 (and $x52 $x223)))
 (let (($x140 (and $x219 $x215)))
 (let (($x27 (and $x140 $x50)))
 (let (($x222 (and $x27 $x216)))
 (let (($x188 (and $x222 $x227)))
 (let (($x212 (and $x188 $x142)))
 (let (($x297 (and $x212 $x95)))
 (let (($x202 (and $x297 $x296)))
 (let (($x252 (and $x202 $x318)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and $x266 $x252)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x292 $x249)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x238 $x111)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let (($x236 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x289 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x236)))))
 (let (($x23 (=> (and $x332 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x236)))))
 (let (($x294 (and $x23 $x299)))
 (let (($x96 (=> $x294 $x293)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x332 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (or $x158 $x332)))
 (let (($x262 (= $x115 true)))
 (let (($x293 (= $x262 true)))
 (let (($x128 (forall ((input.ind-%var1075X (_ BitVec 32)) )(let (($x265 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1075X)))
 (=> $x265 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1075X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1074X (_ BitVec 32)) )(let (($x265 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1074X)))
 (= $x265 false)))
 ))
 (let (($x114 (and $x277 $x128)))
 (let (($x318 (= $x114 true)))
 (let (($x56 (forall ((input.ind-%var1069X (_ BitVec 32)) )(let ((?x77 (bvadd symbol.1 (bvmul input.ind-%var1069X (_ bv4 32)))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x77))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv2 32))) ?x281)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x77 (_ bv3 32))) ?x126)))
 (let ((?x194 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1069X)))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1069X)))
 (=> $x323 (= ?x194 ?x89)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1068X (_ BitVec 32)) )(let (($x316 (and (bvule (_ bv0 32) input.ind-%var1068X) (bvult input.ind-%var1068X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x323 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1068X)))
 (= $x323 $x316))))
 ))
 (let (($x172 (and $x124 $x56)))
 (let (($x296 (= $x172 true)))
 (let ((?x242 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x242)))
 (let (($x57 (= ?x228 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x57 true)))
 (let (($x95 (= $x206 true)))
 (let ((?x129 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x129)))
 (let (($x233 (= ?x235 input.dst.llvm-%n)))
 (let (($x282 (= $x233 true)))
 (let (($x142 (= $x282 true)))
 (let (($x234 (= ?x235 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x93 (= $x234 true)))
 (let (($x227 (= $x93 true)))
 (let (($x209 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x209 true)))
 (let (($x30 (= $x9 true)))
 (let (($x216 (= $x30 true)))
 (let (($x156 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x156 true)))
 (let (($x5 (= $x112 true)))
 (let (($x50 (= $x5 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x263 true)))
 (let (($x232 (= $x231 true)))
 (let (($x215 (= $x232 true)))
 (let (($x213 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x213 true)))
 (let (($x87 (= $x211 true)))
 (let (($x223 (= $x87 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x162 (= $x25 true)))
 (let (($x210 (= $x162 true)))
 (let (($x48 (= $x210 true)))
 (let (($x18 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x47 (= $x18 true)))
 (let (($x166 (= $x47 true)))
 (let (($x85 (= $x166 true)))
 (let (($x55 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x181 (= $x55 true)))
 (let (($x92 (= $x181 true)))
 (let (($x145 (= $x92 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x179)))
 (let ((?x180 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x180)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x116 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (and $x86 $x116)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x73 $x22)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (and $x100 $x80)))
 (let (($x83 (not $x94)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (and $x34 $x146)))
 (let (($x102 (and (not $x99) $x83)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x168 $x163)))
 (let (($x13 (not $x134)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x40 $x84)))
 (let (($x7 (and (not $x160) $x13)))
 (let (($x144 (and (and (and (and (and (and $x7 $x102) $x131) $x14) $x66) $x120) $x138)))
 (let (($x35 (and $x144 $x175)))
 (let (($x36 (= symbol.1 dst_symbol_addr.1)))
 (let (($x78 (and $x36 $x35)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x79 (or (bvugt input.memlabel-mem--symbol.1_begin ?x88) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x79) (or $x21 $x45)))))))
 (let (($x133 (and $x147 $x78)))
 (let (($x157 (= $x133 true)))
 (let (($x125 (= $x157 true)))
 (let (($x19 (= $x125 true)))
 (let (($x143 (and $x19 $x145)))
 (let (($x123 (and $x143 $x85)))
 (let (($x52 (and $x123 $x48)))
 (let (($x219 (and $x52 $x223)))
 (let (($x140 (and $x219 $x215)))
 (let (($x27 (and $x140 $x50)))
 (let (($x222 (and $x27 $x216)))
 (let (($x188 (and $x222 $x227)))
 (let (($x212 (and $x188 $x142)))
 (let (($x297 (and $x212 $x95)))
 (let (($x202 (and $x297 $x296)))
 (let (($x252 (and $x202 $x318)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and $x266 $x252)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x292 $x249)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x299 (and $x238 $x111)))
 (let ((?x176 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvadd symbol.1 ?x176)))
 (let (($x236 (and (bvule input.memlabel-mem--symbol.1_begin ?x183) (bvule (bvadd ?x183 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x289 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false $x236)))))
 (let (($x23 (=> (and $x332 (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x236)))))
 (let (($x294 (and $x23 $x299)))
 (let (($x96 (=> $x294 $x293)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var1093X (_ BitVec 32)) )(let ((?x115 (bvadd symbol.1 (bvmul input.ind-%var1093X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x115))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv2 32))) ?x259)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv3 32))) ?x63)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1093X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1093X)))
 (=> $x165 (= ?x301 ?x170)))))))))
 ))
 (let (($x286 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1092X)))
 (= $x165 (and (bvule (_ bv0 32) input.ind-%var1092X) (bvult input.ind-%var1092X input.dst.llvm-%n)))))
 ))
 (let (($x135 (and $x286 $x177)))
 (let (($x287 (= true true)))
 (let (($x104 (and $x287 $x135)))
 (let (($x11 (= $x104 true)))
 (let (($x285 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1087X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x159 false)))
 ))
 (let (($x139 (and $x121 $x285)))
 (let (($x331 (= $x139 true)))
 (let (($x246 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let ((?x115 (bvadd symbol.1 (bvmul input.ind-%var1081X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x115))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv2 32))) ?x259)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv3 32))) ?x63)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1081X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1081X)))
 (=> $x165 (= ?x301 ?x170)))))))))
 ))
 (let (($x44 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x271 (bvule (_ bv0 32) input.ind-%var1080X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1080X)))
 (= $x165 (and $x271 (bvult input.ind-%var1080X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x98 (and $x44 $x246)))
 (let (($x225 (= $x98 true)))
 (let ((?x244 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x244)))
 (let (($x323 (= ?x266 input.dst.llvm-%n)))
 (let (($x303 (= $x323 true)))
 (let (($x295 (= $x303 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x234)))
 (let ((?x129 (bvand symbol.1 (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x129)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x27 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x209 (= input.memlabel-mem--symbol.1_end ?x27)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x50 $x209)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x5 $x9)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x263 (and $x223 $x219)))
 (let (($x231 (not $x263)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x213 $x211)))
 (let (($x215 (and (not $x87) $x231)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x123 $x25)))
 (let (($x210 (not $x162)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x47 $x166)))
 (let (($x52 (and (not $x85) $x210)))
 (let (($x212 (and (and (and (and (and (and $x52 $x215) $x140) $x112) $x30) $x189) $x235)))
 (let (($x242 (and $x212 $x93)))
 (let (($x120 (= symbol.1 dst_symbol_addr.1)))
 (let (($x228 (and $x120 $x242)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x179) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x19 $x55)))))))
 (let (($x57 (and $x18 $x228)))
 (let (($x206 (= $x57 true)))
 (let (($x95 (= $x206 true)))
 (let (($x297 (= $x95 true)))
 (let (($x86 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (= $x86 true)))
 (let (($x106 (= $x33 true)))
 (let (($x116 (= $x106 true)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (not $x134)))
 (let (($x10 (= $x13 true)))
 (let (($x14 (= $x10 true)))
 (let (($x161 (= $x14 true)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x80 (and true $x100)))
 (let (($x94 (= true $x80)))
 (let (($x83 (=> $x13 $x94)))
 (let (($x102 (= $x83 true)))
 (let (($x109 (= $x102 true)))
 (let (($x131 (= $x109 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x40 true)))
 (let (($x160 (= $x84 true)))
 (let (($x8 (= $x160 true)))
 (let (($x53 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x149 (= $x53 true)))
 (let (($x147 (= $x149 true)))
 (let (($x42 (= $x147 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x155 (= $x21 true)))
 (let (($x45 (= $x155 true)))
 (let (($x54 (= $x45 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x74 (= $x79 true)))
 (let (($x64 (= ?x266 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x64 true)))
 (let (($x82 (= $x76 true)))
 (let ((?x270 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x270)))
 (let (($x193 (= ?x238 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x193 true)))
 (let (($x292 (= $x267 true)))
 (let (($x71 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x236 (= $x71 true)))
 (let (($x17 (= $x236 true)))
 (let (($x283 (= $x17 true)))
 (let (($x167 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x61 (= $x167 true)))
 (let (($x320 (= $x61 true)))
 (let (($x330 (= $x320 true)))
 (let (($x289 (and $x330 $x283)))
 (let (($x302 (and $x289 $x292)))
 (let (($x88 (and $x302 $x82)))
 (let (($x90 (and $x88 $x74)))
 (let (($x6 (and $x90 $x54)))
 (let (($x36 (and $x6 $x42)))
 (let (($x168 (and $x36 $x8)))
 (let (($x113 (and $x168 $x131)))
 (let (($x73 (and $x113 $x161)))
 (let (($x22 (and $x73 $x116)))
 (let (($x207 (and $x22 $x297)))
 (let (($x316 (and $x207 $x295)))
 (let (($x298 (and $x316 $x225)))
 (let (($x204 (and $x298 $x331)))
 (let (($x190 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and $x190 $x204)))
 (let (($x251 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x251 $x185)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x328 $x107)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x258 (and $x332 $x329)))
 (let (($x118 (=> $x258 $x11)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var1093X (_ BitVec 32)) )(let ((?x115 (bvadd symbol.1 (bvmul input.ind-%var1093X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x115))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv2 32))) ?x259)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv3 32))) ?x63)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1093X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1093X)))
 (=> $x165 (= ?x301 ?x170)))))))))
 ))
 (let (($x286 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1092X)))
 (= $x165 (and (bvule (_ bv0 32) input.ind-%var1092X) (bvult input.ind-%var1092X input.dst.llvm-%n)))))
 ))
 (let (($x135 (and $x286 $x177)))
 (let (($x287 (= true true)))
 (let (($x104 (and $x287 $x135)))
 (let (($x11 (= $x104 true)))
 (let (($x285 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1087X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x159 false)))
 ))
 (let (($x139 (and $x121 $x285)))
 (let (($x331 (= $x139 true)))
 (let (($x246 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let ((?x115 (bvadd symbol.1 (bvmul input.ind-%var1081X (_ bv4 32)))))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x115))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv2 32))) ?x259)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x115 (_ bv3 32))) ?x63)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1081X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1081X)))
 (=> $x165 (= ?x301 ?x170)))))))))
 ))
 (let (($x44 (forall ((input.ind-%var1080X (_ BitVec 32)) )(let (($x271 (bvule (_ bv0 32) input.ind-%var1080X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1080X)))
 (= $x165 (and $x271 (bvult input.ind-%var1080X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x98 (and $x44 $x246)))
 (let (($x225 (= $x98 true)))
 (let ((?x244 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x244)))
 (let (($x323 (= ?x266 input.dst.llvm-%n)))
 (let (($x303 (= $x323 true)))
 (let (($x295 (= $x303 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x234)))
 (let ((?x129 (bvand symbol.1 (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x129)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x27 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x209 (= input.memlabel-mem--symbol.1_end ?x27)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x50 $x209)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x5 $x9)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x263 (and $x223 $x219)))
 (let (($x231 (not $x263)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x213 $x211)))
 (let (($x215 (and (not $x87) $x231)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x123 $x25)))
 (let (($x210 (not $x162)))
 (let (($x166 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x47 $x166)))
 (let (($x52 (and (not $x85) $x210)))
 (let (($x212 (and (and (and (and (and (and $x52 $x215) $x140) $x112) $x30) $x189) $x235)))
 (let (($x242 (and $x212 $x93)))
 (let (($x120 (= symbol.1 dst_symbol_addr.1)))
 (let (($x228 (and $x120 $x242)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x179) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x19 $x55)))))))
 (let (($x57 (and $x18 $x228)))
 (let (($x206 (= $x57 true)))
 (let (($x95 (= $x206 true)))
 (let (($x297 (= $x95 true)))
 (let (($x86 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (= $x86 true)))
 (let (($x106 (= $x33 true)))
 (let (($x116 (= $x106 true)))
 (let (($x134 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (not $x134)))
 (let (($x10 (= $x13 true)))
 (let (($x14 (= $x10 true)))
 (let (($x161 (= $x14 true)))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x80 (and true $x100)))
 (let (($x94 (= true $x80)))
 (let (($x83 (=> $x13 $x94)))
 (let (($x102 (= $x83 true)))
 (let (($x109 (= $x102 true)))
 (let (($x131 (= $x109 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x40 true)))
 (let (($x160 (= $x84 true)))
 (let (($x8 (= $x160 true)))
 (let (($x53 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x149 (= $x53 true)))
 (let (($x147 (= $x149 true)))
 (let (($x42 (= $x147 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x155 (= $x21 true)))
 (let (($x45 (= $x155 true)))
 (let (($x54 (= $x45 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x69 (= $x62 true)))
 (let (($x79 (= $x69 true)))
 (let (($x74 (= $x79 true)))
 (let (($x64 (= ?x266 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x64 true)))
 (let (($x82 (= $x76 true)))
 (let ((?x270 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x238 (bvneg ?x270)))
 (let (($x193 (= ?x238 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x193 true)))
 (let (($x292 (= $x267 true)))
 (let (($x71 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x236 (= $x71 true)))
 (let (($x17 (= $x236 true)))
 (let (($x283 (= $x17 true)))
 (let (($x167 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x61 (= $x167 true)))
 (let (($x320 (= $x61 true)))
 (let (($x330 (= $x320 true)))
 (let (($x289 (and $x330 $x283)))
 (let (($x302 (and $x289 $x292)))
 (let (($x88 (and $x302 $x82)))
 (let (($x90 (and $x88 $x74)))
 (let (($x6 (and $x90 $x54)))
 (let (($x36 (and $x6 $x42)))
 (let (($x168 (and $x36 $x8)))
 (let (($x113 (and $x168 $x131)))
 (let (($x73 (and $x113 $x161)))
 (let (($x22 (and $x73 $x116)))
 (let (($x207 (and $x22 $x297)))
 (let (($x316 (and $x207 $x295)))
 (let (($x298 (and $x316 $x225)))
 (let (($x204 (and $x298 $x331)))
 (let (($x190 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (and $x190 $x204)))
 (let (($x251 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x251 $x185)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x328 $x107)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x258 (and $x332 $x329)))
 (let (($x118 (=> $x258 $x11)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 182 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x332 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x318 (not $x332)))
 (let (($x111 (or $x332 $x318)))
 (let (($x37 (= $x111 true)))
 (let (($x151 (= $x37 true)))
 (let (($x252 (forall ((input.ind-%var1105X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1105X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1105X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var1104X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1104X)))
 (= $x66 false)))
 ))
 (let (($x249 (and $x43 $x252)))
 (let (($x128 (= $x249 true)))
 (let (($x177 (forall ((input.ind-%var1099X (_ BitVec 32)) )(let ((?x285 (bvadd symbol.1 (bvmul input.ind-%var1099X (_ bv4 32)))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x285))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv2 32))) ?x185)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv3 32))) ?x258)))
 (let ((?x239 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1099X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1099X)))
 (=> $x165 (= ?x239 ?x325)))))))))
 ))
 (let (($x115 (forall ((input.ind-%var1098X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var1098X) (bvult input.ind-%var1098X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1098X)))
 (= $x165 $x296))))
 ))
 (let (($x135 (and $x115 $x177)))
 (let (($x104 (= $x135 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x206)))
 (let (($x297 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x297 true)))
 (let (($x323 (= $x207 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x74)))
 (let (($x93 (= ?x90 input.dst.llvm-%n)))
 (let (($x242 (= $x93 true)))
 (let (($x228 (= $x242 true)))
 (let (($x142 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x142 true)))
 (let (($x235 (= $x129 true)))
 (let (($x212 (= $x235 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (= $x30 true)))
 (let (($x216 (= $x282 true)))
 (let (($x222 (= $x216 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x50 (= $x5 true)))
 (let (($x27 (= $x50 true)))
 (let (($x209 (= $x27 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x188 (= $x140 true)))
 (let (($x156 (= $x188 true)))
 (let (($x112 (= $x156 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x123)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x85)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x143 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x18 (= input.memlabel-mem--symbol.1_end ?x143)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x49 (and $x145 $x18)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x92 $x49)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x144 $x35)))
 (let (($x133 (not $x78)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (and $x138 $x179)))
 (let (($x19 (and (not $x175) $x133)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x106 $x116)))
 (let (($x119 (not $x22)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x73 $x86)))
 (let (($x137 (and (not $x33) $x119)))
 (let (($x87 (and (and (and (and (and (and $x137 $x19) $x125) $x181) $x120) $x166) $x48)))
 (let (($x232 (and $x87 $x25)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x223 (and $x134 $x232)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x108 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x108) (or $x83 $x102)))))))
 (let (($x219 (and $x161 $x223)))
 (let (($x263 (= $x219 true)))
 (let (($x231 (= $x263 true)))
 (let (($x215 (= $x231 true)))
 (let (($x36 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x36 true)))
 (let (($x84 (= $x40 true)))
 (let (($x160 (= $x84 true)))
 (let (($x6 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x53 (= $x6 true)))
 (let (($x149 (= $x53 true)))
 (let (($x147 (= $x149 true)))
 (let (($x21 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (= $x21 true)))
 (let (($x45 (= $x155 true)))
 (let (($x82 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x82 true)))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x54 (and $x69 $x45)))
 (let (($x42 (and $x54 $x147)))
 (let (($x8 (and $x42 $x160)))
 (let (($x227 (and $x8 $x215)))
 (let (($x233 (and $x227 $x112)))
 (let (($x9 (and $x233 $x209)))
 (let (($x189 (and $x9 $x222)))
 (let (($x234 (and $x189 $x212)))
 (let (($x57 (and $x234 $x228)))
 (let (($x303 (and $x57 $x323)))
 (let (($x11 (and $x303 $x104)))
 (let (($x114 (and $x11 $x128)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x266 $x114)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x292 $x277)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x238 $x141)))
 (let ((?x328 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd symbol.1 ?x328)))
 (let (($x17 (and (bvule input.memlabel-mem--symbol.1_begin ?x176) (bvule (bvadd ?x176 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x270 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false $x17)))))
 (let (($x251 (=> (and $x332 (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x17)))))
 (let (($x195 (and $x251 $x203)))
 (let (($x290 (=> $x195 $x151)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x332 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x318 (not $x332)))
 (let (($x111 (or $x332 $x318)))
 (let (($x37 (= $x111 true)))
 (let (($x151 (= $x37 true)))
 (let (($x252 (forall ((input.ind-%var1105X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1105X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1105X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var1104X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1104X)))
 (= $x66 false)))
 ))
 (let (($x249 (and $x43 $x252)))
 (let (($x128 (= $x249 true)))
 (let (($x177 (forall ((input.ind-%var1099X (_ BitVec 32)) )(let ((?x285 (bvadd symbol.1 (bvmul input.ind-%var1099X (_ bv4 32)))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x285))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv2 32))) ?x185)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv3 32))) ?x258)))
 (let ((?x239 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1099X)))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1099X)))
 (=> $x165 (= ?x239 ?x325)))))))))
 ))
 (let (($x115 (forall ((input.ind-%var1098X (_ BitVec 32)) )(let (($x296 (and (bvule (_ bv0 32) input.ind-%var1098X) (bvult input.ind-%var1098X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x165 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1098X)))
 (= $x165 $x296))))
 ))
 (let (($x135 (and $x115 $x177)))
 (let (($x104 (= $x135 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x206)))
 (let (($x297 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x297 true)))
 (let (($x323 (= $x207 true)))
 (let ((?x74 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x74)))
 (let (($x93 (= ?x90 input.dst.llvm-%n)))
 (let (($x242 (= $x93 true)))
 (let (($x228 (= $x242 true)))
 (let (($x142 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x142 true)))
 (let (($x235 (= $x129 true)))
 (let (($x212 (= $x235 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (= $x30 true)))
 (let (($x216 (= $x282 true)))
 (let (($x222 (= $x216 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x50 (= $x5 true)))
 (let (($x27 (= $x50 true)))
 (let (($x209 (= $x27 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x188 (= $x140 true)))
 (let (($x156 (= $x188 true)))
 (let (($x112 (= $x156 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x123)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x85)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x143 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x18 (= input.memlabel-mem--symbol.1_end ?x143)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x49 (and $x145 $x18)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x92 $x49)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x144 $x35)))
 (let (($x133 (not $x78)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (and $x138 $x179)))
 (let (($x19 (and (not $x175) $x133)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x106 $x116)))
 (let (($x119 (not $x22)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x73 $x86)))
 (let (($x137 (and (not $x33) $x119)))
 (let (($x87 (and (and (and (and (and (and $x137 $x19) $x125) $x181) $x120) $x166) $x48)))
 (let (($x232 (and $x87 $x25)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x223 (and $x134 $x232)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x108 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x108) (or $x83 $x102)))))))
 (let (($x219 (and $x161 $x223)))
 (let (($x263 (= $x219 true)))
 (let (($x231 (= $x263 true)))
 (let (($x215 (= $x231 true)))
 (let (($x36 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x40 (= $x36 true)))
 (let (($x84 (= $x40 true)))
 (let (($x160 (= $x84 true)))
 (let (($x6 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x53 (= $x6 true)))
 (let (($x149 (= $x53 true)))
 (let (($x147 (= $x149 true)))
 (let (($x21 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x155 (= $x21 true)))
 (let (($x45 (= $x155 true)))
 (let (($x82 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x82 true)))
 (let (($x62 (= $x88 true)))
 (let (($x69 (= $x62 true)))
 (let (($x54 (and $x69 $x45)))
 (let (($x42 (and $x54 $x147)))
 (let (($x8 (and $x42 $x160)))
 (let (($x227 (and $x8 $x215)))
 (let (($x233 (and $x227 $x112)))
 (let (($x9 (and $x233 $x209)))
 (let (($x189 (and $x9 $x222)))
 (let (($x234 (and $x189 $x212)))
 (let (($x57 (and $x234 $x228)))
 (let (($x303 (and $x57 $x323)))
 (let (($x11 (and $x303 $x104)))
 (let (($x114 (and $x11 $x128)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x266 $x114)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x292 $x277)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x238 $x141)))
 (let ((?x328 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvadd symbol.1 ?x328)))
 (let (($x17 (and (bvule input.memlabel-mem--symbol.1_begin ?x176) (bvule (bvadd ?x176 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x270 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false $x17)))))
 (let (($x251 (=> (and $x332 (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x17)))))
 (let (($x195 (and $x251 $x203)))
 (let (($x290 (=> $x195 $x151)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x113)))
 (let ((?x109 (bvand symbol.1 (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x109)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x99 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x108 (= input.memlabel-mem--symbol.1_end ?x99)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x7 $x108)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x14 $x100)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x147 $x42)))
 (let (($x40 (not $x36)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x6 $x53)))
 (let (($x160 (and (not $x149) $x40)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x74 $x90)))
 (let (($x155 (not $x21)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x62 $x69)))
 (let (($x54 (and (not $x79) $x155)))
 (let (($x33 (and (and (and (and (and (and $x54 $x160) $x8) $x146) $x80) $x102) $x131)))
 (let (($x180 (and $x33 $x10)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x106 (and $x88 $x180)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x289 (or (bvugt input.memlabel-mem--symbol.1_begin ?x236) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x289) (or $x238 $x193)))))))
 (let (($x27 (and $x64 $x106)))
 (let (($x209 (= $x27 true)))
 (let (($x9 (= $x209 true)))
 (let (($x140 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1111X)))
 (=> $x166 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1111X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1110X)))
 (= $x166 false)))
 ))
 (let (($x188 (and $x87 $x140)))
 (let (($x156 (= $x188 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x133 (concat ?x144 (concat ?x138 ?x119)))))
 (let (($x145 (= ?x19 input.dst.llvm-%n)))
 (let (($x143 (= $x145 true)))
 (let (($x18 (= $x143 true)))
 (let (($x162 (= input.dst.llvm-%n ?x19)))
 (let (($x55 (and (and (and $x64 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x106) $x162)))
 (let (($x181 (= $x55 true)))
 (let (($x52 (= $x181 true)))
 (let (($x92 (= $x52 true)))
 (let (($x49 (and $x92 $x18)))
 (let (($x112 (and $x49 $x156)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x190 $x112)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x103 $x233)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x65 $x5)))
 (let (($x30 (=> $x50 $x9)))
 (not $x30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x113)))
 (let ((?x109 (bvand symbol.1 (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x109)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x99 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x108 (= input.memlabel-mem--symbol.1_end ?x99)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x7 $x108)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x14 $x100)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x147 $x42)))
 (let (($x40 (not $x36)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x6 $x53)))
 (let (($x160 (and (not $x149) $x40)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x74 $x90)))
 (let (($x155 (not $x21)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x62 $x69)))
 (let (($x54 (and (not $x79) $x155)))
 (let (($x33 (and (and (and (and (and (and $x54 $x160) $x8) $x146) $x80) $x102) $x131)))
 (let (($x180 (and $x33 $x10)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x106 (and $x88 $x180)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x289 (or (bvugt input.memlabel-mem--symbol.1_begin ?x236) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x289) (or $x238 $x193)))))))
 (let (($x27 (and $x64 $x106)))
 (let (($x209 (= $x27 true)))
 (let (($x9 (= $x209 true)))
 (let (($x140 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1111X)))
 (=> $x166 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1111X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var1110X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1110X)))
 (= $x166 false)))
 ))
 (let (($x188 (and $x87 $x140)))
 (let (($x156 (= $x188 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x133 (concat ?x144 (concat ?x138 ?x119)))))
 (let (($x145 (= ?x19 input.dst.llvm-%n)))
 (let (($x143 (= $x145 true)))
 (let (($x18 (= $x143 true)))
 (let (($x162 (= input.dst.llvm-%n ?x19)))
 (let (($x55 (and (and (and $x64 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x106) $x162)))
 (let (($x181 (= $x55 true)))
 (let (($x52 (= $x181 true)))
 (let (($x92 (= $x52 true)))
 (let (($x49 (and $x92 $x18)))
 (let (($x112 (and $x49 $x156)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x190 $x112)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x103 $x233)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x65 $x5)))
 (let (($x30 (=> $x50 $x9)))
 (not $x30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x263)))
 (let (($x231 (= ?x25 input.dst.llvm-%n)))
 (let (($x184 (= $x231 true)))
 (let (($x132 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1117X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x215 false)))
 ))
 (let (($x22 (and $x156 $x132)))
 (let (($x211 (= $x22 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x35 (concat ?x138 (concat ?x175 ?x78)))))
 (let (($x18 (= ?x19 input.dst.llvm-%n)))
 (let (($x49 (= $x18 true)))
 (let (($x47 (= $x49 true)))
 (let (($x162 (= input.dst.llvm-%n ?x19)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x94)))
 (let ((?x73 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x73)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x14 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x7 (= input.memlabel-mem--symbol.1_end ?x14)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x146 $x7)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x13 $x34)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x84 $x147)))
 (let (($x36 (not $x42)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x6 $x53)))
 (let (($x160 (and (not $x149) $x36)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x45 $x74)))
 (let (($x21 (not $x90)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x62 $x69)))
 (let (($x54 (and (not $x79) $x21)))
 (let (($x10 (and (and (and (and (and (and $x54 $x160) $x161) $x163) $x99) $x80) $x83)))
 (let (($x180 (and $x10 $x102)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x106 (and $x88 $x180)))
 (let (($x266 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x283 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x283)))
 (let (($x251 (or (bvugt input.memlabel-mem--symbol.1_begin ?x283) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x251) (or $x267 $x292)))))))
 (let (($x52 (and (and (and $x125 $x266) $x106) $x162)))
 (let (($x92 (= $x52 true)))
 (let (($x145 (= $x92 true)))
 (let (($x143 (= $x145 true)))
 (let (($x166 (and $x143 $x47)))
 (let (($x219 (and $x166 $x211)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (and $x176 $x219)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x172 $x232)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x332 $x120)))
 (let (($x216 (=> $x213 $x184)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x263)))
 (let (($x231 (= ?x25 input.dst.llvm-%n)))
 (let (($x184 (= $x231 true)))
 (let (($x132 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1117X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x215 false)))
 ))
 (let (($x22 (and $x156 $x132)))
 (let (($x211 (= $x22 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x35 (concat ?x138 (concat ?x175 ?x78)))))
 (let (($x18 (= ?x19 input.dst.llvm-%n)))
 (let (($x49 (= $x18 true)))
 (let (($x47 (= $x49 true)))
 (let (($x162 (= input.dst.llvm-%n ?x19)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x94)))
 (let ((?x73 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x73)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x14 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x7 (= input.memlabel-mem--symbol.1_end ?x14)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x146 $x7)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x13 $x34)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x84 $x147)))
 (let (($x36 (not $x42)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x6 $x53)))
 (let (($x160 (and (not $x149) $x36)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x45 $x74)))
 (let (($x21 (not $x90)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x62 $x69)))
 (let (($x54 (and (not $x79) $x21)))
 (let (($x10 (and (and (and (and (and (and $x54 $x160) $x161) $x163) $x99) $x80) $x83)))
 (let (($x180 (and $x10 $x102)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x106 (and $x88 $x180)))
 (let (($x266 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x283 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x283)))
 (let (($x251 (or (bvugt input.memlabel-mem--symbol.1_begin ?x283) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x251) (or $x267 $x292)))))))
 (let (($x52 (and (and (and $x125 $x266) $x106) $x162)))
 (let (($x92 (= $x52 true)))
 (let (($x145 (= $x92 true)))
 (let (($x143 (= $x145 true)))
 (let (($x166 (and $x143 $x47)))
 (let (($x219 (and $x166 $x211)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x232 (and $x176 $x219)))
 (let (($x172 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x172 $x232)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x332 $x120)))
 (let (($x216 (=> $x213 $x184)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x87)))
 (let (($x209 (= ?x140 input.spec-%var-n-1)))
 (let (($x233 (= $x209 true)))
 (let (($x216 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1123X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x30 false)))
 ))
 (let (($x222 (and $x211 $x216)))
 (let (($x320 (= $x222 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x302 (concat ?x292 (concat ?x238 (concat ?x289 ?x17)))))
 (let (($x145 (= input.dst.llvm-%n ?x302)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x138)))
 (let ((?x144 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x144)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x180 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x106 (= input.memlabel-mem--symbol.1_end ?x180)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x181 (and $x94 $x106)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x10 $x181)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x108 (and $x99 $x33)))
 (let (($x100 (not $x108)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x14 $x7)))
 (let (($x113 (and (not $x34) $x100)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x8 $x163)))
 (let (($x13 (not $x131)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x86 $x161)))
 (let (($x134 (and (not $x109) $x13)))
 (let (($x162 (and (and (and (and (and (and $x134 $x113) $x73) $x83) $x210) $x35) $x137)))
 (let (($x52 (and $x162 $x133)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x92 (and $x160 $x52)))
 (let (($x266 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x45 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x45) (or $x54 $x6)))))))
 (let (($x49 (and (and (and $x42 $x266) $x92) $x145)))
 (let (($x47 (= $x49 true)))
 (let (($x166 (= $x47 true)))
 (let (($x223 (= $x166 true)))
 (let (($x64 (= ?x302 input.dst.llvm-%n)))
 (let (($x23 (= $x64 true)))
 (let (($x125 (= $x23 true)))
 (let (($x215 (and $x125 $x223)))
 (let (($x116 (and $x215 $x320)))
 (let (($x328 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x227 (and $x328 $x116)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x96 $x227)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x65 $x27)))
 (let (($x9 (=> $x5 $x233)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x87)))
 (let (($x209 (= ?x140 input.spec-%var-n-1)))
 (let (($x233 (= $x209 true)))
 (let (($x216 (forall ((input.ind-%var1123X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1123X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1123X) (_ bv0 32)))))
 ))
 (let (($x211 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1122X)))
 (= $x30 false)))
 ))
 (let (($x222 (and $x211 $x216)))
 (let (($x320 (= $x222 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x302 (concat ?x292 (concat ?x238 (concat ?x289 ?x17)))))
 (let (($x145 (= input.dst.llvm-%n ?x302)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x138)))
 (let ((?x144 (bvand symbol.1 (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x144)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x180 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x106 (= input.memlabel-mem--symbol.1_end ?x180)))
 (let (($x94 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x181 (and $x94 $x106)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x10 $x181)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x108 (and $x99 $x33)))
 (let (($x100 (not $x108)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x14 $x7)))
 (let (($x113 (and (not $x34) $x100)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x8 $x163)))
 (let (($x13 (not $x131)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x86 $x161)))
 (let (($x134 (and (not $x109) $x13)))
 (let (($x162 (and (and (and (and (and (and $x134 $x113) $x73) $x83) $x210) $x35) $x137)))
 (let (($x52 (and $x162 $x133)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x92 (and $x160 $x52)))
 (let (($x266 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x45 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x45) (or $x54 $x6)))))))
 (let (($x49 (and (and (and $x42 $x266) $x92) $x145)))
 (let (($x47 (= $x49 true)))
 (let (($x166 (= $x47 true)))
 (let (($x223 (= $x166 true)))
 (let (($x64 (= ?x302 input.dst.llvm-%n)))
 (let (($x23 (= $x64 true)))
 (let (($x125 (= $x23 true)))
 (let (($x215 (and $x125 $x223)))
 (let (($x116 (and $x215 $x320)))
 (let (($x328 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x227 (and $x328 $x116)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x96 $x227)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x5 (and $x65 $x27)))
 (let (($x9 (=> $x5 $x233)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x156 (= $x188 true)))
 (let (($x132 (= $x156 true)))
 (let (($x9 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let (($x231 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1129X)))
 (=> $x231 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1129X) (_ bv0 32)))))
 ))
 (let (($x320 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x231 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1128X)))
 (= $x231 false)))
 ))
 (let (($x123 (and $x320 $x9)))
 (let (($x330 (= $x123 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x138 (concat ?x144 (concat ?x119 ?x181)))))
 (let (($x223 (= ?x133 input.dst.llvm-%n)))
 (let (($x215 (= $x223 true)))
 (let (($x50 (= $x215 true)))
 (let (($x52 (= input.dst.llvm-%n ?x133)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x100)))
 (let ((?x33 (bvand symbol.1 (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x33)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x163 $x134)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x14)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x266 $x143)))
 (let (($x36 (not $x55)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x40 $x84)))
 (let (($x86 (and (not $x42) $x36)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x90 $x54)))
 (let (($x6 (not $x21)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x155 $x45)))
 (let (($x149 (and (not $x74) $x6)))
 (let (($x10 (and (and (and (and (and (and $x149 $x86) $x161) $x146) $x7) $x99) $x108)))
 (let (($x94 (and $x10 $x113)))
 (let (($x62 (= symbol.1 dst_symbol_addr.1)))
 (let (($x102 (and $x62 $x94)))
 (let (($x267 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x17 (or (bvugt input.memlabel-mem--symbol.1_begin ?x238) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x17) (or $x244 $x64)))))))
 (let (($x145 (and (and (and $x88 $x267) $x102) $x52)))
 (let (($x49 (= $x145 true)))
 (let (($x47 (= $x49 true)))
 (let (($x166 (= $x47 true)))
 (let (($x30 (and $x166 $x50)))
 (let (($x236 (and $x30 $x330)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x282 (and $x103 $x236)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x187 $x282)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x332 $x85)))
 (let (($x263 (=> $x120 $x132)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x156 (= $x188 true)))
 (let (($x132 (= $x156 true)))
 (let (($x9 (forall ((input.ind-%var1129X (_ BitVec 32)) )(let (($x231 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1129X)))
 (=> $x231 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1129X) (_ bv0 32)))))
 ))
 (let (($x320 (forall ((input.ind-%var1128X (_ BitVec 32)) )(let (($x231 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1128X)))
 (= $x231 false)))
 ))
 (let (($x123 (and $x320 $x9)))
 (let (($x330 (= $x123 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x138 (concat ?x144 (concat ?x119 ?x181)))))
 (let (($x223 (= ?x133 input.dst.llvm-%n)))
 (let (($x215 (= $x223 true)))
 (let (($x50 (= $x215 true)))
 (let (($x52 (= input.dst.llvm-%n ?x133)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x100)))
 (let ((?x33 (bvand symbol.1 (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x33)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x163 $x134)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x8 $x14)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x266 $x143)))
 (let (($x36 (not $x55)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x40 $x84)))
 (let (($x86 (and (not $x42) $x36)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x90 $x54)))
 (let (($x6 (not $x21)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x155 $x45)))
 (let (($x149 (and (not $x74) $x6)))
 (let (($x10 (and (and (and (and (and (and $x149 $x86) $x161) $x146) $x7) $x99) $x108)))
 (let (($x94 (and $x10 $x113)))
 (let (($x62 (= symbol.1 dst_symbol_addr.1)))
 (let (($x102 (and $x62 $x94)))
 (let (($x267 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x17 (or (bvugt input.memlabel-mem--symbol.1_begin ?x238) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x17) (or $x244 $x64)))))))
 (let (($x145 (and (and (and $x88 $x267) $x102) $x52)))
 (let (($x49 (= $x145 true)))
 (let (($x47 (= $x49 true)))
 (let (($x166 (= $x47 true)))
 (let (($x30 (and $x166 $x50)))
 (let (($x236 (and $x30 $x330)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x282 (and $x103 $x236)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x187 $x282)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x332 $x85)))
 (let (($x263 (=> $x120 $x132)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x285 (concat ?x154 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32)))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x329 (concat ?x254 ?x285)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1140X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1140X) (bvult input.ind-%var1140X (_ bv0 32)))))
 ))
 (let (($x258 (and $x235 $x185)))
 (let (($x216 (= true true)))
 (let (($x325 (and $x216 $x258)))
 (let (($x60 (= $x325 true)))
 (let (($x176 (forall ((input.ind-%var1135X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1135X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1135X) (_ bv0 32)))))
 ))
 (let (($x330 (forall ((input.ind-%var1134X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1134X)))
 (= $x209 false)))
 ))
 (let (($x106 (and $x330 $x176)))
 (let (($x184 (= $x106 true)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x64 (concat ?x61 (concat ?x283 ?x270)))))
 (let (($x47 (= input.dst.llvm-%n ?x23)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x144)))
 (let ((?x35 (bvand symbol.1 (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x35)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x94 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x102 (= input.memlabel-mem--symbol.1_end ?x94)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x18 (and $x100 $x102)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x10 $x18)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x7 $x83)))
 (let (($x80 (not $x34)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x13 $x134)))
 (let (($x157 (and (not $x14) $x80)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x109 $x146)))
 (let (($x8 (not $x78)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x175 $x161)))
 (let (($x131 (and (not $x73) $x8)))
 (let (($x52 (and (and (and (and (and (and $x131 $x157) $x33) $x108) $x180) $x138) $x19)))
 (let (($x145 (and $x52 $x210)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x49 (and $x86 $x145)))
 (let (($x267 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x90 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x90) (or $x149 $x40)))))))
 (let (($x215 (and (and (and $x55 $x267) $x49) $x47)))
 (let (($x50 (= $x215 true)))
 (let (($x30 (= $x50 true)))
 (let (($x213 (= $x30 true)))
 (let (($x76 (= ?x23 input.dst.llvm-%n)))
 (let (($x82 (= $x76 true)))
 (let (($x88 (= $x82 true)))
 (let (($x231 (and $x88 $x213)))
 (let (($x48 (and $x231 $x184)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and $x172 $x48)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x22 (and $x190 $x27)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x211 (and $x65 $x22)))
 (let (($x286 (=> $x211 $x60)))
 (not $x286))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x185 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x285 (concat ?x154 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32)))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x329 (concat ?x254 ?x285)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1140X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1140X) (bvult input.ind-%var1140X (_ bv0 32)))))
 ))
 (let (($x258 (and $x235 $x185)))
 (let (($x216 (= true true)))
 (let (($x325 (and $x216 $x258)))
 (let (($x60 (= $x325 true)))
 (let (($x176 (forall ((input.ind-%var1135X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1135X)))
 (=> $x209 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1135X) (_ bv0 32)))))
 ))
 (let (($x330 (forall ((input.ind-%var1134X (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1134X)))
 (= $x209 false)))
 ))
 (let (($x106 (and $x330 $x176)))
 (let (($x184 (= $x106 true)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x64 (concat ?x61 (concat ?x283 ?x270)))))
 (let (($x47 (= input.dst.llvm-%n ?x23)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x144)))
 (let ((?x35 (bvand symbol.1 (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x35)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x94 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x102 (= input.memlabel-mem--symbol.1_end ?x94)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x18 (and $x100 $x102)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x10 $x18)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x7 $x83)))
 (let (($x80 (not $x34)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x13 $x134)))
 (let (($x157 (and (not $x14) $x80)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x109 $x146)))
 (let (($x8 (not $x78)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x175 $x161)))
 (let (($x131 (and (not $x73) $x8)))
 (let (($x52 (and (and (and (and (and (and $x131 $x157) $x33) $x108) $x180) $x138) $x19)))
 (let (($x145 (and $x52 $x210)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x49 (and $x86 $x145)))
 (let (($x267 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x90 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x90) (or $x149 $x40)))))))
 (let (($x215 (and (and (and $x55 $x267) $x49) $x47)))
 (let (($x50 (= $x215 true)))
 (let (($x30 (= $x50 true)))
 (let (($x213 (= $x30 true)))
 (let (($x76 (= ?x23 input.dst.llvm-%n)))
 (let (($x82 (= $x76 true)))
 (let (($x88 (= $x82 true)))
 (let (($x231 (and $x88 $x213)))
 (let (($x48 (and $x231 $x184)))
 (let (($x172 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and $x172 $x48)))
 (let (($x190 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x22 (and $x190 $x27)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x211 (and $x65 $x22)))
 (let (($x286 (=> $x211 $x60)))
 (not $x286))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (bvsge ?x250 (_ bv0 32))))
 (let (($x15 (= $x173 true)))
 (let (($x39 (= $x15 true)))
 (let (($x130 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1153X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (= $x276 false)))
 ))
 (let (($x26 (and $x272 $x130)))
 (let (($x324 (= $x26 true)))
 (let (($x304 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let ((?x281 (bvadd symbol.1 (bvmul input.ind-%var1147X (_ bv4 32)))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x281))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv2 32))) ?x274)))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv3 32))) ?x322)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1147X)))
 (let (($x277 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1147X)))
 (=> $x277 (= ?x226 ?x77)))))))))
 ))
 (let (($x31 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) input.ind-%var1146X) (bvult input.ind-%var1146X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x277 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1146X)))
 (= $x277 $x290))))
 ))
 (let (($x127 (and $x31 $x304)))
 (let (($x124 (= $x127 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x174)))
 (let (($x89 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x89 true)))
 (let (($x265 (= $x202 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (= $x25 true)))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x9 (= $x56 true)))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x87 (bvsub ?x187 ?x190)))
 (let (($x222 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x87) (bvult ?x187 ?x87))))
 (let ((?x233 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x188 (bvmul (_ bv4 64) ?x233)))
 (let ((?x236 ((_ extract 63 32) ?x188)))
 (let (($x85 (= (_ bv0 32) ?x236)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x165 (and (and (and true $x167) $x85) $x222)))
 (let (($x325 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x207 (and $x325 $x165)))
 (let (($x323 (= true $x207)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (=> $x65 $x323)))
 (let (($x95 (= $x206 true)))
 (let (($x57 (= $x95 true)))
 (let (($x297 (= $x57 true)))
 (let (($x285 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x285 true)))
 (let (($x331 (= $x246 true)))
 (let (($x204 (= $x331 true)))
 (let (($x254 (= $x65 true)))
 (let (($x293 (= $x254 true)))
 (let (($x154 (= $x293 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x27)))
 (let ((?x184 (bvand symbol.1 (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x184)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x330 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x120 (= input.memlabel-mem--symbol.1_end ?x330)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x263 (and $x123 $x120)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x209 $x263)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x49 $x223)))
 (let (($x215 (not $x47)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x144 $x210)))
 (let (($x30 (and (not $x145) $x215)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x162 $x138)))
 (let (($x35 (not $x133)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x18 $x180)))
 (let (($x52 (and (not $x137) $x35)))
 (let (($x129 (and (and (and (and (and (and $x52 $x30) $x213) $x5) $x232) $x106) $x48)))
 (let (($x235 (and $x129 $x22)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x93 (and $x134 $x235)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x80 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x80) (or $x181 $x108)))))))
 (let (($x158 (and $x102 $x93)))
 (let (($x115 (= $x158 true)))
 (let (($x107 (= $x115 true)))
 (let (($x329 (= $x107 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x163 true)))
 (let (($x146 (= $x109 true)))
 (let (($x78 (= $x146 true)))
 (let (($x36 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x86 (= $x36 true)))
 (let (($x175 (= $x86 true)))
 (let (($x161 (= $x175 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x55 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x267 (= $x55 true)))
 (let (($x166 (= $x267 true)))
 (let (($x84 (= ?x40 input.dst.llvm-%n)))
 (let (($x42 (= $x84 true)))
 (let (($x160 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x266 (and $x21 $x160)))
 (let (($x92 (and $x266 $x166)))
 (let (($x73 (and $x92 $x161)))
 (let (($x8 (and $x73 $x78)))
 (let (($x287 (and $x8 $x329)))
 (let (($x239 (and $x287 $x154)))
 (let (($x139 (and $x239 $x204)))
 (let (($x303 (and $x139 $x297)))
 (let (($x219 (and $x303 $x140)))
 (let (($x296 (and $x219 $x301)))
 (let (($x66 (and $x296 $x11)))
 (let (($x252 (and $x66 $x265)))
 (let (($x58 (and $x252 $x124)))
 (let (($x126 (and $x58 $x324)))
 (let (($x74 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and (not $x74) $x126)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x62 $x178)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x327 (and $x69 $x29)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x76 $x327)))
 (let (($x270 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x270)))))
 (let (($x172 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x270)))))
 (let (($x205 (and $x172 $x38)))
 (let (($x264 (=> $x205 $x39)))
 (not $x264))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x173 (bvsge ?x250 (_ bv0 32))))
 (let (($x15 (= $x173 true)))
 (let (($x39 (= $x15 true)))
 (let (($x130 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1153X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (= $x276 false)))
 ))
 (let (($x26 (and $x272 $x130)))
 (let (($x324 (= $x26 true)))
 (let (($x304 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let ((?x281 (bvadd symbol.1 (bvmul input.ind-%var1147X (_ bv4 32)))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x281))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv2 32))) ?x274)))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x281 (_ bv3 32))) ?x322)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1147X)))
 (let (($x277 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1147X)))
 (=> $x277 (= ?x226 ?x77)))))))))
 ))
 (let (($x31 (forall ((input.ind-%var1146X (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) input.ind-%var1146X) (bvult input.ind-%var1146X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x277 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1146X)))
 (= $x277 $x290))))
 ))
 (let (($x127 (and $x31 $x304)))
 (let (($x124 (= $x127 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x174)))
 (let (($x89 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x89 true)))
 (let (($x265 (= $x202 true)))
 (let (($x116 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x282 (= $x25 true)))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x9 (= $x56 true)))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x87 (bvsub ?x187 ?x190)))
 (let (($x222 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x87) (bvult ?x187 ?x87))))
 (let ((?x233 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x188 (bvmul (_ bv4 64) ?x233)))
 (let ((?x236 ((_ extract 63 32) ?x188)))
 (let (($x85 (= (_ bv0 32) ?x236)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x165 (and (and (and true $x167) $x85) $x222)))
 (let (($x325 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x207 (and $x325 $x165)))
 (let (($x323 (= true $x207)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (=> $x65 $x323)))
 (let (($x95 (= $x206 true)))
 (let (($x57 (= $x95 true)))
 (let (($x297 (= $x57 true)))
 (let (($x285 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x285 true)))
 (let (($x331 (= $x246 true)))
 (let (($x204 (= $x331 true)))
 (let (($x254 (= $x65 true)))
 (let (($x293 (= $x254 true)))
 (let (($x154 (= $x293 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x27)))
 (let ((?x184 (bvand symbol.1 (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x184)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x330 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x120 (= input.memlabel-mem--symbol.1_end ?x330)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x263 (and $x123 $x120)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x209 $x263)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x49 $x223)))
 (let (($x215 (not $x47)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x144 $x210)))
 (let (($x30 (and (not $x145) $x215)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x162 $x138)))
 (let (($x35 (not $x133)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x18 $x180)))
 (let (($x52 (and (not $x137) $x35)))
 (let (($x129 (and (and (and (and (and (and $x52 $x30) $x213) $x5) $x232) $x106) $x48)))
 (let (($x235 (and $x129 $x22)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x93 (and $x134 $x235)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x80 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x80) (or $x181 $x108)))))))
 (let (($x158 (and $x102 $x93)))
 (let (($x115 (= $x158 true)))
 (let (($x107 (= $x115 true)))
 (let (($x329 (= $x107 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x109 (= $x163 true)))
 (let (($x146 (= $x109 true)))
 (let (($x78 (= $x146 true)))
 (let (($x36 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x86 (= $x36 true)))
 (let (($x175 (= $x86 true)))
 (let (($x161 (= $x175 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x55 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x267 (= $x55 true)))
 (let (($x166 (= $x267 true)))
 (let (($x84 (= ?x40 input.dst.llvm-%n)))
 (let (($x42 (= $x84 true)))
 (let (($x160 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x266 (and $x21 $x160)))
 (let (($x92 (and $x266 $x166)))
 (let (($x73 (and $x92 $x161)))
 (let (($x8 (and $x73 $x78)))
 (let (($x287 (and $x8 $x329)))
 (let (($x239 (and $x287 $x154)))
 (let (($x139 (and $x239 $x204)))
 (let (($x303 (and $x139 $x297)))
 (let (($x219 (and $x303 $x140)))
 (let (($x296 (and $x219 $x301)))
 (let (($x66 (and $x296 $x11)))
 (let (($x252 (and $x66 $x265)))
 (let (($x58 (and $x252 $x124)))
 (let (($x126 (and $x58 $x324)))
 (let (($x74 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x178 (and (not $x74) $x126)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x62 $x178)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x327 (and $x69 $x29)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x76 $x327)))
 (let (($x270 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x125 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x270)))))
 (let (($x172 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x270)))))
 (let (($x205 (and $x172 $x38)))
 (let (($x264 (=> $x205 $x39)))
 (not $x264))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x298 (bvmul (_ bv4294967295 32) ?x168)))
 (let ((?x136 (bvneg ?x298)))
 (let (($x224 (= ?x136 ?x199)))
 (let (($x212 (= $x224 true)))
 (let (($x225 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1165X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x271 false)))
 ))
 (let (($x63 (and $x291 $x225)))
 (let (($x317 (= $x63 true)))
 (let (($x131 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let ((?x178 (bvadd symbol.1 (bvmul input.ind-%var1159X (_ bv4 32)))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x178))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv2 32))) ?x205)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv3 32))) ?x15)))
 (let ((?x316 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1159X)))
 (let (($x290 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x290 (= ?x316 ?x241)))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1158X) (bvult input.ind-%var1158X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x290 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x290 $x153))))
 ))
 (let (($x141 (and $x118 $x131)))
 (let (($x12 (= $x141 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x43)))
 (let (($x202 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x202 true)))
 (let (($x252 (= $x265 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x66 (= $x11 true)))
 (let (($x282 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let (($x296 (= $x301 true)))
 (let (($x9 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let (($x219 (= $x140 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x95 true)))
 (let (($x297 (= $x57 true)))
 (let (($x303 (= $x297 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x165 (= $x222 true)))
 (let (($x207 (= $x165 true)))
 (let (($x323 (= $x207 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x60 (bvsub ?x187 ?x190)))
 (let (($x320 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x60) (bvult ?x187 ?x60))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x258 (bvmul (_ bv4 64) ?x185)))
 (let ((?x325 ((_ extract 63 32) ?x258)))
 (let (($x286 (= (_ bv0 32) ?x325)))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x188 (and (and (and true $x204) $x286) $x320)))
 (let (($x154 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x236 (and $x154 $x188)))
 (let (($x85 (= true $x236)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x65 $x85)))
 (let (($x227 (= $x194 true)))
 (let (($x87 (= $x227 true)))
 (let (($x242 (= $x87 true)))
 (let (($x158 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x158 true)))
 (let (($x107 (= $x115 true)))
 (let (($x329 (= $x107 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x27 (= $x129 true)))
 (let (($x22 (= $x27 true)))
 (let (($x235 (= $x22 true)))
 (let (($x106 (= $x65 true)))
 (let (($x142 (= $x106 true)))
 (let (($x184 (= $x142 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x30)))
 (let ((?x47 (bvand symbol.1 (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x47)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x144 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x210 (= input.memlabel-mem--symbol.1_end ?x144)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x35 $x210)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x133 $x145)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x102 $x13)))
 (let (($x18 (not $x134)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x10 $x100)))
 (let (($x137 (and (not $x113) $x18)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x157 $x119)))
 (let (($x33 (not $x181)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x83 $x34)))
 (let (($x179 (and (not $x80) $x33)))
 (let (($x209 (and (and (and (and (and (and $x179 $x137) $x19) $x138) $x50) $x223) $x215)))
 (let (($x123 (and $x209 $x211)))
 (let (($x55 (= symbol.1 dst_symbol_addr.1)))
 (let (($x330 (and $x55 $x123)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x92) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x109 $x146)))))))
 (let (($x120 (and $x7 $x330)))
 (let (($x263 (= $x120 true)))
 (let (($x232 (= $x263 true)))
 (let (($x112 (= $x232 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x53)))
 (let (($x6 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x6 true)))
 (let (($x84 (= $x40 true)))
 (let (($x54 (= ?x90 input.dst.llvm-%n)))
 (let (($x21 (= $x54 true)))
 (let (($x149 (= $x21 true)))
 (let (($x42 (and $x149 $x84)))
 (let (($x176 (and $x42 $x112)))
 (let (($x48 (and $x176 $x184)))
 (let (($x93 (and $x48 $x235)))
 (let (($x287 (and $x93 $x329)))
 (let (($x228 (and $x287 $x242)))
 (let (($x206 (and $x228 $x323)))
 (let (($x56 (and $x206 $x303)))
 (let (($x25 (and $x56 $x219)))
 (let (($x116 (and $x25 $x296)))
 (let (($x174 (and $x116 $x66)))
 (let (($x114 (and $x174 $x252)))
 (let (($x284 (and $x114 $x12)))
 (let (($x128 (and $x284 $x317)))
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and (not $x294) $x128)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (and $x45 $x111)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x79 $x196)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x82 $x169)))
 (let (($x20 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x20)))))
 (let (($x244 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x20)))))
 (let (($x248 (and $x244 $x110)))
 (let (($x315 (=> $x248 $x212)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x199 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x298 (bvmul (_ bv4294967295 32) ?x168)))
 (let ((?x136 (bvneg ?x298)))
 (let (($x224 (= ?x136 ?x199)))
 (let (($x212 (= $x224 true)))
 (let (($x225 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1165X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x271 false)))
 ))
 (let (($x63 (and $x291 $x225)))
 (let (($x317 (= $x63 true)))
 (let (($x131 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let ((?x178 (bvadd symbol.1 (bvmul input.ind-%var1159X (_ bv4 32)))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x178))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv2 32))) ?x205)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv3 32))) ?x15)))
 (let ((?x316 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1159X)))
 (let (($x290 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x290 (= ?x316 ?x241)))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var1158X) (bvult input.ind-%var1158X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x290 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x290 $x153))))
 ))
 (let (($x141 (and $x118 $x131)))
 (let (($x12 (= $x141 true)))
 (let ((?x43 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x43)))
 (let (($x202 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x202 true)))
 (let (($x252 (= $x265 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x66 (= $x11 true)))
 (let (($x282 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let (($x296 (= $x301 true)))
 (let (($x9 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let (($x219 (= $x140 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x95 true)))
 (let (($x297 (= $x57 true)))
 (let (($x303 (= $x297 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x165 (= $x222 true)))
 (let (($x207 (= $x165 true)))
 (let (($x323 (= $x207 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x60 (bvsub ?x187 ?x190)))
 (let (($x320 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x60) (bvult ?x187 ?x60))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x258 (bvmul (_ bv4 64) ?x185)))
 (let ((?x325 ((_ extract 63 32) ?x258)))
 (let (($x286 (= (_ bv0 32) ?x325)))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x188 (and (and (and true $x204) $x286) $x320)))
 (let (($x154 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x236 (and $x154 $x188)))
 (let (($x85 (= true $x236)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x65 $x85)))
 (let (($x227 (= $x194 true)))
 (let (($x87 (= $x227 true)))
 (let (($x242 (= $x87 true)))
 (let (($x158 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x158 true)))
 (let (($x107 (= $x115 true)))
 (let (($x329 (= $x107 true)))
 (let (($x129 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x27 (= $x129 true)))
 (let (($x22 (= $x27 true)))
 (let (($x235 (= $x22 true)))
 (let (($x106 (= $x65 true)))
 (let (($x142 (= $x106 true)))
 (let (($x184 (= $x142 true)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x30)))
 (let ((?x47 (bvand symbol.1 (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x47)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x144 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x210 (= input.memlabel-mem--symbol.1_end ?x144)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x35 $x210)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x133 $x145)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x102 $x13)))
 (let (($x18 (not $x134)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x10 $x100)))
 (let (($x137 (and (not $x113) $x18)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x157 $x119)))
 (let (($x33 (not $x181)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x83 $x34)))
 (let (($x179 (and (not $x80) $x33)))
 (let (($x209 (and (and (and (and (and (and $x179 $x137) $x19) $x138) $x50) $x223) $x215)))
 (let (($x123 (and $x209 $x211)))
 (let (($x55 (= symbol.1 dst_symbol_addr.1)))
 (let (($x330 (and $x55 $x123)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x92) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x109 $x146)))))))
 (let (($x120 (and $x7 $x330)))
 (let (($x263 (= $x120 true)))
 (let (($x232 (= $x263 true)))
 (let (($x112 (= $x232 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x53)))
 (let (($x6 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x6 true)))
 (let (($x84 (= $x40 true)))
 (let (($x54 (= ?x90 input.dst.llvm-%n)))
 (let (($x21 (= $x54 true)))
 (let (($x149 (= $x21 true)))
 (let (($x42 (and $x149 $x84)))
 (let (($x176 (and $x42 $x112)))
 (let (($x48 (and $x176 $x184)))
 (let (($x93 (and $x48 $x235)))
 (let (($x287 (and $x93 $x329)))
 (let (($x228 (and $x287 $x242)))
 (let (($x206 (and $x228 $x323)))
 (let (($x56 (and $x206 $x303)))
 (let (($x25 (and $x56 $x219)))
 (let (($x116 (and $x25 $x296)))
 (let (($x174 (and $x116 $x66)))
 (let (($x114 (and $x174 $x252)))
 (let (($x284 (and $x114 $x12)))
 (let (($x128 (and $x284 $x317)))
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and (not $x294) $x128)))
 (let (($x45 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x196 (and $x45 $x111)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x79 $x196)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x82 $x169)))
 (let (($x20 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x20)))))
 (let (($x244 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x20)))))
 (let (($x248 (and $x244 $x110)))
 (let (($x315 (=> $x248 $x212)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x203 (bvule ?x183 (_ bv399 32))))
 (let (($x240 (= $x203 true)))
 (let (($x324 (= $x240 true)))
 (let (($x304 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x98 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x31 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x98 false)))
 ))
 (let (($x58 (and $x31 $x304)))
 (let (($x72 (= $x58 true)))
 (let (($x197 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let ((?x111 (bvadd symbol.1 (bvmul input.ind-%var1171X (_ bv4 32)))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x111))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv2 32))) ?x248)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv3 32))) ?x136)))
 (let ((?x29 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1171X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x153 (= ?x29 ?x212)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var1170X) (bvult input.ind-%var1170X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x153 $x264))))
 ))
 (let (($x147 (and $x250 $x197)))
 (let (($x160 (= $x147 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x89)))
 (let (($x265 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x265 true)))
 (let (($x114 (= $x252 true)))
 (let (($x104 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x11 (= $x104 true)))
 (let (($x66 (= $x11 true)))
 (let (($x174 (= $x66 true)))
 (let (($x132 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x132 true)))
 (let (($x296 (= $x301 true)))
 (let (($x116 (= $x296 true)))
 (let (($x156 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x140 (= $x156 true)))
 (let (($x219 (= $x140 true)))
 (let (($x25 (= $x219 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x227)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x85)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x193 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x177 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (and $x177 $x193)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (and $x233 $x167)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x246 $x331)))
 (let (($x292 (not $x204)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x154 $x285)))
 (let (($x185 (and (not $x239) $x292)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x115 $x107)))
 (let (($x287 (not $x329)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x235 $x93)))
 (let (($x293 (and (not $x158) $x287)))
 (let (($x323 (and (and (and (and (and (and $x293 $x185) $x258) $x286) $x320) $x236) $x194)))
 (let (($x206 (and $x323 $x87)))
 (let (($x215 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x215 $x206)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x120 (or (bvugt input.memlabel-mem--symbol.1_begin ?x211) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x120) (or $x176 $x106)))))))
 (let (($x57 (and $x22 $x95)))
 (let (($x297 (= $x57 true)))
 (let (($x303 (= $x297 true)))
 (let (($x56 (= $x303 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x145 true)))
 (let (($x5 (= $x50 true)))
 (let (($x49 (= $x5 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x133 true)))
 (let (($x52 (= $x35 true)))
 (let (($x144 (= $x52 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x216 (= $x19 true)))
 (let (($x162 (= $x216 true)))
 (let (($x138 (= $x162 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x10)))
 (let (($x134 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x134 true)))
 (let (($x137 (= $x18 true)))
 (let (($x113 (= ?x100 input.dst.llvm-%n)))
 (let (($x180 (= $x113 true)))
 (let (($x102 (= $x180 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x78 (bvsub ?x187 ?x190)))
 (let (($x7 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x78) (bvult ?x187 ?x78))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x73)))
 (let ((?x163 ((_ extract 63 32) ?x109)))
 (let (($x146 (= (_ bv0 32) ?x163)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x83 (and (and (and true $x175) $x146) $x7)))
 (let (($x166 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x34 (and $x166 $x83)))
 (let (($x80 (= true $x34)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x65 $x80)))
 (let (($x157 (= $x108 true)))
 (let (($x119 (= $x157 true)))
 (let (($x181 (= $x119 true)))
 (let (($x21 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x21 true)))
 (let (($x6 (= $x149 true)))
 (let (($x40 (= $x6 true)))
 (let (($x155 (= $x65 true)))
 (let (($x53 (= $x155 true)))
 (let (($x90 (= $x53 true)))
 (let (($x84 (and $x90 $x40)))
 (let (($x33 (and $x84 $x181)))
 (let (($x13 (and $x33 $x102)))
 (let (($x213 (and $x13 $x137)))
 (let (($x231 (and $x213 $x138)))
 (let (($x210 (and $x231 $x144)))
 (let (($x223 (and $x210 $x49)))
 (let (($x9 (and $x223 $x56)))
 (let (($x282 (and $x9 $x25)))
 (let (($x135 (and $x282 $x116)))
 (let (($x43 (and $x135 $x174)))
 (let (($x37 (and $x43 $x114)))
 (let (($x230 (and $x37 $x160)))
 (let (($x130 (and $x230 $x72)))
 (let (($x318 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and (not $x318) $x130)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x74 $x151)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x143 $x152)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x26 (and $x88 $x121)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x64 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x221 (and $x64 $x26)))
 (let (($x280 (=> $x221 $x324)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x203 (bvule ?x183 (_ bv399 32))))
 (let (($x240 (= $x203 true)))
 (let (($x324 (= $x240 true)))
 (let (($x304 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x98 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x31 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x98 false)))
 ))
 (let (($x58 (and $x31 $x304)))
 (let (($x72 (= $x58 true)))
 (let (($x197 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let ((?x111 (bvadd symbol.1 (bvmul input.ind-%var1171X (_ bv4 32)))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x111))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv2 32))) ?x248)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv3 32))) ?x136)))
 (let ((?x29 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1171X)))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x153 (= ?x29 ?x212)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var1170X) (bvult input.ind-%var1170X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x153 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x153 $x264))))
 ))
 (let (($x147 (and $x250 $x197)))
 (let (($x160 (= $x147 true)))
 (let ((?x89 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x89)))
 (let (($x265 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x265 true)))
 (let (($x114 (= $x252 true)))
 (let (($x104 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x11 (= $x104 true)))
 (let (($x66 (= $x11 true)))
 (let (($x174 (= $x66 true)))
 (let (($x132 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x132 true)))
 (let (($x296 (= $x301 true)))
 (let (($x116 (= $x296 true)))
 (let (($x156 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x140 (= $x156 true)))
 (let (($x219 (= $x140 true)))
 (let (($x25 (= $x219 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x227)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x85)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x193 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x177 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (and $x177 $x193)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (and $x233 $x167)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x246 $x331)))
 (let (($x292 (not $x204)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x154 $x285)))
 (let (($x185 (and (not $x239) $x292)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x115 $x107)))
 (let (($x287 (not $x329)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x235 $x93)))
 (let (($x293 (and (not $x158) $x287)))
 (let (($x323 (and (and (and (and (and (and $x293 $x185) $x258) $x286) $x320) $x236) $x194)))
 (let (($x206 (and $x323 $x87)))
 (let (($x215 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x215 $x206)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x120 (or (bvugt input.memlabel-mem--symbol.1_begin ?x211) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x120) (or $x176 $x106)))))))
 (let (($x57 (and $x22 $x95)))
 (let (($x297 (= $x57 true)))
 (let (($x303 (= $x297 true)))
 (let (($x56 (= $x303 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x145 true)))
 (let (($x5 (= $x50 true)))
 (let (($x49 (= $x5 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x133 true)))
 (let (($x52 (= $x35 true)))
 (let (($x144 (= $x52 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x216 (= $x19 true)))
 (let (($x162 (= $x216 true)))
 (let (($x138 (= $x162 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x10)))
 (let (($x134 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x134 true)))
 (let (($x137 (= $x18 true)))
 (let (($x113 (= ?x100 input.dst.llvm-%n)))
 (let (($x180 (= $x113 true)))
 (let (($x102 (= $x180 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x78 (bvsub ?x187 ?x190)))
 (let (($x7 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x78) (bvult ?x187 ?x78))))
 (let ((?x73 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x73)))
 (let ((?x163 ((_ extract 63 32) ?x109)))
 (let (($x146 (= (_ bv0 32) ?x163)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x83 (and (and (and true $x175) $x146) $x7)))
 (let (($x166 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x34 (and $x166 $x83)))
 (let (($x80 (= true $x34)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x65 $x80)))
 (let (($x157 (= $x108 true)))
 (let (($x119 (= $x157 true)))
 (let (($x181 (= $x119 true)))
 (let (($x21 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x21 true)))
 (let (($x6 (= $x149 true)))
 (let (($x40 (= $x6 true)))
 (let (($x155 (= $x65 true)))
 (let (($x53 (= $x155 true)))
 (let (($x90 (= $x53 true)))
 (let (($x84 (and $x90 $x40)))
 (let (($x33 (and $x84 $x181)))
 (let (($x13 (and $x33 $x102)))
 (let (($x213 (and $x13 $x137)))
 (let (($x231 (and $x213 $x138)))
 (let (($x210 (and $x231 $x144)))
 (let (($x223 (and $x210 $x49)))
 (let (($x9 (and $x223 $x56)))
 (let (($x282 (and $x9 $x25)))
 (let (($x135 (and $x282 $x116)))
 (let (($x43 (and $x135 $x174)))
 (let (($x37 (and $x43 $x114)))
 (let (($x230 (and $x37 $x160)))
 (let (($x130 (and $x230 $x72)))
 (let (($x318 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and (not $x318) $x130)))
 (let (($x74 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x152 (and $x74 $x151)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x143 $x152)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x26 (and $x88 $x121)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x64 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x221 (and $x64 $x26)))
 (let (($x280 (=> $x221 $x324)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x327 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x317 (bvsle ?x327 (_ bv399 32))))
 (let (($x260 (= $x317 true)))
 (let (($x28 (= $x260 true)))
 (let (($x101 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x38 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x38 false)))
 ))
 (let (($x225 (and $x71 $x101)))
 (let (($x278 (= $x225 true)))
 (let (($x189 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x151 (bvadd symbol.1 (bvmul input.ind-%var1183X (_ bv4 32)))))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x221)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x240)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1183X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x264 (= ?x196 ?x170)))))))))
 ))
 (let (($x168 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x264 $x224))))
 ))
 (let (($x159 (and $x168 $x189)))
 (let (($x205 (= $x159 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x202)))
 (let (($x252 (= ?x265 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x252 true)))
 (let (($x37 (= $x114 true)))
 (let (($x11 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x11 true)))
 (let (($x174 (= $x66 true)))
 (let (($x43 (= $x174 true)))
 (let (($x301 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x296 (= $x301 true)))
 (let (($x116 (= $x296 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x219 (= $x140 true)))
 (let (($x25 (= $x219 true)))
 (let (($x282 (= $x25 true)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x236)))
 (let ((?x165 (bvand symbol.1 (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x165)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x177 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x222 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x222 $x177)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x286 $x60)))
 (let (($x325 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x246 $x331)))
 (let (($x292 (not $x204)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x285 $x239)))
 (let (($x242 (and (not $x139) $x292)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x115 $x107)))
 (let (($x287 (not $x329)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x93 $x158)))
 (let (($x154 (and (not $x254) $x287)))
 (let (($x206 (and (and (and (and (and (and $x154 $x242) $x258) $x325) $x193) $x320) $x188)))
 (let (($x95 (and $x206 $x207)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x57 (and $x27 $x95)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x330 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x330)))
 (let (($x232 (or (bvugt input.memlabel-mem--symbol.1_begin ?x330) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x232) (or $x142 $x184)))))))
 (let (($x297 (and $x235 $x57)))
 (let (($x303 (= $x297 true)))
 (let (($x56 (= $x303 true)))
 (let (($x9 (= $x56 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x145 true)))
 (let (($x5 (= $x50 true)))
 (let (($x49 (= $x5 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x133 true)))
 (let (($x52 (= $x35 true)))
 (let (($x144 (= $x52 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x216 (= $x19 true)))
 (let (($x162 (= $x216 true)))
 (let (($x138 (= $x162 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x10)))
 (let (($x134 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x134 true)))
 (let (($x137 (= $x18 true)))
 (let (($x113 (= ?x100 input.dst.llvm-%n)))
 (let (($x180 (= $x113 true)))
 (let (($x102 (= $x180 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x146 (bvsub ?x187 ?x190)))
 (let (($x14 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x146) (bvult ?x187 ?x146))))
 (let ((?x161 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x161)))
 (let ((?x109 ((_ extract 63 32) ?x73)))
 (let (($x163 (= (_ bv0 32) ?x109)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x83 (and (and (and true $x175) $x163) $x14)))
 (let (($x166 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x34 (and $x166 $x83)))
 (let (($x80 (= true $x34)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x65 $x80)))
 (let (($x157 (= $x108 true)))
 (let (($x119 (= $x157 true)))
 (let (($x181 (= $x119 true)))
 (let (($x21 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x21 true)))
 (let (($x6 (= $x149 true)))
 (let (($x40 (= $x6 true)))
 (let (($x155 (= $x65 true)))
 (let (($x53 (= $x155 true)))
 (let (($x90 (= $x53 true)))
 (let (($x84 (and $x90 $x40)))
 (let (($x33 (and $x84 $x181)))
 (let (($x13 (and $x33 $x102)))
 (let (($x213 (and $x13 $x137)))
 (let (($x231 (and $x213 $x138)))
 (let (($x210 (and $x231 $x144)))
 (let (($x223 (and $x210 $x49)))
 (let (($x156 (and $x223 $x9)))
 (let (($x132 (and $x156 $x282)))
 (let (($x104 (and $x132 $x135)))
 (let (($x89 (and $x104 $x43)))
 (let (($x281 (and $x89 $x37)))
 (let (($x208 (and $x281 $x205)))
 (let (($x255 (and $x208 $x278)))
 (let (($x247 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x247) $x255)))
 (let (($x294 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and $x294 $x126)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x62 $x63)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x69 $x274)))
 (let (($x244 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x244)))))
 (let (($x61 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x244)))))
 (let (($x44 (and $x61 $x249)))
 (let (($x272 (=> $x44 $x28)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x327 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x317 (bvsle ?x327 (_ bv399 32))))
 (let (($x260 (= $x317 true)))
 (let (($x28 (= $x260 true)))
 (let (($x101 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x38 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x38 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x38 false)))
 ))
 (let (($x225 (and $x71 $x101)))
 (let (($x278 (= $x225 true)))
 (let (($x189 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x151 (bvadd symbol.1 (bvmul input.ind-%var1183X (_ bv4 32)))))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x221)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x240)))
 (let ((?x196 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1183X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x264 (= ?x196 ?x170)))))))))
 ))
 (let (($x168 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x224 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x264 $x224))))
 ))
 (let (($x159 (and $x168 $x189)))
 (let (($x205 (= $x159 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x202)))
 (let (($x252 (= ?x265 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x252 true)))
 (let (($x37 (= $x114 true)))
 (let (($x11 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x11 true)))
 (let (($x174 (= $x66 true)))
 (let (($x43 (= $x174 true)))
 (let (($x301 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x296 (= $x301 true)))
 (let (($x116 (= $x296 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x219 (= $x140 true)))
 (let (($x25 (= $x219 true)))
 (let (($x282 (= $x25 true)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x236)))
 (let ((?x165 (bvand symbol.1 (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x165)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x177 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x222 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x222 $x177)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x286 $x60)))
 (let (($x325 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x246 $x331)))
 (let (($x292 (not $x204)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x285 $x239)))
 (let (($x242 (and (not $x139) $x292)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x115 $x107)))
 (let (($x287 (not $x329)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x93 $x158)))
 (let (($x154 (and (not $x254) $x287)))
 (let (($x206 (and (and (and (and (and (and $x154 $x242) $x258) $x325) $x193) $x320) $x188)))
 (let (($x95 (and $x206 $x207)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x57 (and $x27 $x95)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x330 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x330)))
 (let (($x232 (or (bvugt input.memlabel-mem--symbol.1_begin ?x330) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x232) (or $x142 $x184)))))))
 (let (($x297 (and $x235 $x57)))
 (let (($x303 (= $x297 true)))
 (let (($x56 (= $x303 true)))
 (let (($x9 (= $x56 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x145 true)))
 (let (($x5 (= $x50 true)))
 (let (($x49 (= $x5 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x133 true)))
 (let (($x52 (= $x35 true)))
 (let (($x144 (= $x52 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x216 (= $x19 true)))
 (let (($x162 (= $x216 true)))
 (let (($x138 (= $x162 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x10)))
 (let (($x134 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x134 true)))
 (let (($x137 (= $x18 true)))
 (let (($x113 (= ?x100 input.dst.llvm-%n)))
 (let (($x180 (= $x113 true)))
 (let (($x102 (= $x180 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x146 (bvsub ?x187 ?x190)))
 (let (($x14 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x146) (bvult ?x187 ?x146))))
 (let ((?x161 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x161)))
 (let ((?x109 ((_ extract 63 32) ?x73)))
 (let (($x163 (= (_ bv0 32) ?x109)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x83 (and (and (and true $x175) $x163) $x14)))
 (let (($x166 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x34 (and $x166 $x83)))
 (let (($x80 (= true $x34)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (=> $x65 $x80)))
 (let (($x157 (= $x108 true)))
 (let (($x119 (= $x157 true)))
 (let (($x181 (= $x119 true)))
 (let (($x21 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x21 true)))
 (let (($x6 (= $x149 true)))
 (let (($x40 (= $x6 true)))
 (let (($x155 (= $x65 true)))
 (let (($x53 (= $x155 true)))
 (let (($x90 (= $x53 true)))
 (let (($x84 (and $x90 $x40)))
 (let (($x33 (and $x84 $x181)))
 (let (($x13 (and $x33 $x102)))
 (let (($x213 (and $x13 $x137)))
 (let (($x231 (and $x213 $x138)))
 (let (($x210 (and $x231 $x144)))
 (let (($x223 (and $x210 $x49)))
 (let (($x156 (and $x223 $x9)))
 (let (($x132 (and $x156 $x282)))
 (let (($x104 (and $x132 $x135)))
 (let (($x89 (and $x104 $x43)))
 (let (($x281 (and $x89 $x37)))
 (let (($x208 (and $x281 $x205)))
 (let (($x255 (and $x208 $x278)))
 (let (($x247 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x247) $x255)))
 (let (($x294 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and $x294 $x126)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x62 $x63)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x69 $x274)))
 (let (($x244 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x244)))))
 (let (($x61 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x244)))))
 (let (($x44 (and $x61 $x249)))
 (let (($x272 (=> $x44 $x28)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (bvule ?x169 (_ bv399 32))))
 (let (($x141 (= $x72 true)))
 (let (($x70 (= $x141 true)))
 (let (($x261 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1201X) (_ bv0 32)))))
 ))
 (let (($x315 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x110 false)))
 ))
 (let (($x304 (and $x315 $x261)))
 (let (($x259 (= $x304 true)))
 (let (($x209 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x126 (bvadd symbol.1 (bvmul input.ind-%var1195X (_ bv4 32)))))
 (let ((?x44 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x126))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x126 (_ bv2 32))) ?x44)))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x126 (_ bv3 32))) ?x260)))
 (let ((?x152 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x224 (= ?x152 ?x295)))))))))
 ))
 (let (($x183 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x224 $x280))))
 ))
 (let (($x276 (and $x183 $x209)))
 (let (($x248 (= $x276 true)))
 (let ((?x265 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x265)))
 (let (($x114 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x114 true)))
 (let (($x281 (= $x37 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x174 (= $x66 true)))
 (let (($x43 (= $x174 true)))
 (let (($x89 (= $x43 true)))
 (let (($x296 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x296 true)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x25 (= $x219 true)))
 (let (($x282 (= $x25 true)))
 (let (($x132 (= $x282 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x320 (bvsub ?x187 ?x190)))
 (let (($x206 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x320) (bvult ?x187 ?x320))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvmul (_ bv4 64) ?x60)))
 (let ((?x227 ((_ extract 63 32) ?x193)))
 (let (($x167 (= (_ bv0 32) ?x227)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x95 (and (and (and true $x233) $x167) $x206)))
 (let (($x228 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x57 (and $x228 $x95)))
 (let (($x297 (= true $x57)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (=> $x65 $x297)))
 (let (($x56 (= $x303 true)))
 (let (($x9 (= $x56 true)))
 (let (($x156 (= $x9 true)))
 (let (($x331 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x204 (= $x331 true)))
 (let (($x292 (= $x204 true)))
 (let (($x242 (= $x292 true)))
 (let (($x239 (= $x65 true)))
 (let (($x139 (= $x239 true)))
 (let (($x185 (= $x139 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x22)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x48)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x232 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x176 (= input.memlabel-mem--symbol.1_end ?x232)))
 (let (($x263 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (and $x263 $x176)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x120 $x112)))
 (let (($x330 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x145 $x50)))
 (let (($x49 (not $x5)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x52 $x144)))
 (let (($x211 (and (not $x210) $x49)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x216 $x162)))
 (let (($x231 (not $x138)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x137 $x213)))
 (let (($x35 (and (not $x19) $x231)))
 (let (($x254 (and (and (and (and (and (and $x35 $x211) $x123) $x330) $x142) $x184) $x129)))
 (let (($x293 (and $x254 $x47)))
 (let (($x14 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x14 $x293)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x119 (or (bvugt input.memlabel-mem--symbol.1_begin ?x80) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x119) (or $x10 $x100)))))))
 (let (($x107 (and $x18 $x115)))
 (let (($x329 (= $x107 true)))
 (let (($x287 (= $x329 true)))
 (let (($x154 (= $x287 true)))
 (let (($x109 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x109 true)))
 (let (($x7 (= $x163 true)))
 (let (($x55 (= $x7 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x99 (= $x175 true)))
 (let (($x266 (= $x99 true)))
 (let (($x161 (= $x266 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x94 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x94 true)))
 (let (($x36 (= $x92 true)))
 (let (($x84 (= ?x40 input.dst.llvm-%n)))
 (let (($x42 (= $x84 true)))
 (let (($x267 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x166 (and $x21 $x267)))
 (let (($x86 (and $x166 $x36)))
 (let (($x73 (and $x86 $x161)))
 (let (($x146 (and $x73 $x55)))
 (let (($x285 (and $x146 $x154)))
 (let (($x246 (and $x285 $x185)))
 (let (($x85 (and $x246 $x242)))
 (let (($x140 (and $x85 $x156)))
 (let (($x301 (and $x140 $x132)))
 (let (($x11 (and $x301 $x104)))
 (let (($x202 (and $x11 $x89)))
 (let (($x178 (and $x202 $x281)))
 (let (($x290 (and $x178 $x248)))
 (let (($x39 (and $x290 $x259)))
 (let (($x322 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and (not $x322) $x39)))
 (let (($x318 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x318 $x128)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x299 (and $x45 $x58)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x79 $x299)))
 (let (($x64 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x283 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x64)))))
 (let (($x118 (and $x283 $x173)))
 (let (($x12 (=> $x118 $x70)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (bvule ?x169 (_ bv399 32))))
 (let (($x141 (= $x72 true)))
 (let (($x70 (= $x141 true)))
 (let (($x261 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1201X) (_ bv0 32)))))
 ))
 (let (($x315 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x110 false)))
 ))
 (let (($x304 (and $x315 $x261)))
 (let (($x259 (= $x304 true)))
 (let (($x209 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x126 (bvadd symbol.1 (bvmul input.ind-%var1195X (_ bv4 32)))))
 (let ((?x44 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x126))))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x126 (_ bv2 32))) ?x44)))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x126 (_ bv3 32))) ?x260)))
 (let ((?x152 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x224 (= ?x152 ?x295)))))))))
 ))
 (let (($x183 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x280 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x224 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x224 $x280))))
 ))
 (let (($x276 (and $x183 $x209)))
 (let (($x248 (= $x276 true)))
 (let ((?x265 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x265)))
 (let (($x114 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (= $x114 true)))
 (let (($x281 (= $x37 true)))
 (let (($x66 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x174 (= $x66 true)))
 (let (($x43 (= $x174 true)))
 (let (($x89 (= $x43 true)))
 (let (($x296 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x296 true)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x25 (= $x219 true)))
 (let (($x282 (= $x25 true)))
 (let (($x132 (= $x282 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x320 (bvsub ?x187 ?x190)))
 (let (($x206 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x320) (bvult ?x187 ?x320))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvmul (_ bv4 64) ?x60)))
 (let ((?x227 ((_ extract 63 32) ?x193)))
 (let (($x167 (= (_ bv0 32) ?x227)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x95 (and (and (and true $x233) $x167) $x206)))
 (let (($x228 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x57 (and $x228 $x95)))
 (let (($x297 (= true $x57)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (=> $x65 $x297)))
 (let (($x56 (= $x303 true)))
 (let (($x9 (= $x56 true)))
 (let (($x156 (= $x9 true)))
 (let (($x331 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x204 (= $x331 true)))
 (let (($x292 (= $x204 true)))
 (let (($x242 (= $x292 true)))
 (let (($x239 (= $x65 true)))
 (let (($x139 (= $x239 true)))
 (let (($x185 (= $x139 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x22)))
 (let ((?x48 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x48)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x232 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x176 (= input.memlabel-mem--symbol.1_end ?x232)))
 (let (($x263 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (and $x263 $x176)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x120 $x112)))
 (let (($x330 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x145 $x50)))
 (let (($x49 (not $x5)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x52 $x144)))
 (let (($x211 (and (not $x210) $x49)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x216 $x162)))
 (let (($x231 (not $x138)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x137 $x213)))
 (let (($x35 (and (not $x19) $x231)))
 (let (($x254 (and (and (and (and (and (and $x35 $x211) $x123) $x330) $x142) $x184) $x129)))
 (let (($x293 (and $x254 $x47)))
 (let (($x14 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x14 $x293)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x119 (or (bvugt input.memlabel-mem--symbol.1_begin ?x80) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x119) (or $x10 $x100)))))))
 (let (($x107 (and $x18 $x115)))
 (let (($x329 (= $x107 true)))
 (let (($x287 (= $x329 true)))
 (let (($x154 (= $x287 true)))
 (let (($x109 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x109 true)))
 (let (($x7 (= $x163 true)))
 (let (($x55 (= $x7 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x99 (= $x175 true)))
 (let (($x266 (= $x99 true)))
 (let (($x161 (= $x266 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x94 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x94 true)))
 (let (($x36 (= $x92 true)))
 (let (($x84 (= ?x40 input.dst.llvm-%n)))
 (let (($x42 (= $x84 true)))
 (let (($x267 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x166 (and $x21 $x267)))
 (let (($x86 (and $x166 $x36)))
 (let (($x73 (and $x86 $x161)))
 (let (($x146 (and $x73 $x55)))
 (let (($x285 (and $x146 $x154)))
 (let (($x246 (and $x285 $x185)))
 (let (($x85 (and $x246 $x242)))
 (let (($x140 (and $x85 $x156)))
 (let (($x301 (and $x140 $x132)))
 (let (($x11 (and $x301 $x104)))
 (let (($x202 (and $x11 $x89)))
 (let (($x178 (and $x202 $x281)))
 (let (($x290 (and $x178 $x248)))
 (let (($x39 (and $x290 $x259)))
 (let (($x322 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and (not $x322) $x39)))
 (let (($x318 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x318 $x128)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x299 (and $x45 $x58)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x79 $x299)))
 (let (($x64 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x283 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x64)))))
 (let (($x118 (and $x283 $x173)))
 (let (($x12 (=> $x118 $x70)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (bvsle ?x121 (_ bv399 32))))
 (let (($x147 (= $x278 true)))
 (let (($x127 (= $x147 true)))
 (let (($x195 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x26 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x332 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x26 false)))
 ))
 (let (($x101 (and $x332 $x195)))
 (let (($x124 (= $x101 true)))
 (let (($x8 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x128 (bvadd symbol.1 (bvmul input.ind-%var1207X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x128))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv2 32))) ?x118)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv3 32))) ?x141)))
 (let ((?x63 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1207X)))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x280 (= ?x63 ?x226)))))))))
 ))
 (let (($x327 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1206X) (bvult input.ind-%var1206X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x280 $x272))))
 ))
 (let (($x271 (and $x327 $x8)))
 (let (($x221 (= $x271 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x252)))
 (let (($x37 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x37 true)))
 (let (($x178 (= $x281 true)))
 (let (($x174 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x174 true)))
 (let (($x89 (= $x43 true)))
 (let (($x202 (= $x89 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x25 true)))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x207 (bvsub ?x187 ?x190)))
 (let (($x188 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x207) (bvult ?x187 ?x207))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvmul (_ bv4 64) ?x60)))
 (let ((?x227 ((_ extract 63 32) ?x193)))
 (let (($x167 (= (_ bv0 32) ?x227)))
 (let (($x236 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x236) $x167) $x188)))
 (let (($x323 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x297 (and $x323 $x57)))
 (let (($x303 (= true $x297)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (=> $x65 $x303)))
 (let (($x9 (= $x56 true)))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let (($x204 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x292 (= $x204 true)))
 (let (($x242 (= $x292 true)))
 (let (($x85 (= $x242 true)))
 (let (($x139 (= $x65 true)))
 (let (($x185 (= $x139 true)))
 (let (($x246 (= $x185 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x184)))
 (let ((?x93 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x93)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x263 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x232 (and $x27 $x263)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x330 $x232)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x145 $x50)))
 (let (($x49 (not $x5)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x144 $x210)))
 (let (($x235 (and (not $x223) $x49)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x216 $x162)))
 (let (($x231 (not $x138)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x213 $x19)))
 (let (($x52 (and (not $x133) $x231)))
 (let (($x293 (and (and (and (and (and (and $x52 $x235) $x123) $x215) $x176) $x142) $x106)))
 (let (($x115 (and $x293 $x158)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x107 (and $x134 $x115)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x157) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x113 $x180)))))))
 (let (($x329 (and $x137 $x107)))
 (let (($x287 (= $x329 true)))
 (let (($x154 (= $x287 true)))
 (let (($x285 (= $x154 true)))
 (let (($x109 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x109 true)))
 (let (($x7 (= $x163 true)))
 (let (($x55 (= $x7 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x99 (= $x175 true)))
 (let (($x266 (= $x99 true)))
 (let (($x161 (= $x266 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x94 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x94 true)))
 (let (($x36 (= $x92 true)))
 (let (($x84 (= ?x40 input.dst.llvm-%n)))
 (let (($x42 (= $x84 true)))
 (let (($x267 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x166 (and $x21 $x267)))
 (let (($x86 (and $x166 $x36)))
 (let (($x73 (and $x86 $x161)))
 (let (($x146 (and $x73 $x55)))
 (let (($x239 (and $x146 $x285)))
 (let (($x331 (and $x239 $x246)))
 (let (($x258 (and $x331 $x85)))
 (let (($x219 (and $x258 $x140)))
 (let (($x296 (and $x219 $x301)))
 (let (($x66 (and $x296 $x11)))
 (let (($x265 (and $x66 $x202)))
 (let (($x111 (and $x265 $x178)))
 (let (($x153 (and $x111 $x221)))
 (let (($x199 (and $x153 $x124)))
 (let (($x15 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and (not $x15) $x199)))
 (let (($x247 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x247 $x130)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x74 $x225)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x298 (and $x143 $x291)))
 (let (($x61 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x79 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x61)))))
 (let (($x251 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x61)))))
 (let (($x250 (and $x251 $x298)))
 (let (($x160 (=> $x250 $x127)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (bvsle ?x121 (_ bv399 32))))
 (let (($x147 (= $x278 true)))
 (let (($x127 (= $x147 true)))
 (let (($x195 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x26 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x332 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x26 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x26 false)))
 ))
 (let (($x101 (and $x332 $x195)))
 (let (($x124 (= $x101 true)))
 (let (($x8 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x128 (bvadd symbol.1 (bvmul input.ind-%var1207X (_ bv4 32)))))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x128))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv2 32))) ?x118)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv3 32))) ?x141)))
 (let ((?x63 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1207X)))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x280 (= ?x63 ?x226)))))))))
 ))
 (let (($x327 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1206X) (bvult input.ind-%var1206X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x280 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x280 $x272))))
 ))
 (let (($x271 (and $x327 $x8)))
 (let (($x221 (= $x271 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x252)))
 (let (($x37 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x37 true)))
 (let (($x178 (= $x281 true)))
 (let (($x174 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x174 true)))
 (let (($x89 (= $x43 true)))
 (let (($x202 (= $x89 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (= $x116 true)))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x25 true)))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x207 (bvsub ?x187 ?x190)))
 (let (($x188 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x207) (bvult ?x187 ?x207))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x193 (bvmul (_ bv4 64) ?x60)))
 (let ((?x227 ((_ extract 63 32) ?x193)))
 (let (($x167 (= (_ bv0 32) ?x227)))
 (let (($x236 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x57 (and (and (and true $x236) $x167) $x188)))
 (let (($x323 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x297 (and $x323 $x57)))
 (let (($x303 (= true $x297)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (=> $x65 $x303)))
 (let (($x9 (= $x56 true)))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let (($x204 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x292 (= $x204 true)))
 (let (($x242 (= $x292 true)))
 (let (($x85 (= $x242 true)))
 (let (($x139 (= $x65 true)))
 (let (($x185 (= $x139 true)))
 (let (($x246 (= $x185 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x184)))
 (let ((?x93 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x93)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x263 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x232 (and $x27 $x263)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x330 $x232)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x145 $x50)))
 (let (($x49 (not $x5)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x144 $x210)))
 (let (($x235 (and (not $x223) $x49)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x216 $x162)))
 (let (($x231 (not $x138)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x213 $x19)))
 (let (($x52 (and (not $x133) $x231)))
 (let (($x293 (and (and (and (and (and (and $x52 $x235) $x123) $x215) $x176) $x142) $x106)))
 (let (($x115 (and $x293 $x158)))
 (let (($x134 (= symbol.1 dst_symbol_addr.1)))
 (let (($x107 (and $x134 $x115)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x157) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x113 $x180)))))))
 (let (($x329 (and $x137 $x107)))
 (let (($x287 (= $x329 true)))
 (let (($x154 (= $x287 true)))
 (let (($x285 (= $x154 true)))
 (let (($x109 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x109 true)))
 (let (($x7 (= $x163 true)))
 (let (($x55 (= $x7 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x99 (= $x175 true)))
 (let (($x266 (= $x99 true)))
 (let (($x161 (= $x266 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x94 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x94 true)))
 (let (($x36 (= $x92 true)))
 (let (($x84 (= ?x40 input.dst.llvm-%n)))
 (let (($x42 (= $x84 true)))
 (let (($x267 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x166 (and $x21 $x267)))
 (let (($x86 (and $x166 $x36)))
 (let (($x73 (and $x86 $x161)))
 (let (($x146 (and $x73 $x55)))
 (let (($x239 (and $x146 $x285)))
 (let (($x331 (and $x239 $x246)))
 (let (($x258 (and $x331 $x85)))
 (let (($x219 (and $x258 $x140)))
 (let (($x296 (and $x219 $x301)))
 (let (($x66 (and $x296 $x11)))
 (let (($x265 (and $x66 $x202)))
 (let (($x111 (and $x265 $x178)))
 (let (($x153 (and $x111 $x221)))
 (let (($x199 (and $x153 $x124)))
 (let (($x15 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and (not $x15) $x199)))
 (let (($x247 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x247 $x130)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x74 $x225)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x298 (and $x143 $x291)))
 (let (($x61 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x79 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x61)))))
 (let (($x251 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x61)))))
 (let (($x250 (and $x251 $x298)))
 (let (($x160 (=> $x250 $x127)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 184 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x259 (bvsge ?x274 (_ bv0 32))))
 (let (($x159 (= $x259 true)))
 (let (($x131 (= $x159 true)))
 (let (($x277 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x249 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x328 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x249 false)))
 ))
 (let (($x261 (and $x328 $x277)))
 (let (($x284 (= $x261 true)))
 (let (($x83 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x130 (bvadd symbol.1 (bvmul input.ind-%var1219X (_ bv4 32)))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x250)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x147)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1219X)))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1219X)))
 (=> $x272 (= ?x58 ?x96)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var1218X) (bvult input.ind-%var1218X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (= $x272 $x12))))
 ))
 (let (($x98 (and $x169 $x83)))
 (let (($x44 (= $x98 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x114)))
 (let (($x281 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x281 true)))
 (let (($x111 (= $x178 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x43 true)))
 (let (($x202 (= $x89 true)))
 (let (($x265 (= $x202 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x66 (= $x11 true)))
 (let (($x282 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let (($x296 (= $x301 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x95)))
 (let ((?x227 (bvand symbol.1 (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x227)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x236 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x222 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x206 (and $x222 $x236)))
 (let (($x325 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x325 $x206)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x242 (and $x204 $x292)))
 (let (($x85 (not $x242)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x331 (and $x185 $x246)))
 (let (($x194 (and (not $x331) $x85)))
 (let (($x287 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x329 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x329 $x287)))
 (let (($x285 (not $x154)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x158 $x115)))
 (let (($x139 (and (not $x107) $x285)))
 (let (($x297 (and (and (and (and (and (and $x139 $x194) $x228) $x286) $x177) $x193) $x167)))
 (let (($x303 (and $x297 $x87)))
 (let (($x129 (= symbol.1 dst_symbol_addr.1)))
 (let (($x56 (and $x129 $x303)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x120 (or (bvugt input.memlabel-mem--symbol.1_begin ?x254) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x120) (or $x22 $x112)))))))
 (let (($x9 (and $x184 $x56)))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let (($x219 (= $x140 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x145 true)))
 (let (($x5 (= $x50 true)))
 (let (($x49 (= $x5 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (= $x52 true)))
 (let (($x210 (= $x144 true)))
 (let (($x223 (= $x210 true)))
 (let (($x35 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x216 (= $x35 true)))
 (let (($x162 (= $x216 true)))
 (let (($x138 (= $x162 true)))
 (let ((?x102 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x102)))
 (let (($x134 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (= $x134 true)))
 (let (($x19 (= $x213 true)))
 (let (($x18 (= ?x13 input.dst.llvm-%n)))
 (let (($x78 (= $x18 true)))
 (let (($x137 (= $x78 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x163 (bvsub ?x187 ?x190)))
 (let (($x80 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x163) (bvult ?x187 ?x163))))
 (let ((?x266 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x161 (bvmul (_ bv4 64) ?x266)))
 (let ((?x73 ((_ extract 63 32) ?x161)))
 (let (($x109 (= (_ bv0 32) ?x73)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x157 (and (and (and true $x175) $x109) $x80)))
 (let (($x166 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x119 (and $x166 $x157)))
 (let (($x181 (= true $x119)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (=> $x65 $x181)))
 (let (($x10 (= $x33 true)))
 (let (($x179 (= $x10 true)))
 (let (($x113 (= $x179 true)))
 (let (($x21 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x21 true)))
 (let (($x6 (= $x149 true)))
 (let (($x40 (= $x6 true)))
 (let (($x155 (= $x65 true)))
 (let (($x53 (= $x155 true)))
 (let (($x90 (= $x53 true)))
 (let (($x84 (and $x90 $x40)))
 (let (($x100 (and $x84 $x113)))
 (let (($x34 (and $x100 $x137)))
 (let (($x133 (and $x34 $x19)))
 (let (($x231 (and $x133 $x138)))
 (let (($x211 (and $x231 $x223)))
 (let (($x235 (and $x211 $x49)))
 (let (($x25 (and $x235 $x219)))
 (let (($x116 (and $x25 $x296)))
 (let (($x174 (and $x116 $x66)))
 (let (($x252 (and $x174 $x265)))
 (let (($x151 (and $x252 $x111)))
 (let (($x264 (and $x151 $x44)))
 (let (($x324 (and $x264 $x284)))
 (let (($x136 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and (not $x136) $x324)))
 (let (($x322 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (and $x322 $x255)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x294 $x304)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x62 $x31)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x143 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x125 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x168 (and $x125 $x203)))
 (let (($x205 (=> $x168 $x131)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x259 (bvsge ?x274 (_ bv0 32))))
 (let (($x159 (= $x259 true)))
 (let (($x131 (= $x159 true)))
 (let (($x277 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x249 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x328 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x249 false)))
 ))
 (let (($x261 (and $x328 $x277)))
 (let (($x284 (= $x261 true)))
 (let (($x83 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x130 (bvadd symbol.1 (bvmul input.ind-%var1219X (_ bv4 32)))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x250)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x147)))
 (let ((?x58 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1219X)))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1219X)))
 (=> $x272 (= ?x58 ?x96)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var1218X) (bvult input.ind-%var1218X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x272 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (= $x272 $x12))))
 ))
 (let (($x98 (and $x169 $x83)))
 (let (($x44 (= $x98 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x114)))
 (let (($x281 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x281 true)))
 (let (($x111 (= $x178 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x43 true)))
 (let (($x202 (= $x89 true)))
 (let (($x265 (= $x202 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x104 (= $x135 true)))
 (let (($x11 (= $x104 true)))
 (let (($x66 (= $x11 true)))
 (let (($x282 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x132 (= $x282 true)))
 (let (($x301 (= $x132 true)))
 (let (($x296 (= $x301 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x95)))
 (let ((?x227 (bvand symbol.1 (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x227)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x233 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x236 (= input.memlabel-mem--symbol.1_end ?x233)))
 (let (($x222 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x206 (and $x222 $x236)))
 (let (($x325 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x325 $x206)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x242 (and $x204 $x292)))
 (let (($x85 (not $x242)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x331 (and $x185 $x246)))
 (let (($x194 (and (not $x331) $x85)))
 (let (($x287 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x329 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x329 $x287)))
 (let (($x285 (not $x154)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x158 $x115)))
 (let (($x139 (and (not $x107) $x285)))
 (let (($x297 (and (and (and (and (and (and $x139 $x194) $x228) $x286) $x177) $x193) $x167)))
 (let (($x303 (and $x297 $x87)))
 (let (($x129 (= symbol.1 dst_symbol_addr.1)))
 (let (($x56 (and $x129 $x303)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x120 (or (bvugt input.memlabel-mem--symbol.1_begin ?x254) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x120) (or $x22 $x112)))))))
 (let (($x9 (and $x184 $x56)))
 (let (($x156 (= $x9 true)))
 (let (($x140 (= $x156 true)))
 (let (($x219 (= $x140 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x145 true)))
 (let (($x5 (= $x50 true)))
 (let (($x49 (= $x5 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (= $x52 true)))
 (let (($x210 (= $x144 true)))
 (let (($x223 (= $x210 true)))
 (let (($x35 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x216 (= $x35 true)))
 (let (($x162 (= $x216 true)))
 (let (($x138 (= $x162 true)))
 (let ((?x102 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x102)))
 (let (($x134 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (= $x134 true)))
 (let (($x19 (= $x213 true)))
 (let (($x18 (= ?x13 input.dst.llvm-%n)))
 (let (($x78 (= $x18 true)))
 (let (($x137 (= $x78 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x163 (bvsub ?x187 ?x190)))
 (let (($x80 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x163) (bvult ?x187 ?x163))))
 (let ((?x266 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x161 (bvmul (_ bv4 64) ?x266)))
 (let ((?x73 ((_ extract 63 32) ?x161)))
 (let (($x109 (= (_ bv0 32) ?x73)))
 (let (($x175 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x157 (and (and (and true $x175) $x109) $x80)))
 (let (($x166 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x119 (and $x166 $x157)))
 (let (($x181 (= true $x119)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x33 (=> $x65 $x181)))
 (let (($x10 (= $x33 true)))
 (let (($x179 (= $x10 true)))
 (let (($x113 (= $x179 true)))
 (let (($x21 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x149 (= $x21 true)))
 (let (($x6 (= $x149 true)))
 (let (($x40 (= $x6 true)))
 (let (($x155 (= $x65 true)))
 (let (($x53 (= $x155 true)))
 (let (($x90 (= $x53 true)))
 (let (($x84 (and $x90 $x40)))
 (let (($x100 (and $x84 $x113)))
 (let (($x34 (and $x100 $x137)))
 (let (($x133 (and $x34 $x19)))
 (let (($x231 (and $x133 $x138)))
 (let (($x211 (and $x231 $x223)))
 (let (($x235 (and $x211 $x49)))
 (let (($x25 (and $x235 $x219)))
 (let (($x116 (and $x25 $x296)))
 (let (($x174 (and $x116 $x66)))
 (let (($x252 (and $x174 $x265)))
 (let (($x151 (and $x252 $x111)))
 (let (($x264 (and $x151 $x44)))
 (let (($x324 (and $x264 $x284)))
 (let (($x136 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (and (not $x136) $x324)))
 (let (($x322 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (and $x322 $x255)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x294 $x304)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x62 $x31)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x143 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x125 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x168 (and $x125 $x203)))
 (let (($x205 (=> $x168 $x131)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (bvule ?x299 input.dst.llvm-%n)))
 (let (($x276 (= $x124 true)))
 (let (($x197 (= $x276 true)))
 (let (($x316 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (=> $x173 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1237X) (_ bv0 32)))))
 ))
 (let (($x234 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (= $x173 false)))
 ))
 (let (($x195 (and $x234 $x316)))
 (let (($x230 (= $x195 true)))
 (let (($x48 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let ((?x255 (bvadd symbol.1 (bvmul input.ind-%var1231X (_ bv4 32)))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x255))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x255 (_ bv2 32))) ?x168)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x255 (_ bv3 32))) ?x159)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1231X)))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1231X)))
 (=> $x12 (= ?x225 ?x41)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x160 (and (bvule (_ bv0 32) input.ind-%var1230X) (bvult input.ind-%var1230X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1230X)))
 (= $x12 $x160))))
 ))
 (let (($x38 (and $x121 $x48)))
 (let (($x118 (= $x38 true)))
 (let ((?x37 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x37)))
 (let (($x178 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x178 true)))
 (let (($x151 (= $x111 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x202 (= ?x40 input.dst.llvm-%n)))
 (let (($x265 (= $x202 true)))
 (let (($x252 (= $x265 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (= $x11 true)))
 (let (($x174 (= $x66 true)))
 (let (($x43 (= $x174 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (= $x301 true)))
 (let (($x116 (= $x296 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x219 (= $x140 true)))
 (let (($x25 (= $x219 true)))
 (let (($x282 (= $x25 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x206 (bvsub ?x187 ?x190)))
 (let (($x193 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x206) (bvult ?x187 ?x206))))
 (let ((?x325 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x325)))
 (let ((?x233 ((_ extract 63 32) ?x222)))
 (let (($x236 (= (_ bv0 32) ?x233)))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x167 (and (and (and true $x286) $x236) $x193)))
 (let (($x194 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x297 (and $x194 $x167)))
 (let (($x95 (= true $x297)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (=> $x65 $x95)))
 (let (($x303 (= $x87 true)))
 (let (($x56 (= $x303 true)))
 (let (($x9 (= $x56 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x331 (= $x246 true)))
 (let (($x258 (= $x331 true)))
 (let (($x204 (= $x258 true)))
 (let (($x154 (= $x65 true)))
 (let (($x285 (= $x154 true)))
 (let (($x139 (= $x285 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x176)))
 (let ((?x232 (bvand symbol.1 (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x232)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x293 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x254 (= input.memlabel-mem--symbol.1_end ?x293)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x330 (and $x215 $x254)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x30 $x330)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x144 $x210)))
 (let (($x211 (not $x223)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x138 $x231)))
 (let (($x50 (and (not $x52) $x211)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x213 $x19)))
 (let (($x35 (not $x133)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x137 $x34)))
 (let (($x162 (and (not $x134) $x35)))
 (let (($x123 (and (and (and (and (and (and $x162 $x50) $x5) $x235) $x27) $x263) $x22)))
 (let (($x129 (and $x123 $x112)))
 (let (($x7 (= symbol.1 dst_symbol_addr.1)))
 (let (($x158 (and $x7 $x129)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x119 (or (bvugt input.memlabel-mem--symbol.1_begin ?x146) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x119) (or $x179 $x113)))))))
 (let (($x115 (and $x78 $x158)))
 (let (($x107 (= $x115 true)))
 (let (($x239 (= $x107 true)))
 (let (($x329 (= $x239 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x108 true)))
 (let (($x266 (= $x99 true)))
 (let (($x161 (= $x266 true)))
 (let (($x92 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x94 (= $x92 true)))
 (let (($x36 (= $x94 true)))
 (let (($x86 (= $x36 true)))
 (let (($x84 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x84 true)))
 (let (($x267 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x166 (and $x21 $x267)))
 (let (($x175 (and $x166 $x86)))
 (let (($x73 (and $x175 $x161)))
 (let (($x287 (and $x73 $x329)))
 (let (($x185 (and $x287 $x139)))
 (let (($x292 (and $x185 $x204)))
 (let (($x156 (and $x292 $x9)))
 (let (($x132 (and $x156 $x282)))
 (let (($x104 (and $x132 $x135)))
 (let (($x89 (and $x104 $x43)))
 (let (($x114 (and $x89 $x252)))
 (let (($x126 (and $x114 $x151)))
 (let (($x224 (and $x126 $x118)))
 (let (($x28 (and $x224 $x230)))
 (let (($x240 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x240) $x28)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (and $x15 $x39)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x318 $x101)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x317 (and $x45 $x71)))
 (let (($x251 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x251)))))
 (let (($x76 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x251)))))
 (let (($x183 (and $x76 $x317)))
 (let (($x248 (=> $x183 $x197)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x124 (bvule ?x299 input.dst.llvm-%n)))
 (let (($x276 (= $x124 true)))
 (let (($x197 (= $x276 true)))
 (let (($x316 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (=> $x173 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1237X) (_ bv0 32)))))
 ))
 (let (($x234 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (= $x173 false)))
 ))
 (let (($x195 (and $x234 $x316)))
 (let (($x230 (= $x195 true)))
 (let (($x48 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let ((?x255 (bvadd symbol.1 (bvmul input.ind-%var1231X (_ bv4 32)))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x255))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x255 (_ bv2 32))) ?x168)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x255 (_ bv3 32))) ?x159)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1231X)))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1231X)))
 (=> $x12 (= ?x225 ?x41)))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x160 (and (bvule (_ bv0 32) input.ind-%var1230X) (bvult input.ind-%var1230X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x12 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1230X)))
 (= $x12 $x160))))
 ))
 (let (($x38 (and $x121 $x48)))
 (let (($x118 (= $x38 true)))
 (let ((?x37 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x37)))
 (let (($x178 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x178 true)))
 (let (($x151 (= $x111 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x6)))
 (let (($x202 (= ?x40 input.dst.llvm-%n)))
 (let (($x265 (= $x202 true)))
 (let (($x252 (= $x265 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (= $x11 true)))
 (let (($x174 (= $x66 true)))
 (let (($x43 (= $x174 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (= $x301 true)))
 (let (($x116 (= $x296 true)))
 (let (($x135 (= $x116 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x219 (= $x140 true)))
 (let (($x25 (= $x219 true)))
 (let (($x282 (= $x25 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x206 (bvsub ?x187 ?x190)))
 (let (($x193 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x206) (bvult ?x187 ?x206))))
 (let ((?x325 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x325)))
 (let ((?x233 ((_ extract 63 32) ?x222)))
 (let (($x236 (= (_ bv0 32) ?x233)))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x167 (and (and (and true $x286) $x236) $x193)))
 (let (($x194 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x297 (and $x194 $x167)))
 (let (($x95 (= true $x297)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x87 (=> $x65 $x95)))
 (let (($x303 (= $x87 true)))
 (let (($x56 (= $x303 true)))
 (let (($x9 (= $x56 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x331 (= $x246 true)))
 (let (($x258 (= $x331 true)))
 (let (($x204 (= $x258 true)))
 (let (($x154 (= $x65 true)))
 (let (($x285 (= $x154 true)))
 (let (($x139 (= $x285 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x176)))
 (let ((?x232 (bvand symbol.1 (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x232)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x293 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x254 (= input.memlabel-mem--symbol.1_end ?x293)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x330 (and $x215 $x254)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x30 $x330)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x144 $x210)))
 (let (($x211 (not $x223)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x138 $x231)))
 (let (($x50 (and (not $x52) $x211)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x213 $x19)))
 (let (($x35 (not $x133)))
 (let (($x34 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x137 $x34)))
 (let (($x162 (and (not $x134) $x35)))
 (let (($x123 (and (and (and (and (and (and $x162 $x50) $x5) $x235) $x27) $x263) $x22)))
 (let (($x129 (and $x123 $x112)))
 (let (($x7 (= symbol.1 dst_symbol_addr.1)))
 (let (($x158 (and $x7 $x129)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x119 (or (bvugt input.memlabel-mem--symbol.1_begin ?x146) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x119) (or $x179 $x113)))))))
 (let (($x115 (and $x78 $x158)))
 (let (($x107 (= $x115 true)))
 (let (($x239 (= $x107 true)))
 (let (($x329 (= $x239 true)))
 (let (($x108 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x108 true)))
 (let (($x266 (= $x99 true)))
 (let (($x161 (= $x266 true)))
 (let (($x92 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x94 (= $x92 true)))
 (let (($x36 (= $x94 true)))
 (let (($x86 (= $x36 true)))
 (let (($x84 (= ?x40 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x42 (= $x84 true)))
 (let (($x267 (= $x42 true)))
 (let (($x53 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x90 (= $x53 true)))
 (let (($x54 (= $x90 true)))
 (let (($x21 (= $x54 true)))
 (let (($x166 (and $x21 $x267)))
 (let (($x175 (and $x166 $x86)))
 (let (($x73 (and $x175 $x161)))
 (let (($x287 (and $x73 $x329)))
 (let (($x185 (and $x287 $x139)))
 (let (($x292 (and $x185 $x204)))
 (let (($x156 (and $x292 $x9)))
 (let (($x132 (and $x156 $x282)))
 (let (($x104 (and $x132 $x135)))
 (let (($x89 (and $x104 $x43)))
 (let (($x114 (and $x89 $x252)))
 (let (($x126 (and $x114 $x151)))
 (let (($x224 (and $x126 $x118)))
 (let (($x28 (and $x224 $x230)))
 (let (($x240 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and (not $x240) $x28)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (and $x15 $x39)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x318 $x101)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x317 (and $x45 $x71)))
 (let (($x251 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x251)))))
 (let (($x76 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x251)))))
 (let (($x183 (and $x76 $x317)))
 (let (($x248 (=> $x183 $x197)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let ((?x39 (bvadd symbol.1 (bvmul input.ind-%var1257X (_ bv4 32)))))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x251 (bvadd ?x187 (_ bv3 32))))
 (let ((?x269 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x245 (store ?x269 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x326 (store ?x245 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x201 (store ?x326 ?x251 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x105 (concat (select ?x201 (bvadd ?x39 (_ bv2 32))) (concat (select ?x201 (bvadd ?x39 (_ bv1 32))) (select ?x201 ?x39)))))
 (let ((?x304 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1257X)))
 (let (($x68 (= input.ind-%var1257X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (= (ite $x68 input.spec-%var-i-0.L3%6%bbentry ?x304) (concat (select ?x201 (bvadd ?x39 (_ bv3 32))) ?x105))))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1257X)))
 (let (($x229 (or $x160 $x68)))
 (=> $x229 $x51))))))))))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x131 (bvule (_ bv0 32) input.ind-%var1256X)))
 (let (($x253 (and $x131 (bvult input.ind-%var1256X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x68 (= input.ind-%var1256X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1256X)))
 (let (($x229 (or $x160 $x68)))
 (= $x229 $x253)))))))
 ))
 (let (($x268 (and $x191 $x218)))
 (let (($x291 (= true true)))
 (let (($x273 (and $x291 $x268)))
 (let (($x319 (= $x273 true)))
 (let (($x29 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1249X)))
 (=> $x298 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1248X)))
 (= $x298 false)))
 ))
 (let (($x277 (and $x91 $x29)))
 (let (($x208 (= $x277 true)))
 (let (($x109 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let ((?x39 (bvadd symbol.1 (bvmul input.ind-%var1243X (_ bv4 32)))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x183)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x276)))
 (let ((?x304 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1243X)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (=> $x160 (= ?x304 ?x23)))))))))
 ))
 (let (($x274 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x131 (bvule (_ bv0 32) input.ind-%var1242X)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1242X)))
 (= $x160 (and $x131 (bvult input.ind-%var1242X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x110 (and $x274 $x109)))
 (let (($x250 (= $x110 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x281)))
 (let (($x111 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x111 true)))
 (let (($x126 (= $x151 true)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x301)))
 (let ((?x282 (bvand symbol.1 (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x282)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x219)))
 (let ((?x56 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x56)))
 (let (($x303 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x156 (and $x303 $x9)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x87 $x156)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x227 $x177)))
 (let (($x188 (not $x206)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x236 (and $x222 $x233)))
 (let (($x193 (and (not $x236) $x188)))
 (let (($x323 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x320 $x323)))
 (let (($x57 (not $x286)))
 (let (($x228 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x194 $x228)))
 (let (($x325 (and (not $x207) $x57)))
 (let (($x174 (and (and (and (and (and (and $x325 $x193) $x167) $x95) $x140) $x25) $x132)))
 (let (($x43 (and $x174 $x296)))
 (let (($x129 (= symbol.1 dst_symbol_addr.1)))
 (let (($x89 (and $x129 $x43)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x287 (or (bvugt input.memlabel-mem--symbol.1_begin ?x107) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x287) (or $x185 $x246)))))))
 (let (($x202 (and $x85 $x89)))
 (let (($x265 (= $x202 true)))
 (let (($x252 (= $x265 true)))
 (let (($x114 (= $x252 true)))
 (let (($x263 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x263 true)))
 (let (($x232 (= $x184 true)))
 (let (($x22 (= $x232 true)))
 (let (($x254 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x330 (= $x254 true)))
 (let (($x27 (= $x330 true)))
 (let (($x106 (= $x27 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x93 (= $x235 true)))
 (let (($x30 (= $x93 true)))
 (let (($x215 (= $x30 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x50 true)))
 (let (($x5 (= $x142 true)))
 (let (($x47 (= $x5 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x144 (= $x145 true)))
 (let (($x210 (= $x144 true)))
 (let (($x223 (= $x210 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x78 (bvsub ?x187 ?x190)))
 (let (($x34 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x78) (bvult ?x187 ?x78))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x180 (bvmul (_ bv4 64) ?x100)))
 (let ((?x102 ((_ extract 63 32) ?x180)))
 (let (($x13 (= (_ bv0 32) ?x102)))
 (let (($x10 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x213 (and (and (and true $x10) $x13) $x34)))
 (let (($x157 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x19 (and $x157 $x213)))
 (let (($x133 (= true $x19)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x65 $x133)))
 (let (($x162 (= $x35 true)))
 (let (($x138 (= $x162 true)))
 (let (($x231 (= $x138 true)))
 (let (($x161 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x73 (= $x161 true)))
 (let (($x163 (= $x73 true)))
 (let (($x55 (= $x163 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x175 (= $x86 true)))
 (let (($x108 (= $x175 true)))
 (let (($x99 (= $x108 true)))
 (let (($x267 (= $x65 true)))
 (let (($x166 (= $x267 true)))
 (let (($x92 (= $x166 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x53)))
 (let (($x6 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x6 true)))
 (let (($x84 (= $x40 true)))
 (let (($x54 (= ?x90 input.dst.llvm-%n)))
 (let (($x21 (= $x54 true)))
 (let (($x149 (= $x21 true)))
 (let (($x42 (and $x149 $x84)))
 (let (($x94 (and $x42 $x92)))
 (let (($x266 (and $x94 $x99)))
 (let (($x18 (and $x266 $x55)))
 (let (($x52 (and $x18 $x231)))
 (let (($x211 (and $x52 $x223)))
 (let (($x49 (and $x211 $x47)))
 (let (($x293 (and $x49 $x215)))
 (let (($x120 (and $x293 $x106)))
 (let (($x123 (and $x120 $x22)))
 (let (($x37 (and $x123 $x114)))
 (let (($x128 (and $x37 $x126)))
 (let (($x280 (and $x128 $x250)))
 (let (($x70 (and $x280 $x208)))
 (let (($x260 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (and (not $x260) $x70)))
 (let (($x136 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x136 $x199)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x315 (and $x247 $x261)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x72 (and $x74 $x315)))
 (let (($x125 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x45 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x125)))))
 (let (($x82 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x125)))))
 (let (($x327 (and $x82 $x72)))
 (let (($x256 (=> $x327 $x319)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let ((?x39 (bvadd symbol.1 (bvmul input.ind-%var1257X (_ bv4 32)))))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x251 (bvadd ?x187 (_ bv3 32))))
 (let ((?x269 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x187 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x245 (store ?x269 (bvadd ?x187 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x326 (store ?x245 (bvadd ?x187 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x201 (store ?x326 ?x251 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x105 (concat (select ?x201 (bvadd ?x39 (_ bv2 32))) (concat (select ?x201 (bvadd ?x39 (_ bv1 32))) (select ?x201 ?x39)))))
 (let ((?x304 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1257X)))
 (let (($x68 (= input.ind-%var1257X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (= (ite $x68 input.spec-%var-i-0.L3%6%bbentry ?x304) (concat (select ?x201 (bvadd ?x39 (_ bv3 32))) ?x105))))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1257X)))
 (let (($x229 (or $x160 $x68)))
 (=> $x229 $x51))))))))))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x131 (bvule (_ bv0 32) input.ind-%var1256X)))
 (let (($x253 (and $x131 (bvult input.ind-%var1256X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x68 (= input.ind-%var1256X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1256X)))
 (let (($x229 (or $x160 $x68)))
 (= $x229 $x253)))))))
 ))
 (let (($x268 (and $x191 $x218)))
 (let (($x291 (= true true)))
 (let (($x273 (and $x291 $x268)))
 (let (($x319 (= $x273 true)))
 (let (($x29 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1249X)))
 (=> $x298 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x298 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1248X)))
 (= $x298 false)))
 ))
 (let (($x277 (and $x91 $x29)))
 (let (($x208 (= $x277 true)))
 (let (($x109 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let ((?x39 (bvadd symbol.1 (bvmul input.ind-%var1243X (_ bv4 32)))))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x39))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv2 32))) ?x183)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x39 (_ bv3 32))) ?x276)))
 (let ((?x304 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1243X)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (=> $x160 (= ?x304 ?x23)))))))))
 ))
 (let (($x274 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x131 (bvule (_ bv0 32) input.ind-%var1242X)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1242X)))
 (= $x160 (and $x131 (bvult input.ind-%var1242X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x110 (and $x274 $x109)))
 (let (($x250 (= $x110 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x281)))
 (let (($x111 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x151 (= $x111 true)))
 (let (($x126 (= $x151 true)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x301)))
 (let ((?x282 (bvand symbol.1 (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x282)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x219)))
 (let ((?x56 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x56)))
 (let (($x303 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x156 (and $x303 $x9)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x87 $x156)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x227 $x177)))
 (let (($x188 (not $x206)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x236 (and $x222 $x233)))
 (let (($x193 (and (not $x236) $x188)))
 (let (($x323 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x320 $x323)))
 (let (($x57 (not $x286)))
 (let (($x228 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x194 $x228)))
 (let (($x325 (and (not $x207) $x57)))
 (let (($x174 (and (and (and (and (and (and $x325 $x193) $x167) $x95) $x140) $x25) $x132)))
 (let (($x43 (and $x174 $x296)))
 (let (($x129 (= symbol.1 dst_symbol_addr.1)))
 (let (($x89 (and $x129 $x43)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x287 (or (bvugt input.memlabel-mem--symbol.1_begin ?x107) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x287) (or $x185 $x246)))))))
 (let (($x202 (and $x85 $x89)))
 (let (($x265 (= $x202 true)))
 (let (($x252 (= $x265 true)))
 (let (($x114 (= $x252 true)))
 (let (($x263 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x184 (= $x263 true)))
 (let (($x232 (= $x184 true)))
 (let (($x22 (= $x232 true)))
 (let (($x254 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x330 (= $x254 true)))
 (let (($x27 (= $x330 true)))
 (let (($x106 (= $x27 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x93 (= $x235 true)))
 (let (($x30 (= $x93 true)))
 (let (($x215 (= $x30 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x50 true)))
 (let (($x5 (= $x142 true)))
 (let (($x47 (= $x5 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x144 (= $x145 true)))
 (let (($x210 (= $x144 true)))
 (let (($x223 (= $x210 true)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let ((?x78 (bvsub ?x187 ?x190)))
 (let (($x34 (ite (bvsge ?x190 (_ bv0 32)) (bvuge ?x187 ?x78) (bvult ?x187 ?x78))))
 (let ((?x100 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x180 (bvmul (_ bv4 64) ?x100)))
 (let ((?x102 ((_ extract 63 32) ?x180)))
 (let (($x13 (= (_ bv0 32) ?x102)))
 (let (($x10 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x213 (and (and (and true $x10) $x13) $x34)))
 (let (($x157 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x19 (and $x157 $x213)))
 (let (($x133 (= true $x19)))
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x65 $x133)))
 (let (($x162 (= $x35 true)))
 (let (($x138 (= $x162 true)))
 (let (($x231 (= $x138 true)))
 (let (($x161 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x73 (= $x161 true)))
 (let (($x163 (= $x73 true)))
 (let (($x55 (= $x163 true)))
 (let (($x86 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x175 (= $x86 true)))
 (let (($x108 (= $x175 true)))
 (let (($x99 (= $x108 true)))
 (let (($x267 (= $x65 true)))
 (let (($x166 (= $x267 true)))
 (let (($x92 (= $x166 true)))
 (let ((?x53 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x90 (bvneg ?x53)))
 (let (($x6 (= ?x90 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (= $x6 true)))
 (let (($x84 (= $x40 true)))
 (let (($x54 (= ?x90 input.dst.llvm-%n)))
 (let (($x21 (= $x54 true)))
 (let (($x149 (= $x21 true)))
 (let (($x42 (and $x149 $x84)))
 (let (($x94 (and $x42 $x92)))
 (let (($x266 (and $x94 $x99)))
 (let (($x18 (and $x266 $x55)))
 (let (($x52 (and $x18 $x231)))
 (let (($x211 (and $x52 $x223)))
 (let (($x49 (and $x211 $x47)))
 (let (($x293 (and $x49 $x215)))
 (let (($x120 (and $x293 $x106)))
 (let (($x123 (and $x120 $x22)))
 (let (($x37 (and $x123 $x114)))
 (let (($x128 (and $x37 $x126)))
 (let (($x280 (and $x128 $x250)))
 (let (($x70 (and $x280 $x208)))
 (let (($x260 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (and (not $x260) $x70)))
 (let (($x136 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x136 $x199)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x315 (and $x247 $x261)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x72 (and $x74 $x315)))
 (let (($x125 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x45 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x125)))))
 (let (($x82 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x125)))))
 (let (($x327 (and $x82 $x72)))
 (let (($x256 (=> $x327 $x319)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (not $x65)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x186 (not $x262)))
 (let (($x243 (or $x186 $x253)))
 (let (($x191 (= $x243 true)))
 (let (($x182 (= $x191 true)))
 (let (($x199 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x109 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1269X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x109 false)))
 ))
 (let (($x261 (and $x298 $x199)))
 (let (($x315 (= $x261 true)))
 (let (($x101 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let ((?x249 (bvadd symbol.1 (bvmul input.ind-%var1263X (_ bv4 32)))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x249))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv2 32))) ?x28)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv3 32))) ?x248)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1263X)))
 (let (($x104 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1263X)))
 (=> $x104 (= ?x301 ?x124)))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x219 (and (bvule (_ bv0 32) input.ind-%var1262X) (bvult input.ind-%var1262X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x104 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1262X)))
 (= $x104 $x219))))
 ))
 (let (($x183 (and $x66 $x101)))
 (let (($x276 (= $x183 true)))
 (let ((?x177 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x177)))
 (let (($x188 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x188 true)))
 (let (($x116 (= $x193 true)))
 (let ((?x320 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x323 (bvneg ?x320)))
 (let (($x233 (= ?x323 input.dst.llvm-%n)))
 (let (($x236 (= $x233 true)))
 (let (($x60 (= $x236 true)))
 (let (($x286 (= ?x323 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (= $x286 true)))
 (let (($x325 (= $x57 true)))
 (let (($x112 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x112 true)))
 (let (($x194 (= $x129 true)))
 (let (($x228 (= $x194 true)))
 (let (($x331 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x258 (= $x331 true)))
 (let (($x204 (= $x258 true)))
 (let (($x292 (= $x204 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x154 true)))
 (let (($x185 (= $x285 true)))
 (let (($x139 (= $x185 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x242 true)))
 (let (($x239 (= $x107 true)))
 (let (($x329 (= $x239 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x232 true)))
 (let (($x123 (= $x22 true)))
 (let (($x158 (= $x123 true)))
 (let (($x27 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x106 (= $x27 true)))
 (let (($x120 (= $x106 true)))
 (let (($x263 (= $x120 true)))
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x30 (= $x93 true)))
 (let (($x215 (= $x30 true)))
 (let (($x293 (= $x215 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x138)))
 (let ((?x35 (bvand symbol.1 (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x35)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x7 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x7)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x14 $x137)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x216 $x34)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x33 $x179)))
 (let (($x134 (not $x10)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (and $x157 $x181)))
 (let (($x100 (and (not $x119) $x134)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x73 $x163)))
 (let (($x18 (not $x55)))
 (let (($x266 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x99 $x266)))
 (let (($x80 (and (not $x161) $x18)))
 (let (($x211 (and (and (and (and (and (and $x80 $x100) $x180) $x13) $x213) $x133) $x162)))
 (let (($x50 (and $x211 $x231)))
 (let (($x155 (= symbol.1 dst_symbol_addr.1)))
 (let (($x142 (and $x155 $x50)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x54) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x267 $x166)))))))
 (let (($x5 (and $x108 $x142)))
 (let (($x47 (= $x5 true)))
 (let (($x49 (= $x47 true)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (and $x235 $x293)))
 (let (($x184 (and $x254 $x263)))
 (let (($x115 (and $x184 $x158)))
 (let (($x287 (and $x115 $x329)))
 (let (($x246 (and $x287 $x139)))
 (let (($x85 (and $x246 $x292)))
 (let (($x207 (and $x85 $x228)))
 (let (($x222 (and $x207 $x325)))
 (let (($x227 (and $x222 $x60)))
 (let (($x167 (and $x227 $x116)))
 (let (($x23 (and $x167 $x276)))
 (let (($x72 (and $x23 $x315)))
 (let (($x240 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x240 $x72)))
 (let (($x322 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x322 $x327)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x294 $x291)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let (($x76 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x74 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x76)))))
 (let (($x88 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x76)))))
 (let (($x229 (and $x88 $x68)))
 (let (($x32 (=> $x229 $x182)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x253 (not $x65)))
 (let (($x262 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x186 (not $x262)))
 (let (($x243 (or $x186 $x253)))
 (let (($x191 (= $x243 true)))
 (let (($x182 (= $x191 true)))
 (let (($x199 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1269X)))
 (=> $x109 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1269X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x109 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1268X)))
 (= $x109 false)))
 ))
 (let (($x261 (and $x298 $x199)))
 (let (($x315 (= $x261 true)))
 (let (($x101 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let ((?x249 (bvadd symbol.1 (bvmul input.ind-%var1263X (_ bv4 32)))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x249))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv2 32))) ?x28)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv3 32))) ?x248)))
 (let ((?x301 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1263X)))
 (let (($x104 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1263X)))
 (=> $x104 (= ?x301 ?x124)))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x219 (and (bvule (_ bv0 32) input.ind-%var1262X) (bvult input.ind-%var1262X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x104 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1262X)))
 (= $x104 $x219))))
 ))
 (let (($x183 (and $x66 $x101)))
 (let (($x276 (= $x183 true)))
 (let ((?x177 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x177)))
 (let (($x188 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x188 true)))
 (let (($x116 (= $x193 true)))
 (let ((?x320 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x323 (bvneg ?x320)))
 (let (($x233 (= ?x323 input.dst.llvm-%n)))
 (let (($x236 (= $x233 true)))
 (let (($x60 (= $x236 true)))
 (let (($x286 (= ?x323 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (= $x286 true)))
 (let (($x325 (= $x57 true)))
 (let (($x112 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x112 true)))
 (let (($x194 (= $x129 true)))
 (let (($x228 (= $x194 true)))
 (let (($x331 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x258 (= $x331 true)))
 (let (($x204 (= $x258 true)))
 (let (($x292 (= $x204 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x154 true)))
 (let (($x185 (= $x285 true)))
 (let (($x139 (= $x185 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x242 true)))
 (let (($x239 (= $x107 true)))
 (let (($x329 (= $x239 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x22 (= $x232 true)))
 (let (($x123 (= $x22 true)))
 (let (($x158 (= $x123 true)))
 (let (($x27 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x106 (= $x27 true)))
 (let (($x120 (= $x106 true)))
 (let (($x263 (= $x120 true)))
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x30 (= $x93 true)))
 (let (($x215 (= $x30 true)))
 (let (($x293 (= $x215 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x138)))
 (let ((?x35 (bvand symbol.1 (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x35)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x7 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x7)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x14 $x137)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x216 $x34)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x33 $x179)))
 (let (($x134 (not $x10)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (and $x157 $x181)))
 (let (($x100 (and (not $x119) $x134)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x73 $x163)))
 (let (($x18 (not $x55)))
 (let (($x266 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x99 $x266)))
 (let (($x80 (and (not $x161) $x18)))
 (let (($x211 (and (and (and (and (and (and $x80 $x100) $x180) $x13) $x213) $x133) $x162)))
 (let (($x50 (and $x211 $x231)))
 (let (($x155 (= symbol.1 dst_symbol_addr.1)))
 (let (($x142 (and $x155 $x50)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x54) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x267 $x166)))))))
 (let (($x5 (and $x108 $x142)))
 (let (($x47 (= $x5 true)))
 (let (($x49 (= $x47 true)))
 (let (($x235 (= $x49 true)))
 (let (($x254 (and $x235 $x293)))
 (let (($x184 (and $x254 $x263)))
 (let (($x115 (and $x184 $x158)))
 (let (($x287 (and $x115 $x329)))
 (let (($x246 (and $x287 $x139)))
 (let (($x85 (and $x246 $x292)))
 (let (($x207 (and $x85 $x228)))
 (let (($x222 (and $x207 $x325)))
 (let (($x227 (and $x222 $x60)))
 (let (($x167 (and $x227 $x116)))
 (let (($x23 (and $x167 $x276)))
 (let (($x72 (and $x23 $x315)))
 (let (($x240 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x240 $x72)))
 (let (($x322 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x322 $x327)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x294 $x291)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let (($x76 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x74 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x76)))))
 (let (($x88 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x76)))))
 (let (($x229 (and $x88 $x68)))
 (let (($x32 (=> $x229 $x182)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (or $x238 $x65)))
 (let (($x132 (= $x250 true)))
 (let (($x255 (= $x132 true)))
 (let (($x126 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1281X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1280X)))
 (= $x174 false)))
 ))
 (let (($x160 (and $x202 $x126)))
 (let (($x152 (= $x160 true)))
 (let (($x260 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x291 (bvadd symbol.1 (bvmul input.ind-%var1275X (_ bv4 32)))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x291))))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x291 (_ bv2 32))) ?x186)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x291 (_ bv3 32))) ?x191)))
 (let ((?x28 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x25 (= ?x28 ?x237)))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x178 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x25 $x178))))
 ))
 (let (($x87 (and $x197 $x260)))
 (let (($x296 (= $x87 true)))
 (let ((?x188 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x188)))
 (let (($x116 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x116 true)))
 (let (($x95 (= $x167 true)))
 (let ((?x286 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x286)))
 (let (($x60 (= ?x57 input.dst.llvm-%n)))
 (let (($x227 (= $x60 true)))
 (let (($x177 (= $x227 true)))
 (let (($x325 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x222 (= $x325 true)))
 (let (($x233 (= $x222 true)))
 (let (($x194 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x194 true)))
 (let (($x207 (= $x228 true)))
 (let (($x165 (= $x207 true)))
 (let (($x204 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x204 true)))
 (let (($x85 (= $x292 true)))
 (let (($x112 (= $x85 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x139 (= $x185 true)))
 (let (($x246 (= $x139 true)))
 (let (($x331 (= $x246 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (= $x239 true)))
 (let (($x287 (= $x329 true)))
 (let (($x154 (= $x287 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x158 (= $x123 true)))
 (let (($x115 (= $x158 true)))
 (let (($x242 (= $x115 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x263 (= $x120 true)))
 (let (($x184 (= $x263 true)))
 (let (($x232 (= $x184 true)))
 (let (($x215 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x293 (= $x215 true)))
 (let (($x254 (= $x293 true)))
 (let (($x330 (= $x254 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x223)))
 (let ((?x19 (bvand symbol.1 (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x19)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x7 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (and $x216 $x7)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x144 $x137)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x179 $x10)))
 (let (($x100 (not $x134)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x119 $x113)))
 (let (($x180 (and (not $x33) $x100)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x163 $x55)))
 (let (($x80 (not $x18)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x161 $x146)))
 (let (($x181 (and (not $x73) $x80)))
 (let (($x142 (and (and (and (and (and (and $x181 $x180) $x145) $x13) $x34) $x210) $x133)))
 (let (($x5 (and $x142 $x35)))
 (let (($x54 (= symbol.1 dst_symbol_addr.1)))
 (let (($x47 (and $x54 $x5)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x267 (or (bvugt input.memlabel-mem--symbol.1_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x267) (or $x94 $x36)))))))
 (let (($x49 (and $x266 $x47)))
 (let (($x235 (= $x49 true)))
 (let (($x93 (= $x235 true)))
 (let (($x30 (= $x93 true)))
 (let (($x27 (and $x30 $x330)))
 (let (($x22 (and $x27 $x232)))
 (let (($x107 (and $x22 $x242)))
 (let (($x285 (and $x107 $x154)))
 (let (($x258 (and $x285 $x331)))
 (let (($x129 (and $x258 $x112)))
 (let (($x320 (and $x129 $x165)))
 (let (($x236 (and $x320 $x233)))
 (let (($x206 (and $x236 $x177)))
 (let (($x104 (and $x206 $x95)))
 (let (($x110 (and $x104 $x296)))
 (let (($x297 (and $x110 $x152)))
 (let (($x53 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x53 $x297)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x15 $x9)))
 (let (($x318 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x318 $x156)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let (($x82 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x294 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x82)))))
 (let (($x69 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x82)))))
 (let (($x241 (and $x69 $x131)))
 (let (($x29 (=> $x241 $x255)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (or $x238 $x65)))
 (let (($x132 (= $x250 true)))
 (let (($x255 (= $x132 true)))
 (let (($x126 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1281X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1281X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1280X)))
 (= $x174 false)))
 ))
 (let (($x160 (and $x202 $x126)))
 (let (($x152 (= $x160 true)))
 (let (($x260 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x291 (bvadd symbol.1 (bvmul input.ind-%var1275X (_ bv4 32)))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x291))))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x291 (_ bv2 32))) ?x186)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x291 (_ bv3 32))) ?x191)))
 (let ((?x28 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x25 (= ?x28 ?x237)))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x178 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x25 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x25 $x178))))
 ))
 (let (($x87 (and $x197 $x260)))
 (let (($x296 (= $x87 true)))
 (let ((?x188 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x188)))
 (let (($x116 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x167 (= $x116 true)))
 (let (($x95 (= $x167 true)))
 (let ((?x286 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x286)))
 (let (($x60 (= ?x57 input.dst.llvm-%n)))
 (let (($x227 (= $x60 true)))
 (let (($x177 (= $x227 true)))
 (let (($x325 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x222 (= $x325 true)))
 (let (($x233 (= $x222 true)))
 (let (($x194 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x194 true)))
 (let (($x207 (= $x228 true)))
 (let (($x165 (= $x207 true)))
 (let (($x204 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x204 true)))
 (let (($x85 (= $x292 true)))
 (let (($x112 (= $x85 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x139 (= $x185 true)))
 (let (($x246 (= $x139 true)))
 (let (($x331 (= $x246 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x329 (= $x239 true)))
 (let (($x287 (= $x329 true)))
 (let (($x154 (= $x287 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x158 (= $x123 true)))
 (let (($x115 (= $x158 true)))
 (let (($x242 (= $x115 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x263 (= $x120 true)))
 (let (($x184 (= $x263 true)))
 (let (($x232 (= $x184 true)))
 (let (($x215 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x293 (= $x215 true)))
 (let (($x254 (= $x293 true)))
 (let (($x330 (= $x254 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x223)))
 (let ((?x19 (bvand symbol.1 (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x19)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let ((?x78 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x7 (= input.memlabel-mem--symbol.1_end ?x78)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (and $x216 $x7)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x144 $x137)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x179 $x10)))
 (let (($x100 (not $x134)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x119 $x113)))
 (let (($x180 (and (not $x33) $x100)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x163 $x55)))
 (let (($x80 (not $x18)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x161 $x146)))
 (let (($x181 (and (not $x73) $x80)))
 (let (($x142 (and (and (and (and (and (and $x181 $x180) $x145) $x13) $x34) $x210) $x133)))
 (let (($x5 (and $x142 $x35)))
 (let (($x54 (= symbol.1 dst_symbol_addr.1)))
 (let (($x47 (and $x54 $x5)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x267 (or (bvugt input.memlabel-mem--symbol.1_begin ?x6) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x267) (or $x94 $x36)))))))
 (let (($x49 (and $x266 $x47)))
 (let (($x235 (= $x49 true)))
 (let (($x93 (= $x235 true)))
 (let (($x30 (= $x93 true)))
 (let (($x27 (and $x30 $x330)))
 (let (($x22 (and $x27 $x232)))
 (let (($x107 (and $x22 $x242)))
 (let (($x285 (and $x107 $x154)))
 (let (($x258 (and $x285 $x331)))
 (let (($x129 (and $x258 $x112)))
 (let (($x320 (and $x129 $x165)))
 (let (($x236 (and $x320 $x233)))
 (let (($x206 (and $x236 $x177)))
 (let (($x104 (and $x206 $x95)))
 (let (($x110 (and $x104 $x296)))
 (let (($x297 (and $x110 $x152)))
 (let (($x53 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x53 $x297)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x15 $x9)))
 (let (($x318 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x318 $x156)))
 (let ((?x190 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x187 (bvadd symbol.1 ?x190)))
 (let (($x82 (and (bvule input.memlabel-mem--symbol.1_begin ?x187) (bvule (bvadd ?x187 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x294 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false $x82)))))
 (let (($x69 (=> (and $x65 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x82)))))
 (let (($x241 (and $x69 $x131)))
 (let (($x29 (=> $x241 $x255)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x212 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let ((?x250 (bvadd symbol.1 (bvmul input.ind-%var1299X (_ bv4 32)))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x250))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv2 32))) ?x91)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv3 32))) ?x90)))
 (let ((?x170 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1299X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1299X)))
 (=> $x124 (= ?x170 ?x135)))))))))
 ))
 (let (($x326 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1298X)))
 (= $x124 (and (bvule (_ bv0 32) input.ind-%var1298X) (bvult input.ind-%var1298X input.dst.llvm-%n)))))
 ))
 (let (($x270 (and $x326 $x212)))
 (let (($x37 (= true true)))
 (let (($x176 (and $x37 $x270)))
 (let (($x26 (= $x176 true)))
 (let (($x315 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1293X)))
 (=> $x70 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1293X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1292X)))
 (= $x70 false)))
 ))
 (let (($x264 (and $x276 $x315)))
 (let (($x282 (= $x264 true)))
 (let (($x274 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x250 (bvadd symbol.1 (bvmul input.ind-%var1287X (_ bv4 32)))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x250))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv2 32))) ?x91)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv3 32))) ?x90)))
 (let ((?x170 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1287X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (=> $x124 (= ?x170 ?x135)))))))))
 ))
 (let (($x68 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x243 (bvule (_ bv0 32) input.ind-%var1286X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1286X)))
 (= $x124 (and $x243 (bvult input.ind-%var1286X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x11 (and $x68 $x274)))
 (let (($x301 (= $x11 true)))
 (let ((?x240 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x240)))
 (let (($x25 (= ?x53 input.dst.llvm-%n)))
 (let (($x299 (= $x25 true)))
 (let (($x173 (= $x299 true)))
 (let ((?x325 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x325)))
 (let ((?x286 (bvand symbol.1 (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x286)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x129 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x194 (= input.memlabel-mem--symbol.1_end ?x129)))
 (let (($x112 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x228 (and $x112 $x194)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x85 $x228)))
 (let (($x292 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x185 (and $x154 $x285)))
 (let (($x139 (not $x185)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x287 (and $x239 $x329)))
 (let (($x331 (and (not $x287) $x139)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x22 $x123)))
 (let (($x115 (not $x158)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (and $x263 $x184)))
 (let (($x107 (and (not $x232) $x115)))
 (let (($x206 (and (and (and (and (and (and $x107 $x331) $x258) $x292) $x207) $x323) $x57)))
 (let (($x188 (and $x206 $x222)))
 (let (($x210 (= symbol.1 dst_symbol_addr.1)))
 (let (($x193 (and $x210 $x188)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x47 (or (bvugt input.memlabel-mem--symbol.1_begin ?x223) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x47) (or $x30 $x215)))))))
 (let (($x116 (and $x120 $x193)))
 (let (($x167 (= $x116 true)))
 (let (($x95 (= $x167 true)))
 (let (($x104 (= $x95 true)))
 (let (($x216 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x216 true)))
 (let (($x78 (= $x14 true)))
 (let (($x7 (= $x78 true)))
 (let (($x18 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (not $x18)))
 (let (($x102 (= $x80 true)))
 (let (($x13 (= $x102 true)))
 (let (($x138 (= $x13 true)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x10 (and true $x179)))
 (let (($x134 (= true $x10)))
 (let (($x100 (=> $x80 $x134)))
 (let (($x180 (= $x100 true)))
 (let (($x162 (= $x180 true)))
 (let (($x145 (= $x162 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x146 (= $x161 true)))
 (let (($x73 (= $x146 true)))
 (let (($x157 (= $x73 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x141 true)))
 (let (($x266 (= $x155 true)))
 (let (($x175 (= $x266 true)))
 (let (($x94 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x92 (= $x94 true)))
 (let (($x36 (= $x92 true)))
 (let (($x86 (= $x36 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x84 (= $x40 true)))
 (let (($x267 (= $x84 true)))
 (let (($x42 (= $x267 true)))
 (let (($x21 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x21 true)))
 (let (($x99 (= $x149 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x318 (bvneg ?x61)))
 (let (($x247 (= ?x318 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x322 (= $x247 true)))
 (let (($x15 (= $x322 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x45 true)))
 (let (($x74 (= $x82 true)))
 (let (($x88 (= $x74 true)))
 (let (($x251 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x251 true)))
 (let (($x76 (= $x62 true)))
 (let (($x125 (= $x76 true)))
 (let (($x294 (and $x125 $x88)))
 (let (($x136 (and $x294 $x15)))
 (let (($x6 (and $x136 $x99)))
 (let (($x166 (and $x6 $x42)))
 (let (($x108 (and $x166 $x86)))
 (let (($x54 (and $x108 $x175)))
 (let (($x163 (and $x54 $x157)))
 (let (($x211 (and $x163 $x145)))
 (let (($x144 (and $x211 $x138)))
 (let (($x137 (and $x144 $x7)))
 (let (($x219 (and $x137 $x104)))
 (let (($x178 (and $x219 $x173)))
 (let (($x43 (and $x178 $x301)))
 (let (($x303 (and $x43 $x282)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x283 $x303)))
 (let (($x244 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x244 $x159)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x96 $x72)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x65 $x114)))
 (let (($x168 (=> $x128 $x26)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x212 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let ((?x250 (bvadd symbol.1 (bvmul input.ind-%var1299X (_ bv4 32)))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x250))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv2 32))) ?x91)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv3 32))) ?x90)))
 (let ((?x170 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1299X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1299X)))
 (=> $x124 (= ?x170 ?x135)))))))))
 ))
 (let (($x326 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1298X)))
 (= $x124 (and (bvule (_ bv0 32) input.ind-%var1298X) (bvult input.ind-%var1298X input.dst.llvm-%n)))))
 ))
 (let (($x270 (and $x326 $x212)))
 (let (($x37 (= true true)))
 (let (($x176 (and $x37 $x270)))
 (let (($x26 (= $x176 true)))
 (let (($x315 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1293X)))
 (=> $x70 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1293X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1292X)))
 (= $x70 false)))
 ))
 (let (($x264 (and $x276 $x315)))
 (let (($x282 (= $x264 true)))
 (let (($x274 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x250 (bvadd symbol.1 (bvmul input.ind-%var1287X (_ bv4 32)))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x250))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv2 32))) ?x91)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x250 (_ bv3 32))) ?x90)))
 (let ((?x170 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1287X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1287X)))
 (=> $x124 (= ?x170 ?x135)))))))))
 ))
 (let (($x68 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x243 (bvule (_ bv0 32) input.ind-%var1286X)))
 (let (($x124 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1286X)))
 (= $x124 (and $x243 (bvult input.ind-%var1286X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x11 (and $x68 $x274)))
 (let (($x301 (= $x11 true)))
 (let ((?x240 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x240)))
 (let (($x25 (= ?x53 input.dst.llvm-%n)))
 (let (($x299 (= $x25 true)))
 (let (($x173 (= $x299 true)))
 (let ((?x325 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x325)))
 (let ((?x286 (bvand symbol.1 (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x286)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x129 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x194 (= input.memlabel-mem--symbol.1_end ?x129)))
 (let (($x112 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x228 (and $x112 $x194)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x85 $x228)))
 (let (($x292 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x185 (and $x154 $x285)))
 (let (($x139 (not $x185)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x287 (and $x239 $x329)))
 (let (($x331 (and (not $x287) $x139)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x22 $x123)))
 (let (($x115 (not $x158)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (and $x263 $x184)))
 (let (($x107 (and (not $x232) $x115)))
 (let (($x206 (and (and (and (and (and (and $x107 $x331) $x258) $x292) $x207) $x323) $x57)))
 (let (($x188 (and $x206 $x222)))
 (let (($x210 (= symbol.1 dst_symbol_addr.1)))
 (let (($x193 (and $x210 $x188)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x47 (or (bvugt input.memlabel-mem--symbol.1_begin ?x223) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x47) (or $x30 $x215)))))))
 (let (($x116 (and $x120 $x193)))
 (let (($x167 (= $x116 true)))
 (let (($x95 (= $x167 true)))
 (let (($x104 (= $x95 true)))
 (let (($x216 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x216 true)))
 (let (($x78 (= $x14 true)))
 (let (($x7 (= $x78 true)))
 (let (($x18 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (not $x18)))
 (let (($x102 (= $x80 true)))
 (let (($x13 (= $x102 true)))
 (let (($x138 (= $x13 true)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x10 (and true $x179)))
 (let (($x134 (= true $x10)))
 (let (($x100 (=> $x80 $x134)))
 (let (($x180 (= $x100 true)))
 (let (($x162 (= $x180 true)))
 (let (($x145 (= $x162 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x146 (= $x161 true)))
 (let (($x73 (= $x146 true)))
 (let (($x157 (= $x73 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x141 true)))
 (let (($x266 (= $x155 true)))
 (let (($x175 (= $x266 true)))
 (let (($x94 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x92 (= $x94 true)))
 (let (($x36 (= $x92 true)))
 (let (($x86 (= $x36 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x84 (= $x40 true)))
 (let (($x267 (= $x84 true)))
 (let (($x42 (= $x267 true)))
 (let (($x21 (= ?x53 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (= $x21 true)))
 (let (($x99 (= $x149 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x318 (bvneg ?x61)))
 (let (($x247 (= ?x318 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x322 (= $x247 true)))
 (let (($x15 (= $x322 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x82 (= $x45 true)))
 (let (($x74 (= $x82 true)))
 (let (($x88 (= $x74 true)))
 (let (($x251 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x251 true)))
 (let (($x76 (= $x62 true)))
 (let (($x125 (= $x76 true)))
 (let (($x294 (and $x125 $x88)))
 (let (($x136 (and $x294 $x15)))
 (let (($x6 (and $x136 $x99)))
 (let (($x166 (and $x6 $x42)))
 (let (($x108 (and $x166 $x86)))
 (let (($x54 (and $x108 $x175)))
 (let (($x163 (and $x54 $x157)))
 (let (($x211 (and $x163 $x145)))
 (let (($x144 (and $x211 $x138)))
 (let (($x137 (and $x144 $x7)))
 (let (($x219 (and $x137 $x104)))
 (let (($x178 (and $x219 $x173)))
 (let (($x43 (and $x178 $x301)))
 (let (($x303 (and $x43 $x282)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x283 $x303)))
 (let (($x244 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x244 $x159)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x96 $x72)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x65 $x114)))
 (let (($x168 (=> $x128 $x26)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 182 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676011/query
