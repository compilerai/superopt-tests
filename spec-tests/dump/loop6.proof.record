==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin ?x13)))
 (let (($x11 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x5 (and $x12 $x11)))
 (let (($x17 (and $x5 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (and $x56 $x58))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin ?x13)))
 (let (($x11 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x5 (and $x12 $x11)))
 (let (($x17 (and $x5 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (and $x56 $x58))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= dst_symbol_addr.1 #b11001100011000111111000000000100)
(= symbol.1 #b11001100011000111111000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11001100110001110111000111000100)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11001100110001110111000111000100)
(= input.memlabel-mem--symbol.1_begin #b11001100011000111111000000000100)
(= input.memlabel-mem--symbol.1_end #b11001100011000111111000110010011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11001100110001110111000111000111)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4026cefc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x0026cef8)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x0026d087)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4026ceff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x0026cef8)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x0026cef8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4026cefc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun dst_symbol_addr.1 () (_ BitVec 32) (_ bv4291097728 32))
(define-fun symbol.1 () (_ BitVec 32) (_ bv4291097728 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4292146776 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4292146776 32))
(define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32) (_ bv4291097728 32))
(define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32) (_ bv4291098127 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4292146779 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x165 (= true false)))
 (let (($x166 (= $x165 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x154 (concat ?x151 (concat ?x147 ?x145)))))
 (let (($x156 (= ?x155 input.dst.llvm-%n)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x137 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x140 (= $x139 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x123)))
 (let ((?x121 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x114 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x115 (= (_ bv4291098127 32) ?x114)))
 (let (($x112 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x116 (and $x112 $x115)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x111 $x116)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x105 (and $x103 $x104)))
 (let (($x106 (not $x105)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x102 (and $x100 $x101)))
 (let (($x108 (and (not $x102) $x106)))
 (let (($x95 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x94 $x95)))
 (let (($x97 (not $x96)))
 (let (($x92 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x90 $x92)))
 (let (($x99 (and (not $x93) $x97)))
 (let (($x130 (and (and (and (and (and (and $x99 $x108) $x88) $x110) $x117) $x120) $x122)))
 (let (($x131 (and $x130 $x124)))
 (let (($x132 (and $x88 $x131)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x141 (and $x135 $x140)))
 (let (($x159 (and $x141 $x158)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (and $x87 $x159)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x161 (and $x70 $x160)))
 (let (($x81 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x30 (_ bv1 32))))
 (=> $x32 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x39 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x27 (_ bv1 32))))
 (let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x30 (_ bv1 32))))
 (= $x32 $x25))))))
 ))
 (let (($x16 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x30 (_ bv0 32))))
 (=> $x73 $x71)))))
 ))
 (let (($x34 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x27 (_ bv0 32))))
 (let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x30 (_ bv0 32))))
 (= $x73 $x18))))))
 ))
 (let (($x23 (and $x34 $x16)))
 (let (($x65 (and $x23 $x39)))
 (let (($x11 (and $x65 $x81)))
 (let (($x162 (and $x11 $x161)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x163 (and $x63 $x162)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x9 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x35 (= symbol.1 (_ bv4291097728 32))))
 (let (($x53 (and $x35 $x9)))
 (let (($x37 (and $x53 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x164 (and $x47 $x163)))
 (let (($x167 (=> $x164 $x166)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x165 (= true false)))
 (let (($x166 (= $x165 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x154 (concat ?x151 (concat ?x147 ?x145)))))
 (let (($x156 (= ?x155 input.dst.llvm-%n)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x137 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x140 (= $x139 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x123)))
 (let ((?x121 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x121)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x114 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x115 (= (_ bv4291098127 32) ?x114)))
 (let (($x112 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x116 (and $x112 $x115)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x111 $x116)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x105 (and $x103 $x104)))
 (let (($x106 (not $x105)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x102 (and $x100 $x101)))
 (let (($x108 (and (not $x102) $x106)))
 (let (($x95 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x94 $x95)))
 (let (($x97 (not $x96)))
 (let (($x92 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x90 $x92)))
 (let (($x99 (and (not $x93) $x97)))
 (let (($x130 (and (and (and (and (and (and $x99 $x108) $x88) $x110) $x117) $x120) $x122)))
 (let (($x131 (and $x130 $x124)))
 (let (($x132 (and $x88 $x131)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x135 (= $x134 true)))
 (let (($x141 (and $x135 $x140)))
 (let (($x159 (and $x141 $x158)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x160 (and $x87 $x159)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x161 (and $x70 $x160)))
 (let (($x81 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x30 (_ bv1 32))))
 (=> $x32 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x39 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x27 (_ bv1 32))))
 (let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x30 (_ bv1 32))))
 (= $x32 $x25))))))
 ))
 (let (($x16 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x71 (= false false)))
 (let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x30 (_ bv0 32))))
 (=> $x73 $x71)))))
 ))
 (let (($x34 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x27 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x27 (_ bv0 32))))
 (let ((?x30 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x30 (_ bv0 32))))
 (= $x73 $x18))))))
 ))
 (let (($x23 (and $x34 $x16)))
 (let (($x65 (and $x23 $x39)))
 (let (($x11 (and $x65 $x81)))
 (let (($x162 (and $x11 $x161)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x163 (and $x63 $x162)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x9 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x35 (= symbol.1 (_ bv4291097728 32))))
 (let (($x53 (and $x35 $x9)))
 (let (($x37 (and $x53 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x164 (and $x47 $x163)))
 (let (($x167 (=> $x164 $x166)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x99775210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x99775213)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x99775210)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x164 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x164)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x157 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x158 (= (_ bv4291098127 32) ?x157)))
 (let (($x155 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x159 (and $x155 $x158)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x152 $x159)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x150 (and $x154 $x149)))
 (let (($x151 (not $x150)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x153 (and $x141 $x142)))
 (let (($x147 (and (not $x153) $x151)))
 (let (($x136 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x135 $x136)))
 (let (($x138 (not $x137)))
 (let (($x133 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x117 $x133)))
 (let (($x140 (and (not $x134) $x138)))
 (let (($x76 (and (and (and (and (and (and $x140 $x147) $x71) $x148) $x160) $x163) $x165)))
 (let (($x74 (and $x76 $x167)))
 (let (($x51 (and $x71 $x74)))
 (let (($x62 (= $x51 true)))
 (let (($x10 (= $x62 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x38 (concat ?x59 (concat ?x86 ?x31)))))
 (let (($x61 (= input.dst.llvm-%n ?x46)))
 (let (($x42 (and (and (and $x71 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x74) $x61)))
 (let (($x85 (= $x42 true)))
 (let (($x45 (= $x85 true)))
 (let (($x48 (= $x45 true)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x56 (and $x50 $x48)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x49 (and $x97 $x56)))
 (let (($x109 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x18 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x82 (_ bv1 32))))
 (let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x18 (_ bv1 32))))
 (= $x119 $x100))))))
 ))
 (let (($x113 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x18 (_ bv0 32))))
 (=> $x90 $x70)))))
 ))
 (let (($x12 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x82 (_ bv0 32))))
 (let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x18 (_ bv0 32))))
 (= $x90 $x73))))))
 ))
 (let (($x130 (and $x12 $x113)))
 (let (($x11 (and $x130 $x65)))
 (let (($x104 (and $x11 $x109)))
 (let (($x78 (and $x104 $x49)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x87 $x78)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x17 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x17 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x28 (and $x47 $x13)))
 (let (($x84 (=> $x28 $x10)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x164 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x164)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let ((?x157 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x158 (= (_ bv4291098127 32) ?x157)))
 (let (($x155 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x159 (and $x155 $x158)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x152 $x159)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x150 (and $x154 $x149)))
 (let (($x151 (not $x150)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x153 (and $x141 $x142)))
 (let (($x147 (and (not $x153) $x151)))
 (let (($x136 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x135 $x136)))
 (let (($x138 (not $x137)))
 (let (($x133 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x117 $x133)))
 (let (($x140 (and (not $x134) $x138)))
 (let (($x76 (and (and (and (and (and (and $x140 $x147) $x71) $x148) $x160) $x163) $x165)))
 (let (($x74 (and $x76 $x167)))
 (let (($x51 (and $x71 $x74)))
 (let (($x62 (= $x51 true)))
 (let (($x10 (= $x62 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x38 (concat ?x59 (concat ?x86 ?x31)))))
 (let (($x61 (= input.dst.llvm-%n ?x46)))
 (let (($x42 (and (and (and $x71 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x74) $x61)))
 (let (($x85 (= $x42 true)))
 (let (($x45 (= $x85 true)))
 (let (($x48 (= $x45 true)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x56 (and $x50 $x48)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x49 (and $x97 $x56)))
 (let (($x109 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x18 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x65 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x82 (_ bv1 32))))
 (let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x18 (_ bv1 32))))
 (= $x119 $x100))))))
 ))
 (let (($x113 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x18 (_ bv0 32))))
 (=> $x90 $x70)))))
 ))
 (let (($x12 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x82 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x82 (_ bv0 32))))
 (let ((?x18 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x18 (_ bv0 32))))
 (= $x90 $x73))))))
 ))
 (let (($x130 (and $x12 $x113)))
 (let (($x11 (and $x130 $x65)))
 (let (($x104 (and $x11 $x109)))
 (let (($x78 (and $x104 $x49)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x87 $x78)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x17 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x17 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x28 (and $x47 $x13)))
 (let (($x84 (=> $x28 $x10)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x89 (= $x107 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x39 (concat ?x132 (concat ?x118 ?x43)))))
 (let (($x91 (= input.dst.llvm-%n ?x79)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x6)))
 (let ((?x7 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x7)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x78 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x13 (= (_ bv4291098127 32) ?x78)))
 (let (($x56 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x28 (and $x56 $x13)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x48 $x28)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x21 (and $x31 $x55)))
 (let (($x46 (not $x21)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x86 (and $x59 $x72)))
 (let (($x42 (and (not $x86) $x46)))
 (let (($x80 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x64 $x80)))
 (let (($x38 (not $x29)))
 (let (($x167 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x76 $x167)))
 (let (($x40 (and (not $x74) $x38)))
 (let (($x32 (and (and (and (and (and (and $x40 $x42) $x163) $x45) $x51) $x84) $x19)))
 (let (($x98 (and $x32 $x102)))
 (let (($x112 (and (and (and $x163 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x98) $x91)))
 (let (($x88 (= $x112 true)))
 (let (($x114 (= $x88 true)))
 (let (($x125 (= $x114 true)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (and $x162 $x125)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x111 (and $x160 $x129)))
 (let (($x157 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x115 (_ bv1 32))))
 (=> $x154 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x150 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x115 (_ bv1 32))))
 (= $x154 $x142))))))
 ))
 (let (($x139 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x115 (_ bv0 32))))
 (=> $x75 $x123)))))
 ))
 (let (($x117 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x122 (_ bv0 32))))
 (let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x115 (_ bv0 32))))
 (= $x75 $x92))))))
 ))
 (let (($x135 (and $x117 $x139)))
 (let (($x151 (and $x135 $x150)))
 (let (($x158 (and $x151 $x157)))
 (let (($x105 (and $x158 $x111)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x99 (and $x87 $x105)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x17 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x17 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x41 (and $x47 $x99)))
 (let (($x81 (=> $x41 $x89)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x107 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x89 (= $x107 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x39 (concat ?x132 (concat ?x118 ?x43)))))
 (let (($x91 (= input.dst.llvm-%n ?x79)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x6)))
 (let ((?x7 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x7)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x78 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x13 (= (_ bv4291098127 32) ?x78)))
 (let (($x56 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x28 (and $x56 $x13)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x48 $x28)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x21 (and $x31 $x55)))
 (let (($x46 (not $x21)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x86 (and $x59 $x72)))
 (let (($x42 (and (not $x86) $x46)))
 (let (($x80 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x64 $x80)))
 (let (($x38 (not $x29)))
 (let (($x167 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x76 $x167)))
 (let (($x40 (and (not $x74) $x38)))
 (let (($x32 (and (and (and (and (and (and $x40 $x42) $x163) $x45) $x51) $x84) $x19)))
 (let (($x98 (and $x32 $x102)))
 (let (($x112 (and (and (and $x163 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x98) $x91)))
 (let (($x88 (= $x112 true)))
 (let (($x114 (= $x88 true)))
 (let (($x125 (= $x114 true)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x129 (and $x162 $x125)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x111 (and $x160 $x129)))
 (let (($x157 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x115 (_ bv1 32))))
 (=> $x154 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x150 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x115 (_ bv1 32))))
 (= $x154 $x142))))))
 ))
 (let (($x139 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x115 (_ bv0 32))))
 (=> $x75 $x123)))))
 ))
 (let (($x117 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x122 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x122 (_ bv0 32))))
 (let ((?x115 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x115 (_ bv0 32))))
 (= $x75 $x92))))))
 ))
 (let (($x135 (and $x117 $x139)))
 (let (($x151 (and $x135 $x150)))
 (let (($x158 (and $x151 $x157)))
 (let (($x105 (and $x158 $x111)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x99 (and $x87 $x105)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x17 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x17 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x41 (and $x47 $x99)))
 (let (($x81 (=> $x41 $x89)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffc4f44c)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffc4f44f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffc4f44c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x145)))
 (let (($x144 (= ?x148 input.dst.llvm-%n)))
 (let (($x106 (= $x144 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x97 (concat ?x109 (concat ?x113 ?x12)))))
 (let (($x116 (= input.dst.llvm-%n ?x103)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x54)))
 (let ((?x128 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x128)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x105 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x99 (= (_ bv4291098127 32) ?x105)))
 (let (($x129 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x41 (and $x129 $x99)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x125 $x41)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x34 (and $x43 $x27)))
 (let (($x79 (not $x34)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x118 (and $x132 $x60)))
 (let (($x112 (and (not $x118) $x79)))
 (let (($x8 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x96 $x8)))
 (let (($x39 (not $x58)))
 (let (($x102 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x32 $x102)))
 (let (($x127 (and (not $x98) $x39)))
 (let (($x95 (and (and (and (and (and (and $x127 $x112) $x84) $x114) $x107) $x121) $x30)))
 (let (($x120 (and $x95 $x77)))
 (let (($x136 (and (and (and $x84 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x120) $x116)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x140 (= $x138 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x141 (and $x10 $x140)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x153 (and $x51 $x141)))
 (let (($x78 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x164 (_ bv1 32))))
 (=> $x31 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x21 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x156 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x156 (_ bv1 32))))
 (let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x164 (_ bv1 32))))
 (= $x31 $x72))))))
 ))
 (let (($x69 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x166 (= false false)))
 (let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x164 (_ bv0 32))))
 (=> $x124 $x166)))))
 ))
 (let (($x76 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x156 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x156 (_ bv0 32))))
 (let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x164 (_ bv0 32))))
 (= $x124 $x159))))))
 ))
 (let (($x64 (and $x76 $x69)))
 (let (($x46 (and $x64 $x21)))
 (let (($x13 (and $x46 $x78)))
 (let (($x146 (and $x13 $x153)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x147 (and $x87 $x146)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x168 (and $x47 $x147)))
 (let (($x57 (=> $x168 $x106)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x145)))
 (let (($x144 (= ?x148 input.dst.llvm-%n)))
 (let (($x106 (= $x144 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x97 (concat ?x109 (concat ?x113 ?x12)))))
 (let (($x116 (= input.dst.llvm-%n ?x103)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x54)))
 (let ((?x128 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x128)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x105 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x99 (= (_ bv4291098127 32) ?x105)))
 (let (($x129 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x41 (and $x129 $x99)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x125 $x41)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x34 (and $x43 $x27)))
 (let (($x79 (not $x34)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x118 (and $x132 $x60)))
 (let (($x112 (and (not $x118) $x79)))
 (let (($x8 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x96 $x8)))
 (let (($x39 (not $x58)))
 (let (($x102 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x32 $x102)))
 (let (($x127 (and (not $x98) $x39)))
 (let (($x95 (and (and (and (and (and (and $x127 $x112) $x84) $x114) $x107) $x121) $x30)))
 (let (($x120 (and $x95 $x77)))
 (let (($x136 (and (and (and $x84 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x120) $x116)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x140 (= $x138 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x141 (and $x10 $x140)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x153 (and $x51 $x141)))
 (let (($x78 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x164 (_ bv1 32))))
 (=> $x31 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x21 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x156 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x156 (_ bv1 32))))
 (let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x164 (_ bv1 32))))
 (= $x31 $x72))))))
 ))
 (let (($x69 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x166 (= false false)))
 (let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x164 (_ bv0 32))))
 (=> $x124 $x166)))))
 ))
 (let (($x76 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x156 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x159 (= ?x156 (_ bv0 32))))
 (let ((?x164 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x164 (_ bv0 32))))
 (= $x124 $x159))))))
 ))
 (let (($x64 (and $x76 $x69)))
 (let (($x46 (and $x64 $x21)))
 (let (($x13 (and $x46 $x78)))
 (let (($x146 (and $x13 $x153)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x147 (and $x87 $x146)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x168 (and $x47 $x147)))
 (let (($x57 (=> $x168 $x106)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x42)))
 (let (($x20 (= ?x93 input.spec-%var-n-1)))
 (let (($x85 (= $x20 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x157 (concat ?x135 (concat ?x92 ?x123)))))
 (let (($x158 (= input.dst.llvm-%n ?x155)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x33)))
 (let ((?x106 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x106)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x146 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x147 (= (_ bv4291098127 32) ?x146)))
 (let (($x141 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x168 (and $x141 $x147)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x140 $x168)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x25 (and $x12 $x130)))
 (let (($x103 (not $x25)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x113 (and $x109 $x23)))
 (let (($x136 (and (not $x113) $x103)))
 (let (($x70 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x133 $x70)))
 (let (($x97 (not $x104)))
 (let (($x77 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x95 $x77)))
 (let (($x100 (and (not $x120) $x97)))
 (let (($x149 (and (and (and (and (and (and $x100 $x136) $x121) $x138) $x143) $x144) $x57)))
 (let (($x150 (and $x149 $x82)))
 (let (($x161 (and (and (and $x121 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x150) $x158)))
 (let (($x162 (= $x161 true)))
 (let (($x167 (= $x162 true)))
 (let (($x80 (= $x167 true)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x29 (and $x81 $x80)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x38 (and $x107 $x29)))
 (let (($x105 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x7 (_ bv1 32))))
 (=> $x43 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x34 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x49 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x49 (_ bv1 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x7 (_ bv1 32))))
 (= $x43 $x60))))))
 ))
 (let (($x110 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x7 (_ bv0 32))))
 (=> $x50 $x6)))))
 ))
 (let (($x32 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x49 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x49 (_ bv0 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x7 (_ bv0 32))))
 (= $x50 $x28))))))
 ))
 (let (($x96 (and $x32 $x110)))
 (let (($x79 (and $x96 $x34)))
 (let (($x99 (and $x79 $x105)))
 (let (($x40 (and $x99 $x38)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x59 (and $x87 $x40)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x86 (and $x47 $x59)))
 (let (($x45 (=> $x86 $x85)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x42)))
 (let (($x20 (= ?x93 input.spec-%var-n-1)))
 (let (($x85 (= $x20 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x157 (concat ?x135 (concat ?x92 ?x123)))))
 (let (($x158 (= input.dst.llvm-%n ?x155)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x33)))
 (let ((?x106 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x106)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x146 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x147 (= (_ bv4291098127 32) ?x146)))
 (let (($x141 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x168 (and $x141 $x147)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x140 $x168)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x25 (and $x12 $x130)))
 (let (($x103 (not $x25)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x113 (and $x109 $x23)))
 (let (($x136 (and (not $x113) $x103)))
 (let (($x70 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x133 $x70)))
 (let (($x97 (not $x104)))
 (let (($x77 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x95 $x77)))
 (let (($x100 (and (not $x120) $x97)))
 (let (($x149 (and (and (and (and (and (and $x100 $x136) $x121) $x138) $x143) $x144) $x57)))
 (let (($x150 (and $x149 $x82)))
 (let (($x161 (and (and (and $x121 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x150) $x158)))
 (let (($x162 (= $x161 true)))
 (let (($x167 (= $x162 true)))
 (let (($x80 (= $x167 true)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x29 (and $x81 $x80)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x38 (and $x107 $x29)))
 (let (($x105 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x7 (_ bv1 32))))
 (=> $x43 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x34 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x49 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x49 (_ bv1 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x7 (_ bv1 32))))
 (= $x43 $x60))))))
 ))
 (let (($x110 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x7 (_ bv0 32))))
 (=> $x50 $x6)))))
 ))
 (let (($x32 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x49 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x49 (_ bv0 32))))
 (let ((?x7 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x7 (_ bv0 32))))
 (= $x50 $x28))))))
 ))
 (let (($x96 (and $x32 $x110)))
 (let (($x79 (and $x96 $x34)))
 (let (($x99 (and $x79 $x105)))
 (let (($x40 (and $x99 $x38)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x59 (and $x87 $x40)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x86 (and $x47 $x59)))
 (let (($x45 (=> $x86 $x85)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x112 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x18 (= $x112 true)))
 (let (($x90 (= $x18 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x78 (concat ?x64 (concat ?x159 ?x166)))))
 (let (($x13 (= input.dst.llvm-%n ?x56)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x63)))
 (let ((?x85 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x85)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x40 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x59 (= (_ bv4291098127 32) ?x40)))
 (let (($x29 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x86 (and $x29 $x59)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x80 $x86)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x154 (and $x123 $x117)))
 (let (($x155 (not $x154)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x92 (and $x135 $x122)))
 (let (($x161 (and (not $x92) $x155)))
 (let (($x151 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x26 $x151)))
 (let (($x157 (not $x142)))
 (let (($x82 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x149 $x82)))
 (let (($x139 (and (not $x150) $x157)))
 (let (($x55 (and (and (and (and (and (and $x139 $x161) $x144) $x167) $x61) $x20) $x45)))
 (let (($x21 (and $x55 $x152)))
 (let (($x62 (and (and (and $x144 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x21) $x13)))
 (let (($x10 (= $x62 true)))
 (let (($x102 (= $x10 true)))
 (let (($x8 (= $x102 true)))
 (let (($x148 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x58 (and $x148 $x8)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x39 (and $x143 $x58)))
 (let (($x146 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x128 (_ bv1 32))))
 (=> $x12 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x25 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x111 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x111 (_ bv1 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x128 (_ bv1 32))))
 (= $x12 $x23))))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x128 (_ bv0 32))))
 (=> $x160 $x54)))))
 ))
 (let (($x95 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x111 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x111 (_ bv0 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x128 (_ bv0 32))))
 (= $x160 $x41))))))
 ))
 (let (($x133 (and $x95 $x119)))
 (let (($x103 (and $x133 $x25)))
 (let (($x147 (and $x103 $x146)))
 (let (($x127 (and $x147 $x39)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x132 (and $x87 $x127)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x118 (and $x47 $x132)))
 (let (($x88 (=> $x118 $x90)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x112 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x18 (= $x112 true)))
 (let (($x90 (= $x18 true)))
 (let ((?x166 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x78 (concat ?x64 (concat ?x159 ?x166)))))
 (let (($x13 (= input.dst.llvm-%n ?x56)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x63)))
 (let ((?x85 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x85)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x40 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x59 (= (_ bv4291098127 32) ?x40)))
 (let (($x29 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x86 (and $x29 $x59)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x80 $x86)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x154 (and $x123 $x117)))
 (let (($x155 (not $x154)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x92 (and $x135 $x122)))
 (let (($x161 (and (not $x92) $x155)))
 (let (($x151 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x26 $x151)))
 (let (($x157 (not $x142)))
 (let (($x82 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x149 $x82)))
 (let (($x139 (and (not $x150) $x157)))
 (let (($x55 (and (and (and (and (and (and $x139 $x161) $x144) $x167) $x61) $x20) $x45)))
 (let (($x21 (and $x55 $x152)))
 (let (($x62 (and (and (and $x144 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x21) $x13)))
 (let (($x10 (= $x62 true)))
 (let (($x102 (= $x10 true)))
 (let (($x8 (= $x102 true)))
 (let (($x148 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x58 (and $x148 $x8)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x39 (and $x143 $x58)))
 (let (($x146 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x128 (_ bv1 32))))
 (=> $x12 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x25 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x111 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x111 (_ bv1 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x128 (_ bv1 32))))
 (= $x12 $x23))))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x128 (_ bv0 32))))
 (=> $x160 $x54)))))
 ))
 (let (($x95 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x111 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x111 (_ bv0 32))))
 (let ((?x128 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x128 (_ bv0 32))))
 (= $x160 $x41))))))
 ))
 (let (($x133 (and $x95 $x119)))
 (let (($x103 (and $x133 $x25)))
 (let (($x147 (and $x103 $x146)))
 (let (($x127 (and $x147 $x39)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x132 (and $x87 $x127)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x118 (and $x47 $x132)))
 (let (($x88 (=> $x118 $x90)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x73 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x126 (= $x73 true)))
 (let (($x137 (= $x126 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x129 (concat ?x43 (concat ?x32 ?x49)))))
 (let (($x107 (= input.dst.llvm-%n ?x99)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x48)))
 (let ((?x88 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x88)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x127 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x132 (= (_ bv4291098127 32) ?x127)))
 (let (($x58 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x118 (and $x58 $x132)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x8 $x118)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x31 (and $x166 $x76)))
 (let (($x56 (not $x31)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x159 (and $x64 $x156)))
 (let (($x62 (and (not $x159) $x56)))
 (let (($x46 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x16 $x46)))
 (let (($x78 (not $x72)))
 (let (($x152 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x55 $x152)))
 (let (($x69 (and (not $x21) $x78)))
 (let (($x34 (and (and (and (and (and (and $x69 $x62) $x20) $x102) $x91) $x90) $x114)))
 (let (($x79 (and $x34 $x163)))
 (let (($x81 (and (and (and $x20 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x79) $x107)))
 (let (($x77 (= $x81 true)))
 (let (($x70 (= $x77 true)))
 (let (($x104 (= $x70 true)))
 (let (($x93 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x93 $x104)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x100 (and $x61 $x97)))
 (let (($x40 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x106 (_ bv1 32))))
 (=> $x123 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x154 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x153 (_ bv1 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x106 (_ bv1 32))))
 (= $x123 $x122))))))
 ))
 (let (($x134 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x33 (= false false)))
 (let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x106 (_ bv0 32))))
 (=> $x51 $x33)))))
 ))
 (let (($x149 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x153 (_ bv0 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x106 (_ bv0 32))))
 (= $x51 $x168))))))
 ))
 (let (($x26 (and $x149 $x134)))
 (let (($x155 (and $x26 $x154)))
 (let (($x59 (and $x155 $x40)))
 (let (($x109 (and $x59 $x100)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x113 (and $x87 $x109)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x116 (and $x47 $x113)))
 (let (($x138 (=> $x116 $x137)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x73 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x126 (= $x73 true)))
 (let (($x137 (= $x126 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x129 (concat ?x43 (concat ?x32 ?x49)))))
 (let (($x107 (= input.dst.llvm-%n ?x99)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x48)))
 (let ((?x88 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x88)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x127 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x132 (= (_ bv4291098127 32) ?x127)))
 (let (($x58 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x118 (and $x58 $x132)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x8 $x118)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x31 (and $x166 $x76)))
 (let (($x56 (not $x31)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x159 (and $x64 $x156)))
 (let (($x62 (and (not $x159) $x56)))
 (let (($x46 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x16 $x46)))
 (let (($x78 (not $x72)))
 (let (($x152 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x55 $x152)))
 (let (($x69 (and (not $x21) $x78)))
 (let (($x34 (and (and (and (and (and (and $x69 $x62) $x20) $x102) $x91) $x90) $x114)))
 (let (($x79 (and $x34 $x163)))
 (let (($x81 (and (and (and $x20 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x79) $x107)))
 (let (($x77 (= $x81 true)))
 (let (($x70 (= $x77 true)))
 (let (($x104 (= $x70 true)))
 (let (($x93 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x97 (and $x93 $x104)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x100 (and $x61 $x97)))
 (let (($x40 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x106 (_ bv1 32))))
 (=> $x123 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x154 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x153 (_ bv1 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x106 (_ bv1 32))))
 (= $x123 $x122))))))
 ))
 (let (($x134 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x33 (= false false)))
 (let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x106 (_ bv0 32))))
 (=> $x51 $x33)))))
 ))
 (let (($x149 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x153 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x153 (_ bv0 32))))
 (let ((?x106 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x106 (_ bv0 32))))
 (= $x51 $x168))))))
 ))
 (let (($x26 (and $x149 $x134)))
 (let (($x155 (and $x26 $x154)))
 (let (($x59 (and $x155 $x40)))
 (let (($x109 (and $x59 $x100)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x113 (and $x87 $x109)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x116 (and $x47 $x113)))
 (let (($x138 (=> $x116 $x137)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x161 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x71 (= $x161 true)))
 (let (($x83 (= $x71 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x141 (concat ?x12 (concat ?x95 ?x111)))))
 (let (($x143 (= input.dst.llvm-%n ?x147)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x84)))
 (let ((?x138 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x138)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x109 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x113 (= (_ bv4291098127 32) ?x109)))
 (let (($x97 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x116 (and $x97 $x113)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x104 $x116)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x60 (and $x49 $x98)))
 (let (($x99 (not $x60)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x32 (and $x43 $x28)))
 (let (($x81 (and (not $x32) $x99)))
 (let (($x125 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x89 $x125)))
 (let (($x129 (not $x105)))
 (let (($x163 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x34 $x163)))
 (let (($x96 (and (not $x79) $x129)))
 (let (($x25 (and (and (and (and (and (and $x96 $x81) $x90) $x70) $x136) $x137) $x94)))
 (let (($x103 (and $x25 $x6)))
 (let (($x148 (and (and (and $x90 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x103) $x143)))
 (let (($x82 (= $x148 true)))
 (let (($x151 (= $x82 true)))
 (let (($x142 (= $x151 true)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x157 (and $x18 $x142)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x139 (and $x91 $x157)))
 (let (($x127 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x85 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x31 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x38 (_ bv1 32))))
 (let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x85 (_ bv1 32))))
 (= $x166 $x156))))))
 ))
 (let (($x74 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x63 (= false false)))
 (let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x85 (_ bv0 32))))
 (=> $x65 $x63)))))
 ))
 (let (($x55 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x38 (_ bv0 32))))
 (let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x85 (_ bv0 32))))
 (= $x65 $x86))))))
 ))
 (let (($x16 (and $x55 $x74)))
 (let (($x56 (and $x16 $x31)))
 (let (($x132 (and $x56 $x127)))
 (let (($x135 (and $x132 $x139)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x92 (and $x87 $x135)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x158 (and $x47 $x92)))
 (let (($x162 (=> $x158 $x83)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x161 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x71 (= $x161 true)))
 (let (($x83 (= $x71 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x141 (concat ?x12 (concat ?x95 ?x111)))))
 (let (($x143 (= input.dst.llvm-%n ?x147)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x84)))
 (let ((?x138 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x138)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x109 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x113 (= (_ bv4291098127 32) ?x109)))
 (let (($x97 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x116 (and $x97 $x113)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x104 $x116)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x60 (and $x49 $x98)))
 (let (($x99 (not $x60)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x32 (and $x43 $x28)))
 (let (($x81 (and (not $x32) $x99)))
 (let (($x125 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x89 $x125)))
 (let (($x129 (not $x105)))
 (let (($x163 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x34 $x163)))
 (let (($x96 (and (not $x79) $x129)))
 (let (($x25 (and (and (and (and (and (and $x96 $x81) $x90) $x70) $x136) $x137) $x94)))
 (let (($x103 (and $x25 $x6)))
 (let (($x148 (and (and (and $x90 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x103) $x143)))
 (let (($x82 (= $x148 true)))
 (let (($x151 (= $x82 true)))
 (let (($x142 (= $x151 true)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x157 (and $x18 $x142)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x139 (and $x91 $x157)))
 (let (($x127 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x85 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x31 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x38 (_ bv1 32))))
 (let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x85 (_ bv1 32))))
 (= $x166 $x156))))))
 ))
 (let (($x74 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x63 (= false false)))
 (let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x85 (_ bv0 32))))
 (=> $x65 $x63)))))
 ))
 (let (($x55 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x38 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x38 (_ bv0 32))))
 (let ((?x85 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x85 (_ bv0 32))))
 (= $x65 $x86))))))
 ))
 (let (($x16 (and $x55 $x74)))
 (let (($x56 (and $x16 $x31)))
 (let (($x132 (and $x56 $x127)))
 (let (($x135 (and $x132 $x139)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x92 (and $x87 $x135)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x158 (and $x47 $x92)))
 (let (($x162 (=> $x158 $x83)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x289 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv1 32)))))
 (let ((?x280 (concat ?x279 (select input.dst.llvm-mem (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv2 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv3 32)))))
 (let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x39 (_ bv1 32))))
 (=> $x28 (= (_ bv0 32) (concat ?x285 (concat ?x282 ?x280)))))))))))
 ))
 (let (($x246 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x229 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x39 (_ bv1 32))))
 (= $x28 (bvuge ?x229 (_ bv1 32)))))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x48 (= false false)))
 (let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x39 (_ bv0 32))))
 (=> $x118 $x48)))))
 ))
 (let (($x232 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x39 (_ bv0 32))))
 (= $x118 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x235 (and $x232 $x234)))
 (let (($x247 (and $x235 $x246)))
 (let (($x290 (and $x247 $x289)))
 (let (($x291 (= $x290 true)))
 (let (($x292 (= $x291 true)))
 (let ((?x168 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x59 (concat ?x122 (concat ?x150 ?x168)))))
 (let (($x164 (= input.dst.llvm-%n ?x61)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x54)))
 (let ((?x167 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x167)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x135 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x92 (= (_ bv4291098127 32) ?x135)))
 (let (($x157 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x158 (and $x157 $x92)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x142 $x158)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x23 (and $x111 $x120)))
 (let (($x147 (not $x23)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x95 (and $x12 $x41)))
 (let (($x148 (and (not $x95) $x147)))
 (let (($x140 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x145 $x140)))
 (let (($x141 (not $x146)))
 (let (($x6 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x25 $x6)))
 (let (($x133 (and (not $x103) $x141)))
 (let (($x155 (and (and (and (and (and (and $x133 $x148) $x137) $x151) $x161) $x162) $x121)))
 (let (($x80 (and $x155 $x75)))
 (let (($x152 (and (and (and $x137 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x80) $x164)))
 (let (($x46 (= $x152 true)))
 (let (($x72 (= $x46 true)))
 (let (($x78 (= $x72 true)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x69 (and $x126 $x78)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x64 (and $x136 $x69)))
 (let (($x109 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x88 (_ bv1 32))))
 (=> $x49 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x39 (_ bv1 32))))
 (let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x88 (_ bv1 32))))
 (= $x49 $x28))))))
 ))
 (let (($x110 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x48 (= false false)))
 (let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x88 (_ bv0 32))))
 (=> $x115 $x48)))))
 ))
 (let (($x34 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x39 (_ bv0 32))))
 (let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x88 (_ bv0 32))))
 (= $x115 $x118))))))
 ))
 (let (($x89 (and $x34 $x110)))
 (let (($x99 (and $x89 $x60)))
 (let (($x113 (and $x99 $x109)))
 (let (($x159 (and $x113 $x64)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x87 $x159)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x62 (and $x47 $x13)))
 (let (($x293 (=> $x62 $x292)))
 (not $x293))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x289 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv1 32)))))
 (let ((?x280 (concat ?x279 (select input.dst.llvm-mem (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv2 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv3 32)))))
 (let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x39 (_ bv1 32))))
 (=> $x28 (= (_ bv0 32) (concat ?x285 (concat ?x282 ?x280)))))))))))
 ))
 (let (($x246 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x229 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x39 (_ bv1 32))))
 (= $x28 (bvuge ?x229 (_ bv1 32)))))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x48 (= false false)))
 (let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x39 (_ bv0 32))))
 (=> $x118 $x48)))))
 ))
 (let (($x232 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x39 (_ bv0 32))))
 (= $x118 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x235 (and $x232 $x234)))
 (let (($x247 (and $x235 $x246)))
 (let (($x290 (and $x247 $x289)))
 (let (($x291 (= $x290 true)))
 (let (($x292 (= $x291 true)))
 (let ((?x168 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x59 (concat ?x122 (concat ?x150 ?x168)))))
 (let (($x164 (= input.dst.llvm-%n ?x61)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x54)))
 (let ((?x167 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x167)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x135 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x92 (= (_ bv4291098127 32) ?x135)))
 (let (($x157 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x158 (and $x157 $x92)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x142 $x158)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x23 (and $x111 $x120)))
 (let (($x147 (not $x23)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x95 (and $x12 $x41)))
 (let (($x148 (and (not $x95) $x147)))
 (let (($x140 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x145 $x140)))
 (let (($x141 (not $x146)))
 (let (($x6 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x25 $x6)))
 (let (($x133 (and (not $x103) $x141)))
 (let (($x155 (and (and (and (and (and (and $x133 $x148) $x137) $x151) $x161) $x162) $x121)))
 (let (($x80 (and $x155 $x75)))
 (let (($x152 (and (and (and $x137 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x80) $x164)))
 (let (($x46 (= $x152 true)))
 (let (($x72 (= $x46 true)))
 (let (($x78 (= $x72 true)))
 (let (($x126 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x69 (and $x126 $x78)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x64 (and $x136 $x69)))
 (let (($x109 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x88 (_ bv1 32))))
 (=> $x49 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x60 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x39 (_ bv1 32))))
 (let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x88 (_ bv1 32))))
 (= $x49 $x28))))))
 ))
 (let (($x110 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x48 (= false false)))
 (let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x88 (_ bv0 32))))
 (=> $x115 $x48)))))
 ))
 (let (($x34 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x39 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x39 (_ bv0 32))))
 (let ((?x88 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x88 (_ bv0 32))))
 (= $x115 $x118))))))
 ))
 (let (($x89 (and $x34 $x110)))
 (let (($x99 (and $x89 $x60)))
 (let (($x113 (and $x99 $x109)))
 (let (($x159 (and $x113 $x64)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x13 (and $x87 $x159)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x62 (and $x47 $x13)))
 (let (($x293 (=> $x62 $x292)))
 (not $x293))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x319 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv1 32)))))
 (let ((?x309 (concat ?x308 (select input.dst.llvm-mem (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv2 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv3 32)))))
 (let (($x317 (= (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25Var) (concat ?x314 (concat ?x311 ?x309)))))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x214 (_ bv1 32))))
 (=> $x250 $x317)))))))))
 ))
 (let (($x259 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x207 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x214 (_ bv1 32))))
 (= $x250 (bvuge ?x207 (_ bv1 32)))))))
 ))
 (let (($x221 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x84 (= false false)))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x214 (_ bv0 32))))
 (=> $x216 $x84)))))
 ))
 (let (($x217 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x207 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x214 (_ bv0 32))))
 (= $x216 (= ?x207 (_ bv0 32)))))))
 ))
 (let (($x220 (and $x217 $x221)))
 (let (($x255 (and $x220 $x259)))
 (let (($x320 (and $x255 $x319)))
 (let (($x321 (= $x320 true)))
 (let (($x322 (= $x321 true)))
 (let ((?x285 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x287 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x287 (concat ?x280 (concat ?x282 ?x285)))))
 (let (($x289 (= input.dst.llvm-%n ?x288)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x232)))
 (let ((?x230 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x230)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x228)))
 (let ((?x159 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x13 (= (_ bv4291098127 32) ?x159)))
 (let (($x69 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x62 (and $x69 $x13)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x78 $x62)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x40 (and $x168 $x134)))
 (let (($x61 (not $x40)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x150 (and $x122 $x149)))
 (let (($x152 (and (not $x150) $x61)))
 (let (($x144 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x93 $x144)))
 (let (($x59 (not $x29)))
 (let (($x75 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x155 $x75)))
 (let (($x123 (and (not $x80) $x59)))
 (let (($x247 (and (and (and (and (and (and $x123 $x152) $x162) $x72) $x227) $x229) $x231)))
 (let (($x101 (and $x247 $x233)))
 (let (($x292 (and (and (and $x162 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x101) $x289)))
 (let (($x293 (= $x292 true)))
 (let (($x294 (= $x293 true)))
 (let (($x20 (= $x294 true)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x131 (and $x83 $x20)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x7 (and $x161 $x131)))
 (let (($x135 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x138 (_ bv1 32))))
 (=> $x111 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x23 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x100 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x100 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x138 (_ bv1 32))))
 (= $x111 $x41))))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x84 (= false false)))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x138 (_ bv0 32))))
 (=> $x42 $x84)))))
 ))
 (let (($x25 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x100 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x100 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x138 (_ bv0 32))))
 (= $x42 $x116))))))
 ))
 (let (($x145 (and $x25 $x119)))
 (let (($x147 (and $x145 $x23)))
 (let (($x92 (and $x147 $x135)))
 (let (($x165 (and $x92 $x7)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x68 (and $x87 $x165)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x33 (and $x47 $x68)))
 (let (($x323 (=> $x33 $x322)))
 (not $x323))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x319 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv1 32)))))
 (let ((?x309 (concat ?x308 (select input.dst.llvm-mem (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv2 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv3 32)))))
 (let (($x317 (= (input.spec-%tmpvar-10.E0%0%d.1.1 Lambda25Var) (concat ?x314 (concat ?x311 ?x309)))))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x214 (_ bv1 32))))
 (=> $x250 $x317)))))))))
 ))
 (let (($x259 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x207 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x214 (_ bv1 32))))
 (= $x250 (bvuge ?x207 (_ bv1 32)))))))
 ))
 (let (($x221 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x84 (= false false)))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x214 (_ bv0 32))))
 (=> $x216 $x84)))))
 ))
 (let (($x217 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x207 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x214 (ite (input.spec-%tmpvar-10.E0%0%d.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (= ?x214 (_ bv0 32))))
 (= $x216 (= ?x207 (_ bv0 32)))))))
 ))
 (let (($x220 (and $x217 $x221)))
 (let (($x255 (and $x220 $x259)))
 (let (($x320 (and $x255 $x319)))
 (let (($x321 (= $x320 true)))
 (let (($x322 (= $x321 true)))
 (let ((?x285 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x287 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x287 (concat ?x280 (concat ?x282 ?x285)))))
 (let (($x289 (= input.dst.llvm-%n ?x288)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x232)))
 (let ((?x230 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x230)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x228)))
 (let ((?x159 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x13 (= (_ bv4291098127 32) ?x159)))
 (let (($x69 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x62 (and $x69 $x13)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (and $x78 $x62)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x40 (and $x168 $x134)))
 (let (($x61 (not $x40)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x150 (and $x122 $x149)))
 (let (($x152 (and (not $x150) $x61)))
 (let (($x144 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x93 $x144)))
 (let (($x59 (not $x29)))
 (let (($x75 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x155 $x75)))
 (let (($x123 (and (not $x80) $x59)))
 (let (($x247 (and (and (and (and (and (and $x123 $x152) $x162) $x72) $x227) $x229) $x231)))
 (let (($x101 (and $x247 $x233)))
 (let (($x292 (and (and (and $x162 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x101) $x289)))
 (let (($x293 (= $x292 true)))
 (let (($x294 (= $x293 true)))
 (let (($x20 (= $x294 true)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x131 (and $x83 $x20)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x7 (and $x161 $x131)))
 (let (($x135 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x138 (_ bv1 32))))
 (=> $x111 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x23 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x100 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x100 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x138 (_ bv1 32))))
 (= $x111 $x41))))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x84 (= false false)))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x138 (_ bv0 32))))
 (=> $x42 $x84)))))
 ))
 (let (($x25 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x100 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x116 (= ?x100 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x138 (_ bv0 32))))
 (= $x42 $x116))))))
 ))
 (let (($x145 (and $x25 $x119)))
 (let (($x147 (and $x145 $x23)))
 (let (($x92 (and $x147 $x135)))
 (let (($x165 (and $x92 $x7)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x68 (and $x87 $x165)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x33 (and $x47 $x68)))
 (let (($x323 (=> $x33 $x322)))
 (not $x323))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun Lambda25Var!2 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda25Var!2 () (_ BitVec 32)
    #x200ec2a0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x55 (= false true)))
 (let (($x166 (= $x55 true)))
 (let ((?x316 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x306 (concat ?x308 (concat ?x310 (concat ?x304 ?x316)))))
 (let (($x309 (= input.dst.llvm-%n ?x306)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x207)))
 (let ((?x205 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x205)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x165 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x68 (= (_ bv4291098127 32) ?x165)))
 (let (($x131 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x33 (and $x131 $x68)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x20 $x33)))
 (let (($x294 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x283 (and $x285 $x278)))
 (let (($x288 (not $x283)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x282 (and $x280 $x281)))
 (let (($x292 (and (not $x282) $x288)))
 (let (($x275 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x291 $x275)))
 (let (($x287 (not $x286)))
 (let (($x233 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x247 $x233)))
 (let (($x277 (and (not $x101) $x287)))
 (let (($x250 (and (and (and (and (and (and $x277 $x292) $x229) $x294) $x213) $x206) $x204)))
 (let (($x249 (and $x250 $x210)))
 (let (($x317 (and (and (and $x229 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x249) $x309)))
 (let (($x318 (= $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x320 (= $x319 true)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x321 (and $x228 $x320)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x322 (and $x227 $x321)))
 (let (($x159 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x167 (_ bv1 32))))
 (=> $x168 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x40 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x139 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x139 (_ bv1 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x167 (_ bv1 32))))
 (= $x168 $x149))))))
 ))
 (let (($x26 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x167 (_ bv0 32))))
 (=> $x290 $x54)))))
 ))
 (let (($x155 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x139 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x139 (_ bv0 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x167 (_ bv0 32))))
 (= $x290 $x158))))))
 ))
 (let (($x93 (and $x155 $x26)))
 (let (($x61 (and $x93 $x40)))
 (let (($x13 (and $x61 $x159)))
 (let (($x323 (and $x13 $x322)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x324 (and $x87 $x323)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x90 (and $x47 $x324)))
 (let (($x21 (=> $x90 $x166)))
 (not $x21)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x55 (= false true)))
 (let (($x166 (= $x55 true)))
 (let ((?x316 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x306 (concat ?x308 (concat ?x310 (concat ?x304 ?x316)))))
 (let (($x309 (= input.dst.llvm-%n ?x306)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x207)))
 (let ((?x205 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x205)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x165 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x68 (= (_ bv4291098127 32) ?x165)))
 (let (($x131 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x33 (and $x131 $x68)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x20 $x33)))
 (let (($x294 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x283 (and $x285 $x278)))
 (let (($x288 (not $x283)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x282 (and $x280 $x281)))
 (let (($x292 (and (not $x282) $x288)))
 (let (($x275 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x291 $x275)))
 (let (($x287 (not $x286)))
 (let (($x233 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x247 $x233)))
 (let (($x277 (and (not $x101) $x287)))
 (let (($x250 (and (and (and (and (and (and $x277 $x292) $x229) $x294) $x213) $x206) $x204)))
 (let (($x249 (and $x250 $x210)))
 (let (($x317 (and (and (and $x229 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x249) $x309)))
 (let (($x318 (= $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x320 (= $x319 true)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x321 (and $x228 $x320)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x322 (and $x227 $x321)))
 (let (($x159 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x167 (_ bv1 32))))
 (=> $x168 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x40 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x139 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x139 (_ bv1 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x167 (_ bv1 32))))
 (= $x168 $x149))))))
 ))
 (let (($x26 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x54 (= false false)))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x167 (_ bv0 32))))
 (=> $x290 $x54)))))
 ))
 (let (($x155 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x139 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x139 (_ bv0 32))))
 (let ((?x167 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x167 (_ bv0 32))))
 (= $x290 $x158))))))
 ))
 (let (($x93 (and $x155 $x26)))
 (let (($x61 (and $x93 $x40)))
 (let (($x13 (and $x61 $x159)))
 (let (($x323 (and $x13 $x322)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x324 (and $x87 $x323)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x53 (= symbol.1 (_ bv4291097728 32))))
 (let (($x35 (and $x53 $x44)))
 (let (($x37 (and $x35 $x52)))
 (let (($x47 (and $x37 $x14)))
 (let (($x90 (and $x47 $x324)))
 (let (($x21 (=> $x90 $x166)))
 (not $x21)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x99775210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x99775213)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x99775210)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x353 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x385 (= $x353 false)))
 (let (($x386 (= $x385 true)))
 (let ((?x220 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x220)))
 (let (($x376 (= ?x205 input.dst.llvm-%n)))
 (let (($x377 (= $x376 true)))
 (let (($x378 (= $x377 true)))
 (let (($x372 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x373 (= $x372 true)))
 (let (($x374 (= $x373 true)))
 (let ((?x354 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x355 (bvadd (_ bv4291097728 32) ?x354)))
 (let (($x364 (and (bvule input.memlabel-mem--symbol.1_begin ?x355) (bvule (bvadd ?x355 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x368 (=> (bvule ?x355 (bvsub (bvadd ?x355 (_ bv4 32)) (_ bv1 32))) (or false (or false $x364)))))
 (let (($x357 (=> (and $x353 (bvule ?x355 (bvsub (bvadd ?x355 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x364)))))
 (let (($x358 (= $x357 true)))
 (let (($x369 (= $x358 true)))
 (let (($x370 (= $x369 true)))
 (let (($x348 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x349 (= $x348 true)))
 (let (($x350 (= $x349 true)))
 (let (($x351 (= $x350 true)))
 (let (($x343 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x344 (= $x343 true)))
 (let (($x345 (= $x344 true)))
 (let (($x346 (= $x345 true)))
 (let (($x338 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x339 (= $x338 true)))
 (let (($x340 (= $x339 true)))
 (let (($x341 (= $x340 true)))
 (let (($x333 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x334 (= $x333 true)))
 (let (($x335 (= $x334 true)))
 (let (($x336 (= $x335 true)))
 (let (($x326 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x269 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x269))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv2 32))) ?x297)))
 (let ((?x301 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv3 32))) ?x272)))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x169 (_ bv1 32))))
 (=> $x198 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x301)))))))))
 ))
 (let (($x199 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x173 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x169 (_ bv1 32))))
 (= $x198 (bvuge ?x173 (_ bv1 32))))))))
 ))
 (let (($x182 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x232 (= false false)))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x169 (_ bv0 32))))
 (=> $x175 $x232)))))
 ))
 (let (($x178 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x173 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x169 (_ bv0 32))))
 (= $x175 (= ?x173 (_ bv0 32))))))))
 ))
 (let (($x187 (and $x178 $x182)))
 (let (($x200 (and $x187 $x199)))
 (let (($x327 (and $x200 $x326)))
 (let (($x328 (= $x327 true)))
 (let (($x329 (= $x328 true)))
 (let (($x330 (= $x329 true)))
 (let (($x234 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x235 (= $x234 true)))
 (let (($x46 (= $x235 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x92)))
 (let ((?x135 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x135)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x116 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x25 (= (_ bv4291098127 32) ?x116)))
 (let (($x84 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x103 (and $x84 $x25)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x137 $x103)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x138 (and $x130 $x114)))
 (let (($x42 (not $x138)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x255 (and $x58 $x259)))
 (let (($x23 (and (not $x255) $x42)))
 (let (($x324 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x323 $x324)))
 (let (($x55 (not $x90)))
 (let (($x321 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x319 $x321)))
 (let (($x21 (and (not $x322) $x55)))
 (let (($x29 (and (and (and (and (and (and $x21 $x23) $x317) $x142) $x119) $x41) $x157)))
 (let (($x59 (and $x29 $x161)))
 (let (($x123 (and $x317 $x59)))
 (let (($x122 (= $x123 true)))
 (let (($x150 (= $x122 true)))
 (let (($x164 (= $x150 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x305 (= $x316 true)))
 (let (($x311 (= $x305 true)))
 (let (($x306 (= $x311 true)))
 (let (($x313 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x314 (= $x313 true)))
 (let (($x310 (= $x314 true)))
 (let (($x127 (= $x310 true)))
 (let (($x249 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x315 (= $x249 true)))
 (let (($x258 (= $x315 true)))
 (let (($x307 (= $x258 true)))
 (let (($x204 (= ?x205 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x250 (= $x204 true)))
 (let (($x207 (= $x250 true)))
 (let (($x308 (and $x207 $x307)))
 (let (($x304 (and $x308 $x127)))
 (let (($x309 (and $x304 $x306)))
 (let (($x152 (and $x309 $x164)))
 (let (($x72 (and $x152 $x46)))
 (let (($x331 (and $x72 $x330)))
 (let (($x337 (and $x331 $x336)))
 (let (($x342 (and $x337 $x341)))
 (let (($x347 (and $x342 $x346)))
 (let (($x352 (and $x347 $x351)))
 (let (($x371 (and $x352 $x370)))
 (let (($x375 (and $x371 $x374)))
 (let (($x379 (and $x375 $x378)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x380 (and $x216 $x379)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x381 (and $x213 $x380)))
 (let (($x165 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x230 (_ bv1 32))))
 (=> $x285 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x283 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x64 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x64 (_ bv1 32))))
 (let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x230 (_ bv1 32))))
 (= $x285 $x281))))))
 ))
 (let (($x279 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x232 (= false false)))
 (let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x230 (_ bv0 32))))
 (=> $x312 $x232)))))
 ))
 (let (($x247 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x64 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x64 (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x230 (_ bv0 32))))
 (= $x312 $x62))))))
 ))
 (let (($x291 (and $x247 $x279)))
 (let (($x288 (and $x291 $x283)))
 (let (($x68 (and $x288 $x165)))
 (let (($x382 (and $x68 $x381)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x383 (and $x87 $x382)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x24 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x52 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x44 (= symbol.1 (_ bv4291097728 32))))
 (let (($x17 (and $x44 $x52)))
 (let (($x9 (and $x17 $x24)))
 (let (($x47 (and $x9 $x14)))
 (let (($x384 (and $x47 $x383)))
 (let (($x387 (=> $x384 $x386)))
 (not $x387)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x353 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x385 (= $x353 false)))
 (let (($x386 (= $x385 true)))
 (let ((?x220 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x220)))
 (let (($x376 (= ?x205 input.dst.llvm-%n)))
 (let (($x377 (= $x376 true)))
 (let (($x378 (= $x377 true)))
 (let (($x372 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x373 (= $x372 true)))
 (let (($x374 (= $x373 true)))
 (let ((?x354 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x355 (bvadd (_ bv4291097728 32) ?x354)))
 (let (($x364 (and (bvule input.memlabel-mem--symbol.1_begin ?x355) (bvule (bvadd ?x355 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x368 (=> (bvule ?x355 (bvsub (bvadd ?x355 (_ bv4 32)) (_ bv1 32))) (or false (or false $x364)))))
 (let (($x357 (=> (and $x353 (bvule ?x355 (bvsub (bvadd ?x355 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x364)))))
 (let (($x358 (= $x357 true)))
 (let (($x369 (= $x358 true)))
 (let (($x370 (= $x369 true)))
 (let (($x348 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x349 (= $x348 true)))
 (let (($x350 (= $x349 true)))
 (let (($x351 (= $x350 true)))
 (let (($x343 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x344 (= $x343 true)))
 (let (($x345 (= $x344 true)))
 (let (($x346 (= $x345 true)))
 (let (($x338 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x339 (= $x338 true)))
 (let (($x340 (= $x339 true)))
 (let (($x341 (= $x340 true)))
 (let (($x333 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x334 (= $x333 true)))
 (let (($x335 (= $x334 true)))
 (let (($x336 (= $x335 true)))
 (let (($x326 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x269 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x269))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv2 32))) ?x297)))
 (let ((?x301 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x269 (_ bv3 32))) ?x272)))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x169 (_ bv1 32))))
 (=> $x198 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x301)))))))))
 ))
 (let (($x199 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x173 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (bvuge ?x169 (_ bv1 32))))
 (= $x198 (bvuge ?x173 (_ bv1 32))))))))
 ))
 (let (($x182 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x232 (= false false)))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x169 (_ bv0 32))))
 (=> $x175 $x232)))))
 ))
 (let (($x178 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x173 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let ((?x169 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x169 (_ bv0 32))))
 (= $x175 (= ?x173 (_ bv0 32))))))))
 ))
 (let (($x187 (and $x178 $x182)))
 (let (($x200 (and $x187 $x199)))
 (let (($x327 (and $x200 $x326)))
 (let (($x328 (= $x327 true)))
 (let (($x329 (= $x328 true)))
 (let (($x330 (= $x329 true)))
 (let (($x234 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x235 (= $x234 true)))
 (let (($x46 (= $x235 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x92)))
 (let ((?x135 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x135)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x116 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x25 (= (_ bv4291098127 32) ?x116)))
 (let (($x84 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x103 (and $x84 $x25)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x137 $x103)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x138 (and $x130 $x114)))
 (let (($x42 (not $x138)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x255 (and $x58 $x259)))
 (let (($x23 (and (not $x255) $x42)))
 (let (($x324 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x323 $x324)))
 (let (($x55 (not $x90)))
 (let (($x321 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x319 $x321)))
 (let (($x21 (and (not $x322) $x55)))
 (let (($x29 (and (and (and (and (and (and $x21 $x23) $x317) $x142) $x119) $x41) $x157)))
 (let (($x59 (and $x29 $x161)))
 (let (($x123 (and $x317 $x59)))
 (let (($x122 (= $x123 true)))
 (let (($x150 (= $x122 true)))
 (let (($x164 (= $x150 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x305 (= $x316 true)))
 (let (($x311 (= $x305 true)))
 (let (($x306 (= $x311 true)))
 (let (($x313 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x314 (= $x313 true)))
 (let (($x310 (= $x314 true)))
 (let (($x127 (= $x310 true)))
 (let (($x249 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x315 (= $x249 true)))
 (let (($x258 (= $x315 true)))
 (let (($x307 (= $x258 true)))
 (let (($x204 (= ?x205 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x250 (= $x204 true)))
 (let (($x207 (= $x250 true)))
 (let (($x308 (and $x207 $x307)))
 (let (($x304 (and $x308 $x127)))
 (let (($x309 (and $x304 $x306)))
 (let (($x152 (and $x309 $x164)))
 (let (($x72 (and $x152 $x46)))
 (let (($x331 (and $x72 $x330)))
 (let (($x337 (and $x331 $x336)))
 (let (($x342 (and $x337 $x341)))
 (let (($x347 (and $x342 $x346)))
 (let (($x352 (and $x347 $x351)))
 (let (($x371 (and $x352 $x370)))
 (let (($x375 (and $x371 $x374)))
 (let (($x379 (and $x375 $x378)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x380 (and $x216 $x379)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x381 (and $x213 $x380)))
 (let (($x165 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x230 (_ bv1 32))))
 (=> $x285 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x283 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x64 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x64 (_ bv1 32))))
 (let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x230 (_ bv1 32))))
 (= $x285 $x281))))))
 ))
 (let (($x279 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x232 (= false false)))
 (let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x230 (_ bv0 32))))
 (=> $x312 $x232)))))
 ))
 (let (($x247 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x64 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x64 (_ bv0 32))))
 (let ((?x230 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x230 (_ bv0 32))))
 (= $x312 $x62))))))
 ))
 (let (($x291 (and $x247 $x279)))
 (let (($x288 (and $x291 $x283)))
 (let (($x68 (and $x288 $x165)))
 (let (($x382 (and $x68 $x381)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x383 (and $x87 $x382)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x24 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x52 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x44 (= symbol.1 (_ bv4291097728 32))))
 (let (($x17 (and $x44 $x52)))
 (let (($x9 (and $x17 $x24)))
 (let (($x47 (and $x9 $x14)))
 (let (($x384 (and $x47 $x383)))
 (let (($x387 (=> $x384 $x386)))
 (not $x387)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xffc4f480 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2e4a0814)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2e4a0817)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2e4a0814)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #xffc4f480 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x87 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (not $x87)))
 (let (($x260 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x268 (not $x260)))
 (let (($x254 (or $x268 $x264)))
 (let (($x270 (= $x254 true)))
 (let (($x261 (= $x270 true)))
 (let ((?x218 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x236 (bvneg ?x218)))
 (let (($x209 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x237 (= $x209 true)))
 (let (($x240 (= $x237 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x195)))
 (let (($x241 (= ?x192 input.dst.llvm-%n)))
 (let (($x242 (= $x241 true)))
 (let (($x238 (= $x242 true)))
 (let (($x201 (= ?x192 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x211 (= $x201 true)))
 (let (($x212 (= $x211 true)))
 (let (($x185 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x193 (= $x185 true)))
 (let (($x183 (= $x193 true)))
 (let (($x191 (= $x183 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x170 true)))
 (let (($x177 (= $x176 true)))
 (let (($x10 (= $x177 true)))
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x19 (= $x11 true)))
 (let (($x77 (= $x19 true)))
 (let (($x174 (= $x77 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x256 (= $x252 true)))
 (let (($x32 (= $x256 true)))
 (let (($x81 (= $x32 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x76 true)))
 (let (($x86 (= $x108 true)))
 (let (($x224 (= $x86 true)))
 (let (($x222 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x151 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x129)))
 (let ((?x18 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x50)))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x227 (_ bv1 32))))
 (=> $x124 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x18)))))))))
 ))
 (let (($x85 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x159 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x227 (_ bv1 32))))
 (= $x124 (bvuge ?x159 (_ bv1 32))))))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x322 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x227 (_ bv0 32))))
 (=> $x245 $x322)))))
 ))
 (let (($x228 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x159 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x227 (_ bv0 32))))
 (= $x245 (= ?x159 (_ bv0 32))))))))
 ))
 (let (($x287 (and $x228 $x286)))
 (let (($x45 (and $x287 $x85)))
 (let (($x223 (and $x45 $x222)))
 (let (($x63 (= $x223 true)))
 (let (($x38 (= $x63 true)))
 (let (($x31 (= $x38 true)))
 (let (($x326 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x329 (= $x328 true)))
 (let (($x299 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x297 (= $x299 true)))
 (let (($x272 (= $x297 true)))
 (let (($x301 (= $x272 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x302 (= (_ bv0 32) ?x200)))
 (let ((?x197 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x197)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x178 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x180 (= (_ bv4291098127 32) ?x178)))
 (let (($x171 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x182 (and $x171 $x180)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x173 $x182)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x169 (and $x72 $x181)))
 (let (($x175 (not $x169)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x46 (and $x234 $x235)))
 (let (($x156 (and (not $x46) $x175)))
 (let (($x123 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x59 $x123)))
 (let (($x150 (not $x122)))
 (let (($x92 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x157 $x92)))
 (let (($x152 (and (not $x161) $x150)))
 (let (($x298 (and (and (and (and (and (and $x152 $x156) $x144) $x66) $x187) $x196) $x199)))
 (let (($x160 (and $x298 $x302)))
 (let (($x273 (and $x144 $x160)))
 (let (($x274 (= $x273 true)))
 (let (($x300 (= $x274 true)))
 (let (($x296 (= $x300 true)))
 (let (($x303 (and $x296 $x301)))
 (let (($x330 (and $x303 $x329)))
 (let (($x8 (and $x330 $x31)))
 (let (($x225 (and $x8 $x224)))
 (let (($x107 (and $x225 $x81)))
 (let (($x70 (and $x107 $x174)))
 (let (($x179 (and $x70 $x10)))
 (let (($x186 (and $x179 $x191)))
 (let (($x208 (and $x186 $x212)))
 (let (($x239 (and $x208 $x238)))
 (let (($x243 (and $x239 $x240)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x248 (and $x41 $x243)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x253 (and $x75 $x248)))
 (let (($x25 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x318 (_ bv1 32))))
 (=> $x138 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x23 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x313 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x313 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x318 (_ bv1 32))))
 (= $x138 $x120))))))
 ))
 (let (($x324 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x322 (= false false)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x318 (_ bv0 32))))
 (=> $x319 $x322)))))
 ))
 (let (($x321 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x313 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (= ?x313 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x318 (_ bv0 32))))
 (= $x319 $x127))))))
 ))
 (let (($x90 (and $x321 $x324)))
 (let (($x117 (and $x90 $x23)))
 (let (($x103 (and $x117 $x25)))
 (let (($x251 (and $x103 $x253)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x257 (and $x131 $x251)))
 (let ((?x121 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvadd (_ bv4291097728 32) ?x121)))
 (let (($x281 (and (bvule input.memlabel-mem--symbol.1_begin ?x230) (bvule (bvadd ?x230 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x20 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false $x281)))))
 (let (($x64 (=> (and $x87 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x281)))))
 (let (($x262 (and $x64 $x257)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x17 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x36 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x9 (= symbol.1 (_ bv4291097728 32))))
 (let (($x44 (and $x9 $x36)))
 (let (($x37 (and $x44 $x17)))
 (let (($x47 (and $x37 $x14)))
 (let (($x271 (and $x47 $x262)))
 (let (($x267 (=> $x271 $x261)))
 (not $x267))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x87 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (not $x87)))
 (let (($x260 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x268 (not $x260)))
 (let (($x254 (or $x268 $x264)))
 (let (($x270 (= $x254 true)))
 (let (($x261 (= $x270 true)))
 (let ((?x218 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x236 (bvneg ?x218)))
 (let (($x209 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x237 (= $x209 true)))
 (let (($x240 (= $x237 true)))
 (let ((?x195 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x195)))
 (let (($x241 (= ?x192 input.dst.llvm-%n)))
 (let (($x242 (= $x241 true)))
 (let (($x238 (= $x242 true)))
 (let (($x201 (= ?x192 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x211 (= $x201 true)))
 (let (($x212 (= $x211 true)))
 (let (($x185 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x193 (= $x185 true)))
 (let (($x183 (= $x193 true)))
 (let (($x191 (= $x183 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x170 true)))
 (let (($x177 (= $x176 true)))
 (let (($x10 (= $x177 true)))
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x19 (= $x11 true)))
 (let (($x77 (= $x19 true)))
 (let (($x174 (= $x77 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x256 (= $x252 true)))
 (let (($x32 (= $x256 true)))
 (let (($x81 (= $x32 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x76 true)))
 (let (($x86 (= $x108 true)))
 (let (($x224 (= $x86 true)))
 (let (($x222 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x151 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x129)))
 (let ((?x18 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x50)))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x227 (_ bv1 32))))
 (=> $x124 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x18)))))))))
 ))
 (let (($x85 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x159 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x227 (_ bv1 32))))
 (= $x124 (bvuge ?x159 (_ bv1 32))))))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x322 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x227 (_ bv0 32))))
 (=> $x245 $x322)))))
 ))
 (let (($x228 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x159 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x227 (_ bv0 32))))
 (= $x245 (= ?x159 (_ bv0 32))))))))
 ))
 (let (($x287 (and $x228 $x286)))
 (let (($x45 (and $x287 $x85)))
 (let (($x223 (and $x45 $x222)))
 (let (($x63 (= $x223 true)))
 (let (($x38 (= $x63 true)))
 (let (($x31 (= $x38 true)))
 (let (($x326 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x329 (= $x328 true)))
 (let (($x299 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x297 (= $x299 true)))
 (let (($x272 (= $x297 true)))
 (let (($x301 (= $x272 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x302 (= (_ bv0 32) ?x200)))
 (let ((?x197 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x197)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x178 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x180 (= (_ bv4291098127 32) ?x178)))
 (let (($x171 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x182 (and $x171 $x180)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x173 $x182)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x169 (and $x72 $x181)))
 (let (($x175 (not $x169)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x46 (and $x234 $x235)))
 (let (($x156 (and (not $x46) $x175)))
 (let (($x123 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x59 $x123)))
 (let (($x150 (not $x122)))
 (let (($x92 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x157 $x92)))
 (let (($x152 (and (not $x161) $x150)))
 (let (($x298 (and (and (and (and (and (and $x152 $x156) $x144) $x66) $x187) $x196) $x199)))
 (let (($x160 (and $x298 $x302)))
 (let (($x273 (and $x144 $x160)))
 (let (($x274 (= $x273 true)))
 (let (($x300 (= $x274 true)))
 (let (($x296 (= $x300 true)))
 (let (($x303 (and $x296 $x301)))
 (let (($x330 (and $x303 $x329)))
 (let (($x8 (and $x330 $x31)))
 (let (($x225 (and $x8 $x224)))
 (let (($x107 (and $x225 $x81)))
 (let (($x70 (and $x107 $x174)))
 (let (($x179 (and $x70 $x10)))
 (let (($x186 (and $x179 $x191)))
 (let (($x208 (and $x186 $x212)))
 (let (($x239 (and $x208 $x238)))
 (let (($x243 (and $x239 $x240)))
 (let (($x41 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x248 (and $x41 $x243)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x253 (and $x75 $x248)))
 (let (($x25 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x318 (_ bv1 32))))
 (=> $x138 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x23 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x313 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x313 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x318 (_ bv1 32))))
 (= $x138 $x120))))))
 ))
 (let (($x324 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x322 (= false false)))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x318 (_ bv0 32))))
 (=> $x319 $x322)))))
 ))
 (let (($x321 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x313 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x127 (= ?x313 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x319 (= ?x318 (_ bv0 32))))
 (= $x319 $x127))))))
 ))
 (let (($x90 (and $x321 $x324)))
 (let (($x117 (and $x90 $x23)))
 (let (($x103 (and $x117 $x25)))
 (let (($x251 (and $x103 $x253)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x257 (and $x131 $x251)))
 (let ((?x121 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvadd (_ bv4291097728 32) ?x121)))
 (let (($x281 (and (bvule input.memlabel-mem--symbol.1_begin ?x230) (bvule (bvadd ?x230 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x20 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false $x281)))))
 (let (($x64 (=> (and $x87 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x281)))))
 (let (($x262 (and $x64 $x257)))
 (let (($x14 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x17 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x36 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x9 (= symbol.1 (_ bv4291097728 32))))
 (let (($x44 (and $x9 $x36)))
 (let (($x37 (and $x44 $x17)))
 (let (($x47 (and $x37 $x14)))
 (let (($x271 (and $x47 $x262)))
 (let (($x267 (=> $x271 $x261)))
 (not $x267))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x418 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x415 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x416 (bvmul (_ bv4294967295 32) ?x415)))
 (let ((?x417 (bvneg ?x416)))
 (let (($x419 (= ?x417 ?x418)))
 (let (($x420 (= $x419 true)))
 (let ((?x401 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x402 (bvneg ?x401)))
 (let (($x403 (= ?x402 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x404 (= $x403 true)))
 (let (($x405 (= $x404 true)))
 (let (($x396 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x397 (= $x396 true)))
 (let (($x398 (= $x397 true)))
 (let (($x399 (= $x398 true)))
 (let ((?x246 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvadd (_ bv4291097728 32) ?x246)))
 (let ((?x133 (bvsub ?x121 ?x246)))
 (let (($x96 (ite (bvsge ?x246 (_ bv0 32)) (bvuge ?x121 ?x133) (bvult ?x121 ?x133))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvmul (_ bv4 64) ?x106)))
 (let ((?x143 ((_ extract 63 32) ?x12)))
 (let (($x141 (= (_ bv0 32) ?x143)))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x263 (and (and (and true $x136) $x141) $x96)))
 (let (($x203 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x389 (and $x203 $x263)))
 (let (($x390 (= true $x389)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x391 (=> $x67 $x390)))
 (let (($x392 (= $x391 true)))
 (let (($x393 (= $x392 true)))
 (let (($x394 (= $x393 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x126 (= $x73 true)))
 (let (($x202 (= $x126 true)))
 (let (($x140 (= $x202 true)))
 (let (($x39 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x28 (= $x39 true)))
 (let (($x98 (= $x28 true)))
 (let (($x60 (= $x98 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x293 (= $x215 true)))
 (let (($x294 (= $x293 true)))
 (let (($x219 (= $x294 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x80 true)))
 (let (($x233 (= $x26 true)))
 (let (($x292 (= $x233 true)))
 (let (($x110 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x244 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x79)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x94)))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x137 (_ bv1 32))))
 (=> $x361 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x134)))))))))
 ))
 (let (($x355 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x71 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x137 (_ bv1 32))))
 (= $x361 (bvuge ?x147 (_ bv1 32))))))))
 ))
 (let (($x336 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x137 (_ bv0 32))))
 (=> $x346 $x123)))))
 ))
 (let (($x352 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x71 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x137 (_ bv0 32))))
 (= $x346 (= ?x147 (_ bv0 32))))))))
 ))
 (let (($x337 (and $x352 $x336)))
 (let (($x353 (and $x337 $x355)))
 (let (($x162 (and $x353 $x110)))
 (let (($x139 (= $x162 true)))
 (let (($x54 (= $x139 true)))
 (let (($x158 (= $x54 true)))
 (let (($x11 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x19 (= $x11 true)))
 (let (($x77 (= $x19 true)))
 (let (($x174 (= $x77 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x256 (= $x252 true)))
 (let (($x32 (= $x256 true)))
 (let (($x81 (= $x32 true)))
 (let (($x108 (= $x67 true)))
 (let (($x86 (= $x108 true)))
 (let (($x224 (= $x86 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x74)))
 (let ((?x43 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x43)))
 (let ((?x360 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x360)))
 (let ((?x132 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x151 (= (_ bv4291098127 32) ?x132)))
 (let (($x105 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x91 (and $x105 $x151)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x45 $x91)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x286 (and $x228 $x275)))
 (let (($x287 (not $x286)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x226 (and $x159 $x69)))
 (let (($x27 (and (not $x226) $x287)))
 (let (($x227 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x13 $x227)))
 (let (($x168 (not $x245)))
 (let (($x329 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (and $x327 $x329)))
 (let (($x149 (and (not $x330) $x168)))
 (let (($x222 (and (and (and (and (and (and $x149 $x27) $x325) $x85) $x112) $x125) $x82)))
 (let (($x223 (and $x222 $x51)))
 (let (($x63 (and $x325 $x223)))
 (let (($x38 (= $x63 true)))
 (let (($x31 (= $x38 true)))
 (let (($x8 (= $x31 true)))
 (let ((?x273 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x273)))
 (let (($x297 (= ?x274 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (= $x297 true)))
 (let (($x301 (= $x272 true)))
 (let (($x300 (= ?x274 input.dst.llvm-%n)))
 (let (($x296 (= $x300 true)))
 (let (($x299 (= $x296 true)))
 (let (($x303 (and $x299 $x301)))
 (let (($x76 (and $x303 $x8)))
 (let (($x225 (and $x76 $x224)))
 (let (($x107 (and $x225 $x81)))
 (let (($x70 (and $x107 $x174)))
 (let (($x155 (and $x70 $x158)))
 (let (($x217 (and $x155 $x292)))
 (let (($x48 (and $x217 $x219)))
 (let (($x188 (and $x48 $x60)))
 (let (($x190 (and $x188 $x140)))
 (let (($x395 (and $x190 $x394)))
 (let (($x400 (and $x395 $x399)))
 (let (($x406 (and $x400 $x405)))
 (let (($x302 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x408 (and (not $x302) $x406)))
 (let (($x298 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x409 (and $x298 $x408)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x410 (and $x295 $x409)))
 (let (($x269 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x92 (_ bv1 32))))
 (=> $x34 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x25 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x25 (_ bv1 32))))
 (let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x92 (_ bv1 32))))
 (= $x34 $x169))))))
 ))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x92 (_ bv0 32))))
 (=> $x161 $x123)))))
 ))
 (let (($x59 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x25 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x25 (_ bv0 32))))
 (let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x92 (_ bv0 32))))
 (= $x161 $x75))))))
 ))
 (let (($x234 (and $x59 $x152)))
 (let (($x102 (and $x234 $x89)))
 (let (($x198 (and $x102 $x269)))
 (let (($x411 (and $x198 $x410)))
 (let (($x306 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x412 (and $x306 $x411)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x121) (bvule (bvadd ?x121 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x231 (=> (and $x67 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x413 (and $x231 $x412)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x414 (and $x14 $x413)))
 (let (($x421 (=> $x414 $x420)))
 (not $x421))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x418 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x415 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x416 (bvmul (_ bv4294967295 32) ?x415)))
 (let ((?x417 (bvneg ?x416)))
 (let (($x419 (= ?x417 ?x418)))
 (let (($x420 (= $x419 true)))
 (let ((?x401 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x402 (bvneg ?x401)))
 (let (($x403 (= ?x402 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x404 (= $x403 true)))
 (let (($x405 (= $x404 true)))
 (let (($x396 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x397 (= $x396 true)))
 (let (($x398 (= $x397 true)))
 (let (($x399 (= $x398 true)))
 (let ((?x246 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvadd (_ bv4291097728 32) ?x246)))
 (let ((?x133 (bvsub ?x121 ?x246)))
 (let (($x96 (ite (bvsge ?x246 (_ bv0 32)) (bvuge ?x121 ?x133) (bvult ?x121 ?x133))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvmul (_ bv4 64) ?x106)))
 (let ((?x143 ((_ extract 63 32) ?x12)))
 (let (($x141 (= (_ bv0 32) ?x143)))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x263 (and (and (and true $x136) $x141) $x96)))
 (let (($x203 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x389 (and $x203 $x263)))
 (let (($x390 (= true $x389)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x391 (=> $x67 $x390)))
 (let (($x392 (= $x391 true)))
 (let (($x393 (= $x392 true)))
 (let (($x394 (= $x393 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x126 (= $x73 true)))
 (let (($x202 (= $x126 true)))
 (let (($x140 (= $x202 true)))
 (let (($x39 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x28 (= $x39 true)))
 (let (($x98 (= $x28 true)))
 (let (($x60 (= $x98 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x293 (= $x215 true)))
 (let (($x294 (= $x293 true)))
 (let (($x219 (= $x294 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (= $x80 true)))
 (let (($x233 (= $x26 true)))
 (let (($x292 (= $x233 true)))
 (let (($x110 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x244 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x79)))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x94)))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x137 (_ bv1 32))))
 (=> $x361 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x134)))))))))
 ))
 (let (($x355 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x71 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x137 (_ bv1 32))))
 (= $x361 (bvuge ?x147 (_ bv1 32))))))))
 ))
 (let (($x336 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x137 (_ bv0 32))))
 (=> $x346 $x123)))))
 ))
 (let (($x352 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x71 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x147 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let ((?x137 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x137 (_ bv0 32))))
 (= $x346 (= ?x147 (_ bv0 32))))))))
 ))
 (let (($x337 (and $x352 $x336)))
 (let (($x353 (and $x337 $x355)))
 (let (($x162 (and $x353 $x110)))
 (let (($x139 (= $x162 true)))
 (let (($x54 (= $x139 true)))
 (let (($x158 (= $x54 true)))
 (let (($x11 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x19 (= $x11 true)))
 (let (($x77 (= $x19 true)))
 (let (($x174 (= $x77 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x256 (= $x252 true)))
 (let (($x32 (= $x256 true)))
 (let (($x81 (= $x32 true)))
 (let (($x108 (= $x67 true)))
 (let (($x86 (= $x108 true)))
 (let (($x224 (= $x86 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x74)))
 (let ((?x43 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x43)))
 (let ((?x360 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x360)))
 (let ((?x132 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x151 (= (_ bv4291098127 32) ?x132)))
 (let (($x105 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x91 (and $x105 $x151)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x45 $x91)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x286 (and $x228 $x275)))
 (let (($x287 (not $x286)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x226 (and $x159 $x69)))
 (let (($x27 (and (not $x226) $x287)))
 (let (($x227 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x13 $x227)))
 (let (($x168 (not $x245)))
 (let (($x329 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (and $x327 $x329)))
 (let (($x149 (and (not $x330) $x168)))
 (let (($x222 (and (and (and (and (and (and $x149 $x27) $x325) $x85) $x112) $x125) $x82)))
 (let (($x223 (and $x222 $x51)))
 (let (($x63 (and $x325 $x223)))
 (let (($x38 (= $x63 true)))
 (let (($x31 (= $x38 true)))
 (let (($x8 (= $x31 true)))
 (let ((?x273 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x273)))
 (let (($x297 (= ?x274 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x272 (= $x297 true)))
 (let (($x301 (= $x272 true)))
 (let (($x300 (= ?x274 input.dst.llvm-%n)))
 (let (($x296 (= $x300 true)))
 (let (($x299 (= $x296 true)))
 (let (($x303 (and $x299 $x301)))
 (let (($x76 (and $x303 $x8)))
 (let (($x225 (and $x76 $x224)))
 (let (($x107 (and $x225 $x81)))
 (let (($x70 (and $x107 $x174)))
 (let (($x155 (and $x70 $x158)))
 (let (($x217 (and $x155 $x292)))
 (let (($x48 (and $x217 $x219)))
 (let (($x188 (and $x48 $x60)))
 (let (($x190 (and $x188 $x140)))
 (let (($x395 (and $x190 $x394)))
 (let (($x400 (and $x395 $x399)))
 (let (($x406 (and $x400 $x405)))
 (let (($x302 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x408 (and (not $x302) $x406)))
 (let (($x298 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x409 (and $x298 $x408)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x410 (and $x295 $x409)))
 (let (($x269 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x92 (_ bv1 32))))
 (=> $x34 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x89 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x25 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x25 (_ bv1 32))))
 (let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x92 (_ bv1 32))))
 (= $x34 $x169))))))
 ))
 (let (($x152 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x123 (= false false)))
 (let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x92 (_ bv0 32))))
 (=> $x161 $x123)))))
 ))
 (let (($x59 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x25 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x25 (_ bv0 32))))
 (let ((?x92 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x92 (_ bv0 32))))
 (= $x161 $x75))))))
 ))
 (let (($x234 (and $x59 $x152)))
 (let (($x102 (and $x234 $x89)))
 (let (($x198 (and $x102 $x269)))
 (let (($x411 (and $x198 $x410)))
 (let (($x306 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x412 (and $x306 $x411)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x121) (bvule (bvadd ?x121 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x231 (=> (and $x67 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x413 (and $x231 $x412)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x414 (and $x14 $x413)))
 (let (($x421 (=> $x414 $x420)))
 (not $x421))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x381 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x387 (bvule ?x381 (_ bv3 32))))
 (let (($x378 (= $x387 true)))
 (let (($x382 (= $x378 true)))
 (let ((?x379 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x358 (bvneg ?x379)))
 (let (($x369 (= ?x358 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x368 (= $x369 true)))
 (let (($x370 (= $x368 true)))
 (let (($x366 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x357 (= $x366 true)))
 (let (($x376 (= $x357 true)))
 (let (($x377 (= $x376 true)))
 (let (($x88 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x115 (= $x88 true)))
 (let (($x363 (= $x115 true)))
 (let (($x364 (= $x363 true)))
 (let (($x343 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x280 (= $x343 true)))
 (let (($x277 (= $x280 true)))
 (let (($x282 (= $x277 true)))
 (let ((?x314 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x310 (= (_ bv0 32) ?x314)))
 (let ((?x210 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x308 (= (_ bv0 32) ?x210)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x350 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x220 (= (_ bv4291098127 32) ?x350)))
 (let (($x214 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x307 (and $x214 $x220)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x250 $x307)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x334 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x165 (and $x334 $x68)))
 (let (($x33 (not $x165)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x249 (and $x312 $x333)))
 (let (($x315 (and (not $x249) $x33)))
 (let (($x229 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x351 $x229)))
 (let (($x348 (not $x344)))
 (let (($x331 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x261 $x331)))
 (let (($x345 (and (not $x332) $x348)))
 (let (($x21 (and (and (and (and (and (and $x345 $x315) $x254) $x204) $x221) $x207) $x308)))
 (let (($x55 (and $x21 $x310)))
 (let (($x58 (and $x254 $x55)))
 (let (($x259 (= $x58 true)))
 (let (($x255 (= $x259 true)))
 (let (($x130 (= $x255 true)))
 (let ((?x121 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x288 (bvadd (_ bv4291097728 32) ?x121)))
 (let ((?x359 (bvsub ?x288 ?x121)))
 (let (($x248 (ite (bvsge ?x121 (_ bv0 32)) (bvuge ?x288 ?x359) (bvult ?x288 ?x359))))
 (let ((?x339 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x340 (bvmul (_ bv4 64) ?x339)))
 (let ((?x341 ((_ extract 63 32) ?x340)))
 (let (($x342 (= (_ bv0 32) ?x341)))
 (let (($x195 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x237 (and (and (and true $x195) $x342) $x248)))
 (let (($x185 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x236 (and $x185 $x237)))
 (let (($x240 (= true $x236)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x67 $x240)))
 (let (($x271 (= $x251 true)))
 (let (($x260 (= $x271 true)))
 (let (($x264 (= $x260 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x172 true)))
 (let (($x212 (= $x178 true)))
 (let (($x208 (= $x212 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x66 (= $x156 true)))
 (let (($x266 (= $x66 true)))
 (let (($x173 (= $x266 true)))
 (let (($x46 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x46 true)))
 (let (($x72 (= $x128 true)))
 (let (($x181 (= $x72 true)))
 (let (($x145 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x100 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x320 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x100))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv2 32))) ?x320)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv3 32))) ?x90)))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x6 (_ bv1 32))))
 (=> $x405 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x42)))))))))
 ))
 (let (($x408 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x143 (ite $x12 (_ bv1 32) (_ bv0 32))))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x6 (_ bv1 32))))
 (= $x405 (bvuge ?x143 (_ bv1 32))))))))
 ))
 (let (($x389 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x6 (_ bv0 32))))
 (=> $x133 $x299)))))
 ))
 (let (($x148 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x143 (ite $x12 (_ bv1 32) (_ bv0 32))))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x6 (_ bv0 32))))
 (= $x133 (= ?x143 (_ bv0 32))))))))
 ))
 (let (($x390 (and $x148 $x389)))
 (let (($x409 (and $x390 $x408)))
 (let (($x111 (and $x409 $x145)))
 (let (($x41 (= $x111 true)))
 (let (($x135 (= $x41 true)))
 (let (($x122 (= $x135 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x222)))
 (let (($x31 (= ?x74 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (= $x31 true)))
 (let (($x76 (= $x8 true)))
 (let (($x51 (= ?x74 input.dst.llvm-%n)))
 (let (($x223 (= $x51 true)))
 (let (($x63 (= $x223 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x360 (= $x56 true)))
 (let (($x125 (= $x360 true)))
 (let (($x65 (= $x125 true)))
 (let (($x151 (= $x67 true)))
 (let (($x91 (= $x151 true)))
 (let (($x112 (= $x91 true)))
 (let (($x43 (and $x112 $x65)))
 (let (($x38 (and $x43 $x63)))
 (let (($x108 (and $x38 $x76)))
 (let (($x235 (and $x108 $x122)))
 (let (($x175 (and $x235 $x181)))
 (let (($x171 (and $x175 $x173)))
 (let (($x218 (and $x171 $x208)))
 (let (($x268 (and $x218 $x264)))
 (let (($x338 (and $x268 $x130)))
 (let (($x289 (and $x338 $x282)))
 (let (($x365 (and $x289 $x364)))
 (let (($x371 (and $x365 $x377)))
 (let (($x380 (and $x371 $x370)))
 (let (($x132 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x374 (and (not $x132) $x380)))
 (let (($x105 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x372 (and $x105 $x374)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x375 (and $x85 $x372)))
 (let (($x325 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x273 (_ bv1 32))))
 (=> $x245 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x149 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x198 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x273 (_ bv1 32))))
 (= $x245 $x93))))))
 ))
 (let (($x301 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (= ?x273 (_ bv0 32))))
 (=> $x274 $x299)))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x198 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (= ?x273 (_ bv0 32))))
 (= $x274 $x197))))))
 ))
 (let (($x303 (and $x296 $x301)))
 (let (($x159 (and $x303 $x149)))
 (let (($x50 (and $x159 $x325)))
 (let (($x386 (and $x50 $x375)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x388 (and $x29 $x386)))
 (let (($x131 (and (bvule input.memlabel-mem--symbol.1_begin ?x288) (bvule (bvadd ?x288 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x279 (=> (and $x67 (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x131)))))
 (let (($x384 (and $x279 $x388)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x383 (and $x14 $x384)))
 (let (($x385 (=> $x383 $x382)))
 (not $x385))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x381 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x387 (bvule ?x381 (_ bv3 32))))
 (let (($x378 (= $x387 true)))
 (let (($x382 (= $x378 true)))
 (let ((?x379 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x358 (bvneg ?x379)))
 (let (($x369 (= ?x358 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x368 (= $x369 true)))
 (let (($x370 (= $x368 true)))
 (let (($x366 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x357 (= $x366 true)))
 (let (($x376 (= $x357 true)))
 (let (($x377 (= $x376 true)))
 (let (($x88 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x115 (= $x88 true)))
 (let (($x363 (= $x115 true)))
 (let (($x364 (= $x363 true)))
 (let (($x343 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x280 (= $x343 true)))
 (let (($x277 (= $x280 true)))
 (let (($x282 (= $x277 true)))
 (let ((?x314 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x310 (= (_ bv0 32) ?x314)))
 (let ((?x210 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x308 (= (_ bv0 32) ?x210)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x350 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x220 (= (_ bv4291098127 32) ?x350)))
 (let (($x214 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x307 (and $x214 $x220)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x250 $x307)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x334 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x165 (and $x334 $x68)))
 (let (($x33 (not $x165)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x249 (and $x312 $x333)))
 (let (($x315 (and (not $x249) $x33)))
 (let (($x229 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x351 $x229)))
 (let (($x348 (not $x344)))
 (let (($x331 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x261 $x331)))
 (let (($x345 (and (not $x332) $x348)))
 (let (($x21 (and (and (and (and (and (and $x345 $x315) $x254) $x204) $x221) $x207) $x308)))
 (let (($x55 (and $x21 $x310)))
 (let (($x58 (and $x254 $x55)))
 (let (($x259 (= $x58 true)))
 (let (($x255 (= $x259 true)))
 (let (($x130 (= $x255 true)))
 (let ((?x121 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x288 (bvadd (_ bv4291097728 32) ?x121)))
 (let ((?x359 (bvsub ?x288 ?x121)))
 (let (($x248 (ite (bvsge ?x121 (_ bv0 32)) (bvuge ?x288 ?x359) (bvult ?x288 ?x359))))
 (let ((?x339 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x340 (bvmul (_ bv4 64) ?x339)))
 (let ((?x341 ((_ extract 63 32) ?x340)))
 (let (($x342 (= (_ bv0 32) ?x341)))
 (let (($x195 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x237 (and (and (and true $x195) $x342) $x248)))
 (let (($x185 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x236 (and $x185 $x237)))
 (let (($x240 (= true $x236)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x67 $x240)))
 (let (($x271 (= $x251 true)))
 (let (($x260 (= $x271 true)))
 (let (($x264 (= $x260 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x172 true)))
 (let (($x212 (= $x178 true)))
 (let (($x208 (= $x212 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x66 (= $x156 true)))
 (let (($x266 (= $x66 true)))
 (let (($x173 (= $x266 true)))
 (let (($x46 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x128 (= $x46 true)))
 (let (($x72 (= $x128 true)))
 (let (($x181 (= $x72 true)))
 (let (($x145 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x100 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x320 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x100))))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv2 32))) ?x320)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x100 (_ bv3 32))) ?x90)))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x6 (_ bv1 32))))
 (=> $x405 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x42)))))))))
 ))
 (let (($x408 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x143 (ite $x12 (_ bv1 32) (_ bv0 32))))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x6 (_ bv1 32))))
 (= $x405 (bvuge ?x143 (_ bv1 32))))))))
 ))
 (let (($x389 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x6 (_ bv0 32))))
 (=> $x133 $x299)))))
 ))
 (let (($x148 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x143 (ite $x12 (_ bv1 32) (_ bv0 32))))
 (let ((?x6 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x6 (_ bv0 32))))
 (= $x133 (= ?x143 (_ bv0 32))))))))
 ))
 (let (($x390 (and $x148 $x389)))
 (let (($x409 (and $x390 $x408)))
 (let (($x111 (and $x409 $x145)))
 (let (($x41 (= $x111 true)))
 (let (($x135 (= $x41 true)))
 (let (($x122 (= $x135 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x222)))
 (let (($x31 (= ?x74 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (= $x31 true)))
 (let (($x76 (= $x8 true)))
 (let (($x51 (= ?x74 input.dst.llvm-%n)))
 (let (($x223 (= $x51 true)))
 (let (($x63 (= $x223 true)))
 (let (($x56 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x360 (= $x56 true)))
 (let (($x125 (= $x360 true)))
 (let (($x65 (= $x125 true)))
 (let (($x151 (= $x67 true)))
 (let (($x91 (= $x151 true)))
 (let (($x112 (= $x91 true)))
 (let (($x43 (and $x112 $x65)))
 (let (($x38 (and $x43 $x63)))
 (let (($x108 (and $x38 $x76)))
 (let (($x235 (and $x108 $x122)))
 (let (($x175 (and $x235 $x181)))
 (let (($x171 (and $x175 $x173)))
 (let (($x218 (and $x171 $x208)))
 (let (($x268 (and $x218 $x264)))
 (let (($x338 (and $x268 $x130)))
 (let (($x289 (and $x338 $x282)))
 (let (($x365 (and $x289 $x364)))
 (let (($x371 (and $x365 $x377)))
 (let (($x380 (and $x371 $x370)))
 (let (($x132 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x374 (and (not $x132) $x380)))
 (let (($x105 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x372 (and $x105 $x374)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x375 (and $x85 $x372)))
 (let (($x325 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x273 (_ bv1 32))))
 (=> $x245 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x149 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x198 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x273 (_ bv1 32))))
 (= $x245 $x93))))))
 ))
 (let (($x301 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (= ?x273 (_ bv0 32))))
 (=> $x274 $x299)))))
 ))
 (let (($x296 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x198 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x198 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (= ?x273 (_ bv0 32))))
 (= $x274 $x197))))))
 ))
 (let (($x303 (and $x296 $x301)))
 (let (($x159 (and $x303 $x149)))
 (let (($x50 (and $x159 $x325)))
 (let (($x386 (and $x50 $x375)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x388 (and $x29 $x386)))
 (let (($x131 (and (bvule input.memlabel-mem--symbol.1_begin ?x288) (bvule (bvadd ?x288 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false $x131)))))
 (let (($x279 (=> (and $x67 (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x131)))))
 (let (($x384 (and $x279 $x388)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x383 (and $x14 $x384)))
 (let (($x385 (=> $x383 $x382)))
 (not $x385))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x08000002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf243f734)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf243f737)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf243f734)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x08000002)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f480 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x10000002)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x10000002)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f480 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x22 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x176 (bvule ?x22 (_ bv4 32))))
 (let (($x216 (= $x176 true)))
 (let (($x313 (= $x216 true)))
 (let ((?x417 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x415 (bvneg ?x417)))
 (let (($x418 (= ?x415 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x421 (= $x418 true)))
 (let (($x201 (= $x421 true)))
 (let (($x422 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x309 (= $x422 true)))
 (let (($x419 (= $x309 true)))
 (let (($x420 (= $x419 true)))
 (let (($x402 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x403 (= $x402 true)))
 (let (($x412 (= $x403 true)))
 (let (($x413 (= $x412 true)))
 (let (($x396 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x398 (= $x396 true)))
 (let (($x399 (= $x398 true)))
 (let (($x400 (= $x399 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x140)))
 (let ((?x73 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x73)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x217 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x294 (= (_ bv4291098127 32) ?x217)))
 (let (($x215 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x39 (and $x215 $x294)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x48 $x39)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x80 (and $x54 $x155)))
 (let (($x233 (not $x80)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x158 (and $x26 $x139)))
 (let (($x28 (and (not $x158) $x233)))
 (let (($x104 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x118 $x104)))
 (let (($x79 (not $x49)))
 (let (($x94 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x78 $x94)))
 (let (($x162 (and (not $x134) $x79)))
 (let (($x113 (and (and (and (and (and (and $x162 $x28) $x276) $x219) $x60) $x126) $x202)))
 (let (($x109 (and $x113 $x190)))
 (let (($x136 (and $x276 $x109)))
 (let (($x163 (= $x136 true)))
 (let (($x96 (= $x163 true)))
 (let (($x395 (= $x96 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x291 (bvadd (_ bv4291097728 32) ?x288)))
 (let ((?x353 (bvsub ?x291 ?x288)))
 (let (($x335 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x291 ?x353) (bvult ?x291 ?x353))))
 (let ((?x393 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x394 (bvmul (_ bv4 64) ?x393)))
 (let ((?x410 ((_ extract 63 32) ?x394)))
 (let (($x411 (= (_ bv0 32) ?x410)))
 (let (($x391 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x337 (and (and (and true $x391) $x411) $x335)))
 (let (($x11 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x355 (and $x11 $x337)))
 (let (($x242 (= true $x355)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x356 (=> $x67 $x242)))
 (let (($x290 (= $x356 true)))
 (let (($x244 (= $x290 true)))
 (let (($x167 (= $x244 true)))
 (let (($x346 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x317 (= $x346 true)))
 (let (($x347 (= $x317 true)))
 (let (($x107 (= $x347 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x226 true)))
 (let (($x228 (= $x124 true)))
 (let (($x275 (= $x228 true)))
 (let (($x328 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x196)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x199)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x277 (_ bv1 32))))
 (=> $x386 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x302)))))))))
 ))
 (let (($x384 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x277 (_ bv1 32))))
 (= $x386 (bvuge ?x338 (_ bv1 32))))))))
 ))
 (let (($x364 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x277 (_ bv0 32))))
 (=> $x282 $x125)))))
 ))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x277 (_ bv0 32))))
 (= $x282 (= ?x338 (_ bv0 32))))))))
 ))
 (let (($x365 (and $x88 $x364)))
 (let (($x383 (and $x365 $x384)))
 (let (($x329 (and $x383 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x13 (= $x330 true)))
 (let (($x227 (= $x13 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x145)))
 (let (($x46 (= ?x111 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x128 (= $x46 true)))
 (let (($x72 (= $x128 true)))
 (let (($x41 (= ?x111 input.dst.llvm-%n)))
 (let (($x135 (= $x41 true)))
 (let (($x122 (= $x135 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x320 (= $x238 true)))
 (let (($x90 (= $x320 true)))
 (let (($x42 (= $x90 true)))
 (let (($x361 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x322 (= $x361 true)))
 (let (($x324 (= $x322 true)))
 (let (($x323 (= $x324 true)))
 (let (($x100 (= $x67 true)))
 (let (($x138 (= $x100 true)))
 (let (($x120 (= $x138 true)))
 (let (($x127 (and $x120 $x323)))
 (let (($x116 (and $x127 $x42)))
 (let (($x235 (and $x116 $x122)))
 (let (($x181 (and $x235 $x72)))
 (let (($x69 (and $x181 $x227)))
 (let (($x286 (and $x69 $x275)))
 (let (($x256 (and $x286 $x107)))
 (let (($x243 (and $x256 $x167)))
 (let (($x397 (and $x243 $x395)))
 (let (($x401 (and $x397 $x400)))
 (let (($x414 (and $x401 $x413)))
 (let (($x416 (and $x414 $x420)))
 (let (($x241 (and $x416 $x201)))
 (let (($x84 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x239 (and (not $x84) $x241)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x318 (and $x103 $x239)))
 (let (($x406 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x319 (and $x406 $x318)))
 (let (($x390 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x91 (_ bv1 32))))
 (=> $x108 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x6 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x50 (_ bv1 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x91 (_ bv1 32))))
 (= $x108 $x31))))))
 ))
 (let (($x82 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x91 (_ bv0 32))))
 (=> $x112 $x125)))))
 ))
 (let (($x360 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x50 (_ bv0 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x91 (_ bv0 32))))
 (= $x112 $x18))))))
 ))
 (let (($x222 (and $x360 $x82)))
 (let (($x133 (and $x222 $x6)))
 (let (($x405 (and $x133 $x390)))
 (let (($x177 (and $x405 $x319)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x10 (and $x160 $x177)))
 (let (($x157 (and (bvule input.memlabel-mem--symbol.1_begin ?x291) (bvule (bvadd ?x291 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x407 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false $x157)))))
 (let (($x281 (=> (and $x67 (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x157)))))
 (let (($x230 (and $x281 $x10)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x170 (and $x14 $x230)))
 (let (($x23 (=> $x170 $x313)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x22 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x176 (bvule ?x22 (_ bv4 32))))
 (let (($x216 (= $x176 true)))
 (let (($x313 (= $x216 true)))
 (let ((?x417 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x415 (bvneg ?x417)))
 (let (($x418 (= ?x415 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x421 (= $x418 true)))
 (let (($x201 (= $x421 true)))
 (let (($x422 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x309 (= $x422 true)))
 (let (($x419 (= $x309 true)))
 (let (($x420 (= $x419 true)))
 (let (($x402 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x403 (= $x402 true)))
 (let (($x412 (= $x403 true)))
 (let (($x413 (= $x412 true)))
 (let (($x396 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x398 (= $x396 true)))
 (let (($x399 (= $x398 true)))
 (let (($x400 (= $x399 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x140)))
 (let ((?x73 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x73)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x217 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x294 (= (_ bv4291098127 32) ?x217)))
 (let (($x215 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x39 (and $x215 $x294)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x48 $x39)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x80 (and $x54 $x155)))
 (let (($x233 (not $x80)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x158 (and $x26 $x139)))
 (let (($x28 (and (not $x158) $x233)))
 (let (($x104 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x118 $x104)))
 (let (($x79 (not $x49)))
 (let (($x94 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x78 $x94)))
 (let (($x162 (and (not $x134) $x79)))
 (let (($x113 (and (and (and (and (and (and $x162 $x28) $x276) $x219) $x60) $x126) $x202)))
 (let (($x109 (and $x113 $x190)))
 (let (($x136 (and $x276 $x109)))
 (let (($x163 (= $x136 true)))
 (let (($x96 (= $x163 true)))
 (let (($x395 (= $x96 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x291 (bvadd (_ bv4291097728 32) ?x288)))
 (let ((?x353 (bvsub ?x291 ?x288)))
 (let (($x335 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x291 ?x353) (bvult ?x291 ?x353))))
 (let ((?x393 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x394 (bvmul (_ bv4 64) ?x393)))
 (let ((?x410 ((_ extract 63 32) ?x394)))
 (let (($x411 (= (_ bv0 32) ?x410)))
 (let (($x391 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x337 (and (and (and true $x391) $x411) $x335)))
 (let (($x11 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x355 (and $x11 $x337)))
 (let (($x242 (= true $x355)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x356 (=> $x67 $x242)))
 (let (($x290 (= $x356 true)))
 (let (($x244 (= $x290 true)))
 (let (($x167 (= $x244 true)))
 (let (($x346 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x317 (= $x346 true)))
 (let (($x347 (= $x317 true)))
 (let (($x107 (= $x347 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x124 (= $x226 true)))
 (let (($x228 (= $x124 true)))
 (let (($x275 (= $x228 true)))
 (let (($x328 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x34 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x34))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv2 32))) ?x196)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x34 (_ bv3 32))) ?x199)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x277 (_ bv1 32))))
 (=> $x386 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x302)))))))))
 ))
 (let (($x384 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x277 (_ bv1 32))))
 (= $x386 (bvuge ?x338 (_ bv1 32))))))))
 ))
 (let (($x364 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x277 (_ bv0 32))))
 (=> $x282 $x125)))))
 ))
 (let (($x88 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let ((?x277 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x277 (_ bv0 32))))
 (= $x282 (= ?x338 (_ bv0 32))))))))
 ))
 (let (($x365 (and $x88 $x364)))
 (let (($x383 (and $x365 $x384)))
 (let (($x329 (and $x383 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x13 (= $x330 true)))
 (let (($x227 (= $x13 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x145)))
 (let (($x46 (= ?x111 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x128 (= $x46 true)))
 (let (($x72 (= $x128 true)))
 (let (($x41 (= ?x111 input.dst.llvm-%n)))
 (let (($x135 (= $x41 true)))
 (let (($x122 (= $x135 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x320 (= $x238 true)))
 (let (($x90 (= $x320 true)))
 (let (($x42 (= $x90 true)))
 (let (($x361 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x322 (= $x361 true)))
 (let (($x324 (= $x322 true)))
 (let (($x323 (= $x324 true)))
 (let (($x100 (= $x67 true)))
 (let (($x138 (= $x100 true)))
 (let (($x120 (= $x138 true)))
 (let (($x127 (and $x120 $x323)))
 (let (($x116 (and $x127 $x42)))
 (let (($x235 (and $x116 $x122)))
 (let (($x181 (and $x235 $x72)))
 (let (($x69 (and $x181 $x227)))
 (let (($x286 (and $x69 $x275)))
 (let (($x256 (and $x286 $x107)))
 (let (($x243 (and $x256 $x167)))
 (let (($x397 (and $x243 $x395)))
 (let (($x401 (and $x397 $x400)))
 (let (($x414 (and $x401 $x413)))
 (let (($x416 (and $x414 $x420)))
 (let (($x241 (and $x416 $x201)))
 (let (($x84 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x239 (and (not $x84) $x241)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x318 (and $x103 $x239)))
 (let (($x406 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x319 (and $x406 $x318)))
 (let (($x390 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x91 (_ bv1 32))))
 (=> $x108 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x6 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x50 (_ bv1 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x91 (_ bv1 32))))
 (= $x108 $x31))))))
 ))
 (let (($x82 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x91 (_ bv0 32))))
 (=> $x112 $x125)))))
 ))
 (let (($x360 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x50 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x50 (_ bv0 32))))
 (let ((?x91 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x91 (_ bv0 32))))
 (= $x112 $x18))))))
 ))
 (let (($x222 (and $x360 $x82)))
 (let (($x133 (and $x222 $x6)))
 (let (($x405 (and $x133 $x390)))
 (let (($x177 (and $x405 $x319)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x10 (and $x160 $x177)))
 (let (($x157 (and (bvule input.memlabel-mem--symbol.1_begin ?x291) (bvule (bvadd ?x291 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x407 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false $x157)))))
 (let (($x281 (=> (and $x67 (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x157)))))
 (let (($x230 (and $x281 $x10)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x170 (and $x14 $x230)))
 (let (($x23 (=> $x170 $x313)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x20000002)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x20000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x20000002)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f480 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3d2a6ee4)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3d2a6ee7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3d2a6ee4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f480 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x25 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x180 (bvule ?x25 (_ bv399 32))))
 (let (($x147 (= $x180 true)))
 (let (($x164 (= $x147 true)))
 (let ((?x114 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x99 (bvneg ?x114)))
 (let (($x137 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x137 true)))
 (let (($x225 (= $x101 true)))
 (let (($x86 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x224 (= $x86 true)))
 (let (($x142 (= $x224 true)))
 (let (($x87 (= $x142 true)))
 (let (($x374 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x372 (= $x374 true)))
 (let (($x378 (= $x372 true)))
 (let (($x382 (= $x378 true)))
 (let (($x379 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x369 (= $x379 true)))
 (let (($x368 (= $x369 true)))
 (let (($x370 (= $x368 true)))
 (let ((?x311 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x311)))
 (let ((?x220 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x350 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x307 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x350)))
 (let ((?x315 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x316 (= (_ bv4291098127 32) ?x315)))
 (let (($x254 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x305 (and $x254 $x316)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x304 $x305)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x165 (and $x213 $x334)))
 (let (($x33 (not $x165)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x333 (and $x312 $x249)))
 (let (($x214 (and (not $x333) $x33)))
 (let (($x261 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x331 $x261)))
 (let (($x229 (not $x332)))
 (let (($x351 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x348 $x351)))
 (let (($x68 (and (not $x267) $x229)))
 (let (($x314 (and (and (and (and (and (and $x68 $x214) $x270) $x204) $x206) $x307) $x221)))
 (let (($x310 (and $x314 $x205)))
 (let (($x55 (and $x270 $x310)))
 (let (($x58 (= $x55 true)))
 (let (($x115 (= $x58 true)))
 (let (($x371 (= $x115 true)))
 (let ((?x291 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd (_ bv4291097728 32) ?x291)))
 (let ((?x237 (bvsub ?x278 ?x291)))
 (let (($x342 (ite (bvsge ?x291 (_ bv0 32)) (bvuge ?x278 ?x237) (bvult ?x278 ?x237))))
 (let ((?x377 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x381 (bvmul (_ bv4 64) ?x377)))
 (let ((?x387 ((_ extract 63 32) ?x381)))
 (let (($x248 (= (_ bv0 32) ?x387)))
 (let (($x357 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x262 (and (and (and true $x357) $x248) $x342)))
 (let (($x208 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x236 (and $x208 $x262)))
 (let (($x240 (= true $x236)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x67 $x240)))
 (let (($x251 (= $x271 true)))
 (let (($x260 (= $x251 true)))
 (let (($x264 (= $x260 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x339 (= $x186 true)))
 (let (($x178 (= $x339 true)))
 (let (($x173 (= $x178 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x12 true)))
 (let (($x141 (= $x143 true)))
 (let (($x95 (= $x141 true)))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x93 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x93))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv2 32))) ?x325)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv3 32))) ?x105)))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x400 (_ bv1 32))))
 (=> $x10 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x65)))))))))
 ))
 (let (($x170 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x396 (ite $x397 (_ bv1 32) (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x400 (_ bv1 32))))
 (= $x10 (bvuge ?x396 (_ bv1 32))))))))
 ))
 (let (($x414 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x324 (= false false)))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x401 (= ?x400 (_ bv0 32))))
 (=> $x401 $x324)))))
 ))
 (let (($x403 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x396 (ite $x397 (_ bv1 32) (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x401 (= ?x400 (_ bv0 32))))
 (= $x401 (= ?x396 (_ bv0 32))))))))
 ))
 (let (($x422 (and $x403 $x414)))
 (let (($x22 (and $x422 $x170)))
 (let (($x38 (and $x22 $x63)))
 (let (($x8 (= $x38 true)))
 (let (($x76 (= $x8 true)))
 (let (($x106 (= $x76 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x199)))
 (let (($x330 (= ?x302 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x330 true)))
 (let (($x227 (= $x13 true)))
 (let (($x326 (= ?x302 input.dst.llvm-%n)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x269 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x295 (= $x269 true)))
 (let (($x144 (= $x295 true)))
 (let (($x89 (= $x144 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x234 true)))
 (let (($x298 (= $x34 true)))
 (let (($x200 (= $x298 true)))
 (let (($x384 (= $x67 true)))
 (let (($x383 (= $x384 true)))
 (let (($x297 (= $x383 true)))
 (let (($x362 (and $x297 $x200)))
 (let (($x169 (and $x362 $x89)))
 (let (($x329 (and $x169 $x328)))
 (let (($x69 (and $x329 $x227)))
 (let (($x30 (and $x69 $x106)))
 (let (($x193 (and $x30 $x95)))
 (let (($x171 (and $x193 $x173)))
 (let (($x268 (and $x171 $x264)))
 (let (($x358 (and $x268 $x371)))
 (let (($x380 (and $x358 $x370)))
 (let (($x385 (and $x380 $x382)))
 (let (($x83 (and $x385 $x87)))
 (let (($x252 (and $x83 $x225)))
 (let (($x388 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and (not $x388) $x252)))
 (let (($x386 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x321 (and $x386 $x161)))
 (let (($x363 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x363 $x321)))
 (let (($x343 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x138 (_ bv1 32))))
 (=> $x122 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x46 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x405 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x405 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x138 (_ bv1 32))))
 (= $x122 $x111))))))
 ))
 (let (($x238 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x324 (= false false)))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x138 (_ bv0 32))))
 (=> $x120 $x324)))))
 ))
 (let (($x322 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x405 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x405 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x138 (_ bv0 32))))
 (= $x120 $x408))))))
 ))
 (let (($x320 (and $x322 $x238)))
 (let (($x128 (and $x320 $x46)))
 (let (($x289 (and $x128 $x343)))
 (let (($x182 (and $x289 $x152)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x187 (and $x151 $x182)))
 (let (($x407 (and (bvule input.memlabel-mem--symbol.1_begin ?x278) (bvule (bvadd ?x278 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x373 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) (or false (or false $x407)))))
 (let (($x20 (=> (and $x67 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x407)))))
 (let (($x75 (and $x20 $x187)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x102 (and $x14 $x75)))
 (let (($x59 (=> $x102 $x164)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x25 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x180 (bvule ?x25 (_ bv399 32))))
 (let (($x147 (= $x180 true)))
 (let (($x164 (= $x147 true)))
 (let ((?x114 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x99 (bvneg ?x114)))
 (let (($x137 (= ?x99 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x137 true)))
 (let (($x225 (= $x101 true)))
 (let (($x86 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x224 (= $x86 true)))
 (let (($x142 (= $x224 true)))
 (let (($x87 (= $x142 true)))
 (let (($x374 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x372 (= $x374 true)))
 (let (($x378 (= $x372 true)))
 (let (($x382 (= $x378 true)))
 (let (($x379 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x369 (= $x379 true)))
 (let (($x368 (= $x369 true)))
 (let (($x370 (= $x368 true)))
 (let ((?x311 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x311)))
 (let ((?x220 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x350 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x307 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x350)))
 (let ((?x315 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x316 (= (_ bv4291098127 32) ?x315)))
 (let (($x254 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x305 (and $x254 $x316)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x304 $x305)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x165 (and $x213 $x334)))
 (let (($x33 (not $x165)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x333 (and $x312 $x249)))
 (let (($x214 (and (not $x333) $x33)))
 (let (($x261 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x331 $x261)))
 (let (($x229 (not $x332)))
 (let (($x351 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x348 $x351)))
 (let (($x68 (and (not $x267) $x229)))
 (let (($x314 (and (and (and (and (and (and $x68 $x214) $x270) $x204) $x206) $x307) $x221)))
 (let (($x310 (and $x314 $x205)))
 (let (($x55 (and $x270 $x310)))
 (let (($x58 (= $x55 true)))
 (let (($x115 (= $x58 true)))
 (let (($x371 (= $x115 true)))
 (let ((?x291 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd (_ bv4291097728 32) ?x291)))
 (let ((?x237 (bvsub ?x278 ?x291)))
 (let (($x342 (ite (bvsge ?x291 (_ bv0 32)) (bvuge ?x278 ?x237) (bvult ?x278 ?x237))))
 (let ((?x377 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x381 (bvmul (_ bv4 64) ?x377)))
 (let ((?x387 ((_ extract 63 32) ?x381)))
 (let (($x248 (= (_ bv0 32) ?x387)))
 (let (($x357 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x262 (and (and (and true $x357) $x248) $x342)))
 (let (($x208 (= (bvand ?x278 (_ bv4294967292 32)) ?x278)))
 (let (($x236 (and $x208 $x262)))
 (let (($x240 (= true $x236)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x67 $x240)))
 (let (($x251 (= $x271 true)))
 (let (($x260 (= $x251 true)))
 (let (($x264 (= $x260 true)))
 (let (($x186 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x339 (= $x186 true)))
 (let (($x178 (= $x339 true)))
 (let (($x173 (= $x178 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x12 true)))
 (let (($x141 (= $x143 true)))
 (let (($x95 (= $x141 true)))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x93 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x93))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv2 32))) ?x325)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x93 (_ bv3 32))) ?x105)))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x400 (_ bv1 32))))
 (=> $x10 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x65)))))))))
 ))
 (let (($x170 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x396 (ite $x397 (_ bv1 32) (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x400 (_ bv1 32))))
 (= $x10 (bvuge ?x396 (_ bv1 32))))))))
 ))
 (let (($x414 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x324 (= false false)))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x401 (= ?x400 (_ bv0 32))))
 (=> $x401 $x324)))))
 ))
 (let (($x403 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x397 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x396 (ite $x397 (_ bv1 32) (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x401 (= ?x400 (_ bv0 32))))
 (= $x401 (= ?x396 (_ bv0 32))))))))
 ))
 (let (($x422 (and $x403 $x414)))
 (let (($x22 (and $x422 $x170)))
 (let (($x38 (and $x22 $x63)))
 (let (($x8 (= $x38 true)))
 (let (($x76 (= $x8 true)))
 (let (($x106 (= $x76 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x199)))
 (let (($x330 (= ?x302 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x13 (= $x330 true)))
 (let (($x227 (= $x13 true)))
 (let (($x326 (= ?x302 input.dst.llvm-%n)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x269 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x295 (= $x269 true)))
 (let (($x144 (= $x295 true)))
 (let (($x89 (= $x144 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x234 true)))
 (let (($x298 (= $x34 true)))
 (let (($x200 (= $x298 true)))
 (let (($x384 (= $x67 true)))
 (let (($x383 (= $x384 true)))
 (let (($x297 (= $x383 true)))
 (let (($x362 (and $x297 $x200)))
 (let (($x169 (and $x362 $x89)))
 (let (($x329 (and $x169 $x328)))
 (let (($x69 (and $x329 $x227)))
 (let (($x30 (and $x69 $x106)))
 (let (($x193 (and $x30 $x95)))
 (let (($x171 (and $x193 $x173)))
 (let (($x268 (and $x171 $x264)))
 (let (($x358 (and $x268 $x371)))
 (let (($x380 (and $x358 $x370)))
 (let (($x385 (and $x380 $x382)))
 (let (($x83 (and $x385 $x87)))
 (let (($x252 (and $x83 $x225)))
 (let (($x388 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x161 (and (not $x388) $x252)))
 (let (($x386 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x321 (and $x386 $x161)))
 (let (($x363 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x363 $x321)))
 (let (($x343 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x138 (_ bv1 32))))
 (=> $x122 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x46 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x405 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x405 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x138 (_ bv1 32))))
 (= $x122 $x111))))))
 ))
 (let (($x238 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x324 (= false false)))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x138 (_ bv0 32))))
 (=> $x120 $x324)))))
 ))
 (let (($x322 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x405 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x405 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x138 (_ bv0 32))))
 (= $x120 $x408))))))
 ))
 (let (($x320 (and $x322 $x238)))
 (let (($x128 (and $x320 $x46)))
 (let (($x289 (and $x128 $x343)))
 (let (($x182 (and $x289 $x152)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x187 (and $x151 $x182)))
 (let (($x407 (and (bvule input.memlabel-mem--symbol.1_begin ?x278) (bvule (bvadd ?x278 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x373 (=> (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32))) (or false (or false $x407)))))
 (let (($x20 (=> (and $x67 (bvule ?x278 (bvsub (bvadd ?x278 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x407)))))
 (let (($x75 (and $x20 $x187)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x102 (and $x14 $x75)))
 (let (($x59 (=> $x102 $x164)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (bvsle ?x197 (_ bv399 32))))
 (let (($x123 (= $x27 true)))
 (let (($x296 (= $x123 true)))
 (let ((?x191 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x185 (bvneg ?x191)))
 (let (($x192 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x192 true)))
 (let (($x266 (= $x175 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x66 (= $x156 true)))
 (let (($x246 (= $x66 true)))
 (let (($x285 (= $x246 true)))
 (let (($x318 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x319 (= $x318 true)))
 (let (($x313 (= $x319 true)))
 (let (($x23 (= $x313 true)))
 (let (($x415 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x421 (= $x415 true)))
 (let (($x201 (= $x421 true)))
 (let (($x241 (= $x201 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x188)))
 (let ((?x39 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x39)))
 (let ((?x294 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x294)))
 (let ((?x184 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x98 (= (_ bv4291098127 32) ?x184)))
 (let (($x194 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x48 (and $x194 $x98)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (and $x276 $x48)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x233 (and $x54 $x155)))
 (let (($x28 (not $x233)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x158 (and $x139 $x292)))
 (let (($x293 (and (not $x158) $x28)))
 (let (($x110 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x134 $x110)))
 (let (($x49 (not $x61)))
 (let (($x104 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x162 $x104)))
 (let (($x80 (and (not $x94) $x49)))
 (let (($x190 (and (and (and (and (and (and $x80 $x293) $x78) $x203) $x217) $x60) $x146)))
 (let (($x109 (and $x190 $x126)))
 (let (($x136 (and $x78 $x109)))
 (let (($x163 (= $x136 true)))
 (let (($x412 (= $x163 true)))
 (let (($x417 (= $x412 true)))
 (let ((?x278 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x64 (bvadd (_ bv4291097728 32) ?x278)))
 (let ((?x355 (bvsub ?x64 ?x278)))
 (let (($x352 (ite (bvsge ?x278 (_ bv0 32)) (bvuge ?x64 ?x355) (bvult ?x64 ?x355))))
 (let ((?x416 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvmul (_ bv4 64) ?x416)))
 (let ((?x216 ((_ extract 63 32) ?x176)))
 (let (($x337 (= (_ bv0 32) ?x216)))
 (let (($x419 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x335 (and (and (and true $x419) $x337) $x352)))
 (let (($x256 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x242 (and $x256 $x335)))
 (let (($x356 (= true $x242)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x67 $x356)))
 (let (($x290 (= $x244 true)))
 (let (($x167 (= $x290 true)))
 (let (($x243 (= $x167 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x394 (= $x70 true)))
 (let (($x347 (= $x394 true)))
 (let (($x286 (= $x347 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x280 true)))
 (let (($x282 (= $x277 true)))
 (let (($x255 (= $x282 true)))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x31))))
 (let ((?x103 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv2 32))) ?x390)))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv3 32))) ?x103)))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x370 (_ bv1 32))))
 (=> $x187 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x323)))))))))
 ))
 (let (($x102 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x358 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x379 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x370 (_ bv1 32))))
 (= $x187 (bvuge ?x379 (_ bv1 32))))))))
 ))
 (let (($x385 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x34 (= false false)))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x370 (_ bv0 32))))
 (=> $x380 $x34)))))
 ))
 (let (($x372 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x358 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x379 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x370 (_ bv0 32))))
 (= $x380 (= ?x379 (_ bv0 32))))))))
 ))
 (let (($x86 (and $x372 $x385)))
 (let (($x25 (and $x86 $x102)))
 (let (($x145 (and $x25 $x119)))
 (let (($x41 (= $x145 true)))
 (let (($x135 (= $x41 true)))
 (let (($x72 (= $x135 true)))
 (let ((?x325 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x325)))
 (let (($x38 (= ?x105 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (= $x38 true)))
 (let (($x76 (= $x8 true)))
 (let (($x65 (= ?x105 input.dst.llvm-%n)))
 (let (($x51 (= $x65 true)))
 (let (($x223 (= $x51 true)))
 (let (($x353 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x85 (= $x353 true)))
 (let (($x45 (= $x85 true)))
 (let (($x149 (= $x45 true)))
 (let (($x336 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x336 true)))
 (let (($x93 (= $x245 true)))
 (let (($x349 (= $x93 true)))
 (let (($x230 (= $x67 true)))
 (let (($x170 (= $x230 true)))
 (let (($x22 (= $x170 true)))
 (let (($x132 (and $x22 $x349)))
 (let (($x57 (and $x132 $x149)))
 (let (($x63 (and $x57 $x223)))
 (let (($x106 (and $x63 $x76)))
 (let (($x181 (and $x106 $x72)))
 (let (($x174 (and $x181 $x255)))
 (let (($x346 (and $x174 $x286)))
 (let (($x154 (and $x346 $x243)))
 (let (($x418 (and $x154 $x417)))
 (let (($x239 (and $x418 $x241)))
 (let (($x117 (and $x239 $x23)))
 (let (($x189 (and $x117 $x285)))
 (let (($x273 (and $x189 $x266)))
 (let (($x177 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x198 (and (not $x177) $x273)))
 (let (($x422 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x301 (and $x422 $x198)))
 (let (($x403 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x300 (and $x403 $x301)))
 (let (($x396 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x383 (_ bv1 32))))
 (=> $x327 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x329 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x289 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x289 (_ bv1 32))))
 (let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x383 (_ bv1 32))))
 (= $x327 $x199))))))
 ))
 (let (($x362 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x34 (= false false)))
 (let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x383 (_ bv0 32))))
 (=> $x297 $x34)))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x289 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x289 (_ bv0 32))))
 (let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x383 (_ bv0 32))))
 (= $x297 $x364))))))
 ))
 (let (($x269 (and $x234 $x362)))
 (let (($x330 (and $x269 $x329)))
 (let (($x398 (and $x330 $x396)))
 (let (($x129 (and $x398 $x300)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x253 (and $x100 $x129)))
 (let (($x373 (and (bvule input.memlabel-mem--symbol.1_begin ?x64) (bvule (bvadd ?x64 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x211 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false $x373)))))
 (let (($x231 (=> (and $x67 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x373)))))
 (let (($x159 (and $x231 $x253)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x287 (and $x14 $x159)))
 (let (($x272 (=> $x287 $x296)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x27 (bvsle ?x197 (_ bv399 32))))
 (let (($x123 (= $x27 true)))
 (let (($x296 (= $x123 true)))
 (let ((?x191 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x185 (bvneg ?x191)))
 (let (($x192 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x192 true)))
 (let (($x266 (= $x175 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x66 (= $x156 true)))
 (let (($x246 (= $x66 true)))
 (let (($x285 (= $x246 true)))
 (let (($x318 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x319 (= $x318 true)))
 (let (($x313 (= $x319 true)))
 (let (($x23 (= $x313 true)))
 (let (($x415 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x421 (= $x415 true)))
 (let (($x201 (= $x421 true)))
 (let (($x241 (= $x201 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x188)))
 (let ((?x39 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x39)))
 (let ((?x294 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x294)))
 (let ((?x184 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x98 (= (_ bv4291098127 32) ?x184)))
 (let (($x194 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x48 (and $x194 $x98)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (and $x276 $x48)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x233 (and $x54 $x155)))
 (let (($x28 (not $x233)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x158 (and $x139 $x292)))
 (let (($x293 (and (not $x158) $x28)))
 (let (($x110 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x134 $x110)))
 (let (($x49 (not $x61)))
 (let (($x104 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x162 $x104)))
 (let (($x80 (and (not $x94) $x49)))
 (let (($x190 (and (and (and (and (and (and $x80 $x293) $x78) $x203) $x217) $x60) $x146)))
 (let (($x109 (and $x190 $x126)))
 (let (($x136 (and $x78 $x109)))
 (let (($x163 (= $x136 true)))
 (let (($x412 (= $x163 true)))
 (let (($x417 (= $x412 true)))
 (let ((?x278 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x64 (bvadd (_ bv4291097728 32) ?x278)))
 (let ((?x355 (bvsub ?x64 ?x278)))
 (let (($x352 (ite (bvsge ?x278 (_ bv0 32)) (bvuge ?x64 ?x355) (bvult ?x64 ?x355))))
 (let ((?x416 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x176 (bvmul (_ bv4 64) ?x416)))
 (let ((?x216 ((_ extract 63 32) ?x176)))
 (let (($x337 (= (_ bv0 32) ?x216)))
 (let (($x419 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x335 (and (and (and true $x419) $x337) $x352)))
 (let (($x256 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x242 (and $x256 $x335)))
 (let (($x356 (= true $x242)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x67 $x356)))
 (let (($x290 (= $x244 true)))
 (let (($x167 (= $x290 true)))
 (let (($x243 (= $x167 true)))
 (let (($x70 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x394 (= $x70 true)))
 (let (($x347 (= $x394 true)))
 (let (($x286 (= $x347 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x280 true)))
 (let (($x282 (= $x277 true)))
 (let (($x255 (= $x282 true)))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x31 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x31))))
 (let ((?x103 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv2 32))) ?x390)))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x31 (_ bv3 32))) ?x103)))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x370 (_ bv1 32))))
 (=> $x187 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x323)))))))))
 ))
 (let (($x102 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x358 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x379 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x370 (_ bv1 32))))
 (= $x187 (bvuge ?x379 (_ bv1 32))))))))
 ))
 (let (($x385 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x34 (= false false)))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x370 (_ bv0 32))))
 (=> $x380 $x34)))))
 ))
 (let (($x372 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x358 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x379 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (= ?x370 (_ bv0 32))))
 (= $x380 (= ?x379 (_ bv0 32))))))))
 ))
 (let (($x86 (and $x372 $x385)))
 (let (($x25 (and $x86 $x102)))
 (let (($x145 (and $x25 $x119)))
 (let (($x41 (= $x145 true)))
 (let (($x135 (= $x41 true)))
 (let (($x72 (= $x135 true)))
 (let ((?x325 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x325)))
 (let (($x38 (= ?x105 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (= $x38 true)))
 (let (($x76 (= $x8 true)))
 (let (($x65 (= ?x105 input.dst.llvm-%n)))
 (let (($x51 (= $x65 true)))
 (let (($x223 (= $x51 true)))
 (let (($x353 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x85 (= $x353 true)))
 (let (($x45 (= $x85 true)))
 (let (($x149 (= $x45 true)))
 (let (($x336 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x336 true)))
 (let (($x93 (= $x245 true)))
 (let (($x349 (= $x93 true)))
 (let (($x230 (= $x67 true)))
 (let (($x170 (= $x230 true)))
 (let (($x22 (= $x170 true)))
 (let (($x132 (and $x22 $x349)))
 (let (($x57 (and $x132 $x149)))
 (let (($x63 (and $x57 $x223)))
 (let (($x106 (and $x63 $x76)))
 (let (($x181 (and $x106 $x72)))
 (let (($x174 (and $x181 $x255)))
 (let (($x346 (and $x174 $x286)))
 (let (($x154 (and $x346 $x243)))
 (let (($x418 (and $x154 $x417)))
 (let (($x239 (and $x418 $x241)))
 (let (($x117 (and $x239 $x23)))
 (let (($x189 (and $x117 $x285)))
 (let (($x273 (and $x189 $x266)))
 (let (($x177 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x198 (and (not $x177) $x273)))
 (let (($x422 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x301 (and $x422 $x198)))
 (let (($x403 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x300 (and $x403 $x301)))
 (let (($x396 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x383 (_ bv1 32))))
 (=> $x327 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x329 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x289 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x289 (_ bv1 32))))
 (let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x383 (_ bv1 32))))
 (= $x327 $x199))))))
 ))
 (let (($x362 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x34 (= false false)))
 (let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x383 (_ bv0 32))))
 (=> $x297 $x34)))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x289 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x289 (_ bv0 32))))
 (let ((?x383 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x383 (_ bv0 32))))
 (= $x297 $x364))))))
 ))
 (let (($x269 (and $x234 $x362)))
 (let (($x330 (and $x269 $x329)))
 (let (($x398 (and $x330 $x396)))
 (let (($x129 (and $x398 $x300)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x253 (and $x100 $x129)))
 (let (($x373 (and (bvule input.memlabel-mem--symbol.1_begin ?x64) (bvule (bvadd ?x64 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x211 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false $x373)))))
 (let (($x231 (=> (and $x67 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x373)))))
 (let (($x159 (and $x231 $x253)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x287 (and $x14 $x159)))
 (let (($x272 (=> $x287 $x296)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x18 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x263 (bvsge ?x18 (_ bv0 32))))
 (let (($x299 (= $x263 true)))
 (let (($x360 (= $x299 true)))
 (let ((?x19 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x77 (bvneg ?x19)))
 (let (($x393 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x393 true)))
 (let (($x275 (= $x226 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x228 (= $x124 true)))
 (let (($x121 (= $x228 true)))
 (let (($x283 (= $x121 true)))
 (let (($x321 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x152 (= $x321 true)))
 (let (($x164 (= $x152 true)))
 (let (($x59 (= $x164 true)))
 (let (($x99 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x101 (= $x99 true)))
 (let (($x225 (= $x101 true)))
 (let (($x252 (= $x225 true)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x350)))
 (let ((?x305 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x305)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let ((?x214 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x166 (= (_ bv4291098127 32) ?x214)))
 (let (($x270 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x210 (and $x270 $x166)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x207 $x210)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x165 (and $x250 $x213)))
 (let (($x33 (not $x165)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x249 (and $x312 $x333)))
 (let (($x254 (and (not $x249) $x33)))
 (let (($x348 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x351 $x348)))
 (let (($x261 (not $x267)))
 (let (($x331 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x229 $x331)))
 (let (($x334 (and (not $x265) $x261)))
 (let (($x205 (and (and (and (and (and (and $x334 $x254) $x344) $x204) $x315) $x206) $x21)))
 (let (($x310 (and $x205 $x307)))
 (let (($x55 (and $x344 $x310)))
 (let (($x58 (= $x55 true)))
 (let (($x378 (= $x58 true)))
 (let (($x114 (= $x378 true)))
 (let ((?x64 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd (_ bv4291097728 32) ?x64)))
 (let ((?x262 (bvsub ?x232 ?x64)))
 (let (($x248 (ite (bvsge ?x64 (_ bv0 32)) (bvuge ?x232 ?x262) (bvult ?x232 ?x262))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x180 (bvmul (_ bv4 64) ?x83)))
 (let ((?x147 ((_ extract 63 32) ?x180)))
 (let (($x342 (= (_ bv0 32) ?x147)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x341 (and (and (and true $x142) $x342) $x248)))
 (let (($x173 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x236 (and $x173 $x341)))
 (let (($x240 (= true $x236)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x67 $x240)))
 (let (($x271 (= $x251 true)))
 (let (($x260 (= $x271 true)))
 (let (($x264 (= $x260 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x377 (= $x179 true)))
 (let (($x339 (= $x377 true)))
 (let (($x95 (= $x339 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x399 (= $x69 true)))
 (let (($x400 (= $x399 true)))
 (let (($x401 (= $x400 true)))
 (let (($x169 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x111 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x111))))
 (let ((?x386 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv2 32))) ?x343)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv3 32))) ?x386)))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x241 (_ bv1 32))))
 (=> $x253 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x298)))))))))
 ))
 (let (($x287 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x418 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x415 (ite $x418 (_ bv1 32) (_ bv0 32))))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x241 (_ bv1 32))))
 (= $x253 (bvuge ?x415 (_ bv1 32))))))))
 ))
 (let (($x117 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x245 (= false false)))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x241 (_ bv0 32))))
 (=> $x239 $x245)))))
 ))
 (let (($x319 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x418 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x415 (ite $x418 (_ bv1 32) (_ bv0 32))))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x241 (_ bv0 32))))
 (= $x239 (= ?x415 (_ bv0 32))))))))
 ))
 (let (($x156 (and $x319 $x117)))
 (let (($x197 (and $x156 $x287)))
 (let (($x196 (and $x197 $x169)))
 (let (($x302 (= $x196 true)))
 (let (($x326 (= $x302 true)))
 (let (($x13 (= $x326 true)))
 (let ((?x390 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x390)))
 (let (($x145 (= ?x103 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x41 (= $x145 true)))
 (let (($x135 (= $x41 true)))
 (let (($x323 (= ?x103 input.dst.llvm-%n)))
 (let (($x42 (= $x323 true)))
 (let (($x116 (= $x42 true)))
 (let (($x359 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x406 (= $x359 true)))
 (let (($x409 (= $x406 true)))
 (let (($x6 (= $x409 true)))
 (let (($x357 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x108 (= $x357 true)))
 (let (($x31 (= $x108 true)))
 (let (($x71 (= $x31 true)))
 (let (($x75 (= $x67 true)))
 (let (($x102 (= $x75 true)))
 (let (($x25 (= $x102 true)))
 (let (($x84 (and $x25 $x71)))
 (let (($x404 (and $x84 $x6)))
 (let (($x119 (and $x404 $x116)))
 (let (($x72 (and $x119 $x135)))
 (let (($x227 (and $x72 $x13)))
 (let (($x218 (and $x227 $x401)))
 (let (($x193 (and $x218 $x95)))
 (let (($x268 (and $x193 $x264)))
 (let (($x137 (and $x268 $x114)))
 (let (($x161 (and $x137 $x252)))
 (let (($x150 (and $x161 $x59)))
 (let (($x391 (and $x150 $x283)))
 (let (($x91 (and $x391 $x275)))
 (let (($x182 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and (not $x182) $x91)))
 (let (($x86 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x82 (and $x86 $x50)))
 (let (($x372 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x56 (and $x372 $x82)))
 (let (($x379 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x170 (_ bv1 32))))
 (=> $x51 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x398 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x325 (bvuge ?x398 (_ bv1 32))))
 (let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x170 (_ bv1 32))))
 (= $x51 $x325))))))
 ))
 (let (($x132 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x245 (= false false)))
 (let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x170 (_ bv0 32))))
 (=> $x22 $x245)))))
 ))
 (let (($x336 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x398 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x398 (_ bv0 32))))
 (let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x170 (_ bv0 32))))
 (= $x22 $x413))))))
 ))
 (let (($x353 (and $x336 $x132)))
 (let (($x38 (and $x353 $x63)))
 (let (($x369 (and $x38 $x379)))
 (let (($x389 (and $x369 $x56)))
 (let (($x384 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x392 (and $x384 $x389)))
 (let (($x211 (and (bvule input.memlabel-mem--symbol.1_begin ?x232) (bvule (bvadd ?x232 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false $x211)))))
 (let (($x279 (=> (and $x67 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x211)))))
 (let (($x133 (and $x279 $x392)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x148 (and $x14 $x133)))
 (let (($x43 (=> $x148 $x360)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x18 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x263 (bvsge ?x18 (_ bv0 32))))
 (let (($x299 (= $x263 true)))
 (let (($x360 (= $x299 true)))
 (let ((?x19 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x77 (bvneg ?x19)))
 (let (($x393 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x226 (= $x393 true)))
 (let (($x275 (= $x226 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x228 (= $x124 true)))
 (let (($x121 (= $x228 true)))
 (let (($x283 (= $x121 true)))
 (let (($x321 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x152 (= $x321 true)))
 (let (($x164 (= $x152 true)))
 (let (($x59 (= $x164 true)))
 (let (($x99 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x101 (= $x99 true)))
 (let (($x225 (= $x101 true)))
 (let (($x252 (= $x225 true)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x350)))
 (let ((?x305 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x305)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let ((?x214 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x166 (= (_ bv4291098127 32) ?x214)))
 (let (($x270 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x210 (and $x270 $x166)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x207 $x210)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x165 (and $x250 $x213)))
 (let (($x33 (not $x165)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x312 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x249 (and $x312 $x333)))
 (let (($x254 (and (not $x249) $x33)))
 (let (($x348 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x351 $x348)))
 (let (($x261 (not $x267)))
 (let (($x331 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x229 $x331)))
 (let (($x334 (and (not $x265) $x261)))
 (let (($x205 (and (and (and (and (and (and $x334 $x254) $x344) $x204) $x315) $x206) $x21)))
 (let (($x310 (and $x205 $x307)))
 (let (($x55 (and $x344 $x310)))
 (let (($x58 (= $x55 true)))
 (let (($x378 (= $x58 true)))
 (let (($x114 (= $x378 true)))
 (let ((?x64 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd (_ bv4291097728 32) ?x64)))
 (let ((?x262 (bvsub ?x232 ?x64)))
 (let (($x248 (ite (bvsge ?x64 (_ bv0 32)) (bvuge ?x232 ?x262) (bvult ?x232 ?x262))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x180 (bvmul (_ bv4 64) ?x83)))
 (let ((?x147 ((_ extract 63 32) ?x180)))
 (let (($x342 (= (_ bv0 32) ?x147)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x341 (and (and (and true $x142) $x342) $x248)))
 (let (($x173 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x236 (and $x173 $x341)))
 (let (($x240 (= true $x236)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x67 $x240)))
 (let (($x271 (= $x251 true)))
 (let (($x260 (= $x271 true)))
 (let (($x264 (= $x260 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x377 (= $x179 true)))
 (let (($x339 (= $x377 true)))
 (let (($x95 (= $x339 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x399 (= $x69 true)))
 (let (($x400 (= $x399 true)))
 (let (($x401 (= $x400 true)))
 (let (($x169 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x111 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x343 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x111))))
 (let ((?x386 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv2 32))) ?x343)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x111 (_ bv3 32))) ?x386)))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x241 (_ bv1 32))))
 (=> $x253 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x298)))))))))
 ))
 (let (($x287 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x418 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x415 (ite $x418 (_ bv1 32) (_ bv0 32))))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x241 (_ bv1 32))))
 (= $x253 (bvuge ?x415 (_ bv1 32))))))))
 ))
 (let (($x117 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x245 (= false false)))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x241 (_ bv0 32))))
 (=> $x239 $x245)))))
 ))
 (let (($x319 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x418 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x415 (ite $x418 (_ bv1 32) (_ bv0 32))))
 (let ((?x241 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x241 (_ bv0 32))))
 (= $x239 (= ?x415 (_ bv0 32))))))))
 ))
 (let (($x156 (and $x319 $x117)))
 (let (($x197 (and $x156 $x287)))
 (let (($x196 (and $x197 $x169)))
 (let (($x302 (= $x196 true)))
 (let (($x326 (= $x302 true)))
 (let (($x13 (= $x326 true)))
 (let ((?x390 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x103 (bvneg ?x390)))
 (let (($x145 (= ?x103 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x41 (= $x145 true)))
 (let (($x135 (= $x41 true)))
 (let (($x323 (= ?x103 input.dst.llvm-%n)))
 (let (($x42 (= $x323 true)))
 (let (($x116 (= $x42 true)))
 (let (($x359 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x406 (= $x359 true)))
 (let (($x409 (= $x406 true)))
 (let (($x6 (= $x409 true)))
 (let (($x357 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x108 (= $x357 true)))
 (let (($x31 (= $x108 true)))
 (let (($x71 (= $x31 true)))
 (let (($x75 (= $x67 true)))
 (let (($x102 (= $x75 true)))
 (let (($x25 (= $x102 true)))
 (let (($x84 (and $x25 $x71)))
 (let (($x404 (and $x84 $x6)))
 (let (($x119 (and $x404 $x116)))
 (let (($x72 (and $x119 $x135)))
 (let (($x227 (and $x72 $x13)))
 (let (($x218 (and $x227 $x401)))
 (let (($x193 (and $x218 $x95)))
 (let (($x268 (and $x193 $x264)))
 (let (($x137 (and $x268 $x114)))
 (let (($x161 (and $x137 $x252)))
 (let (($x150 (and $x161 $x59)))
 (let (($x391 (and $x150 $x283)))
 (let (($x91 (and $x391 $x275)))
 (let (($x182 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x50 (and (not $x182) $x91)))
 (let (($x86 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x82 (and $x86 $x50)))
 (let (($x372 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x56 (and $x372 $x82)))
 (let (($x379 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x170 (_ bv1 32))))
 (=> $x51 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x398 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x325 (bvuge ?x398 (_ bv1 32))))
 (let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x170 (_ bv1 32))))
 (= $x51 $x325))))))
 ))
 (let (($x132 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x245 (= false false)))
 (let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x170 (_ bv0 32))))
 (=> $x22 $x245)))))
 ))
 (let (($x336 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x398 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x398 (_ bv0 32))))
 (let ((?x170 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x170 (_ bv0 32))))
 (= $x22 $x413))))))
 ))
 (let (($x353 (and $x336 $x132)))
 (let (($x38 (and $x353 $x63)))
 (let (($x369 (and $x38 $x379)))
 (let (($x389 (and $x369 $x56)))
 (let (($x384 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x392 (and $x384 $x389)))
 (let (($x211 (and (bvule input.memlabel-mem--symbol.1_begin ?x232) (bvule (bvadd ?x232 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false $x211)))))
 (let (($x279 (=> (and $x67 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x211)))))
 (let (($x133 (and $x279 $x392)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x148 (and $x14 $x133)))
 (let (($x43 (=> $x148 $x360)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x408 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (bvule ?x408 (_ bv399 32))))
 (let (($x125 (= $x130 true)))
 (let (($x322 (= $x125 true)))
 (let ((?x183 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x208 (bvneg ?x183)))
 (let (($x376 (= ?x208 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x376 true)))
 (let (($x141 (= $x30 true)))
 (let ((?x232 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvadd (_ bv4291097728 32) ?x232)))
 (let ((?x185 (bvsub ?x62 ?x232)))
 (let (($x198 (ite (bvsge ?x232 (_ bv0 32)) (bvuge ?x62 ?x185) (bvult ?x62 ?x185))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x313 (bvmul (_ bv4 64) ?x163)))
 (let ((?x191 ((_ extract 63 32) ?x313)))
 (let (($x192 (= (_ bv0 32) ?x191)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x296 (and (and (and true $x109) $x192) $x198)))
 (let (($x39 (= (bvand ?x62 (_ bv4294967292 32)) ?x62)))
 (let (($x272 (and $x39 $x296)))
 (let (($x303 (= true $x272)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (=> $x67 $x303)))
 (let (($x143 (= $x12 true)))
 (let (($x288 (= $x143 true)))
 (let (($x131 (= $x288 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x217 (= $x98 true)))
 (let (($x48 (= $x217 true)))
 (let (($x140 (= $x48 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x293 (= $x78 true)))
 (let (($x73 (= $x293 true)))
 (let (($x202 (= $x73 true)))
 (let (($x28 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x134 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x134))))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv2 32))) ?x94)))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv3 32))) ?x155)))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x403 (_ bv1 32))))
 (=> $x394 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x292)))))))))
 ))
 (let (($x174 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x403 (_ bv1 32))))
 (= $x394 (bvuge ?x329 (_ bv1 32))))))))
 ))
 (let (($x85 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x108 (= false false)))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x403 (_ bv0 32))))
 (=> $x414 $x108)))))
 ))
 (let (($x10 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x403 (_ bv0 32))))
 (= $x414 (= ?x329 (_ bv0 32))))))))
 ))
 (let (($x45 (and $x10 $x85)))
 (let (($x70 (and $x45 $x174)))
 (let (($x276 (and $x70 $x28)))
 (let (($x194 (= $x276 true)))
 (let (($x219 (= $x194 true)))
 (let (($x203 (= $x219 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x254 (= $x33 true)))
 (let (($x308 (= $x254 true)))
 (let (($x344 (= $x308 true)))
 (let (($x249 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x304 (= $x249 true)))
 (let (($x250 (= $x304 true)))
 (let (($x213 (= $x250 true)))
 (let (($x261 (= $x67 true)))
 (let (($x334 (= $x261 true)))
 (let (($x312 (= $x334 true)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x251)))
 (let ((?x236 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x236)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x341 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let ((?x237 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x262 (= (_ bv4291098127 32) ?x237)))
 (let (($x209 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x257 (and $x209 $x262)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x387 (and $x342 $x257)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x142 (and $x212 $x224)))
 (let (($x381 (not $x142)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x171 (and $x173 $x172)))
 (let (($x83 (and (not $x171) $x381)))
 (let (($x339 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x377 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x377 $x339)))
 (let (($x193 (not $x95)))
 (let (($x218 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x400 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x400 $x218)))
 (let (($x178 (and (not $x179) $x193)))
 (let (($x345 (and (and (and (and (and (and $x178 $x83) $x69) $x147) $x387) $x341) $x240)))
 (let (($x331 (and $x345 $x271)))
 (let (($x265 (and $x69 $x331)))
 (let (($x68 (= $x265 true)))
 (let (($x351 (= $x68 true)))
 (let (($x348 (= $x351 true)))
 (let (($x196 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x302 (= $x196 true)))
 (let (($x326 (= $x302 true)))
 (let (($x13 (= $x326 true)))
 (let (($x386 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x298 (= $x386 true)))
 (let (($x144 (= $x298 true)))
 (let (($x89 (= $x144 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x375 (bvneg ?x111)))
 (let (($x46 (= ?x375 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (= $x46 true)))
 (let (($x235 (= $x88 true)))
 (let (($x388 (= ?x375 input.dst.llvm-%n)))
 (let (($x367 (= $x388 true)))
 (let (($x363 (= $x367 true)))
 (let (($x287 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x197 (= $x287 true)))
 (let (($x295 (= $x197 true)))
 (let (($x419 (= $x295 true)))
 (let (($x365 (and $x419 $x363)))
 (let (($x343 (and $x365 $x235)))
 (let (($x169 (and $x343 $x89)))
 (let (($x227 (and $x169 $x13)))
 (let (($x267 (and $x227 $x348)))
 (let (($x333 (and $x267 $x312)))
 (let (($x165 (and $x333 $x213)))
 (let (($x220 (and $x165 $x344)))
 (let (($x97 (and $x220 $x203)))
 (let (($x184 (and $x97 $x202)))
 (let (($x294 (and $x184 $x140)))
 (let (($x366 (and $x294 $x131)))
 (let (($x138 (and $x366 $x141)))
 (let (($x129 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x405 (and (not $x129) $x138)))
 (let (($x156 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x238 (and $x156 $x405)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x361 (and $x319 $x238)))
 (let (($x415 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x102 (_ bv1 32))))
 (=> $x42 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x369 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x369 (_ bv1 32))))
 (let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x102 (_ bv1 32))))
 (= $x42 $x390))))))
 ))
 (let (($x84 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x108 (= false false)))
 (let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x102 (_ bv0 32))))
 (=> $x25 $x108)))))
 ))
 (let (($x357 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x369 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x369 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x102 (_ bv0 32))))
 (= $x25 $x382))))))
 ))
 (let (($x359 (and $x357 $x84)))
 (let (($x145 (and $x359 $x119)))
 (let (($x421 (and $x145 $x415)))
 (let (($x338 (and $x421 $x361)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x340 (and $x230 $x338)))
 (let (($x92 (and (bvule input.memlabel-mem--symbol.1_begin ?x62) (bvule (bvadd ?x62 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x274 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false $x92)))))
 (let (($x281 (=> (and $x67 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x92)))))
 (let (($x128 (and $x281 $x340)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x259 (and $x14 $x128)))
 (let (($x127 (=> $x259 $x322)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x408 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x130 (bvule ?x408 (_ bv399 32))))
 (let (($x125 (= $x130 true)))
 (let (($x322 (= $x125 true)))
 (let ((?x183 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x208 (bvneg ?x183)))
 (let (($x376 (= ?x208 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x376 true)))
 (let (($x141 (= $x30 true)))
 (let ((?x232 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvadd (_ bv4291097728 32) ?x232)))
 (let ((?x185 (bvsub ?x62 ?x232)))
 (let (($x198 (ite (bvsge ?x232 (_ bv0 32)) (bvuge ?x62 ?x185) (bvult ?x62 ?x185))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x313 (bvmul (_ bv4 64) ?x163)))
 (let ((?x191 ((_ extract 63 32) ?x313)))
 (let (($x192 (= (_ bv0 32) ?x191)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x296 (and (and (and true $x109) $x192) $x198)))
 (let (($x39 (= (bvand ?x62 (_ bv4294967292 32)) ?x62)))
 (let (($x272 (and $x39 $x296)))
 (let (($x303 (= true $x272)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (=> $x67 $x303)))
 (let (($x143 (= $x12 true)))
 (let (($x288 (= $x143 true)))
 (let (($x131 (= $x288 true)))
 (let (($x98 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x217 (= $x98 true)))
 (let (($x48 (= $x217 true)))
 (let (($x140 (= $x48 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x293 (= $x78 true)))
 (let (($x73 (= $x293 true)))
 (let (($x202 (= $x73 true)))
 (let (($x28 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x134 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x134))))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv2 32))) ?x94)))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x134 (_ bv3 32))) ?x155)))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x403 (_ bv1 32))))
 (=> $x394 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x292)))))))))
 ))
 (let (($x174 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x403 (_ bv1 32))))
 (= $x394 (bvuge ?x329 (_ bv1 32))))))))
 ))
 (let (($x85 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x108 (= false false)))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x403 (_ bv0 32))))
 (=> $x414 $x108)))))
 ))
 (let (($x10 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let ((?x403 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x403 (_ bv0 32))))
 (= $x414 (= ?x329 (_ bv0 32))))))))
 ))
 (let (($x45 (and $x10 $x85)))
 (let (($x70 (and $x45 $x174)))
 (let (($x276 (and $x70 $x28)))
 (let (($x194 (= $x276 true)))
 (let (($x219 (= $x194 true)))
 (let (($x203 (= $x219 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x254 (= $x33 true)))
 (let (($x308 (= $x254 true)))
 (let (($x344 (= $x308 true)))
 (let (($x249 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x304 (= $x249 true)))
 (let (($x250 (= $x304 true)))
 (let (($x213 (= $x250 true)))
 (let (($x261 (= $x67 true)))
 (let (($x334 (= $x261 true)))
 (let (($x312 (= $x334 true)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x251)))
 (let ((?x236 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x236)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x341 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x248)))
 (let ((?x237 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x262 (= (_ bv4291098127 32) ?x237)))
 (let (($x209 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x257 (and $x209 $x262)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x387 (and $x342 $x257)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x142 (and $x212 $x224)))
 (let (($x381 (not $x142)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x171 (and $x173 $x172)))
 (let (($x83 (and (not $x171) $x381)))
 (let (($x339 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x377 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x377 $x339)))
 (let (($x193 (not $x95)))
 (let (($x218 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x400 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x400 $x218)))
 (let (($x178 (and (not $x179) $x193)))
 (let (($x345 (and (and (and (and (and (and $x178 $x83) $x69) $x147) $x387) $x341) $x240)))
 (let (($x331 (and $x345 $x271)))
 (let (($x265 (and $x69 $x331)))
 (let (($x68 (= $x265 true)))
 (let (($x351 (= $x68 true)))
 (let (($x348 (= $x351 true)))
 (let (($x196 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x302 (= $x196 true)))
 (let (($x326 (= $x302 true)))
 (let (($x13 (= $x326 true)))
 (let (($x386 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x298 (= $x386 true)))
 (let (($x144 (= $x298 true)))
 (let (($x89 (= $x144 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x375 (bvneg ?x111)))
 (let (($x46 (= ?x375 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x88 (= $x46 true)))
 (let (($x235 (= $x88 true)))
 (let (($x388 (= ?x375 input.dst.llvm-%n)))
 (let (($x367 (= $x388 true)))
 (let (($x363 (= $x367 true)))
 (let (($x287 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x197 (= $x287 true)))
 (let (($x295 (= $x197 true)))
 (let (($x419 (= $x295 true)))
 (let (($x365 (and $x419 $x363)))
 (let (($x343 (and $x365 $x235)))
 (let (($x169 (and $x343 $x89)))
 (let (($x227 (and $x169 $x13)))
 (let (($x267 (and $x227 $x348)))
 (let (($x333 (and $x267 $x312)))
 (let (($x165 (and $x333 $x213)))
 (let (($x220 (and $x165 $x344)))
 (let (($x97 (and $x220 $x203)))
 (let (($x184 (and $x97 $x202)))
 (let (($x294 (and $x184 $x140)))
 (let (($x366 (and $x294 $x131)))
 (let (($x138 (and $x366 $x141)))
 (let (($x129 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x405 (and (not $x129) $x138)))
 (let (($x156 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x238 (and $x156 $x405)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x361 (and $x319 $x238)))
 (let (($x415 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x102 (_ bv1 32))))
 (=> $x42 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x119 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x369 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x369 (_ bv1 32))))
 (let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x102 (_ bv1 32))))
 (= $x42 $x390))))))
 ))
 (let (($x84 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x108 (= false false)))
 (let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x102 (_ bv0 32))))
 (=> $x25 $x108)))))
 ))
 (let (($x357 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x369 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x369 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x25 (= ?x102 (_ bv0 32))))
 (= $x25 $x382))))))
 ))
 (let (($x359 (and $x357 $x84)))
 (let (($x145 (and $x359 $x119)))
 (let (($x421 (and $x145 $x415)))
 (let (($x338 (and $x421 $x361)))
 (let (($x230 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x340 (and $x230 $x338)))
 (let (($x92 (and (bvule input.memlabel-mem--symbol.1_begin ?x62) (bvule (bvadd ?x62 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x274 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false $x92)))))
 (let (($x281 (=> (and $x67 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x92)))))
 (let (($x128 (and $x281 $x340)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x259 (and $x14 $x128)))
 (let (($x127 (=> $x259 $x322)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x356 (bvsle ?x40 (_ bv399 32))))
 (let (($x167 (= $x356 true)))
 (let (($x79 (= $x167 true)))
 (let ((?x285 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x66 (bvneg ?x285)))
 (let (($x189 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x352 (= $x189 true)))
 (let (($x354 (= $x352 true)))
 (let ((?x62 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x306 (bvadd (_ bv4291097728 32) ?x62)))
 (let ((?x8 (bvsub ?x306 ?x62)))
 (let (($x380 (ite (bvsge ?x62 (_ bv0 32)) (bvuge ?x306 ?x8) (bvult ?x306 ?x8))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x269)))
 (let ((?x65 ((_ extract 63 32) ?x177)))
 (let (($x76 (= (_ bv0 32) ?x65)))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x346 (and (and (and true $x234) $x76) $x380)))
 (let (($x397 (= (bvand ?x306 (_ bv4294967292 32)) ?x306)))
 (let (($x317 (and $x397 $x346)))
 (let (($x107 (= true $x317)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x335 (=> $x67 $x107)))
 (let (($x355 (= $x335 true)))
 (let (($x27 (= $x355 true)))
 (let (($x123 (= $x27 true)))
 (let (($x383 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x383 true)))
 (let (($x297 (= $x289 true)))
 (let (($x364 (= $x297 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x81 true)))
 (let (($x420 (= $x256 true)))
 (let (($x181 (= $x420 true)))
 (let (($x222 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x50 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x50))))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv2 32))) ?x275)))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv3 32))) ?x360)))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x372 (_ bv1 32))))
 (=> $x210 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x148)))))))))
 ))
 (let (($x214 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x372 (_ bv1 32))))
 (= $x210 (bvuge ?x63 (_ bv1 32))))))))
 ))
 (let (($x406 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x122 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x372 (_ bv0 32))))
 (=> $x385 $x122)))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x372 (_ bv0 32))))
 (= $x385 (= ?x63 (_ bv0 32))))))))
 ))
 (let (($x409 (and $x187 $x406)))
 (let (($x166 (and $x409 $x214)))
 (let (($x280 (and $x166 $x222)))
 (let (($x277 (= $x280 true)))
 (let (($x291 (= $x277 true)))
 (let (($x157 (= $x291 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x276 (= $x28 true)))
 (let (($x194 (= $x276 true)))
 (let (($x219 (= $x194 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x155 (= $x94 true)))
 (let (($x292 (= $x155 true)))
 (let (($x54 (= $x292 true)))
 (let (($x80 (= $x67 true)))
 (let (($x104 (= $x80 true)))
 (let (($x162 (= $x104 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x394 (= (_ bv0 32) ?x45)))
 (let ((?x93 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x93)))
 (let ((?x422 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x422)))
 (let ((?x327 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x328 (= (_ bv4291098127 32) ?x327)))
 (let (($x199 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x329 (and $x199 $x328)))
 (let (($x414 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x402 (and $x414 $x329)))
 (let (($x403 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x254 (and $x165 $x33)))
 (let (($x308 (not $x254)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x213 (and $x304 $x250)))
 (let (($x220 (and (not $x213) $x308)))
 (let (($x261 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x334 (and $x267 $x261)))
 (let (($x312 (not $x334)))
 (let (($x351 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x265 $x351)))
 (let (($x249 (and (not $x348) $x312)))
 (let (($x310 (and (and (and (and (and (and $x249 $x220) $x271) $x403) $x402) $x10) $x85)))
 (let (($x26 (and $x310 $x394)))
 (let (($x134 (and $x271 $x26)))
 (let (($x139 (= $x134 true)))
 (let (($x158 (= $x139 true)))
 (let (($x225 (= $x158 true)))
 (let (($x229 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x236 (= $x229 true)))
 (let (($x240 (= $x236 true)))
 (let (($x345 (= $x240 true)))
 (let (($x257 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x387 (= $x257 true)))
 (let (($x332 (= $x387 true)))
 (let (($x248 (= $x332 true)))
 (let ((?x260 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x260)))
 (let (($x342 (= ?x69 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (= $x342 true)))
 (let (($x237 (= $x209 true)))
 (let (($x264 (= ?x69 input.dst.llvm-%n)))
 (let (($x180 (= $x264 true)))
 (let (($x147 (= $x180 true)))
 (let (($x212 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x224 (= $x212 true)))
 (let (($x142 (= $x224 true)))
 (let (($x381 (= $x142 true)))
 (let (($x268 (and $x381 $x147)))
 (let (($x262 (and $x268 $x237)))
 (let (($x341 (and $x262 $x248)))
 (let (($x251 (and $x341 $x345)))
 (let (($x110 (and $x251 $x225)))
 (let (($x118 (and $x110 $x162)))
 (let (($x233 (and $x118 $x54)))
 (let (($x203 (and $x233 $x219)))
 (let (($x309 (and $x203 $x157)))
 (let (($x282 (and $x309 $x181)))
 (let (($x330 (and $x282 $x364)))
 (let (($x246 (and $x330 $x123)))
 (let (($x216 (and $x246 $x354)))
 (let (($x171 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x176 (and (not $x171) $x216)))
 (let (($x173 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x243 (and $x173 $x176)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x154 (and $x95 $x243)))
 (let (($x186 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x287 (_ bv1 32))))
 (=> $x144 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x169 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x421 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x421 (_ bv1 32))))
 (let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x287 (_ bv1 32))))
 (= $x144 $x343))))))
 ))
 (let (($x388 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x122 (= false false)))
 (let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x287 (_ bv0 32))))
 (=> $x197 $x122)))))
 ))
 (let (($x419 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x421 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x421 (_ bv0 32))))
 (let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x287 (_ bv0 32))))
 (= $x197 $x23))))))
 ))
 (let (($x367 (and $x419 $x388)))
 (let (($x196 (and $x367 $x169)))
 (let (($x377 (and $x196 $x186)))
 (let (($x290 (and $x377 $x154)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x244 (and $x75 $x290)))
 (let (($x274 (and (bvule input.memlabel-mem--symbol.1_begin ?x306) (bvule (bvadd ?x306 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule ?x306 (bvsub (bvadd ?x306 (_ bv4 32)) (_ bv1 32))) (or false (or false $x274)))))
 (let (($x20 (=> (and $x67 (bvule ?x306 (bvsub (bvadd ?x306 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x274)))))
 (let (($x411 (and $x20 $x244)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x242 (and $x14 $x411)))
 (let (($x61 (=> $x242 $x79)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x40 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x356 (bvsle ?x40 (_ bv399 32))))
 (let (($x167 (= $x356 true)))
 (let (($x79 (= $x167 true)))
 (let ((?x285 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x66 (bvneg ?x285)))
 (let (($x189 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x352 (= $x189 true)))
 (let (($x354 (= $x352 true)))
 (let ((?x62 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x306 (bvadd (_ bv4291097728 32) ?x62)))
 (let ((?x8 (bvsub ?x306 ?x62)))
 (let (($x380 (ite (bvsge ?x62 (_ bv0 32)) (bvuge ?x306 ?x8) (bvult ?x306 ?x8))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x269)))
 (let ((?x65 ((_ extract 63 32) ?x177)))
 (let (($x76 (= (_ bv0 32) ?x65)))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x346 (and (and (and true $x234) $x76) $x380)))
 (let (($x397 (= (bvand ?x306 (_ bv4294967292 32)) ?x306)))
 (let (($x317 (and $x397 $x346)))
 (let (($x107 (= true $x317)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x335 (=> $x67 $x107)))
 (let (($x355 (= $x335 true)))
 (let (($x27 (= $x355 true)))
 (let (($x123 (= $x27 true)))
 (let (($x383 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x383 true)))
 (let (($x297 (= $x289 true)))
 (let (($x364 (= $x297 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x81 true)))
 (let (($x420 (= $x256 true)))
 (let (($x181 (= $x420 true)))
 (let (($x222 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x50 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x50))))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv2 32))) ?x275)))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x50 (_ bv3 32))) ?x360)))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x372 (_ bv1 32))))
 (=> $x210 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x148)))))))))
 ))
 (let (($x214 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (bvuge ?x372 (_ bv1 32))))
 (= $x210 (bvuge ?x63 (_ bv1 32))))))))
 ))
 (let (($x406 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x122 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x372 (_ bv0 32))))
 (=> $x385 $x122)))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x63 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x372 (_ bv0 32))))
 (= $x385 (= ?x63 (_ bv0 32))))))))
 ))
 (let (($x409 (and $x187 $x406)))
 (let (($x166 (and $x409 $x214)))
 (let (($x280 (and $x166 $x222)))
 (let (($x277 (= $x280 true)))
 (let (($x291 (= $x277 true)))
 (let (($x157 (= $x291 true)))
 (let (($x28 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x276 (= $x28 true)))
 (let (($x194 (= $x276 true)))
 (let (($x219 (= $x194 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x155 (= $x94 true)))
 (let (($x292 (= $x155 true)))
 (let (($x54 (= $x292 true)))
 (let (($x80 (= $x67 true)))
 (let (($x104 (= $x80 true)))
 (let (($x162 (= $x104 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x394 (= (_ bv0 32) ?x45)))
 (let ((?x93 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x93)))
 (let ((?x422 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x422)))
 (let ((?x327 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x328 (= (_ bv4291098127 32) ?x327)))
 (let (($x199 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x329 (and $x199 $x328)))
 (let (($x414 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x402 (and $x414 $x329)))
 (let (($x403 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x254 (and $x165 $x33)))
 (let (($x308 (not $x254)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x213 (and $x304 $x250)))
 (let (($x220 (and (not $x213) $x308)))
 (let (($x261 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x334 (and $x267 $x261)))
 (let (($x312 (not $x334)))
 (let (($x351 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x265 $x351)))
 (let (($x249 (and (not $x348) $x312)))
 (let (($x310 (and (and (and (and (and (and $x249 $x220) $x271) $x403) $x402) $x10) $x85)))
 (let (($x26 (and $x310 $x394)))
 (let (($x134 (and $x271 $x26)))
 (let (($x139 (= $x134 true)))
 (let (($x158 (= $x139 true)))
 (let (($x225 (= $x158 true)))
 (let (($x229 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x236 (= $x229 true)))
 (let (($x240 (= $x236 true)))
 (let (($x345 (= $x240 true)))
 (let (($x257 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x387 (= $x257 true)))
 (let (($x332 (= $x387 true)))
 (let (($x248 (= $x332 true)))
 (let ((?x260 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x69 (bvneg ?x260)))
 (let (($x342 (= ?x69 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x209 (= $x342 true)))
 (let (($x237 (= $x209 true)))
 (let (($x264 (= ?x69 input.dst.llvm-%n)))
 (let (($x180 (= $x264 true)))
 (let (($x147 (= $x180 true)))
 (let (($x212 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x224 (= $x212 true)))
 (let (($x142 (= $x224 true)))
 (let (($x381 (= $x142 true)))
 (let (($x268 (and $x381 $x147)))
 (let (($x262 (and $x268 $x237)))
 (let (($x341 (and $x262 $x248)))
 (let (($x251 (and $x341 $x345)))
 (let (($x110 (and $x251 $x225)))
 (let (($x118 (and $x110 $x162)))
 (let (($x233 (and $x118 $x54)))
 (let (($x203 (and $x233 $x219)))
 (let (($x309 (and $x203 $x157)))
 (let (($x282 (and $x309 $x181)))
 (let (($x330 (and $x282 $x364)))
 (let (($x246 (and $x330 $x123)))
 (let (($x216 (and $x246 $x354)))
 (let (($x171 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x176 (and (not $x171) $x216)))
 (let (($x173 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x243 (and $x173 $x176)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x154 (and $x95 $x243)))
 (let (($x186 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x287 (_ bv1 32))))
 (=> $x144 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x169 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x421 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x421 (_ bv1 32))))
 (let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x287 (_ bv1 32))))
 (= $x144 $x343))))))
 ))
 (let (($x388 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x122 (= false false)))
 (let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x287 (_ bv0 32))))
 (=> $x197 $x122)))))
 ))
 (let (($x419 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x421 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x421 (_ bv0 32))))
 (let ((?x287 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x287 (_ bv0 32))))
 (= $x197 $x23))))))
 ))
 (let (($x367 (and $x419 $x388)))
 (let (($x196 (and $x367 $x169)))
 (let (($x377 (and $x196 $x186)))
 (let (($x290 (and $x377 $x154)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x244 (and $x75 $x290)))
 (let (($x274 (and (bvule input.memlabel-mem--symbol.1_begin ?x306) (bvule (bvadd ?x306 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule ?x306 (bvsub (bvadd ?x306 (_ bv4 32)) (_ bv1 32))) (or false (or false $x274)))))
 (let (($x20 (=> (and $x67 (bvule ?x306 (bvsub (bvadd ?x306 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x274)))))
 (let (($x411 (and $x20 $x244)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x242 (and $x14 $x411)))
 (let (($x61 (=> $x242 $x79)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 218 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (bvsge ?x101 (_ bv0 32))))
 (let (($x121 (= $x150 true)))
 (let (($x19 (= $x121 true)))
 (let ((?x168 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x149 (bvneg ?x168)))
 (let (($x105 (= ?x149 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x105 true)))
 (let (($x161 (= $x152 true)))
 (let ((?x306 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x29 (bvadd (_ bv4291097728 32) ?x306)))
 (let ((?x41 (bvsub ?x29 ?x306)))
 (let (($x239 (ite (bvsge ?x306 (_ bv0 32)) (bvuge ?x29 ?x41) (bvult ?x29 ?x41))))
 (let ((?x353 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvmul (_ bv4 64) ?x353)))
 (let ((?x323 ((_ extract 63 32) ?x182)))
 (let (($x135 (= (_ bv0 32) ?x323)))
 (let (($x336 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x316 (and (and (and true $x336) $x135) $x239)))
 (let (($x115 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x206 (and $x115 $x316)))
 (let (($x314 (= true $x206)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x67 $x314)))
 (let (($x252 (= $x164 true)))
 (let (($x347 (= $x252 true)))
 (let (($x286 (= $x347 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (= $x207 true)))
 (let (($x170 (= $x22 true)))
 (let (($x398 (= $x170 true)))
 (let (($x307 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x34 (= $x307 true)))
 (let (($x21 (= $x34 true)))
 (let (($x407 (= $x21 true)))
 (let (($x320 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x405 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x405 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x405))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x405 (_ bv2 32))) ?x141)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x405 (_ bv3 32))) ?x322)))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x319 (_ bv1 32))))
 (=> $x217 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x259)))))))))
 ))
 (let (($x184 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x119 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x319 (_ bv1 32))))
 (= $x217 (bvuge ?x119 (_ bv1 32))))))))
 ))
 (let (($x363 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x319 (_ bv0 32))))
 (=> $x117 $x83)))))
 ))
 (let (($x253 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x119 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x319 (_ bv0 32))))
 (= $x117 (= ?x119 (_ bv0 32))))))))
 ))
 (let (($x365 (and $x253 $x363)))
 (let (($x98 (and $x365 $x184)))
 (let (($x258 (and $x98 $x320)))
 (let (($x204 (= $x258 true)))
 (let (($x58 (= $x204 true)))
 (let (($x278 (= $x58 true)))
 (let (($x222 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x280 (= $x222 true)))
 (let (($x277 (= $x280 true)))
 (let (($x291 (= $x277 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x360 (= $x275 true)))
 (let (($x148 (= $x360 true)))
 (let (($x299 (= $x148 true)))
 (let (($x392 (= $x67 true)))
 (let (($x226 (= $x392 true)))
 (let (($x77 (= $x226 true)))
 (let ((?x409 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x409)))
 (let ((?x31 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x406 (= (_ bv0 32) ?x31)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x51 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x223 (= (_ bv4291098127 32) ?x51)))
 (let (($x325 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x63 (and $x325 $x223)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x374 (and $x385 $x63)))
 (let (($x372 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x276 (and $x233 $x28)))
 (let (($x194 (not $x276)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x54 (and $x155 $x292)))
 (let (($x203 (and (not $x54) $x194)))
 (let (($x80 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x110 $x80)))
 (let (($x162 (not $x104)))
 (let (($x158 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x134 $x158)))
 (let (($x94 (and (not $x225) $x162)))
 (let (($x109 (and (and (and (and (and (and $x94 $x203) $x394) $x372) $x374) $x187) $x406)))
 (let (($x91 (and $x109 $x210)))
 (let (($x50 (and $x394 $x91)))
 (let (($x133 (= $x50 true)))
 (let (($x18 (= $x133 true)))
 (let (($x175 (= $x18 true)))
 (let (($x215 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x93 (= $x215 true)))
 (let (($x85 (= $x93 true)))
 (let (($x310 (= $x85 true)))
 (let (($x329 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x402 (= $x329 true)))
 (let (($x70 (= $x402 true)))
 (let (($x422 (= $x70 true)))
 (let ((?x416 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x271 (bvneg ?x416)))
 (let (($x414 (= ?x271 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (= $x414 true)))
 (let (($x327 (= $x199 true)))
 (let (($x255 (= ?x271 input.dst.llvm-%n)))
 (let (($x396 (= $x255 true)))
 (let (($x403 (= $x396 true)))
 (let (($x165 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x33 (= $x165 true)))
 (let (($x254 (= $x33 true)))
 (let (($x308 (= $x254 true)))
 (let (($x174 (and $x308 $x403)))
 (let (($x328 (and $x174 $x327)))
 (let (($x10 (and $x328 $x422)))
 (let (($x45 (and $x10 $x310)))
 (let (($x82 (and $x45 $x175)))
 (let (($x393 (and $x82 $x77)))
 (let (($x43 (and $x393 $x299)))
 (let (($x157 (and $x43 $x291)))
 (let (($x305 (and $x157 $x278)))
 (let (($x221 (and $x305 $x407)))
 (let (($x413 (and $x221 $x398)))
 (let (($x57 (and $x413 $x286)))
 (let (($x137 (and $x57 $x161)))
 (let (($x213 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x114 (and (not $x213) $x137)))
 (let (($x304 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x283 (and $x304 $x114)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x391 (and $x334 $x283)))
 (let (($x333 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x212 (_ bv1 32))))
 (=> $x332 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x341 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x377 (_ bv1 32))))
 (let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x212 (_ bv1 32))))
 (= $x332 $x262))))))
 ))
 (let (($x264 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x212 (_ bv0 32))))
 (=> $x224 $x83)))))
 ))
 (let (($x381 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x377 (_ bv0 32))))
 (let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x212 (_ bv0 32))))
 (= $x224 $x193))))))
 ))
 (let (($x180 (and $x381 $x264)))
 (let (($x229 (and $x180 $x341)))
 (let (($x267 (and $x229 $x333)))
 (let (($x228 (and $x267 $x391)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x124 (and $x159 $x228)))
 (let (($x112 (and (bvule input.memlabel-mem--symbol.1_begin ?x29) (bvule (bvadd ?x29 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false $x112)))))
 (let (($x231 (=> (and $x67 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x112)))))
 (let (($x321 (and $x231 $x124)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x59 (and $x14 $x321)))
 (let (($x56 (=> $x59 $x19)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (bvsge ?x101 (_ bv0 32))))
 (let (($x121 (= $x150 true)))
 (let (($x19 (= $x121 true)))
 (let ((?x168 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x149 (bvneg ?x168)))
 (let (($x105 (= ?x149 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x105 true)))
 (let (($x161 (= $x152 true)))
 (let ((?x306 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x29 (bvadd (_ bv4291097728 32) ?x306)))
 (let ((?x41 (bvsub ?x29 ?x306)))
 (let (($x239 (ite (bvsge ?x306 (_ bv0 32)) (bvuge ?x29 ?x41) (bvult ?x29 ?x41))))
 (let ((?x353 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvmul (_ bv4 64) ?x353)))
 (let ((?x323 ((_ extract 63 32) ?x182)))
 (let (($x135 (= (_ bv0 32) ?x323)))
 (let (($x336 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x316 (and (and (and true $x336) $x135) $x239)))
 (let (($x115 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x206 (and $x115 $x316)))
 (let (($x314 (= true $x206)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (=> $x67 $x314)))
 (let (($x252 (= $x164 true)))
 (let (($x347 (= $x252 true)))
 (let (($x286 (= $x347 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (= $x207 true)))
 (let (($x170 (= $x22 true)))
 (let (($x398 (= $x170 true)))
 (let (($x307 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x34 (= $x307 true)))
 (let (($x21 (= $x34 true)))
 (let (($x407 (= $x21 true)))
 (let (($x320 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x405 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x405 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x405))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x405 (_ bv2 32))) ?x141)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x405 (_ bv3 32))) ?x322)))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x319 (_ bv1 32))))
 (=> $x217 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x259)))))))))
 ))
 (let (($x184 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x119 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x319 (_ bv1 32))))
 (= $x217 (bvuge ?x119 (_ bv1 32))))))))
 ))
 (let (($x363 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x319 (_ bv0 32))))
 (=> $x117 $x83)))))
 ))
 (let (($x253 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x119 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x319 (_ bv0 32))))
 (= $x117 (= ?x119 (_ bv0 32))))))))
 ))
 (let (($x365 (and $x253 $x363)))
 (let (($x98 (and $x365 $x184)))
 (let (($x258 (and $x98 $x320)))
 (let (($x204 (= $x258 true)))
 (let (($x58 (= $x204 true)))
 (let (($x278 (= $x58 true)))
 (let (($x222 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x280 (= $x222 true)))
 (let (($x277 (= $x280 true)))
 (let (($x291 (= $x277 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x360 (= $x275 true)))
 (let (($x148 (= $x360 true)))
 (let (($x299 (= $x148 true)))
 (let (($x392 (= $x67 true)))
 (let (($x226 (= $x392 true)))
 (let (($x77 (= $x226 true)))
 (let ((?x409 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x409)))
 (let ((?x31 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x406 (= (_ bv0 32) ?x31)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x51 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x223 (= (_ bv4291098127 32) ?x51)))
 (let (($x325 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x63 (and $x325 $x223)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x374 (and $x385 $x63)))
 (let (($x372 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x276 (and $x233 $x28)))
 (let (($x194 (not $x276)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x54 (and $x155 $x292)))
 (let (($x203 (and (not $x54) $x194)))
 (let (($x80 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x110 $x80)))
 (let (($x162 (not $x104)))
 (let (($x158 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x134 $x158)))
 (let (($x94 (and (not $x225) $x162)))
 (let (($x109 (and (and (and (and (and (and $x94 $x203) $x394) $x372) $x374) $x187) $x406)))
 (let (($x91 (and $x109 $x210)))
 (let (($x50 (and $x394 $x91)))
 (let (($x133 (= $x50 true)))
 (let (($x18 (= $x133 true)))
 (let (($x175 (= $x18 true)))
 (let (($x215 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x93 (= $x215 true)))
 (let (($x85 (= $x93 true)))
 (let (($x310 (= $x85 true)))
 (let (($x329 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x402 (= $x329 true)))
 (let (($x70 (= $x402 true)))
 (let (($x422 (= $x70 true)))
 (let ((?x416 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x271 (bvneg ?x416)))
 (let (($x414 (= ?x271 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x199 (= $x414 true)))
 (let (($x327 (= $x199 true)))
 (let (($x255 (= ?x271 input.dst.llvm-%n)))
 (let (($x396 (= $x255 true)))
 (let (($x403 (= $x396 true)))
 (let (($x165 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x33 (= $x165 true)))
 (let (($x254 (= $x33 true)))
 (let (($x308 (= $x254 true)))
 (let (($x174 (and $x308 $x403)))
 (let (($x328 (and $x174 $x327)))
 (let (($x10 (and $x328 $x422)))
 (let (($x45 (and $x10 $x310)))
 (let (($x82 (and $x45 $x175)))
 (let (($x393 (and $x82 $x77)))
 (let (($x43 (and $x393 $x299)))
 (let (($x157 (and $x43 $x291)))
 (let (($x305 (and $x157 $x278)))
 (let (($x221 (and $x305 $x407)))
 (let (($x413 (and $x221 $x398)))
 (let (($x57 (and $x413 $x286)))
 (let (($x137 (and $x57 $x161)))
 (let (($x213 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x114 (and (not $x213) $x137)))
 (let (($x304 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x283 (and $x304 $x114)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x391 (and $x334 $x283)))
 (let (($x333 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x212 (_ bv1 32))))
 (=> $x332 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x341 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x377 (_ bv1 32))))
 (let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x212 (_ bv1 32))))
 (= $x332 $x262))))))
 ))
 (let (($x264 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x212 (_ bv0 32))))
 (=> $x224 $x83)))))
 ))
 (let (($x381 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x377 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x377 (_ bv0 32))))
 (let ((?x212 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (= ?x212 (_ bv0 32))))
 (= $x224 $x193))))))
 ))
 (let (($x180 (and $x381 $x264)))
 (let (($x229 (and $x180 $x341)))
 (let (($x267 (and $x229 $x333)))
 (let (($x228 (and $x267 $x391)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x124 (and $x159 $x228)))
 (let (($x112 (and (bvule input.memlabel-mem--symbol.1_begin ?x29) (bvule (bvadd ?x29 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false $x112)))))
 (let (($x231 (=> (and $x67 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x112)))))
 (let (($x321 (and $x231 $x124)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x59 (and $x14 $x321)))
 (let (($x56 (=> $x59 $x19)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x300 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (bvule ?x300 input.dst.llvm-%n)))
 (let (($x288 (= $x303 true)))
 (let (($x183 (= $x288 true)))
 (let ((?x16 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x6 (bvneg ?x16)))
 (let (($x103 (= ?x6 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x103 true)))
 (let (($x266 (= $x198 true)))
 (let ((?x378 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x394 (bvneg ?x378)))
 (let (($x185 (= ?x394 input.dst.llvm-%n)))
 (let (($x315 (= $x185 true)))
 (let (($x311 (= $x315 true)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x160 (bvadd (_ bv4291097728 32) ?x29)))
 (let ((?x359 (bvsub ?x160 ?x29)))
 (let (($x302 (ite (bvsge ?x29 (_ bv0 32)) (bvuge ?x160 ?x359) (bvult ?x160 ?x359))))
 (let ((?x301 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x90 (bvmul (_ bv4 64) ?x301)))
 (let ((?x357 ((_ extract 63 32) ?x90)))
 (let (($x71 (= (_ bv0 32) ?x357)))
 (let (($x418 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x399 (and (and (and true $x418) $x71) $x302)))
 (let (($x369 (= (bvand ?x160 (_ bv4294967292 32)) ?x160)))
 (let (($x400 (and $x369 $x399)))
 (let (($x146 (= true $x400)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x190 (=> $x67 $x146)))
 (let (($x294 (= $x190 true)))
 (let (($x60 (= $x294 true)))
 (let (($x113 (= $x60 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x245 true)))
 (let (($x373 (= $x188 true)))
 (let (($x293 (= $x373 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x78 true)))
 (let (($x64 (= $x136 true)))
 (let (($x39 (= $x64 true)))
 (let (($x242 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x285 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x285))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv2 32))) ?x176)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv3 32))) ?x66)))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x89 (_ bv1 32))))
 (=> $x265 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x244)))))))))
 ))
 (let (($x324 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x375 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x367 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x89 (_ bv1 32))))
 (= $x265 (bvuge ?x367 (_ bv1 32))))))))
 ))
 (let (($x173 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x89 (_ bv0 32))))
 (=> $x169 $x220)))))
 ))
 (let (($x186 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x375 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x367 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x89 (_ bv0 32))))
 (= $x169 (= ?x367 (_ bv0 32))))))))
 ))
 (let (($x172 (and $x186 $x173)))
 (let (($x269 (and $x172 $x324)))
 (let (($x356 (and $x269 $x242)))
 (let (($x167 (= $x356 true)))
 (let (($x61 (= $x167 true)))
 (let (($x49 (= $x61 true)))
 (let (($x322 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x259 (= $x322 true)))
 (let (($x125 (= $x259 true)))
 (let (($x127 (= $x125 true)))
 (let (($x340 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x30 (= $x340 true)))
 (let (($x208 (= $x30 true)))
 (let (($x376 (= $x208 true)))
 (let (($x128 (= $x67 true)))
 (let (($x408 (= $x128 true)))
 (let (($x106 (= $x408 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x156)))
 (let ((?x119 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x119)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x415 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x319 (= (_ bv4291098127 32) ?x415)))
 (let (($x157 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x117 (and $x157 $x319)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x390 (and $x291 $x117)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x360 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x148 (and $x275 $x360)))
 (let (($x299 (not $x148)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x393 (and $x226 $x77)))
 (let (($x222 (and (not $x393) $x299)))
 (let (($x133 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x50 $x133)))
 (let (($x175 (not $x18)))
 (let (($x210 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x109 $x210)))
 (let (($x392 (and (not $x91) $x175)))
 (let (($x202 (and (and (and (and (and (and $x392 $x222) $x31) $x277) $x390) $x116) $x318)))
 (let (($x184 (and $x202 $x253)))
 (let (($x98 (and $x31 $x184)))
 (let (($x130 (= $x98 true)))
 (let (($x234 (= $x130 true)))
 (let (($x138 (= $x234 true)))
 (let (($x374 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x166 (= $x374 true)))
 (let (($x86 (= $x166 true)))
 (let (($x187 (= $x86 true)))
 (let (($x385 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x325 (= $x385 true)))
 (let (($x51 (= $x325 true)))
 (let (($x223 (= $x51 true)))
 (let (($x270 (= ?x394 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x379 (= $x270 true)))
 (let (($x372 (= $x379 true)))
 (let (($x233 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x28 (= $x233 true)))
 (let (($x276 (= $x28 true)))
 (let (($x194 (= $x276 true)))
 (let (($x214 (and $x194 $x372)))
 (let (($x63 (and $x214 $x223)))
 (let (($x263 (and $x63 $x187)))
 (let (($x405 (and $x263 $x138)))
 (let (($x238 (and $x405 $x106)))
 (let (($x141 (and $x238 $x376)))
 (let (($x320 (and $x141 $x127)))
 (let (($x97 (and $x320 $x49)))
 (let (($x126 (and $x97 $x39)))
 (let (($x73 (and $x126 $x293)))
 (let (($x296 (and $x73 $x113)))
 (let (($x404 (and $x296 $x311)))
 (let (($x191 (and $x404 $x266)))
 (let (($x54 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x313 (and (not $x54) $x191)))
 (let (($x155 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x131 (and $x155 $x313)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x366 (and $x104 $x131)))
 (let (($x118 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x165 (_ bv1 32))))
 (=> $x70 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x10 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x267 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x267 (_ bv1 32))))
 (let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x165 (_ bv1 32))))
 (= $x70 $x328))))))
 ))
 (let (($x255 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x165 (_ bv0 32))))
 (=> $x33 $x220)))))
 ))
 (let (($x308 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x267 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x267 (_ bv0 32))))
 (let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x165 (_ bv0 32))))
 (= $x33 $x312))))))
 ))
 (let (($x396 (and $x308 $x255)))
 (let (($x215 (and $x396 $x10)))
 (let (($x110 (and $x215 $x118)))
 (let (($x143 (and $x110 $x366)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x12 (and $x87 $x143)))
 (let (($x120 (and (bvule input.memlabel-mem--symbol.1_begin ?x160) (bvule (bvadd ?x160 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x337 (=> (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x279 (=> (and $x67 (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x120)))))
 (let (($x273 (and $x279 $x12)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x272 (and $x14 $x273)))
 (let (($x361 (=> $x272 $x183)))
 (not $x361))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x300 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (bvule ?x300 input.dst.llvm-%n)))
 (let (($x288 (= $x303 true)))
 (let (($x183 (= $x288 true)))
 (let ((?x16 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x6 (bvneg ?x16)))
 (let (($x103 (= ?x6 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x103 true)))
 (let (($x266 (= $x198 true)))
 (let ((?x378 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x394 (bvneg ?x378)))
 (let (($x185 (= ?x394 input.dst.llvm-%n)))
 (let (($x315 (= $x185 true)))
 (let (($x311 (= $x315 true)))
 (let ((?x29 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x160 (bvadd (_ bv4291097728 32) ?x29)))
 (let ((?x359 (bvsub ?x160 ?x29)))
 (let (($x302 (ite (bvsge ?x29 (_ bv0 32)) (bvuge ?x160 ?x359) (bvult ?x160 ?x359))))
 (let ((?x301 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x90 (bvmul (_ bv4 64) ?x301)))
 (let ((?x357 ((_ extract 63 32) ?x90)))
 (let (($x71 (= (_ bv0 32) ?x357)))
 (let (($x418 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x399 (and (and (and true $x418) $x71) $x302)))
 (let (($x369 (= (bvand ?x160 (_ bv4294967292 32)) ?x160)))
 (let (($x400 (and $x369 $x399)))
 (let (($x146 (= true $x400)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x190 (=> $x67 $x146)))
 (let (($x294 (= $x190 true)))
 (let (($x60 (= $x294 true)))
 (let (($x113 (= $x60 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x245 true)))
 (let (($x373 (= $x188 true)))
 (let (($x293 (= $x373 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x78 true)))
 (let (($x64 (= $x136 true)))
 (let (($x39 (= $x64 true)))
 (let (($x242 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x285 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x285))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv2 32))) ?x176)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x285 (_ bv3 32))) ?x66)))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x89 (_ bv1 32))))
 (=> $x265 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x244)))))))))
 ))
 (let (($x324 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x375 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x367 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x89 (_ bv1 32))))
 (= $x265 (bvuge ?x367 (_ bv1 32))))))))
 ))
 (let (($x173 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x89 (_ bv0 32))))
 (=> $x169 $x220)))))
 ))
 (let (($x186 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x375 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x367 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let ((?x89 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x89 (_ bv0 32))))
 (= $x169 (= ?x367 (_ bv0 32))))))))
 ))
 (let (($x172 (and $x186 $x173)))
 (let (($x269 (and $x172 $x324)))
 (let (($x356 (and $x269 $x242)))
 (let (($x167 (= $x356 true)))
 (let (($x61 (= $x167 true)))
 (let (($x49 (= $x61 true)))
 (let (($x322 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x259 (= $x322 true)))
 (let (($x125 (= $x259 true)))
 (let (($x127 (= $x125 true)))
 (let (($x340 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x30 (= $x340 true)))
 (let (($x208 (= $x30 true)))
 (let (($x376 (= $x208 true)))
 (let (($x128 (= $x67 true)))
 (let (($x408 (= $x128 true)))
 (let (($x106 (= $x408 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x156)))
 (let ((?x119 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x318 (= (_ bv0 32) ?x119)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x415 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x319 (= (_ bv4291098127 32) ?x415)))
 (let (($x157 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x117 (and $x157 $x319)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x390 (and $x291 $x117)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x360 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x148 (and $x275 $x360)))
 (let (($x299 (not $x148)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x393 (and $x226 $x77)))
 (let (($x222 (and (not $x393) $x299)))
 (let (($x133 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x50 $x133)))
 (let (($x175 (not $x18)))
 (let (($x210 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x109 $x210)))
 (let (($x392 (and (not $x91) $x175)))
 (let (($x202 (and (and (and (and (and (and $x392 $x222) $x31) $x277) $x390) $x116) $x318)))
 (let (($x184 (and $x202 $x253)))
 (let (($x98 (and $x31 $x184)))
 (let (($x130 (= $x98 true)))
 (let (($x234 (= $x130 true)))
 (let (($x138 (= $x234 true)))
 (let (($x374 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x166 (= $x374 true)))
 (let (($x86 (= $x166 true)))
 (let (($x187 (= $x86 true)))
 (let (($x385 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x325 (= $x385 true)))
 (let (($x51 (= $x325 true)))
 (let (($x223 (= $x51 true)))
 (let (($x270 (= ?x394 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x379 (= $x270 true)))
 (let (($x372 (= $x379 true)))
 (let (($x233 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x28 (= $x233 true)))
 (let (($x276 (= $x28 true)))
 (let (($x194 (= $x276 true)))
 (let (($x214 (and $x194 $x372)))
 (let (($x63 (and $x214 $x223)))
 (let (($x263 (and $x63 $x187)))
 (let (($x405 (and $x263 $x138)))
 (let (($x238 (and $x405 $x106)))
 (let (($x141 (and $x238 $x376)))
 (let (($x320 (and $x141 $x127)))
 (let (($x97 (and $x320 $x49)))
 (let (($x126 (and $x97 $x39)))
 (let (($x73 (and $x126 $x293)))
 (let (($x296 (and $x73 $x113)))
 (let (($x404 (and $x296 $x311)))
 (let (($x191 (and $x404 $x266)))
 (let (($x54 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x313 (and (not $x54) $x191)))
 (let (($x155 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x131 (and $x155 $x313)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x366 (and $x104 $x131)))
 (let (($x118 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x165 (_ bv1 32))))
 (=> $x70 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x10 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x267 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x267 (_ bv1 32))))
 (let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x165 (_ bv1 32))))
 (= $x70 $x328))))))
 ))
 (let (($x255 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x220 (= false false)))
 (let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x165 (_ bv0 32))))
 (=> $x33 $x220)))))
 ))
 (let (($x308 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x267 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x267 (_ bv0 32))))
 (let ((?x165 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x165 (_ bv0 32))))
 (= $x33 $x312))))))
 ))
 (let (($x396 (and $x308 $x255)))
 (let (($x215 (and $x396 $x10)))
 (let (($x110 (and $x215 $x118)))
 (let (($x143 (and $x110 $x366)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x12 (and $x87 $x143)))
 (let (($x120 (and (bvule input.memlabel-mem--symbol.1_begin ?x160) (bvule (bvadd ?x160 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x337 (=> (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x279 (=> (and $x67 (bvule ?x160 (bvsub (bvadd ?x160 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x120)))))
 (let (($x273 (and $x279 $x12)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x272 (and $x14 $x273)))
 (let (($x361 (=> $x272 $x183)))
 (not $x361))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x587 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x334 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x160 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvadd (_ bv4291097728 32) ?x160)))
 (let ((?x231 (bvadd ?x151 (_ bv3 32))))
 (let ((?x448 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x451 (store ?x448 (bvadd ?x151 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x454 (store ?x451 (bvadd ?x151 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x456 (store ?x454 ?x231 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x581 (concat (select ?x456 (bvadd ?x334 (_ bv2 32))) (concat (select ?x456 (bvadd ?x334 (_ bv1 32))) (select ?x456 ?x334)))))
 (let ((?x329 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x585 (= (ite $x518 input.spec-%var-i-0.L2%7%bbentry ?x329) (concat (select ?x456 (bvadd ?x334 (_ bv3 32))) ?x581))))
 (let ((?x520 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x520 (_ bv1 32))))
 (=> $x544 $x585))))))))))))))))
 ))
 (let (($x547 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x515 (and $x399 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x516 (ite $x515 (_ bv1 32) (_ bv0 32))))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x520 (ite (or $x294 $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x520 (_ bv1 32))))
 (= $x544 (bvuge ?x516 (_ bv1 32)))))))))))
 ))
 (let (($x526 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x520 (ite (or $x294 $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x520 (_ bv0 32))))
 (=> $x521 $x203)))))))
 ))
 (let (($x523 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x515 (and $x399 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x516 (ite $x515 (_ bv1 32) (_ bv0 32))))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x520 (ite (or $x294 $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x520 (_ bv0 32))))
 (= $x521 (= ?x516 (_ bv0 32)))))))))))
 ))
 (let (($x527 (and $x523 $x526)))
 (let (($x548 (and $x527 $x547)))
 (let (($x588 (and $x548 $x587)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x395 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x364 (bvneg ?x395)))
 (let (($x96 (= ?x364 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x96 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x387 (= (_ bv0 32) ?x257)))
 (let ((?x237 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x237)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x342 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x218 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x179 (= (_ bv4291098127 32) ?x218)))
 (let (($x196 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x32 (and $x196 $x179)))
 (let (($x401 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x388 (and $x401 $x32)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x256 (and $x81 $x309)))
 (let (($x420 (not $x256)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x211 (and $x195 $x232)))
 (let (($x197 (and (not $x211) $x420)))
 (let (($x397 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x108 $x397)))
 (let (($x56 (not $x19)))
 (let (($x362 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x101 $x362)))
 (let (($x389 (and (not $x200) $x56)))
 (let (($x383 (and (and (and (and (and (and $x389 $x197) $x124) $x23) $x388) $x342) $x209)))
 (let (($x297 (and $x383 $x387)))
 (let (($x386 (and $x124 $x297)))
 (let (($x48 (= $x386 true)))
 (let (($x46 (= $x48 true)))
 (let (($x88 (= $x46 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x59 (= $x114 true)))
 (let (($x283 (= $x59 true)))
 (let (($x228 (= $x283 true)))
 (let ((?x160 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvadd (_ bv4291097728 32) ?x160)))
 (let ((?x316 (bvsub ?x151 ?x160)))
 (let (($x164 (ite (bvsge ?x160 (_ bv0 32)) (bvuge ?x151 ?x316) (bvult ?x151 ?x316))))
 (let ((?x353 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x350 (bvmul (_ bv4 64) ?x353)))
 (let ((?x201 ((_ extract 63 32) ?x350)))
 (let (($x241 (= (_ bv0 32) ?x201)))
 (let (($x349 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x137 (and (and (and true $x349) $x241) $x164)))
 (let (($x72 (= (bvand ?x151 (_ bv4294967292 32)) ?x151)))
 (let (($x149 (and $x72 $x137)))
 (let (($x105 (= true $x149)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (=> $x67 $x105)))
 (let (($x57 (= $x286 true)))
 (let (($x347 (= $x57 true)))
 (let (($x168 (= $x347 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x170 true)))
 (let (($x260 (= $x171 true)))
 (let (($x147 (= $x260 true)))
 (let (($x34 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x407 (= $x34 true)))
 (let (($x221 (= $x407 true)))
 (let (($x207 (= $x221 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x371 true)))
 (let (($x21 (= $x74 true)))
 (let (($x305 (= $x21 true)))
 (let (($x85 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x334 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x334))))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv2 32))) ?x213)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv3 32))) ?x174)))
 (let ((?x329 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x60 (_ bv1 32))))
 (=> $x288 (= ?x329 ?x327)))))))))))
 ))
 (let (($x361 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x146 (ite (and $x399 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x60 (_ bv1 32))))
 (= $x288 (bvuge ?x146 (_ bv1 32)))))))))
 ))
 (let (($x404 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x60 (_ bv0 32))))
 (=> $x113 $x203))))))
 ))
 (let (($x185 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x146 (ite (and $x399 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x60 (_ bv0 32))))
 (= $x113 (= ?x146 (_ bv0 32)))))))))
 ))
 (let (($x16 (and $x185 $x404)))
 (let (($x338 (and $x16 $x361)))
 (let (($x310 (and $x338 $x85)))
 (let (($x45 (= $x310 true)))
 (let (($x26 (= $x45 true)))
 (let (($x134 (= $x26 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x234 (= $x130 true)))
 (let (($x138 (= $x234 true)))
 (let (($x405 (= $x138 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x156 (= $x202 true)))
 (let (($x253 (= $x156 true)))
 (let (($x184 (= $x253 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x116 (= $x42 true)))
 (let (($x163 (= $x116 true)))
 (let (($x119 (= $x163 true)))
 (let (($x415 (= $x67 true)))
 (let (($x319 (= $x415 true)))
 (let (($x117 (= $x319 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x222)))
 (let (($x277 (= ?x111 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x365 (= $x277 true)))
 (let (($x291 (= $x365 true)))
 (let (($x31 (= ?x111 input.dst.llvm-%n)))
 (let (($x363 (= $x31 true)))
 (let (($x280 (= $x363 true)))
 (let (($x157 (and $x280 $x291)))
 (let (($x390 (and $x157 $x117)))
 (let (($x318 (and $x390 $x119)))
 (let (($x98 (and $x318 $x184)))
 (let (($x128 (and $x98 $x405)))
 (let (($x38 (and $x128 $x134)))
 (let (($x307 (and $x38 $x305)))
 (let (($x22 (and $x307 $x207)))
 (let (($x268 (and $x22 $x147)))
 (let (($x152 (and $x268 $x168)))
 (let (($x391 (and $x152 $x228)))
 (let (($x330 (and $x391 $x88)))
 (let (($x380 (and $x330 $x140)))
 (let (($x148 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (and (not $x148) $x380)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x107 (and $x275 $x8)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x355 (and $x77 $x107)))
 (let (($x175 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x233 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x110 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x110 (_ bv1 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x233 (_ bv1 32))))
 (= $x166 $x223))))))
 ))
 (let (($x270 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x203 (= false false)))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x233 (_ bv0 32))))
 (=> $x28 $x203)))))
 ))
 (let (($x194 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x110 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x110 (_ bv0 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x233 (_ bv0 32))))
 (= $x28 $x162))))))
 ))
 (let (($x379 (and $x194 $x270)))
 (let (($x263 (and $x379 $x187)))
 (let (($x392 (and $x263 $x175)))
 (let (($x11 (and $x392 $x355)))
 (let (($x344 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x370 (and $x344 $x11)))
 (let (($x337 (and (bvule input.memlabel-mem--symbol.1_begin ?x151) (bvule (bvadd ?x151 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule ?x151 (bvsub (bvadd ?x151 (_ bv4 32)) (_ bv1 32))) (or false (or false $x337)))))
 (let (($x281 (=> (and $x67 (bvule ?x151 (bvsub (bvadd ?x151 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x337)))))
 (let (($x65 (and $x281 $x370)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x76 (and $x14 $x65)))
 (let (($x591 (=> $x76 $x590)))
 (not $x591)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x587 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x334 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x160 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvadd (_ bv4291097728 32) ?x160)))
 (let ((?x231 (bvadd ?x151 (_ bv3 32))))
 (let ((?x448 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x451 (store ?x448 (bvadd ?x151 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x454 (store ?x451 (bvadd ?x151 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x456 (store ?x454 ?x231 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x581 (concat (select ?x456 (bvadd ?x334 (_ bv2 32))) (concat (select ?x456 (bvadd ?x334 (_ bv1 32))) (select ?x456 ?x334)))))
 (let ((?x329 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x585 (= (ite $x518 input.spec-%var-i-0.L2%7%bbentry ?x329) (concat (select ?x456 (bvadd ?x334 (_ bv3 32))) ?x581))))
 (let ((?x520 (ite (or (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x520 (_ bv1 32))))
 (=> $x544 $x585))))))))))))))))
 ))
 (let (($x547 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x515 (and $x399 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x516 (ite $x515 (_ bv1 32) (_ bv0 32))))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x520 (ite (or $x294 $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x544 (bvuge ?x520 (_ bv1 32))))
 (= $x544 (bvuge ?x516 (_ bv1 32)))))))))))
 ))
 (let (($x526 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x520 (ite (or $x294 $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x520 (_ bv0 32))))
 (=> $x521 $x203)))))))
 ))
 (let (($x523 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let (($x515 (and $x399 (bvult Lambda25Var (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let ((?x516 (ite $x515 (_ bv1 32) (_ bv0 32))))
 (let (($x518 (= Lambda25Var input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x520 (ite (or $x294 $x518) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x520 (_ bv0 32))))
 (= $x521 (= ?x516 (_ bv0 32)))))))))))
 ))
 (let (($x527 (and $x523 $x526)))
 (let (($x548 (and $x527 $x547)))
 (let (($x588 (and $x548 $x587)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x395 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x364 (bvneg ?x395)))
 (let (($x96 (= ?x364 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x96 true)))
 (let (($x140 (= $x235 true)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x387 (= (_ bv0 32) ?x257)))
 (let ((?x237 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x237)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x342 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x218 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x179 (= (_ bv4291098127 32) ?x218)))
 (let (($x196 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x32 (and $x196 $x179)))
 (let (($x401 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x388 (and $x401 $x32)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x256 (and $x81 $x309)))
 (let (($x420 (not $x256)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x211 (and $x195 $x232)))
 (let (($x197 (and (not $x211) $x420)))
 (let (($x397 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x108 $x397)))
 (let (($x56 (not $x19)))
 (let (($x362 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x101 $x362)))
 (let (($x389 (and (not $x200) $x56)))
 (let (($x383 (and (and (and (and (and (and $x389 $x197) $x124) $x23) $x388) $x342) $x209)))
 (let (($x297 (and $x383 $x387)))
 (let (($x386 (and $x124 $x297)))
 (let (($x48 (= $x386 true)))
 (let (($x46 (= $x48 true)))
 (let (($x88 (= $x46 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x59 (= $x114 true)))
 (let (($x283 (= $x59 true)))
 (let (($x228 (= $x283 true)))
 (let ((?x160 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvadd (_ bv4291097728 32) ?x160)))
 (let ((?x316 (bvsub ?x151 ?x160)))
 (let (($x164 (ite (bvsge ?x160 (_ bv0 32)) (bvuge ?x151 ?x316) (bvult ?x151 ?x316))))
 (let ((?x353 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x350 (bvmul (_ bv4 64) ?x353)))
 (let ((?x201 ((_ extract 63 32) ?x350)))
 (let (($x241 (= (_ bv0 32) ?x201)))
 (let (($x349 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x137 (and (and (and true $x349) $x241) $x164)))
 (let (($x72 (= (bvand ?x151 (_ bv4294967292 32)) ?x151)))
 (let (($x149 (and $x72 $x137)))
 (let (($x105 (= true $x149)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (=> $x67 $x105)))
 (let (($x57 (= $x286 true)))
 (let (($x347 (= $x57 true)))
 (let (($x168 (= $x347 true)))
 (let (($x170 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x170 true)))
 (let (($x260 (= $x171 true)))
 (let (($x147 (= $x260 true)))
 (let (($x34 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x407 (= $x34 true)))
 (let (($x221 (= $x407 true)))
 (let (($x207 (= $x221 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x371 true)))
 (let (($x21 (= $x74 true)))
 (let (($x305 (= $x21 true)))
 (let (($x85 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x334 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x334))))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv2 32))) ?x213)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x334 (_ bv3 32))) ?x174)))
 (let ((?x329 (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x60 (_ bv1 32))))
 (=> $x288 (= ?x329 ?x327)))))))))))
 ))
 (let (($x361 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x146 (ite (and $x399 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x60 (_ bv1 32))))
 (= $x288 (bvuge ?x146 (_ bv1 32)))))))))
 ))
 (let (($x404 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x60 (_ bv0 32))))
 (=> $x113 $x203))))))
 ))
 (let (($x185 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x399 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x146 (ite (and $x399 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var)))
 (let ((?x60 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (= ?x60 (_ bv0 32))))
 (= $x113 (= ?x146 (_ bv0 32)))))))))
 ))
 (let (($x16 (and $x185 $x404)))
 (let (($x338 (and $x16 $x361)))
 (let (($x310 (and $x338 $x85)))
 (let (($x45 (= $x310 true)))
 (let (($x26 (= $x45 true)))
 (let (($x134 (= $x26 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x234 (= $x130 true)))
 (let (($x138 (= $x234 true)))
 (let (($x405 (= $x138 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x156 (= $x202 true)))
 (let (($x253 (= $x156 true)))
 (let (($x184 (= $x253 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x116 (= $x42 true)))
 (let (($x163 (= $x116 true)))
 (let (($x119 (= $x163 true)))
 (let (($x415 (= $x67 true)))
 (let (($x319 (= $x415 true)))
 (let (($x117 (= $x319 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x222)))
 (let (($x277 (= ?x111 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x365 (= $x277 true)))
 (let (($x291 (= $x365 true)))
 (let (($x31 (= ?x111 input.dst.llvm-%n)))
 (let (($x363 (= $x31 true)))
 (let (($x280 (= $x363 true)))
 (let (($x157 (and $x280 $x291)))
 (let (($x390 (and $x157 $x117)))
 (let (($x318 (and $x390 $x119)))
 (let (($x98 (and $x318 $x184)))
 (let (($x128 (and $x98 $x405)))
 (let (($x38 (and $x128 $x134)))
 (let (($x307 (and $x38 $x305)))
 (let (($x22 (and $x307 $x207)))
 (let (($x268 (and $x22 $x147)))
 (let (($x152 (and $x268 $x168)))
 (let (($x391 (and $x152 $x228)))
 (let (($x330 (and $x391 $x88)))
 (let (($x380 (and $x330 $x140)))
 (let (($x148 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x8 (and (not $x148) $x380)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x107 (and $x275 $x8)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x355 (and $x77 $x107)))
 (let (($x175 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x233 (_ bv1 32))))
 (=> $x166 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x187 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x110 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x110 (_ bv1 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x233 (_ bv1 32))))
 (= $x166 $x223))))))
 ))
 (let (($x270 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x203 (= false false)))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x233 (_ bv0 32))))
 (=> $x28 $x203)))))
 ))
 (let (($x194 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x110 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x110 (_ bv0 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x28 (= ?x233 (_ bv0 32))))
 (= $x28 $x162))))))
 ))
 (let (($x379 (and $x194 $x270)))
 (let (($x263 (and $x379 $x187)))
 (let (($x392 (and $x263 $x175)))
 (let (($x11 (and $x392 $x355)))
 (let (($x344 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x370 (and $x344 $x11)))
 (let (($x337 (and (bvule input.memlabel-mem--symbol.1_begin ?x151) (bvule (bvadd ?x151 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule ?x151 (bvsub (bvadd ?x151 (_ bv4 32)) (_ bv1 32))) (or false (or false $x337)))))
 (let (($x281 (=> (and $x67 (bvule ?x151 (bvsub (bvadd ?x151 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x337)))))
 (let (($x65 (and $x281 $x370)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x76 (and $x14 $x65)))
 (let (($x591 (=> $x76 $x590)))
 (not $x591)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x382 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x373 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x25 (bvmul (_ bv4294967295 32) ?x373)))
 (let ((?x145 (bvneg ?x25)))
 (let (($x412 (= ?x145 ?x382)))
 (let (($x417 (= $x412 true)))
 (let ((?x167 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x49 (bvneg ?x167)))
 (let (($x61 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x61 true)))
 (let (($x78 (= $x97 true)))
 (let (($x290 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x176 (= $x290 true)))
 (let (($x411 (= $x176 true)))
 (let (($x356 (= $x411 true)))
 (let ((?x151 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x100 (bvadd (_ bv4291097728 32) ?x151)))
 (let ((?x324 (bvsub ?x100 ?x151)))
 (let (($x285 (ite (bvsge ?x151 (_ bv0 32)) (bvuge ?x100 ?x324) (bvult ?x100 ?x324))))
 (let ((?x178 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x178)))
 (let ((?x186 ((_ extract 63 32) ?x173)))
 (let (($x172 (= (_ bv0 32) ?x186)))
 (let (($x331 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x189 (and (and (and true $x331) $x172) $x285)))
 (let (($x266 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x352 (and $x266 $x189)))
 (let (($x40 (= true $x352)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (=> $x67 $x40)))
 (let (($x66 (= $x242 true)))
 (let (($x244 (= $x66 true)))
 (let (($x216 (= $x244 true)))
 (let (($x259 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x259 true)))
 (let (($x127 (= $x125 true)))
 (let (($x320 (= $x127 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x30 (= $x141 true)))
 (let (($x208 (= $x30 true)))
 (let (($x376 (= $x208 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (= $x91 true)))
 (let (($x169 (= $x82 true)))
 (let (($x419 (= $x169 true)))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x10 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x94)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x54)))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x452 (_ bv1 32))))
 (=> $x89 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x214)))))))))
 ))
 (let (($x306 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x450 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x449 (ite $x450 (_ bv1 32) (_ bv0 32))))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x452 (_ bv1 32))))
 (= $x89 (bvuge ?x449 (_ bv1 32))))))))
 ))
 (let (($x578 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x452 (_ bv0 32))))
 (=> $x454 $x280)))))
 ))
 (let (($x456 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x450 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x449 (ite $x450 (_ bv1 32) (_ bv0 32))))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x452 (_ bv0 32))))
 (= $x454 (= ?x449 (_ bv0 32))))))))
 ))
 (let (($x577 (and $x456 $x578)))
 (let (($x274 (and $x577 $x306)))
 (let (($x374 (and $x274 $x63)))
 (let (($x406 (= $x374 true)))
 (let (($x109 (= $x406 true)))
 (let (($x409 (= $x109 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x152 (= $x168 true)))
 (let (($x114 (= $x152 true)))
 (let (($x59 (= $x114 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x149 true)))
 (let (($x286 (= $x105 true)))
 (let (($x57 (= $x286 true)))
 (let (($x316 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x206 (= $x316 true)))
 (let (($x314 (= $x206 true)))
 (let (($x164 (= $x314 true)))
 (let (($x201 (= $x67 true)))
 (let (($x241 (= $x201 true)))
 (let (($x161 (= $x241 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x147)))
 (let ((?x171 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x171)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x34 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x407 (= (_ bv4291098127 32) ?x34)))
 (let (($x305 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x221 (and $x305 $x407)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x21 $x221)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x333 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x45 (and $x85 $x310)))
 (let (($x26 (not $x45)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x327 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x93 (and $x327 $x402)))
 (let (($x38 (and (not $x93) $x26)))
 (let (($x304 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x403 $x304)))
 (let (($x249 (not $x250)))
 (let (($x265 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x414 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x416 (and $x414 $x265)))
 (let (($x174 (and (not $x416) $x249)))
 (let (($x135 (and (and (and (and (and (and $x174 $x38) $x333) $x74) $x207) $x170) $x260)))
 (let (($x205 (and $x135 $x268)))
 (let (($x349 (and $x333 $x205)))
 (let (($x252 (= $x349 true)))
 (let (($x336 (= $x252 true)))
 (let (($x353 (= $x336 true)))
 (let ((?x404 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x404)))
 (let (($x361 (= ?x16 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x338 (= $x361 true)))
 (let (($x329 (= $x338 true)))
 (let (($x288 (= ?x16 input.dst.llvm-%n)))
 (let (($x303 (= $x288 true)))
 (let (($x183 (= $x303 true)))
 (let (($x375 (and $x183 $x329)))
 (let (($x350 (and $x375 $x353)))
 (let (($x239 (and $x350 $x161)))
 (let (($x137 (and $x239 $x164)))
 (let (($x347 (and $x137 $x57)))
 (let (($x283 (and $x347 $x59)))
 (let (($x210 (and $x283 $x409)))
 (let (($x339 (and $x210 $x419)))
 (let (($x322 (and $x339 $x376)))
 (let (($x6 (and $x322 $x320)))
 (let (($x154 (and $x6 $x216)))
 (let (($x136 (and $x154 $x356)))
 (let (($x64 (and $x136 $x78)))
 (let (($x185 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x102 (and (not $x185) $x64)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x369 (and $x190 $x102)))
 (let (($x302 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x293 (and $x302 $x369)))
 (let (($x60 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x222 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x392 (_ bv1 32))))
 (let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x222 (_ bv1 32))))
 (= $x119 $x42))))))
 ))
 (let (($x291 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x222 (_ bv0 32))))
 (=> $x111 $x280)))))
 ))
 (let (($x363 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x393 (= ?x392 (_ bv0 32))))
 (let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x222 (_ bv0 32))))
 (= $x111 $x393))))))
 ))
 (let (($x157 (and $x363 $x291)))
 (let (($x156 (and $x157 $x202)))
 (let (($x113 (and $x156 $x60)))
 (let (($x73 (and $x113 $x293)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x245 (and $x219 $x73)))
 (let (($x99 (and (bvule input.memlabel-mem--symbol.1_begin ?x100) (bvule (bvadd ?x100 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x192 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false $x99)))))
 (let (($x20 (=> (and $x67 (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x99)))))
 (let (($x188 (and $x20 $x245)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x126 (and $x14 $x188)))
 (let (($x418 (=> $x126 $x417)))
 (not $x418))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x382 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x373 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x25 (bvmul (_ bv4294967295 32) ?x373)))
 (let ((?x145 (bvneg ?x25)))
 (let (($x412 (= ?x145 ?x382)))
 (let (($x417 (= $x412 true)))
 (let ((?x167 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x49 (bvneg ?x167)))
 (let (($x61 (= ?x49 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x97 (= $x61 true)))
 (let (($x78 (= $x97 true)))
 (let (($x290 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x176 (= $x290 true)))
 (let (($x411 (= $x176 true)))
 (let (($x356 (= $x411 true)))
 (let ((?x151 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x100 (bvadd (_ bv4291097728 32) ?x151)))
 (let ((?x324 (bvsub ?x100 ?x151)))
 (let (($x285 (ite (bvsge ?x151 (_ bv0 32)) (bvuge ?x100 ?x324) (bvult ?x100 ?x324))))
 (let ((?x178 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x178)))
 (let ((?x186 ((_ extract 63 32) ?x173)))
 (let (($x172 (= (_ bv0 32) ?x186)))
 (let (($x331 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x189 (and (and (and true $x331) $x172) $x285)))
 (let (($x266 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x352 (and $x266 $x189)))
 (let (($x40 (= true $x352)))
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (=> $x67 $x40)))
 (let (($x66 (= $x242 true)))
 (let (($x244 (= $x66 true)))
 (let (($x216 (= $x244 true)))
 (let (($x259 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x125 (= $x259 true)))
 (let (($x127 (= $x125 true)))
 (let (($x320 (= $x127 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x30 (= $x141 true)))
 (let (($x208 (= $x30 true)))
 (let (($x376 (= $x208 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (= $x91 true)))
 (let (($x169 (= $x82 true)))
 (let (($x419 (= $x169 true)))
 (let (($x63 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x10 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x94)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x54)))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x452 (_ bv1 32))))
 (=> $x89 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x214)))))))))
 ))
 (let (($x306 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x450 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x449 (ite $x450 (_ bv1 32) (_ bv0 32))))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x452 (_ bv1 32))))
 (= $x89 (bvuge ?x449 (_ bv1 32))))))))
 ))
 (let (($x578 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x452 (_ bv0 32))))
 (=> $x454 $x280)))))
 ))
 (let (($x456 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x450 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x449 (ite $x450 (_ bv1 32) (_ bv0 32))))
 (let ((?x452 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x452 (_ bv0 32))))
 (= $x454 (= ?x449 (_ bv0 32))))))))
 ))
 (let (($x577 (and $x456 $x578)))
 (let (($x274 (and $x577 $x306)))
 (let (($x374 (and $x274 $x63)))
 (let (($x406 (= $x374 true)))
 (let (($x109 (= $x406 true)))
 (let (($x409 (= $x109 true)))
 (let (($x168 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x152 (= $x168 true)))
 (let (($x114 (= $x152 true)))
 (let (($x59 (= $x114 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x105 (= $x149 true)))
 (let (($x286 (= $x105 true)))
 (let (($x57 (= $x286 true)))
 (let (($x316 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x206 (= $x316 true)))
 (let (($x314 (= $x206 true)))
 (let (($x164 (= $x314 true)))
 (let (($x201 (= $x67 true)))
 (let (($x241 (= $x201 true)))
 (let (($x161 (= $x241 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x147)))
 (let ((?x171 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x171)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x34 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x407 (= (_ bv4291098127 32) ?x34)))
 (let (($x305 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x221 (and $x305 $x407)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x21 $x221)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x333 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x45 (and $x85 $x310)))
 (let (($x26 (not $x45)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x327 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x93 (and $x327 $x402)))
 (let (($x38 (and (not $x93) $x26)))
 (let (($x304 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x403 $x304)))
 (let (($x249 (not $x250)))
 (let (($x265 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x414 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x416 (and $x414 $x265)))
 (let (($x174 (and (not $x416) $x249)))
 (let (($x135 (and (and (and (and (and (and $x174 $x38) $x333) $x74) $x207) $x170) $x260)))
 (let (($x205 (and $x135 $x268)))
 (let (($x349 (and $x333 $x205)))
 (let (($x252 (= $x349 true)))
 (let (($x336 (= $x252 true)))
 (let (($x353 (= $x336 true)))
 (let ((?x404 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x404)))
 (let (($x361 (= ?x16 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x338 (= $x361 true)))
 (let (($x329 (= $x338 true)))
 (let (($x288 (= ?x16 input.dst.llvm-%n)))
 (let (($x303 (= $x288 true)))
 (let (($x183 (= $x303 true)))
 (let (($x375 (and $x183 $x329)))
 (let (($x350 (and $x375 $x353)))
 (let (($x239 (and $x350 $x161)))
 (let (($x137 (and $x239 $x164)))
 (let (($x347 (and $x137 $x57)))
 (let (($x283 (and $x347 $x59)))
 (let (($x210 (and $x283 $x409)))
 (let (($x339 (and $x210 $x419)))
 (let (($x322 (and $x339 $x376)))
 (let (($x6 (and $x322 $x320)))
 (let (($x154 (and $x6 $x216)))
 (let (($x136 (and $x154 $x356)))
 (let (($x64 (and $x136 $x78)))
 (let (($x185 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x102 (and (not $x185) $x64)))
 (let (($x190 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x369 (and $x190 $x102)))
 (let (($x302 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x293 (and $x302 $x369)))
 (let (($x60 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x222 (_ bv1 32))))
 (=> $x119 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x202 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x392 (_ bv1 32))))
 (let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x222 (_ bv1 32))))
 (= $x119 $x42))))))
 ))
 (let (($x291 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x222 (_ bv0 32))))
 (=> $x111 $x280)))))
 ))
 (let (($x363 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x392 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x393 (= ?x392 (_ bv0 32))))
 (let ((?x222 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x222 (_ bv0 32))))
 (= $x111 $x393))))))
 ))
 (let (($x157 (and $x363 $x291)))
 (let (($x156 (and $x157 $x202)))
 (let (($x113 (and $x156 $x60)))
 (let (($x73 (and $x113 $x293)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x245 (and $x219 $x73)))
 (let (($x99 (and (bvule input.memlabel-mem--symbol.1_begin ?x100) (bvule (bvadd ?x100 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x192 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false $x99)))))
 (let (($x20 (=> (and $x67 (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x99)))))
 (let (($x188 (and $x20 $x245)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x126 (and $x14 $x188)))
 (let (($x418 (=> $x126 $x417)))
 (not $x418))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x548 (not $x67)))
 (let (($x543 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x547 (not $x543)))
 (let (($x584 (or $x547 $x548)))
 (let (($x447 (= $x584 true)))
 (let (($x582 (= $x447 true)))
 (let ((?x520 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x514 (bvneg ?x520)))
 (let (($x515 (= ?x514 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x517 (= $x515 true)))
 (let (($x516 (= $x517 true)))
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x107)))
 (let (($x370 (= ?x355 input.dst.llvm-%n)))
 (let (($x65 (= $x370 true)))
 (let (($x11 (= $x65 true)))
 (let (($x521 (= ?x355 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x438 (= $x521 true)))
 (let (($x518 (= $x438 true)))
 (let (($x8 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x364 (= $x8 true)))
 (let (($x235 (= $x364 true)))
 (let (($x96 (= $x235 true)))
 (let (($x387 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x383 (= $x387 true)))
 (let (($x297 (= $x383 true)))
 (let (($x46 (= $x297 true)))
 (let (($x88 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x330 (= $x88 true)))
 (let (($x386 (= $x330 true)))
 (let (($x48 (= $x386 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x342 (= $x251 true)))
 (let (($x282 (= $x342 true)))
 (let (($x237 (= $x282 true)))
 (let (($x236 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x56 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x583 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x56))))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv2 32))) ?x583)))
 (let ((?x345 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv3 32))) ?x106)))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x232 (_ bv1 32))))
 (=> $x166 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x345)))))))))
 ))
 (let (($x86 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x220 (ite $x13 (_ bv1 32) (_ bv0 32))))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x232 (_ bv1 32))))
 (= $x166 (bvuge ?x220 (_ bv1 32))))))))
 ))
 (let (($x321 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x183 (= false false)))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x232 (_ bv0 32))))
 (=> $x420 $x183)))))
 ))
 (let (($x112 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x220 (ite $x13 (_ bv1 32) (_ bv0 32))))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x232 (_ bv0 32))))
 (= $x420 (= ?x220 (_ bv0 32))))))))
 ))
 (let (($x101 (and $x112 $x321)))
 (let (($x187 (and $x101 $x86)))
 (let (($x421 (and $x187 $x236)))
 (let (($x196 (= $x421 true)))
 (let (($x32 (= $x196 true)))
 (let (($x388 (= $x32 true)))
 (let (($x309 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x422 (= $x309 true)))
 (let (($x10 (= $x422 true)))
 (let (($x378 (= $x10 true)))
 (let (($x295 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x144 (= $x295 true)))
 (let (($x306 (= $x144 true)))
 (let (($x274 (= $x306 true)))
 (let (($x456 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x580 (= $x456 true)))
 (let (($x578 (= $x580 true)))
 (let (($x577 (= $x578 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x168)))
 (let ((?x57 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x347 (= (_ bv0 32) ?x57)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x314 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x164 (= (_ bv4291098127 32) ?x314)))
 (let (($x316 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x137 (and $x316 $x164)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x239 $x137)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x349 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x336 (and $x349 $x252)))
 (let (($x353 (not $x336)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x205 (and $x147 $x268)))
 (let (($x201 (and (not $x205) $x353)))
 (let (($x170 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x22 $x170)))
 (let (($x171 (not $x41)))
 (let (($x207 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x323 (and $x407 $x207)))
 (let (($x135 (and (not $x323) $x171)))
 (let (($x454 (and (and (and (and (and (and $x135 $x201) $x307) $x161) $x149) $x286) $x347)))
 (let (($x448 (and $x454 $x152)))
 (let (($x446 (and $x307 $x448)))
 (let (($x450 (= $x446 true)))
 (let (($x449 (= $x450 true)))
 (let (($x451 (= $x449 true)))
 (let (($x89 (and $x451 $x577)))
 (let (($x385 (and $x89 $x274)))
 (let (($x372 (and $x385 $x378)))
 (let (($x95 (and $x372 $x388)))
 (let (($x209 (and $x95 $x237)))
 (let (($x257 (and $x209 $x48)))
 (let (($x395 (and $x257 $x46)))
 (let (($x140 (and $x395 $x96)))
 (let (($x519 (and $x140 $x518)))
 (let (($x76 (and $x519 $x11)))
 (let (($x522 (and $x76 $x516)))
 (let (($x305 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x523 (and $x305 $x522)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x525 (and $x74 $x523)))
 (let (($x333 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x404 (_ bv1 32))))
 (=> $x250 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x174 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x113 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x113 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x404 (_ bv1 32))))
 (= $x250 $x213))))))
 ))
 (let (($x329 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x183 (= false false)))
 (let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x404 (_ bv0 32))))
 (=> $x16 $x183)))))
 ))
 (let (($x303 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x113 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x400 (= ?x113 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x404 (_ bv0 32))))
 (= $x16 $x400))))))
 ))
 (let (($x375 (and $x303 $x329)))
 (let (($x327 (and $x375 $x174)))
 (let (($x181 (and $x327 $x333)))
 (let (($x526 (and $x181 $x525)))
 (let (($x299 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x527 (and $x299 $x526)))
 (let ((?x100 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x384 (bvadd (_ bv4291097728 32) ?x100)))
 (let (($x192 (and (bvule input.memlabel-mem--symbol.1_begin ?x384) (bvule (bvadd ?x384 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x346 (=> (bvule ?x384 (bvsub (bvadd ?x384 (_ bv4 32)) (_ bv1 32))) (or false (or false $x192)))))
 (let (($x231 (=> (and $x67 (bvule ?x384 (bvsub (bvadd ?x384 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x192)))))
 (let (($x544 (and $x231 $x527)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x546 (and $x14 $x544)))
 (let (($x586 (=> $x546 $x582)))
 (not $x586))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x548 (not $x67)))
 (let (($x543 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x547 (not $x543)))
 (let (($x584 (or $x547 $x548)))
 (let (($x447 (= $x584 true)))
 (let (($x582 (= $x447 true)))
 (let ((?x520 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x514 (bvneg ?x520)))
 (let (($x515 (= ?x514 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x517 (= $x515 true)))
 (let (($x516 (= $x517 true)))
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x107)))
 (let (($x370 (= ?x355 input.dst.llvm-%n)))
 (let (($x65 (= $x370 true)))
 (let (($x11 (= $x65 true)))
 (let (($x521 (= ?x355 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x438 (= $x521 true)))
 (let (($x518 (= $x438 true)))
 (let (($x8 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x364 (= $x8 true)))
 (let (($x235 (= $x364 true)))
 (let (($x96 (= $x235 true)))
 (let (($x387 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x383 (= $x387 true)))
 (let (($x297 (= $x383 true)))
 (let (($x46 (= $x297 true)))
 (let (($x88 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x330 (= $x88 true)))
 (let (($x386 (= $x330 true)))
 (let (($x48 (= $x386 true)))
 (let (($x251 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x342 (= $x251 true)))
 (let (($x282 (= $x342 true)))
 (let (($x237 (= $x282 true)))
 (let (($x236 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x56 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x583 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x56))))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv2 32))) ?x583)))
 (let ((?x345 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv3 32))) ?x106)))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x232 (_ bv1 32))))
 (=> $x166 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x345)))))))))
 ))
 (let (($x86 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x220 (ite $x13 (_ bv1 32) (_ bv0 32))))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x232 (_ bv1 32))))
 (= $x166 (bvuge ?x220 (_ bv1 32))))))))
 ))
 (let (($x321 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x183 (= false false)))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x232 (_ bv0 32))))
 (=> $x420 $x183)))))
 ))
 (let (($x112 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x220 (ite $x13 (_ bv1 32) (_ bv0 32))))
 (let ((?x232 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x232 (_ bv0 32))))
 (= $x420 (= ?x220 (_ bv0 32))))))))
 ))
 (let (($x101 (and $x112 $x321)))
 (let (($x187 (and $x101 $x86)))
 (let (($x421 (and $x187 $x236)))
 (let (($x196 (= $x421 true)))
 (let (($x32 (= $x196 true)))
 (let (($x388 (= $x32 true)))
 (let (($x309 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x422 (= $x309 true)))
 (let (($x10 (= $x422 true)))
 (let (($x378 (= $x10 true)))
 (let (($x295 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x144 (= $x295 true)))
 (let (($x306 (= $x144 true)))
 (let (($x274 (= $x306 true)))
 (let (($x456 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x580 (= $x456 true)))
 (let (($x578 (= $x580 true)))
 (let (($x577 (= $x578 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x168)))
 (let ((?x57 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x347 (= (_ bv0 32) ?x57)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x314 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x164 (= (_ bv4291098127 32) ?x314)))
 (let (($x316 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x137 (and $x316 $x164)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x239 $x137)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x349 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x336 (and $x349 $x252)))
 (let (($x353 (not $x336)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x205 (and $x147 $x268)))
 (let (($x201 (and (not $x205) $x353)))
 (let (($x170 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x22 $x170)))
 (let (($x171 (not $x41)))
 (let (($x207 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x323 (and $x407 $x207)))
 (let (($x135 (and (not $x323) $x171)))
 (let (($x454 (and (and (and (and (and (and $x135 $x201) $x307) $x161) $x149) $x286) $x347)))
 (let (($x448 (and $x454 $x152)))
 (let (($x446 (and $x307 $x448)))
 (let (($x450 (= $x446 true)))
 (let (($x449 (= $x450 true)))
 (let (($x451 (= $x449 true)))
 (let (($x89 (and $x451 $x577)))
 (let (($x385 (and $x89 $x274)))
 (let (($x372 (and $x385 $x378)))
 (let (($x95 (and $x372 $x388)))
 (let (($x209 (and $x95 $x237)))
 (let (($x257 (and $x209 $x48)))
 (let (($x395 (and $x257 $x46)))
 (let (($x140 (and $x395 $x96)))
 (let (($x519 (and $x140 $x518)))
 (let (($x76 (and $x519 $x11)))
 (let (($x522 (and $x76 $x516)))
 (let (($x305 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x523 (and $x305 $x522)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x525 (and $x74 $x523)))
 (let (($x333 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x404 (_ bv1 32))))
 (=> $x250 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x174 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x113 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x113 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x404 (_ bv1 32))))
 (= $x250 $x213))))))
 ))
 (let (($x329 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x183 (= false false)))
 (let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x404 (_ bv0 32))))
 (=> $x16 $x183)))))
 ))
 (let (($x303 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x113 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x400 (= ?x113 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x404 (_ bv0 32))))
 (= $x16 $x400))))))
 ))
 (let (($x375 (and $x303 $x329)))
 (let (($x327 (and $x375 $x174)))
 (let (($x181 (and $x327 $x333)))
 (let (($x526 (and $x181 $x525)))
 (let (($x299 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x527 (and $x299 $x526)))
 (let ((?x100 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x384 (bvadd (_ bv4291097728 32) ?x100)))
 (let (($x192 (and (bvule input.memlabel-mem--symbol.1_begin ?x384) (bvule (bvadd ?x384 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x346 (=> (bvule ?x384 (bvsub (bvadd ?x384 (_ bv4 32)) (_ bv1 32))) (or false (or false $x192)))))
 (let (($x231 (=> (and $x67 (bvule ?x384 (bvsub (bvadd ?x384 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x192)))))
 (let (($x544 (and $x231 $x527)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x546 (and $x14 $x544)))
 (let (($x586 (=> $x546 $x582)))
 (not $x586))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (not $x67)))
 (let (($x138 (= $x234 false)))
 (let (($x130 (= $x138 true)))
 (let ((?x277 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x360 (bvneg ?x277)))
 (let (($x415 (= ?x360 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x390 (= $x415 true)))
 (let (($x163 (= $x390 true)))
 (let ((?x456 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x580 (bvneg ?x456)))
 (let (($x116 (= ?x580 input.dst.llvm-%n)))
 (let (($x319 (= $x116 true)))
 (let (($x117 (= $x319 true)))
 (let (($x394 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x394 true)))
 (let (($x43 (= $x77 true)))
 (let (($x275 (= $x43 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x18 true)))
 (let (($x270 (= $x256 true)))
 (let (($x276 (= $x270 true)))
 (let (($x382 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x61 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x61))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv2 32))) ?x102)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv3 32))) ?x73)))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x80 (_ bv1 32))))
 (=> $x103 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x373)))))))))
 ))
 (let (($x398 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x80 (_ bv1 32))))
 (= $x103 (bvuge ?x339 (_ bv1 32))))))))
 ))
 (let (($x374 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x80 (_ bv0 32))))
 (=> $x94 $x41)))))
 ))
 (let (($x325 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x80 (_ bv0 32))))
 (= $x94 (= ?x339 (_ bv0 32))))))))
 ))
 (let (($x233 (and $x325 $x374)))
 (let (($x266 (and $x233 $x398)))
 (let (($x412 (and $x266 $x382)))
 (let (($x228 (= $x412 true)))
 (let (($x263 (= $x228 true)))
 (let (($x133 (= $x263 true)))
 (let (($x297 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x46 (= $x297 true)))
 (let (($x395 (= $x46 true)))
 (let (($x8 (= $x395 true)))
 (let (($x386 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x386 true)))
 (let (($x257 (= $x48 true)))
 (let (($x387 (= $x257 true)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x240)))
 (let ((?x345 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x345)))
 (let ((?x583 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x583)))
 (let ((?x408 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x579 (= (_ bv4291098127 32) ?x408)))
 (let (($x585 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x581 (and $x585 $x579)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x389 (and $x322 $x581)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x401 (and $x86 $x187)))
 (let (($x82 (not $x401)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x223 (and $x166 $x379)))
 (let (($x56 (and (not $x223) $x82)))
 (let (($x29 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x195 $x29)))
 (let (($x391 (not $x112)))
 (let (($x13 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x418 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x418 $x13)))
 (let (($x101 (and (not $x220) $x391)))
 (let (($x251 (and (and (and (and (and (and $x101 $x56) $x232) $x179) $x389) $x106) $x124)))
 (let (($x342 (and $x251 $x236)))
 (let (($x282 (and $x232 $x342)))
 (let (($x237 (= $x282 true)))
 (let (($x209 (= $x237 true)))
 (let (($x88 (= $x209 true)))
 (let (($x422 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x10 (= $x422 true)))
 (let (($x378 (= $x10 true)))
 (let (($x372 (= $x378 true)))
 (let (($x144 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x306 (= $x144 true)))
 (let (($x274 (= $x306 true)))
 (let (($x385 (= $x274 true)))
 (let (($x578 (= ?x580 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x577 (= $x578 true)))
 (let (($x89 (= $x577 true)))
 (let (($x446 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x450 (= $x446 true)))
 (let (($x449 (= $x450 true)))
 (let (($x451 (= $x449 true)))
 (let (($x295 (and $x451 $x89)))
 (let (($x309 (and $x295 $x385)))
 (let (($x81 (and $x309 $x372)))
 (let (($x330 (and $x81 $x88)))
 (let (($x383 (and $x330 $x387)))
 (let (($x364 (and $x383 $x8)))
 (let (($x50 (and $x364 $x133)))
 (let (($x194 (and $x50 $x276)))
 (let (($x217 (and $x194 $x275)))
 (let (($x148 (and $x217 $x117)))
 (let (($x253 (and $x148 $x163)))
 (let (($x168 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x184 (and $x168 $x253)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x98 (and $x57 $x184)))
 (let (($x105 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x323 (_ bv1 32))))
 (=> $x307 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x241 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x181 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x181 (_ bv1 32))))
 (let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x323 (_ bv1 32))))
 (= $x307 $x353))))))
 ))
 (let (($x147 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x323 (_ bv0 32))))
 (=> $x260 $x41)))))
 ))
 (let (($x170 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x181 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x181 (_ bv0 32))))
 (let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x323 (_ bv0 32))))
 (= $x260 $x72))))))
 ))
 (let (($x268 (and $x170 $x147)))
 (let (($x161 (and $x268 $x241)))
 (let (($x286 (and $x161 $x105)))
 (let (($x150 (and $x286 $x98)))
 (let (($x311 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x362 (and $x311 $x150)))
 (let ((?x384 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvadd (_ bv4291097728 32) ?x384)))
 (let (($x346 (and (bvule input.memlabel-mem--symbol.1_begin ?x230) (bvule (bvadd ?x230 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false $x346)))))
 (let (($x279 (=> (and $x67 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x346)))))
 (let (($x287 (and $x279 $x362)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x197 (and $x14 $x287)))
 (let (($x211 (=> $x197 $x130)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (not $x67)))
 (let (($x138 (= $x234 false)))
 (let (($x130 (= $x138 true)))
 (let ((?x277 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x360 (bvneg ?x277)))
 (let (($x415 (= ?x360 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x390 (= $x415 true)))
 (let (($x163 (= $x390 true)))
 (let ((?x456 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x580 (bvneg ?x456)))
 (let (($x116 (= ?x580 input.dst.llvm-%n)))
 (let (($x319 (= $x116 true)))
 (let (($x117 (= $x319 true)))
 (let (($x394 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x394 true)))
 (let (($x43 (= $x77 true)))
 (let (($x275 (= $x43 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x18 true)))
 (let (($x270 (= $x256 true)))
 (let (($x276 (= $x270 true)))
 (let (($x382 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x61 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x61))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv2 32))) ?x102)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x61 (_ bv3 32))) ?x73)))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x80 (_ bv1 32))))
 (=> $x103 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x373)))))))))
 ))
 (let (($x398 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x80 (_ bv1 32))))
 (= $x103 (bvuge ?x339 (_ bv1 32))))))))
 ))
 (let (($x374 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x80 (_ bv0 32))))
 (=> $x94 $x41)))))
 ))
 (let (($x325 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x339 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let ((?x80 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x80 (_ bv0 32))))
 (= $x94 (= ?x339 (_ bv0 32))))))))
 ))
 (let (($x233 (and $x325 $x374)))
 (let (($x266 (and $x233 $x398)))
 (let (($x412 (and $x266 $x382)))
 (let (($x228 (= $x412 true)))
 (let (($x263 (= $x228 true)))
 (let (($x133 (= $x263 true)))
 (let (($x297 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x46 (= $x297 true)))
 (let (($x395 (= $x46 true)))
 (let (($x8 (= $x395 true)))
 (let (($x386 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x386 true)))
 (let (($x257 (= $x48 true)))
 (let (($x387 (= $x257 true)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x240)))
 (let ((?x345 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x345)))
 (let ((?x583 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x583)))
 (let ((?x408 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x579 (= (_ bv4291098127 32) ?x408)))
 (let (($x585 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x581 (and $x585 $x579)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x389 (and $x322 $x581)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x401 (and $x86 $x187)))
 (let (($x82 (not $x401)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x223 (and $x166 $x379)))
 (let (($x56 (and (not $x223) $x82)))
 (let (($x29 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x195 $x29)))
 (let (($x391 (not $x112)))
 (let (($x13 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x418 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x418 $x13)))
 (let (($x101 (and (not $x220) $x391)))
 (let (($x251 (and (and (and (and (and (and $x101 $x56) $x232) $x179) $x389) $x106) $x124)))
 (let (($x342 (and $x251 $x236)))
 (let (($x282 (and $x232 $x342)))
 (let (($x237 (= $x282 true)))
 (let (($x209 (= $x237 true)))
 (let (($x88 (= $x209 true)))
 (let (($x422 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x10 (= $x422 true)))
 (let (($x378 (= $x10 true)))
 (let (($x372 (= $x378 true)))
 (let (($x144 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x306 (= $x144 true)))
 (let (($x274 (= $x306 true)))
 (let (($x385 (= $x274 true)))
 (let (($x578 (= ?x580 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x577 (= $x578 true)))
 (let (($x89 (= $x577 true)))
 (let (($x446 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x450 (= $x446 true)))
 (let (($x449 (= $x450 true)))
 (let (($x451 (= $x449 true)))
 (let (($x295 (and $x451 $x89)))
 (let (($x309 (and $x295 $x385)))
 (let (($x81 (and $x309 $x372)))
 (let (($x330 (and $x81 $x88)))
 (let (($x383 (and $x330 $x387)))
 (let (($x364 (and $x383 $x8)))
 (let (($x50 (and $x364 $x133)))
 (let (($x194 (and $x50 $x276)))
 (let (($x217 (and $x194 $x275)))
 (let (($x148 (and $x217 $x117)))
 (let (($x253 (and $x148 $x163)))
 (let (($x168 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x184 (and $x168 $x253)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x98 (and $x57 $x184)))
 (let (($x105 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x323 (_ bv1 32))))
 (=> $x307 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x241 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x181 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x181 (_ bv1 32))))
 (let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x323 (_ bv1 32))))
 (= $x307 $x353))))))
 ))
 (let (($x147 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x323 (_ bv0 32))))
 (=> $x260 $x41)))))
 ))
 (let (($x170 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x181 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x181 (_ bv0 32))))
 (let ((?x323 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x323 (_ bv0 32))))
 (= $x260 $x72))))))
 ))
 (let (($x268 (and $x170 $x147)))
 (let (($x161 (and $x268 $x241)))
 (let (($x286 (and $x161 $x105)))
 (let (($x150 (and $x286 $x98)))
 (let (($x311 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x362 (and $x311 $x150)))
 (let ((?x384 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvadd (_ bv4291097728 32) ?x384)))
 (let (($x346 (and (bvule input.memlabel-mem--symbol.1_begin ?x230) (bvule (bvadd ?x230 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32))) (or false (or false $x346)))))
 (let (($x279 (=> (and $x67 (bvule ?x230 (bvsub (bvadd ?x230 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x346)))))
 (let (($x287 (and $x279 $x362)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x197 (and $x14 $x287)))
 (let (($x211 (=> $x197 $x130)))
 (not $x211)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000018)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000144)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000144)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000144)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000144)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000018)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000144)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f480 (bvmul #x00000004 x!0))))))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000144 x!0)
         (ite (bvule #x00000145 x!0) #x00000145 #x00000144)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x240b4fb0)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x240b4fb3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x240b4fb0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffc4f60f)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffc4f480)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffc4f480)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xffc4f483 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f482 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f481 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xffc4f480 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000040 x!0)
         (ite (bvule #x00000041 x!0) #x00000041 #x00000040)
         #x00000000))
  (define-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%7%bbentry.0.1!11 (k!10 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x411 (or $x244 $x67)))
 (let (($x290 (= $x411 true)))
 (let (($x216 (= $x290 true)))
 (let ((?x173 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x242 (bvneg ?x173)))
 (let (($x354 (= ?x242 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x354 true)))
 (let (($x285 (= $x189 true)))
 (let ((?x331 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x331)))
 (let (($x186 (= ?x132 input.dst.llvm-%n)))
 (let (($x172 (= $x186 true)))
 (let (($x324 (= $x172 true)))
 (let (($x182 (= ?x132 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x246 (= $x182 true)))
 (let (($x178 (= $x246 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x30 (= $x125 true)))
 (let (($x208 (= $x30 true)))
 (let (($x141 (= $x208 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (= $x51 true)))
 (let (($x6 (= $x175 true)))
 (let (($x320 (= $x6 true)))
 (let (($x304 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x93 (= $x304 true)))
 (let (($x134 (= $x93 true)))
 (let (($x85 (= $x134 true)))
 (let (($x199 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x265 (= $x199 true)))
 (let (($x416 (= $x265 true)))
 (let (($x403 (= $x416 true)))
 (let (($x190 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x128 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x365 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x128))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv2 32))) ?x365)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv3 32))) ?x202)))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x336 (_ bv1 32))))
 (=> $x110 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x42)))))))))
 ))
 (let (($x226 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x336 (_ bv1 32))))
 (= $x110 (bvuge ?x350 (_ bv1 32))))))))
 ))
 (let (($x206 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x580 (= false false)))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x336 (_ bv0 32))))
 (=> $x201 $x580)))))
 ))
 (let (($x283 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x336 (_ bv0 32))))
 (= $x201 (= ?x350 (_ bv0 32))))))))
 ))
 (let (($x314 (and $x283 $x206)))
 (let (($x122 (and $x314 $x226)))
 (let (($x296 (and $x122 $x190)))
 (let (($x361 (= $x296 true)))
 (let (($x185 (= $x361 true)))
 (let (($x334 (= $x185 true)))
 (let (($x516 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x516 true)))
 (let (($x61 (= $x136 true)))
 (let (($x245 (= $x61 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x198 (= $x127 true)))
 (let (($x398 (= $x198 true)))
 (let (($x266 (= $x398 true)))
 (let (($x325 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x63 (= $x325 true)))
 (let (($x374 (= $x63 true)))
 (let (($x233 (= $x374 true)))
 (let ((?x297 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x297)))
 (let ((?x387 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x383 (= (_ bv0 32) ?x387)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x209 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x88 (= (_ bv4291098127 32) ?x209)))
 (let (($x282 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x330 (and $x282 $x88)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x386 (and $x342 $x330)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x583 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x95 (and $x583 $x106)))
 (let (($x345 (not $x95)))
 (let (($x389 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x581 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x388 (and $x581 $x389)))
 (let (($x251 (and (not $x388) $x345)))
 (let (($x32 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x179 $x32)))
 (let (($x585 (not $x322)))
 (let (($x196 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x421 $x196)))
 (let (($x579 (and (not $x218) $x585)))
 (let (($x94 (and (and (and (and (and (and $x579 $x251) $x82) $x236) $x386) $x257) $x383)))
 (let (($x409 (and $x94 $x46)))
 (let (($x45 (and $x82 $x409)))
 (let (($x210 (= $x45 true)))
 (let (($x339 (= $x210 true)))
 (let (($x54 (= $x339 true)))
 (let (($x103 (and $x54 $x233)))
 (let (($x126 (and $x103 $x266)))
 (let (($x188 (and $x126 $x245)))
 (let (($x414 (and $x188 $x334)))
 (let (($x402 (and $x414 $x403)))
 (let (($x310 (and $x402 $x85)))
 (let (($x259 (and $x310 $x320)))
 (let (($x376 (and $x259 $x141)))
 (let (($x243 (and $x376 $x178)))
 (let (($x410 (and $x243 $x324)))
 (let (($x356 (and $x410 $x285)))
 (let (($x401 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (and $x401 $x356)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x167 (and $x19 $x154)))
 (let (($x166 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (bvuge ?x449 (_ bv1 32))))
 (=> $x372 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x420 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x422 (bvuge ?x286 (_ bv1 32))))
 (let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (bvuge ?x449 (_ bv1 32))))
 (= $x372 $x422))))))
 ))
 (let (($x89 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x580 (= false false)))
 (let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x449 (_ bv0 32))))
 (=> $x451 $x580)))))
 ))
 (let (($x456 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x286 (_ bv0 32))))
 (let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x449 (_ bv0 32))))
 (= $x451 $x347))))))
 ))
 (let (($x295 (and $x456 $x89)))
 (let (($x418 (and $x295 $x420)))
 (let (($x379 (and $x418 $x166)))
 (let (($x49 (and $x379 $x167)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x40 (and $x207 $x49)))
 (let ((?x230 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x75 (bvadd (_ bv4291097728 32) ?x230)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x75) (bvule (bvadd ?x75 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x221 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x281 (=> (and $x67 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x66 (and $x281 $x40)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x352 (and $x14 $x66)))
 (let (($x176 (=> $x352 $x216)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x411 (or $x244 $x67)))
 (let (($x290 (= $x411 true)))
 (let (($x216 (= $x290 true)))
 (let ((?x173 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x242 (bvneg ?x173)))
 (let (($x354 (= ?x242 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x354 true)))
 (let (($x285 (= $x189 true)))
 (let ((?x331 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x331)))
 (let (($x186 (= ?x132 input.dst.llvm-%n)))
 (let (($x172 (= $x186 true)))
 (let (($x324 (= $x172 true)))
 (let (($x182 (= ?x132 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x246 (= $x182 true)))
 (let (($x178 (= $x246 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x30 (= $x125 true)))
 (let (($x208 (= $x30 true)))
 (let (($x141 (= $x208 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (= $x51 true)))
 (let (($x6 (= $x175 true)))
 (let (($x320 (= $x6 true)))
 (let (($x304 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x93 (= $x304 true)))
 (let (($x134 (= $x93 true)))
 (let (($x85 (= $x134 true)))
 (let (($x199 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x265 (= $x199 true)))
 (let (($x416 (= $x265 true)))
 (let (($x403 (= $x416 true)))
 (let (($x190 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x128 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x365 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x128))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv2 32))) ?x365)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv3 32))) ?x202)))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x336 (_ bv1 32))))
 (=> $x110 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x42)))))))))
 ))
 (let (($x226 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x336 (_ bv1 32))))
 (= $x110 (bvuge ?x350 (_ bv1 32))))))))
 ))
 (let (($x206 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x580 (= false false)))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x336 (_ bv0 32))))
 (=> $x201 $x580)))))
 ))
 (let (($x283 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x336 (_ bv0 32))))
 (= $x201 (= ?x350 (_ bv0 32))))))))
 ))
 (let (($x314 (and $x283 $x206)))
 (let (($x122 (and $x314 $x226)))
 (let (($x296 (and $x122 $x190)))
 (let (($x361 (= $x296 true)))
 (let (($x185 (= $x361 true)))
 (let (($x334 (= $x185 true)))
 (let (($x516 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x516 true)))
 (let (($x61 (= $x136 true)))
 (let (($x245 (= $x61 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x198 (= $x127 true)))
 (let (($x398 (= $x198 true)))
 (let (($x266 (= $x398 true)))
 (let (($x325 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x63 (= $x325 true)))
 (let (($x374 (= $x63 true)))
 (let (($x233 (= $x374 true)))
 (let ((?x297 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x297)))
 (let ((?x387 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x383 (= (_ bv0 32) ?x387)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x209 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x88 (= (_ bv4291098127 32) ?x209)))
 (let (($x282 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x330 (and $x282 $x88)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x386 (and $x342 $x330)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x583 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x95 (and $x583 $x106)))
 (let (($x345 (not $x95)))
 (let (($x389 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x581 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x388 (and $x581 $x389)))
 (let (($x251 (and (not $x388) $x345)))
 (let (($x32 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x179 $x32)))
 (let (($x585 (not $x322)))
 (let (($x196 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x421 $x196)))
 (let (($x579 (and (not $x218) $x585)))
 (let (($x94 (and (and (and (and (and (and $x579 $x251) $x82) $x236) $x386) $x257) $x383)))
 (let (($x409 (and $x94 $x46)))
 (let (($x45 (and $x82 $x409)))
 (let (($x210 (= $x45 true)))
 (let (($x339 (= $x210 true)))
 (let (($x54 (= $x339 true)))
 (let (($x103 (and $x54 $x233)))
 (let (($x126 (and $x103 $x266)))
 (let (($x188 (and $x126 $x245)))
 (let (($x414 (and $x188 $x334)))
 (let (($x402 (and $x414 $x403)))
 (let (($x310 (and $x402 $x85)))
 (let (($x259 (and $x310 $x320)))
 (let (($x376 (and $x259 $x141)))
 (let (($x243 (and $x376 $x178)))
 (let (($x410 (and $x243 $x324)))
 (let (($x356 (and $x410 $x285)))
 (let (($x401 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x154 (and $x401 $x356)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x167 (and $x19 $x154)))
 (let (($x166 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (bvuge ?x449 (_ bv1 32))))
 (=> $x372 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x420 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x422 (bvuge ?x286 (_ bv1 32))))
 (let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (bvuge ?x449 (_ bv1 32))))
 (= $x372 $x422))))))
 ))
 (let (($x89 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x580 (= false false)))
 (let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x449 (_ bv0 32))))
 (=> $x451 $x580)))))
 ))
 (let (($x456 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x286 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x286 (_ bv0 32))))
 (let ((?x449 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (= ?x449 (_ bv0 32))))
 (= $x451 $x347))))))
 ))
 (let (($x295 (and $x456 $x89)))
 (let (($x418 (and $x295 $x420)))
 (let (($x379 (and $x418 $x166)))
 (let (($x49 (and $x379 $x167)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x40 (and $x207 $x49)))
 (let ((?x230 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x75 (bvadd (_ bv4291097728 32) ?x230)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x75) (bvule (bvadd ?x75 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x221 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x281 (=> (and $x67 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x66 (and $x281 $x40)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x352 (and $x14 $x66)))
 (let (($x176 (=> $x352 $x216)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x517 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x184 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x280 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x184))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x184 (_ bv2 32))) ?x280)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x184 (_ bv3 32))) ?x287)))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x307 (_ bv1 32))))
 (=> $x321 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x234)))))))))
 ))
 (let (($x278 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x191 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x307 (_ bv1 32))))
 (= $x321 (bvuge ?x191 (_ bv1 32)))))))
 ))
 (let (($x57 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x420 (= false false)))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x307 (_ bv0 32))))
 (=> $x353 $x420)))))
 ))
 (let (($x366 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x191 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x307 (_ bv0 32))))
 (= $x353 (= ?x191 (_ bv0 32)))))))
 ))
 (let (($x143 (and $x366 $x57)))
 (let (($x92 (and $x143 $x278)))
 (let (($x264 (and $x92 $x517)))
 (let (($x348 (= $x264 true)))
 (let (($x142 (= $x348 true)))
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x54)))
 (let (($x292 (= ?x214 input.dst.llvm-%n)))
 (let (($x111 (= $x292 true)))
 (let (($x23 (= $x111 true)))
 (let ((?x548 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x406 (= (_ bv0 32) ?x548)))
 (let ((?x582 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x547 (= (_ bv0 32) ?x582)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x521 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x518 (= (_ bv4291098127 32) ?x521)))
 (let (($x107 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x519 (and $x107 $x518)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (and $x355 $x519)))
 (let (($x438 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x404 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x333 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x74 (and $x333 $x371)))
 (let (($x21 (not $x74)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x174 (and $x213 $x249)))
 (let (($x34 (and (not $x174) $x21)))
 (let (($x303 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x329 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x329 $x303)))
 (let (($x338 (not $x288)))
 (let (($x26 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x522 (and $x380 $x26)))
 (let (($x250 (and (not $x522) $x338)))
 (let (($x527 (and (and (and (and (and (and $x250 $x34) $x404) $x438) $x370) $x11) $x547)))
 (let (($x546 (and $x527 $x406)))
 (let (($x588 (and $x404 $x546)))
 (let (($x91 (= $x588 true)))
 (let (($x109 (= $x91 true)))
 (let (($x419 (= $x109 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x140 true)))
 (let (($x289 (= $x38 true)))
 (let (($x400 (= $x289 true)))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x147 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x170 (ite (and $x147 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x307 (_ bv1 32))))
 (= $x321 (bvuge ?x170 (_ bv1 32))))))))
 ))
 (let (($x241 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x147 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x170 (ite (and $x147 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x307 (_ bv0 32))))
 (= $x353 (= ?x170 (_ bv0 32))))))))
 ))
 (let (($x454 (and $x241 $x57)))
 (let (($x133 (and $x454 $x29)))
 (let (($x523 (and $x133 $x517)))
 (let (($x520 (= $x523 true)))
 (let (($x151 (= $x520 true)))
 (let (($x337 (= $x151 true)))
 (let (($x205 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x350 (not $x205)))
 (let (($x256 (= $x350 true)))
 (let (($x294 (= $x256 true)))
 (let (($x128 (= $x294 true)))
 (let (($x206 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x314 (and true $x206)))
 (let (($x110 (= true $x314)))
 (let (($x28 (=> $x350 $x110)))
 (let (($x162 (= $x28 true)))
 (let (($x226 (= $x162 true)))
 (let (($x122 (= $x226 true)))
 (let (($x188 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x252 (= $x188 true)))
 (let (($x336 (= $x252 true)))
 (let (($x201 (= $x336 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x516 (= $x126 true)))
 (let (($x136 (= $x516 true)))
 (let (($x61 (= $x136 true)))
 (let (($x103 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x127 (= $x103 true)))
 (let (($x198 (= $x127 true)))
 (let (($x398 (= $x198 true)))
 (let (($x325 (= ?x214 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (= $x325 true)))
 (let (($x374 (= $x63 true)))
 (let (($x46 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x409 (= $x46 true)))
 (let (($x45 (= $x409 true)))
 (let (($x210 (= $x45 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x387 (= $x80 true)))
 (let (($x383 (= $x387 true)))
 (let (($x94 (= $x383 true)))
 (let ((?x209 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x88 (bvneg ?x209)))
 (let (($x386 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x386 true)))
 (let (($x48 (= $x104 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x364 (= $x236 true)))
 (let (($x342 (= $x364 true)))
 (let (($x282 (= $x342 true)))
 (let (($x257 (and $x282 $x48)))
 (let (($x297 (and $x257 $x94)))
 (let (($x339 (and $x297 $x210)))
 (let (($x233 (and $x339 $x374)))
 (let (($x266 (and $x233 $x398)))
 (let (($x245 (and $x266 $x61)))
 (let (($x171 (and $x245 $x201)))
 (let (($x157 (and $x171 $x122)))
 (let (($x399 (and $x157 $x128)))
 (let (($x96 (and $x399 $x337)))
 (let (($x327 (and $x96 $x400)))
 (let (($x160 (and $x327 $x419)))
 (let (($x155 (and $x160 $x23)))
 (let (($x8 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x393 (and $x8 $x155)))
 (let (($x395 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x118 (and $x395 $x393)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x392 (and $x95 $x118)))
 (let (($x124 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x295 (_ bv1 32))))
 (=> $x421 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x196 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x41 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x41 (_ bv1 32))))
 (let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x295 (_ bv1 32))))
 (= $x421 $x187))))))
 ))
 (let (($x391 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x420 (= false false)))
 (let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x295 (_ bv0 32))))
 (=> $x372 $x420)))))
 ))
 (let (($x81 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x41 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x286 (= ?x41 (_ bv0 32))))
 (let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x295 (_ bv0 32))))
 (= $x372 $x286))))))
 ))
 (let (($x101 (and $x81 $x391)))
 (let (($x218 (and $x101 $x196)))
 (let (($x583 (and $x218 $x124)))
 (let (($x222 (and $x583 $x392)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x120 (and $x67 $x222)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x156 (and $x14 $x120)))
 (let (($x180 (=> $x156 $x142)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x517 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x184 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x280 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x184))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x184 (_ bv2 32))) ?x280)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x184 (_ bv3 32))) ?x287)))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x307 (_ bv1 32))))
 (=> $x321 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x234)))))))))
 ))
 (let (($x278 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x191 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x307 (_ bv1 32))))
 (= $x321 (bvuge ?x191 (_ bv1 32)))))))
 ))
 (let (($x57 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x420 (= false false)))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x307 (_ bv0 32))))
 (=> $x353 $x420)))))
 ))
 (let (($x366 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x191 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x307 (_ bv0 32))))
 (= $x353 (= ?x191 (_ bv0 32)))))))
 ))
 (let (($x143 (and $x366 $x57)))
 (let (($x92 (and $x143 $x278)))
 (let (($x264 (and $x92 $x517)))
 (let (($x348 (= $x264 true)))
 (let (($x142 (= $x348 true)))
 (let ((?x54 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x54)))
 (let (($x292 (= ?x214 input.dst.llvm-%n)))
 (let (($x111 (= $x292 true)))
 (let (($x23 (= $x111 true)))
 (let ((?x548 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x406 (= (_ bv0 32) ?x548)))
 (let ((?x582 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x547 (= (_ bv0 32) ?x582)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x521 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x518 (= (_ bv4291098127 32) ?x521)))
 (let (($x107 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x519 (and $x107 $x518)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (and $x355 $x519)))
 (let (($x438 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x404 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x333 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x74 (and $x333 $x371)))
 (let (($x21 (not $x74)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x174 (and $x213 $x249)))
 (let (($x34 (and (not $x174) $x21)))
 (let (($x303 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x329 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x329 $x303)))
 (let (($x338 (not $x288)))
 (let (($x26 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x522 (and $x380 $x26)))
 (let (($x250 (and (not $x522) $x338)))
 (let (($x527 (and (and (and (and (and (and $x250 $x34) $x404) $x438) $x370) $x11) $x547)))
 (let (($x546 (and $x527 $x406)))
 (let (($x588 (and $x404 $x546)))
 (let (($x91 (= $x588 true)))
 (let (($x109 (= $x91 true)))
 (let (($x419 (= $x109 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x140 true)))
 (let (($x289 (= $x38 true)))
 (let (($x400 (= $x289 true)))
 (let (($x29 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x147 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x170 (ite (and $x147 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x307 (_ bv1 32))))
 (= $x321 (bvuge ?x170 (_ bv1 32))))))))
 ))
 (let (($x241 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x147 (bvule (_ bv0 32) Lambda25Var)))
 (let ((?x170 (ite (and $x147 (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry)) (_ bv1 32) (_ bv0 32))))
 (let ((?x307 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x307 (_ bv0 32))))
 (= $x353 (= ?x170 (_ bv0 32))))))))
 ))
 (let (($x454 (and $x241 $x57)))
 (let (($x133 (and $x454 $x29)))
 (let (($x523 (and $x133 $x517)))
 (let (($x520 (= $x523 true)))
 (let (($x151 (= $x520 true)))
 (let (($x337 (= $x151 true)))
 (let (($x205 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x350 (not $x205)))
 (let (($x256 (= $x350 true)))
 (let (($x294 (= $x256 true)))
 (let (($x128 (= $x294 true)))
 (let (($x206 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))) (bvult (_ bv4291097728 32) (bvsub (_ bv4291097728 32) (_ bv0 32))))))
 (let (($x314 (and true $x206)))
 (let (($x110 (= true $x314)))
 (let (($x28 (=> $x350 $x110)))
 (let (($x162 (= $x28 true)))
 (let (($x226 (= $x162 true)))
 (let (($x122 (= $x226 true)))
 (let (($x188 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x252 (= $x188 true)))
 (let (($x336 (= $x252 true)))
 (let (($x201 (= $x336 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x516 (= $x126 true)))
 (let (($x136 (= $x516 true)))
 (let (($x61 (= $x136 true)))
 (let (($x103 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x127 (= $x103 true)))
 (let (($x198 (= $x127 true)))
 (let (($x398 (= $x198 true)))
 (let (($x325 (= ?x214 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x63 (= $x325 true)))
 (let (($x374 (= $x63 true)))
 (let (($x46 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x409 (= $x46 true)))
 (let (($x45 (= $x409 true)))
 (let (($x210 (= $x45 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x387 (= $x80 true)))
 (let (($x383 (= $x387 true)))
 (let (($x94 (= $x383 true)))
 (let ((?x209 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x88 (bvneg ?x209)))
 (let (($x386 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x386 true)))
 (let (($x48 (= $x104 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x364 (= $x236 true)))
 (let (($x342 (= $x364 true)))
 (let (($x282 (= $x342 true)))
 (let (($x257 (and $x282 $x48)))
 (let (($x297 (and $x257 $x94)))
 (let (($x339 (and $x297 $x210)))
 (let (($x233 (and $x339 $x374)))
 (let (($x266 (and $x233 $x398)))
 (let (($x245 (and $x266 $x61)))
 (let (($x171 (and $x245 $x201)))
 (let (($x157 (and $x171 $x122)))
 (let (($x399 (and $x157 $x128)))
 (let (($x96 (and $x399 $x337)))
 (let (($x327 (and $x96 $x400)))
 (let (($x160 (and $x327 $x419)))
 (let (($x155 (and $x160 $x23)))
 (let (($x8 (bvuge input.spec-%var-i-0.L2%7%bbentry input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x393 (and $x8 $x155)))
 (let (($x395 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x118 (and $x395 $x393)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x392 (and $x95 $x118)))
 (let (($x124 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x295 (_ bv1 32))))
 (=> $x421 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x196 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x41 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x41 (_ bv1 32))))
 (let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x295 (_ bv1 32))))
 (= $x421 $x187))))))
 ))
 (let (($x391 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x420 (= false false)))
 (let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x295 (_ bv0 32))))
 (=> $x372 $x420)))))
 ))
 (let (($x81 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x41 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x286 (= ?x41 (_ bv0 32))))
 (let ((?x295 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x295 (_ bv0 32))))
 (= $x372 $x286))))))
 ))
 (let (($x101 (and $x81 $x391)))
 (let (($x218 (and $x101 $x196)))
 (let (($x583 (and $x218 $x124)))
 (let (($x222 (and $x583 $x392)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x120 (and $x67 $x222)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x156 (and $x14 $x120)))
 (let (($x180 (=> $x156 $x142)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x412 (not $x67)))
 (let (($x373 (or $x67 $x412)))
 (let (($x25 (= $x373 true)))
 (let (($x102 (= $x25 true)))
 (let ((?x385 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x309 (bvneg ?x385)))
 (let (($x10 (= ?x309 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x378 (= $x10 true)))
 (let (($x417 (= $x378 true)))
 (let ((?x307 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x307)))
 (let (($x452 (= ?x353 input.dst.llvm-%n)))
 (let (($x144 (= $x452 true)))
 (let (($x274 (= $x144 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x161 (= $x181 true)))
 (let (($x137 (= $x161 true)))
 (let (($x149 (= $x137 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x293 true)))
 (let (($x323 (= $x64 true)))
 (let (($x260 (= $x323 true)))
 (let (($x263 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x356 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x356 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x356))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x356 (_ bv2 32))) ?x352)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x356 (_ bv3 32))) ?x176)))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x56 (_ bv1 32))))
 (=> $x152 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x290)))))))))
 ))
 (let (($x578 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x19 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x56 (_ bv1 32))))
 (= $x152 (bvuge ?x19 (_ bv1 32))))))))
 ))
 (let (($x579 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x214 (= false false)))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x56 (_ bv0 32))))
 (=> $x408 $x214)))))
 ))
 (let (($x32 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x19 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x56 (_ bv0 32))))
 (= $x408 (= ?x19 (_ bv0 32))))))))
 ))
 (let (($x31 (and $x32 $x579)))
 (let (($x50 (and $x31 $x578)))
 (let (($x276 (and $x50 $x263)))
 (let (($x99 (= $x276 true)))
 (let (($x100 (= $x99 true)))
 (let (($x543 (= $x100 true)))
 (let (($x404 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x584 (= $x404 true)))
 (let (($x239 (= $x584 true)))
 (let (($x438 (= $x239 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x371 true)))
 (let (($x21 (= $x74 true)))
 (let (($x34 (= $x21 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x113)))
 (let ((?x16 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x380 (= (_ bv0 32) ?x16)))
 (let ((?x400 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x327 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x400)))
 (let ((?x96 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x140 (= (_ bv4291098127 32) ?x96)))
 (let (($x337 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x38 (and $x337 $x140)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x151 $x38)))
 (let (($x520 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x234 (and $x280 $x287)))
 (let (($x76 (not $x234)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x98 (and $x150 $x121)))
 (let (($x517 (and (not $x98) $x76)))
 (let (($x197 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x259 $x197)))
 (let (($x51 (not $x362)))
 (let (($x253 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x199 $x253)))
 (let (($x130 (and (not $x184) $x51)))
 (let (($x338 (and (and (and (and (and (and $x130 $x517) $x133) $x520) $x289) $x327) $x380)))
 (let (($x250 (and $x338 $x26)))
 (let (($x213 (and $x133 $x250)))
 (let (($x249 (= $x213 true)))
 (let (($x174 (= $x249 true)))
 (let (($x305 (= $x174 true)))
 (let (($x454 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x321 (= $x454 true)))
 (let (($x220 (= $x321 true)))
 (let (($x195 (= $x220 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x59 (= $x135 true)))
 (let (($x241 (= $x59 true)))
 (let (($x105 (= $x241 true)))
 (let (($x147 (= ?x353 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x270 (= $x147 true)))
 (let (($x22 (= $x270 true)))
 (let (($x256 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x294 (= $x256 true)))
 (let (($x128 (= $x294 true)))
 (let (($x399 (= $x128 true)))
 (let (($x170 (and $x399 $x22)))
 (let (($x57 (and $x170 $x105)))
 (let (($x29 (and $x57 $x195)))
 (let (($x333 (and $x29 $x305)))
 (let (($x203 (and $x333 $x34)))
 (let (($x586 (and $x203 $x438)))
 (let (($x369 (and $x586 $x543)))
 (let (($x72 (and $x369 $x260)))
 (let (($x453 (and $x72 $x149)))
 (let (($x306 (and $x453 $x274)))
 (let (($x13 (and $x306 $x417)))
 (let (($x226 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x73 (and $x226 $x13)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x78 (and $x110 $x73)))
 (let (($x316 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x45 (_ bv1 32))))
 (=> $x61 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x104 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x104 (_ bv1 32))))
 (let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x45 (_ bv1 32))))
 (= $x61 $x126))))))
 ))
 (let (($x374 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x214 (= false false)))
 (let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x45 (_ bv0 32))))
 (=> $x210 $x214)))))
 ))
 (let (($x54 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x104 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x104 (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x45 (_ bv0 32))))
 (= $x210 $x80))))))
 ))
 (let (($x233 (and $x54 $x374)))
 (let (($x252 (and $x233 $x188)))
 (let (($x206 (and $x252 $x316)))
 (let (($x97 (and $x206 $x78)))
 (let (($x389 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x514 (and $x389 $x97)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x295 (bvadd (_ bv4291097728 32) ?x87)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x295) (bvule (bvadd ?x295 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x581 (=> (bvule ?x295 (bvsub (bvadd ?x295 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x41 (=> (and $x67 (bvule ?x295 (bvsub (bvadd ?x295 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x515 (and $x41 $x514)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x382 (and $x14 $x515)))
 (let (($x145 (=> $x382 $x102)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x67 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x412 (not $x67)))
 (let (($x373 (or $x67 $x412)))
 (let (($x25 (= $x373 true)))
 (let (($x102 (= $x25 true)))
 (let ((?x385 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x309 (bvneg ?x385)))
 (let (($x10 (= ?x309 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x378 (= $x10 true)))
 (let (($x417 (= $x378 true)))
 (let ((?x307 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x307)))
 (let (($x452 (= ?x353 input.dst.llvm-%n)))
 (let (($x144 (= $x452 true)))
 (let (($x274 (= $x144 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x161 (= $x181 true)))
 (let (($x137 (= $x161 true)))
 (let (($x149 (= $x137 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x293 true)))
 (let (($x323 (= $x64 true)))
 (let (($x260 (= $x323 true)))
 (let (($x263 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x356 (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x356 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x356))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x356 (_ bv2 32))) ?x352)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x356 (_ bv3 32))) ?x176)))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x56 (_ bv1 32))))
 (=> $x152 (= (input.spec-%var-m-0.L2%7%bbentry.1.1 Lambda25Var) ?x290)))))))))
 ))
 (let (($x578 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x19 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x56 (_ bv1 32))))
 (= $x152 (bvuge ?x19 (_ bv1 32))))))))
 ))
 (let (($x579 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x214 (= false false)))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x56 (_ bv0 32))))
 (=> $x408 $x214)))))
 ))
 (let (($x32 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x223 (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x19 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m-0.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x56 (_ bv0 32))))
 (= $x408 (= ?x19 (_ bv0 32))))))))
 ))
 (let (($x31 (and $x32 $x579)))
 (let (($x50 (and $x31 $x578)))
 (let (($x276 (and $x50 $x263)))
 (let (($x99 (= $x276 true)))
 (let (($x100 (= $x99 true)))
 (let (($x543 (= $x100 true)))
 (let (($x404 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x584 (= $x404 true)))
 (let (($x239 (= $x584 true)))
 (let (($x438 (= $x239 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x371 true)))
 (let (($x21 (= $x74 true)))
 (let (($x34 (= $x21 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x113)))
 (let ((?x16 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x380 (= (_ bv0 32) ?x16)))
 (let ((?x400 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x327 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x400)))
 (let ((?x96 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x140 (= (_ bv4291098127 32) ?x96)))
 (let (($x337 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x38 (and $x337 $x140)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x151 $x38)))
 (let (($x520 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x234 (and $x280 $x287)))
 (let (($x76 (not $x234)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x98 (and $x150 $x121)))
 (let (($x517 (and (not $x98) $x76)))
 (let (($x197 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x259 $x197)))
 (let (($x51 (not $x362)))
 (let (($x253 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x199 $x253)))
 (let (($x130 (and (not $x184) $x51)))
 (let (($x338 (and (and (and (and (and (and $x130 $x517) $x133) $x520) $x289) $x327) $x380)))
 (let (($x250 (and $x338 $x26)))
 (let (($x213 (and $x133 $x250)))
 (let (($x249 (= $x213 true)))
 (let (($x174 (= $x249 true)))
 (let (($x305 (= $x174 true)))
 (let (($x454 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x321 (= $x454 true)))
 (let (($x220 (= $x321 true)))
 (let (($x195 (= $x220 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x59 (= $x135 true)))
 (let (($x241 (= $x59 true)))
 (let (($x105 (= $x241 true)))
 (let (($x147 (= ?x353 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x270 (= $x147 true)))
 (let (($x22 (= $x270 true)))
 (let (($x256 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv399 32))))
 (let (($x294 (= $x256 true)))
 (let (($x128 (= $x294 true)))
 (let (($x399 (= $x128 true)))
 (let (($x170 (and $x399 $x22)))
 (let (($x57 (and $x170 $x105)))
 (let (($x29 (and $x57 $x195)))
 (let (($x333 (and $x29 $x305)))
 (let (($x203 (and $x333 $x34)))
 (let (($x586 (and $x203 $x438)))
 (let (($x369 (and $x586 $x543)))
 (let (($x72 (and $x369 $x260)))
 (let (($x453 (and $x72 $x149)))
 (let (($x306 (and $x453 $x274)))
 (let (($x13 (and $x306 $x417)))
 (let (($x226 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x73 (and $x226 $x13)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x78 (and $x110 $x73)))
 (let (($x316 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x45 (_ bv1 32))))
 (=> $x61 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x104 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x104 (_ bv1 32))))
 (let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x45 (_ bv1 32))))
 (= $x61 $x126))))))
 ))
 (let (($x374 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x214 (= false false)))
 (let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x45 (_ bv0 32))))
 (=> $x210 $x214)))))
 ))
 (let (($x54 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x104 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x104 (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x45 (_ bv0 32))))
 (= $x210 $x80))))))
 ))
 (let (($x233 (and $x54 $x374)))
 (let (($x252 (and $x233 $x188)))
 (let (($x206 (and $x252 $x316)))
 (let (($x97 (and $x206 $x78)))
 (let (($x389 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x514 (and $x389 $x97)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x295 (bvadd (_ bv4291097728 32) ?x87)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x295) (bvule (bvadd ?x295 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x581 (=> (bvule ?x295 (bvsub (bvadd ?x295 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x41 (=> (and $x67 (bvule ?x295 (bvsub (bvadd ?x295 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x515 (and $x41 $x514)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x382 (and $x14 $x515)))
 (let (($x145 (=> $x382 $x102)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x288)))
 (let ((?x400 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x327 (= (_ bv0 32) ?x400)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x303 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x151 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x337 (= (_ bv4291098127 32) ?x151)))
 (let (($x520 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x96 (and $x520 $x337)))
 (let (($x523 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x523 $x96)))
 (let (($x375 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x234 (and $x280 $x287)))
 (let (($x76 (not $x234)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x235 (and $x121 $x98)))
 (let (($x522 (and (not $x235) $x76)))
 (let (($x197 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x259 $x197)))
 (let (($x51 (not $x362)))
 (let (($x184 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x403 $x184)))
 (let (($x150 (and (not $x138) $x51)))
 (let (($x213 (and (and (and (and (and (and $x150 $x522) $x195) $x375) $x140) $x303) $x327)))
 (let (($x249 (and $x213 $x16)))
 (let (($x50 (and $x195 $x249)))
 (let (($x244 (= $x50 true)))
 (let (($x109 (= $x244 true)))
 (let ((?x371 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x584 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x586 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x401 (concat ?x586 (concat ?x584 (concat ?x21 ?x371)))))
 (let (($x179 (= ?x401 input.dst.llvm-%n)))
 (let (($x32 (= $x179 true)))
 (let (($x585 (= $x32 true)))
 (let (($x56 (= input.dst.llvm-%n ?x401)))
 (let (($x166 (and (and (and $x195 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x249) $x56)))
 (let (($x223 (= $x166 true)))
 (let (($x19 (= $x223 true)))
 (let (($x86 (= $x19 true)))
 (let (($x579 (and $x86 $x585)))
 (let (($x220 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x31 (and $x220 $x579)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x57 $x31)))
 (let (($x59 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x233 (_ bv1 32))))
 (=> $x157 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x294 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x395 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x395 (_ bv1 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x233 (_ bv1 32))))
 (= $x157 $x162))))))
 ))
 (let (($x349 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x233 (_ bv0 32))))
 (=> $x61 $x188)))))
 ))
 (let (($x245 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x395 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x395 (_ bv0 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x233 (_ bv0 32))))
 (= $x61 $x104))))))
 ))
 (let (($x283 (and $x245 $x349)))
 (let (($x128 (and $x283 $x294)))
 (let (($x241 (and $x128 $x59)))
 (let (($x168 (and $x241 $x152)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x448 (and $x67 $x168)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x578 (and $x14 $x448)))
 (let (($x154 (=> $x578 $x109)))
 (not $x154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x288)))
 (let ((?x400 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x327 (= (_ bv0 32) ?x400)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x303 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x151 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x337 (= (_ bv4291098127 32) ?x151)))
 (let (($x520 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x96 (and $x520 $x337)))
 (let (($x523 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x523 $x96)))
 (let (($x375 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x234 (and $x280 $x287)))
 (let (($x76 (not $x234)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x235 (and $x121 $x98)))
 (let (($x522 (and (not $x235) $x76)))
 (let (($x197 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x259 $x197)))
 (let (($x51 (not $x362)))
 (let (($x184 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x403 $x184)))
 (let (($x150 (and (not $x138) $x51)))
 (let (($x213 (and (and (and (and (and (and $x150 $x522) $x195) $x375) $x140) $x303) $x327)))
 (let (($x249 (and $x213 $x16)))
 (let (($x50 (and $x195 $x249)))
 (let (($x244 (= $x50 true)))
 (let (($x109 (= $x244 true)))
 (let ((?x371 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x584 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x586 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x401 (concat ?x586 (concat ?x584 (concat ?x21 ?x371)))))
 (let (($x179 (= ?x401 input.dst.llvm-%n)))
 (let (($x32 (= $x179 true)))
 (let (($x585 (= $x32 true)))
 (let (($x56 (= input.dst.llvm-%n ?x401)))
 (let (($x166 (and (and (and $x195 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x249) $x56)))
 (let (($x223 (= $x166 true)))
 (let (($x19 (= $x223 true)))
 (let (($x86 (= $x19 true)))
 (let (($x579 (and $x86 $x585)))
 (let (($x220 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x31 (and $x220 $x579)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x57 $x31)))
 (let (($x59 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x233 (_ bv1 32))))
 (=> $x157 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x294 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x395 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x395 (_ bv1 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x233 (_ bv1 32))))
 (= $x157 $x162))))))
 ))
 (let (($x349 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x233 (_ bv0 32))))
 (=> $x61 $x188)))))
 ))
 (let (($x245 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x395 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x395 (_ bv0 32))))
 (let ((?x233 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x233 (_ bv0 32))))
 (= $x61 $x104))))))
 ))
 (let (($x283 (and $x245 $x349)))
 (let (($x128 (and $x283 $x294)))
 (let (($x241 (and $x128 $x59)))
 (let (($x168 (and $x241 $x152)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x448 (and $x67 $x168)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x578 (and $x14 $x448)))
 (let (($x154 (=> $x578 $x109)))
 (not $x154))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x307 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x307)))
 (let (($x147 (= ?x353 input.dst.llvm-%n)))
 (let (($x270 (= $x147 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x581 (concat ?x196 (concat ?x421 (concat ?x101 ?x46)))))
 (let (($x252 (= ?x581 input.dst.llvm-%n)))
 (let (($x316 (= $x252 true)))
 (let (($x206 (= $x316 true)))
 (let (($x45 (= input.dst.llvm-%n ?x581)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x109)))
 (let ((?x50 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x50)))
 (let ((?x448 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x578 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x448)))
 (let ((?x585 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x579 (= (_ bv4291098127 32) ?x585)))
 (let (($x179 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x31 (and $x179 $x579)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x86 $x31)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x371 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x239 (and $x371 $x34)))
 (let (($x401 (not $x239)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x584 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x21 (and $x584 $x74)))
 (let (($x166 (and (not $x21) $x401)))
 (let (($x174 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x379 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (and $x379 $x174)))
 (let (($x586 (not $x438)))
 (let (($x16 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x213 $x16)))
 (let (($x404 (and (not $x249) $x586)))
 (let (($x422 (and (and (and (and (and (and $x404 $x166) $x303) $x19) $x152) $x578) $x244)))
 (let (($x81 (and $x422 $x154)))
 (let (($x80 (and (and (and $x303 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x81) $x45)))
 (let (($x339 (= $x80 true)))
 (let (($x54 (= $x339 true)))
 (let (($x214 (= $x54 true)))
 (let (($x314 (and $x214 $x206)))
 (let (($x289 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x289 $x314)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x28 (and $x140 $x110)))
 (let (($x151 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x211 (_ bv1 32))))
 (=> $x280 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x135 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x211 (_ bv1 32))))
 (= $x280 $x98))))))
 ))
 (let (($x130 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x253 (= false false)))
 (let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x211 (_ bv0 32))))
 (=> $x408 $x253)))))
 ))
 (let (($x403 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x135 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x211 (_ bv0 32))))
 (= $x408 $x105))))))
 ))
 (let (($x259 (and $x403 $x130)))
 (let (($x76 (and $x259 $x234)))
 (let (($x337 (and $x76 $x151)))
 (let (($x226 (and $x337 $x28)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x122 (and $x67 $x226)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x399 (and $x14 $x122)))
 (let (($x200 (=> $x399 $x270)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x307 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x353 (bvneg ?x307)))
 (let (($x147 (= ?x353 input.dst.llvm-%n)))
 (let (($x270 (= $x147 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x581 (concat ?x196 (concat ?x421 (concat ?x101 ?x46)))))
 (let (($x252 (= ?x581 input.dst.llvm-%n)))
 (let (($x316 (= $x252 true)))
 (let (($x206 (= $x316 true)))
 (let (($x45 (= input.dst.llvm-%n ?x581)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x109)))
 (let ((?x50 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x50)))
 (let ((?x448 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x578 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x448)))
 (let ((?x585 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x579 (= (_ bv4291098127 32) ?x585)))
 (let (($x179 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x31 (and $x179 $x579)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x86 $x31)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x371 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x239 (and $x371 $x34)))
 (let (($x401 (not $x239)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x584 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x21 (and $x584 $x74)))
 (let (($x166 (and (not $x21) $x401)))
 (let (($x174 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x379 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (and $x379 $x174)))
 (let (($x586 (not $x438)))
 (let (($x16 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x213 $x16)))
 (let (($x404 (and (not $x249) $x586)))
 (let (($x422 (and (and (and (and (and (and $x404 $x166) $x303) $x19) $x152) $x578) $x244)))
 (let (($x81 (and $x422 $x154)))
 (let (($x80 (and (and (and $x303 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x81) $x45)))
 (let (($x339 (= $x80 true)))
 (let (($x54 (= $x339 true)))
 (let (($x214 (= $x54 true)))
 (let (($x314 (and $x214 $x206)))
 (let (($x289 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x110 (and $x289 $x314)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x28 (and $x140 $x110)))
 (let (($x151 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x211 (_ bv1 32))))
 (=> $x280 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x234 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x135 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x211 (_ bv1 32))))
 (= $x280 $x98))))))
 ))
 (let (($x130 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x253 (= false false)))
 (let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x211 (_ bv0 32))))
 (=> $x408 $x253)))))
 ))
 (let (($x403 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x135 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x135 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x211 (_ bv0 32))))
 (= $x408 $x105))))))
 ))
 (let (($x259 (and $x403 $x130)))
 (let (($x76 (and $x259 $x234)))
 (let (($x337 (and $x76 $x151)))
 (let (($x226 (and $x337 $x28)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x122 (and $x67 $x226)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x399 (and $x14 $x122)))
 (let (($x200 (=> $x399 $x270)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x522 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x380 (bvneg ?x522)))
 (let (($x338 (= ?x380 input.spec-%var-n-1)))
 (let (($x133 (= $x338 true)))
 (let ((?x422 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x421 (concat ?x232 (concat ?x154 ?x422)))))
 (let (($x170 (= input.dst.llvm-%n ?x89)))
 (let ((?x395 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x395)))
 (let ((?x63 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x63)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x233 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x61 (= (_ bv4291098127 32) ?x233)))
 (let (($x374 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x256 (and $x374 $x61)))
 (let (($x389 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x389 $x256)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x581 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x353 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x147 (and $x307 $x353)))
 (let (($x270 (not $x147)))
 (let (($x399 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x268 (and $x122 $x399)))
 (let (($x411 (and (not $x268) $x270)))
 (let (($x206 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x314 (and $x316 $x206)))
 (let (($x110 (not $x314)))
 (let (($x214 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x339 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x339 $x214)))
 (let (($x226 (and (not $x252) $x110)))
 (let (($x162 (and (and (and (and (and (and $x226 $x411) $x581) $x286) $x294) $x22) $x188)))
 (let (($x59 (and $x162 $x104)))
 (let (($x454 (and (and (and $x581 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x59) $x170)))
 (let (($x321 (= $x454 true)))
 (let (($x220 (= $x321 true)))
 (let (($x184 (= $x220 true)))
 (let (($x46 (= ?x89 input.dst.llvm-%n)))
 (let (($x420 (= $x46 true)))
 (let (($x187 (= $x420 true)))
 (let (($x197 (and $x187 $x184)))
 (let (($x448 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x362 (and $x448 $x197)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x51 (and $x152 $x362)))
 (let (($x585 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x400 (_ bv1 32))))
 (=> $x371 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x239 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x329 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x329 (_ bv1 32))))
 (let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x400 (_ bv1 32))))
 (= $x371 $x74))))))
 ))
 (let (($x203 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x288 (= false false)))
 (let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (= ?x400 (_ bv0 32))))
 (=> $x409 $x288)))))
 ))
 (let (($x213 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x329 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x329 (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (= ?x400 (_ bv0 32))))
 (= $x409 $x96))))))
 ))
 (let (($x379 (and $x213 $x203)))
 (let (($x401 (and $x379 $x239)))
 (let (($x579 (and $x401 $x585)))
 (let (($x150 (and $x579 $x51)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x121 (and $x67 $x150)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x235 (and $x14 $x121)))
 (let (($x375 (=> $x235 $x133)))
 (not $x375)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let ((?x522 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x380 (bvneg ?x522)))
 (let (($x338 (= ?x380 input.spec-%var-n-1)))
 (let (($x133 (= $x338 true)))
 (let ((?x422 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x421 (concat ?x232 (concat ?x154 ?x422)))))
 (let (($x170 (= input.dst.llvm-%n ?x89)))
 (let ((?x395 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x395)))
 (let ((?x63 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x63)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x233 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x61 (= (_ bv4291098127 32) ?x233)))
 (let (($x374 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x256 (and $x374 $x61)))
 (let (($x389 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x389 $x256)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x581 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x353 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x147 (and $x307 $x353)))
 (let (($x270 (not $x147)))
 (let (($x399 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x268 (and $x122 $x399)))
 (let (($x411 (and (not $x268) $x270)))
 (let (($x206 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x314 (and $x316 $x206)))
 (let (($x110 (not $x314)))
 (let (($x214 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x339 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x339 $x214)))
 (let (($x226 (and (not $x252) $x110)))
 (let (($x162 (and (and (and (and (and (and $x226 $x411) $x581) $x286) $x294) $x22) $x188)))
 (let (($x59 (and $x162 $x104)))
 (let (($x454 (and (and (and $x581 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x59) $x170)))
 (let (($x321 (= $x454 true)))
 (let (($x220 (= $x321 true)))
 (let (($x184 (= $x220 true)))
 (let (($x46 (= ?x89 input.dst.llvm-%n)))
 (let (($x420 (= $x46 true)))
 (let (($x187 (= $x420 true)))
 (let (($x197 (and $x187 $x184)))
 (let (($x448 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x362 (and $x448 $x197)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x51 (and $x152 $x362)))
 (let (($x585 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x400 (_ bv1 32))))
 (=> $x371 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x239 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x329 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x329 (_ bv1 32))))
 (let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x400 (_ bv1 32))))
 (= $x371 $x74))))))
 ))
 (let (($x203 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x288 (= false false)))
 (let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (= ?x400 (_ bv0 32))))
 (=> $x409 $x288)))))
 ))
 (let (($x213 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x329 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x329 (_ bv0 32))))
 (let ((?x400 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (= ?x400 (_ bv0 32))))
 (= $x409 $x96))))))
 ))
 (let (($x379 (and $x213 $x203)))
 (let (($x401 (and $x379 $x239)))
 (let (($x579 (and $x401 $x585)))
 (let (($x150 (and $x579 $x51)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x121 (and $x67 $x150)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x235 (and $x14 $x121)))
 (let (($x375 (=> $x235 $x133)))
 (not $x375)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x56 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x166 (= $x56 true)))
 (let (($x356 (= $x166 true)))
 (let ((?x234 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x259 (concat ?x130 (concat ?x105 (concat ?x523 ?x234)))))
 (let (($x38 (= ?x259 input.dst.llvm-%n)))
 (let (($x289 (= $x38 true)))
 (let (($x16 (= $x289 true)))
 (let (($x280 (= input.dst.llvm-%n ?x259)))
 (let ((?x380 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x338 (= (_ bv0 32) ?x380)))
 (let ((?x517 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x522 (= (_ bv0 32) ?x517)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x184 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x197 (= (_ bv4291098127 32) ?x184)))
 (let (($x321 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x362 (and $x321 $x197)))
 (let (($x454 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x454 $x362)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x162 (and $x63 $x188)))
 (let (($x395 (not $x162)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x157 (and $x128 $x22)))
 (let (($x59 (and (not $x157) $x395)))
 (let (($x233 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x112 $x233)))
 (let (($x256 (not $x61)))
 (let (($x389 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (and $x286 $x389)))
 (let (($x283 (and (not $x374) $x256)))
 (let (($x29 (and (and (and (and (and (and $x283 $x59) $x270) $x170) $x51) $x235) $x522)))
 (let (($x126 (and $x29 $x338)))
 (let (($x520 (and (and (and $x270 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x126) $x280)))
 (let (($x337 (= $x520 true)))
 (let (($x140 (= $x337 true)))
 (let (($x26 (= $x140 true)))
 (let (($x174 (and $x26 $x16)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x438 (and $x147 $x174)))
 (let (($x200 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x586 (and $x200 $x438)))
 (let (($x122 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x218 (_ bv1 32))))
 (=> $x45 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x80 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x32 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x420 (bvuge ?x32 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x218 (_ bv1 32))))
 (= $x45 $x420))))))
 ))
 (let (($x154 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x218 (_ bv0 32))))
 (=> $x391 $x41)))))
 ))
 (let (($x210 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x32 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x32 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x218 (_ bv0 32))))
 (= $x391 $x31))))))
 ))
 (let (($x422 (and $x210 $x154)))
 (let (($x339 (and $x422 $x80)))
 (let (($x399 (and $x339 $x122)))
 (let (($x404 (and $x399 $x586)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x584 (and $x67 $x404)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x21 (and $x14 $x584)))
 (let (($x305 (=> $x21 $x356)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x56 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x166 (= $x56 true)))
 (let (($x356 (= $x166 true)))
 (let ((?x234 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x259 (concat ?x130 (concat ?x105 (concat ?x523 ?x234)))))
 (let (($x38 (= ?x259 input.dst.llvm-%n)))
 (let (($x289 (= $x38 true)))
 (let (($x16 (= $x289 true)))
 (let (($x280 (= input.dst.llvm-%n ?x259)))
 (let ((?x380 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x338 (= (_ bv0 32) ?x380)))
 (let ((?x517 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x522 (= (_ bv0 32) ?x517)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x184 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x197 (= (_ bv4291098127 32) ?x184)))
 (let (($x321 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x362 (and $x321 $x197)))
 (let (($x454 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x454 $x362)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x162 (and $x63 $x188)))
 (let (($x395 (not $x162)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x157 (and $x128 $x22)))
 (let (($x59 (and (not $x157) $x395)))
 (let (($x233 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x112 $x233)))
 (let (($x256 (not $x61)))
 (let (($x389 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (and $x286 $x389)))
 (let (($x283 (and (not $x374) $x256)))
 (let (($x29 (and (and (and (and (and (and $x283 $x59) $x270) $x170) $x51) $x235) $x522)))
 (let (($x126 (and $x29 $x338)))
 (let (($x520 (and (and (and $x270 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x126) $x280)))
 (let (($x337 (= $x520 true)))
 (let (($x140 (= $x337 true)))
 (let (($x26 (= $x140 true)))
 (let (($x174 (and $x26 $x16)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x438 (and $x147 $x174)))
 (let (($x200 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x586 (and $x200 $x438)))
 (let (($x122 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x218 (_ bv1 32))))
 (=> $x45 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x80 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x32 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x420 (bvuge ?x32 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x218 (_ bv1 32))))
 (= $x45 $x420))))))
 ))
 (let (($x154 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x218 (_ bv0 32))))
 (=> $x391 $x41)))))
 ))
 (let (($x210 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x32 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x32 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x218 (_ bv0 32))))
 (= $x391 $x31))))))
 ))
 (let (($x422 (and $x210 $x154)))
 (let (($x339 (and $x422 $x80)))
 (let (($x399 (and $x339 $x122)))
 (let (($x404 (and $x399 $x586)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x584 (and $x67 $x404)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x21 (and $x14 $x584)))
 (let (($x305 (=> $x21 $x356)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x155 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x185 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv1 32)))))
 (let ((?x334 (concat ?x185 (select input.dst.llvm-mem (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv2 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv3 32)))))
 (let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x226 (_ bv1 32))))
 (=> $x22 (= (_ bv0 32) (concat ?x326 (concat ?x194 ?x334)))))))))))
 ))
 (let (($x386 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x106 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x226 (_ bv1 32))))
 (= $x22 (bvuge ?x106 (_ bv1 32)))))))
 ))
 (let (($x330 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x349 (= false false)))
 (let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x226 (_ bv0 32))))
 (=> $x268 $x349)))))
 ))
 (let (($x209 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x226 (_ bv0 32))))
 (= $x268 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x419 (and $x209 $x330)))
 (let (($x257 (and $x419 $x386)))
 (let (($x111 (and $x257 $x155)))
 (let (($x393 (= $x111 true)))
 (let (($x120 (= $x393 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x105 (concat ?x138 (concat ?x338 ?x29)))))
 (let (($x152 (= input.dst.llvm-%n ?x76)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x249 (= (_ bv0 32) ?x213)))
 (let ((?x329 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x329)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x303)))
 (let ((?x34 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x239 (= (_ bv4291098127 32) ?x34)))
 (let (($x400 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x401 (and $x400 $x239)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x199 $x401)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x305 (and $x166 $x356)))
 (let (($x223 (not $x305)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x584 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x56 (and $x584 $x21)))
 (let (($x287 (and (not $x56) $x223)))
 (let (($x16 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x289 $x16)))
 (let (($x438 (not $x174)))
 (let (($x26 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x337 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x337 $x26)))
 (let (($x404 (and (not $x38) $x438)))
 (let (($x179 (and (and (and (and (and (and $x404 $x287) $x259) $x250) $x86) $x288) $x96)))
 (let (($x579 (and $x179 $x249)))
 (let (($x448 (and (and (and $x259 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x579) $x152)))
 (let (($x232 (= $x448 true)))
 (let (($x81 (= $x232 true)))
 (let (($x196 (= $x81 true)))
 (let (($x234 (= ?x76 input.dst.llvm-%n)))
 (let (($x195 (= $x234 true)))
 (let (($x403 (= $x195 true)))
 (let (($x89 (and $x403 $x196)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x101 (and $x121 $x89)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x46 (and $x51 $x101)))
 (let (($x184 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x245 (_ bv1 32))))
 (=> $x63 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x226 (_ bv1 32))))
 (let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x245 (_ bv1 32))))
 (= $x63 $x22))))))
 ))
 (let (($x294 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x349 (= false false)))
 (let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x245 (_ bv0 32))))
 (=> $x98 $x349)))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x226 (_ bv0 32))))
 (let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x245 (_ bv0 32))))
 (= $x98 $x268))))))
 ))
 (let (($x112 (and $x286 $x294)))
 (let (($x395 (and $x112 $x162)))
 (let (($x197 (and $x395 $x184)))
 (let (($x187 (and $x197 $x46)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x581 (and $x67 $x187)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x54 (and $x14 $x581)))
 (let (($x315 (=> $x54 $x120)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(assert
 (let (($x155 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x185 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv1 32)))))
 (let ((?x334 (concat ?x185 (select input.dst.llvm-mem (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32)))))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv2 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4291097728 32) (bvmul Lambda25Var (_ bv4 32))) (_ bv3 32)))))
 (let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x226 (_ bv1 32))))
 (=> $x22 (= (_ bv0 32) (concat ?x326 (concat ?x194 ?x334)))))))))))
 ))
 (let (($x386 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x106 (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x226 (_ bv1 32))))
 (= $x22 (bvuge ?x106 (_ bv1 32)))))))
 ))
 (let (($x330 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x349 (= false false)))
 (let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x226 (_ bv0 32))))
 (=> $x268 $x349)))))
 ))
 (let (($x209 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x226 (_ bv0 32))))
 (= $x268 (= (ite (and (bvule (_ bv0 32) Lambda25Var) (bvult Lambda25Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x419 (and $x209 $x330)))
 (let (($x257 (and $x419 $x386)))
 (let (($x111 (and $x257 $x155)))
 (let (($x393 (= $x111 true)))
 (let (($x120 (= $x393 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x105 (concat ?x138 (concat ?x338 ?x29)))))
 (let (($x152 (= input.dst.llvm-%n ?x76)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x249 (= (_ bv0 32) ?x213)))
 (let ((?x329 (bvand (_ bv4291097728 32) (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x329)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x303)))
 (let ((?x34 (bvadd (_ bv4291097728 32) (_ bv399 32))))
 (let (($x239 (= (_ bv4291098127 32) ?x34)))
 (let (($x400 (bvule (_ bv4291097728 32) (_ bv4291098127 32))))
 (let (($x401 (and $x400 $x239)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x199 $x401)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= (_ bv4291097728 32) (_ bv4291097728 32))))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291098127 32))))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end (_ bv4291097728 32))))
 (let (($x305 (and $x166 $x356)))
 (let (($x223 (not $x305)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291098127 32))))
 (let (($x584 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv4291097728 32))))
 (let (($x56 (and $x584 $x21)))
 (let (($x287 (and (not $x56) $x223)))
 (let (($x16 (bvule (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge (_ bv4291098127 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x289 $x16)))
 (let (($x438 (not $x174)))
 (let (($x26 (bvule (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x337 (bvuge (_ bv4291097728 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x337 $x26)))
 (let (($x404 (and (not $x38) $x438)))
 (let (($x179 (and (and (and (and (and (and $x404 $x287) $x259) $x250) $x86) $x288) $x96)))
 (let (($x579 (and $x179 $x249)))
 (let (($x448 (and (and (and $x259 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x579) $x152)))
 (let (($x232 (= $x448 true)))
 (let (($x81 (= $x232 true)))
 (let (($x196 (= $x81 true)))
 (let (($x234 (= ?x76 input.dst.llvm-%n)))
 (let (($x195 (= $x234 true)))
 (let (($x403 (= $x195 true)))
 (let (($x89 (and $x403 $x196)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L2%7%bbentry)))
 (let (($x101 (and $x121 $x89)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x46 (and $x51 $x101)))
 (let (($x184 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x245 (_ bv1 32))))
 (=> $x63 (= (input.spec-%tmpvar-8.L2%7%bbentry.1.1 Lambda25Var) (_ bv0 32))))))
 ))
 (let (($x162 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x226 (_ bv1 32))))
 (let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x245 (_ bv1 32))))
 (= $x63 $x22))))))
 ))
 (let (($x294 (forall ((Lambda25Var (_ BitVec 32)) )(let (($x349 (= false false)))
 (let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x245 (_ bv0 32))))
 (=> $x98 $x349)))))
 ))
 (let (($x286 (forall ((Lambda25Var (_ BitVec 32)) )(let ((?x226 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x226 (_ bv0 32))))
 (let ((?x245 (ite (input.spec-%tmpvar-8.L2%7%bbentry.0.1 Lambda25Var) (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x245 (_ bv0 32))))
 (= $x98 $x268))))))
 ))
 (let (($x112 (and $x286 $x294)))
 (let (($x395 (and $x112 $x162)))
 (let (($x197 (and $x395 $x184)))
 (let (($x187 (and $x197 $x46)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x581 (and $x67 $x187)))
 (let (($x15 (= input.memlabel-mem--symbol.1_end (_ bv4291098127 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_begin (_ bv4291097728 32))))
 (let (($x44 (= dst_symbol_addr.1 (_ bv4291097728 32))))
 (let (($x52 (= symbol.1 (_ bv4291097728 32))))
 (let (($x9 (and $x52 $x44)))
 (let (($x53 (and $x9 $x5)))
 (let (($x14 (and $x53 $x15)))
 (let (($x54 (and $x14 $x581)))
 (let (($x315 (=> $x54 $x120)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310126/query
